// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"9mA4B":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "793cdba7cf5da738";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"gBTwT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _modelJs = require("../models/model.js");
var _deviceModelJs = require("../models/deviceModel.js");
var _userModelJs = require("../models/userModel.js");
var _eventModelJs = require("../models/eventModel.js");
var _excelModelJs = require("../models/excelModel.js");
var _assetFormControllerJs = require("./assetFormController.js");
var _devicesViewJs = require("../views/devicesView.js");
var _devicesViewJsDefault = parcelHelpers.interopDefault(_devicesViewJs);
var _usersViewJs = require("../views/usersView.js");
var _usersViewJsDefault = parcelHelpers.interopDefault(_usersViewJs);
var _showDeviceViewJs = require("../views/showDeviceView.js");
var _showDeviceViewJsDefault = parcelHelpers.interopDefault(_showDeviceViewJs);
var _showUserViewJs = require("../views/showUserView.js");
var _showUserViewJsDefault = parcelHelpers.interopDefault(_showUserViewJs);
var _historyViewJs = require("../views/historyView.js");
var _historyViewJsDefault = parcelHelpers.interopDefault(_historyViewJs);
var _paginationViewJs = require("../views/paginationView.js");
var _paginationViewJsDefault = parcelHelpers.interopDefault(_paginationViewJs);
var _editViewJs = require("../views/editView.js");
var _editViewJsDefault = parcelHelpers.interopDefault(_editViewJs);
var _baseViewJs = require("../views/baseView.js");
var _baseViewJsDefault = parcelHelpers.interopDefault(_baseViewJs);
var _configJs = require("../../utilities/config.js");
const controlExportExcel = async function() {
    try {
        await _excelModelJs.exportExcel();
    } catch (err) {
        throw err;
    }
};
const controlShowDashboard = async function() {
    try {
        const overview = await _deviceModelJs.getOverview();
        (0, _baseViewJsDefault.default).initializeChart(overview);
        console.log(overview);
    } catch (err) {
        console.log(err);
    }
};
const controlClearFilters = function(viewObject) {
    const url = window.location.href;
    const urlWithoutQueryString = url.split("?")[0];
    window.history.replaceState({}, document.title, urlWithoutQueryString);
    _modelJs.clearFilters(); // very IMPT
    viewObject.render(_modelJs.getResultsPage());
    viewObject.updateNumResults(_modelJs.state.search.results.length);
    (0, _paginationViewJsDefault.default).render(_modelJs.state.search);
};
const controlShowDevices = async function() {
    try {
        await _deviceModelJs.getDevices();
        (0, _devicesViewJsDefault.default).render(_modelJs.getResultsPage());
        (0, _devicesViewJsDefault.default).updateNumResults(_modelJs.state.search.results.length);
        (0, _paginationViewJsDefault.default).render(_modelJs.state.search);
    } catch (err) {
        console.log(err);
    }
};
const controlFilterDevices = function() {
    _deviceModelJs.getFilterDevices();
    (0, _devicesViewJsDefault.default).render(_modelJs.getResultsPage());
    (0, _devicesViewJsDefault.default).updateNumResults(_modelJs.state.search.results.length);
    (0, _paginationViewJsDefault.default).render(_modelJs.state.search);
    _modelJs.state.search.bookmarked ? (0, _devicesViewJsDefault.default).setBookmarkSvg("show") : (0, _devicesViewJsDefault.default).setBookmarkSvg("hide");
};
// NORMAL
const controlShowUsers = async function() {
    try {
        await _userModelJs.getUsers();
        (0, _usersViewJsDefault.default).renderDeviceCount(_modelJs.state.deviceCount);
        (0, _usersViewJsDefault.default).render(_modelJs.getResultsPage());
        (0, _usersViewJsDefault.default).updateNumResults(_modelJs.state.search.results.length);
        console.log(_modelJs.state.search.results);
        (0, _paginationViewJsDefault.default).render(_modelJs.state.search);
    } catch (err) {
        console.log(err);
    }
};
// FILTER
const controlFilterUsers = function() {
    _userModelJs.getFilterUsers();
    (0, _usersViewJsDefault.default).render(_modelJs.getResultsPage());
    console.log(_modelJs.state.search.results);
    (0, _usersViewJsDefault.default).updateNumResults(_modelJs.state.search.results.length);
    (0, _paginationViewJsDefault.default).render(_modelJs.state.search);
    _modelJs.state.search.bookmarked ? (0, _usersViewJsDefault.default).setBookmarkSvg("show") : (0, _usersViewJsDefault.default).setBookmarkSvg("hide");
};
// HISTORY
const controlShowEvents = async function() {
    try {
        await _eventModelJs.getEvents();
        (0, _historyViewJsDefault.default).render(_modelJs.getResultsPage());
        (0, _historyViewJsDefault.default).renderEvents(_modelJs.state.search.results);
        // debugger;
        (0, _historyViewJsDefault.default).updateNumResults(_modelJs.state.search.results.length);
        (0, _paginationViewJsDefault.default).render(_modelJs.state.search);
    } catch (err) {
        console.log(err);
    }
};
const controlFilterEvents = function() {
    _eventModelJs.getFilterEvents();
    (0, _historyViewJsDefault.default).render(_modelJs.getResultsPage());
    (0, _historyViewJsDefault.default).updateNumResults(_modelJs.state.search.results.length);
    (0, _paginationViewJsDefault.default).render(_modelJs.state.search);
};
const controlFilterBookmarks = function(viewObject) {
    _modelJs.filterBookmarks();
    viewObject.render(_modelJs.getResultsPage());
    (0, _paginationViewJsDefault.default).render(_modelJs.state.search);
    console.log(_modelJs.state.search.results.length);
    viewObject.updateNumResults(_modelJs.state.search.bookmarks.length);
    _modelJs.state.search.bookmarked ? viewObject.setBookmarkSvg("show") : viewObject.setBookmarkSvg("hide");
};
// PAGINATION
const controlPagination = function(goToPage) {
    // render new results
    const page = _modelJs.state.page;
    switch(page){
        // VIEW DEVICES
        case `devices`:
            (0, _devicesViewJsDefault.default).render(_modelJs.getResultsPage(goToPage));
            break;
        // DEVICE HISTORY
        case `history`:
            (0, _historyViewJsDefault.default).render(_modelJs.getResultsPage(goToPage));
            break;
        // VIEW USERS
        case `users`:
            console.log(_modelJs.state.search.results.length);
            (0, _usersViewJsDefault.default).render(_modelJs.getResultsPage(goToPage));
            break;
    }
    // render new pagination buttons
    (0, _paginationViewJsDefault.default).render(_modelJs.state.search);
};
const controlShowDevice = async function() {
    try {
        const deviceId = window.location.hash.slice(1);
        await _deviceModelJs.getDevice(deviceId);
        (0, _showDeviceViewJsDefault.default).render(_modelJs.state.object);
    } catch (err) {
        console.log(err);
    }
};
const controlShowUser = async function() {
    try {
        const userId = window.location.hash.slice(1);
        await _userModelJs.getUser(userId);
        (0, _showUserViewJsDefault.default).render(_modelJs.state.object);
    } catch (err) {
        console.log(err);
    }
};
const controlEdit = async function(type, id, data) {
    try {
        // id and data only passed if save btn was clicked
        if (!id && !data) (0, _editViewJsDefault.default).renderEdit();
        else {
            (0, _editViewJsDefault.default).renderSave();
            console.log(id, data);
            await _modelJs.updateEdit(type, id, data);
        }
    } catch (err) {
        console.log(err);
    }
};
const controlUpdateBookmark = async function(viewObject) {
    try {
        console.log(_modelJs.state.object.details);
        if (!_modelJs.state.object.details.bookmarked) await _modelJs.addBookmark(_modelJs.state.object.details);
        else await _modelJs.deleteBookmark(_modelJs.state.object.details);
        // update view
        viewObject.update(_modelJs.state.object);
        console.log(_modelJs.state.object.details.bookmarked);
    } catch (err) {
        console.log(err);
    }
};
// FOR CONDEMN, LOAN and RETURN device
const controlDeviceActions = function(assetId, action) {
    window.location.href = `${0, _configJs.ASSET_HOMEPAGE_URL}forms/${action}_device?asset-tag=${assetId}`;
};
const controlUserActions = function(id, action) {
    if (action === "remove") window.location.href = `${0, _configJs.ASSET_HOMEPAGE_URL}forms/${action}_user?user-name=${id}`;
    else if (action === "loan") {
        console.log("whats gg on");
        window.location.href = `${0, _configJs.ASSET_HOMEPAGE_URL}forms/${action}_device?user-name=${id}`;
    } else if (action === "returned") // DIFFERENT FOR RETURN
    window.location.href = `${0, _configJs.ASSET_HOMEPAGE_URL}forms/${action}_device?asset-tag=${id}`;
};
const init = function() {
    [
        "hashchange",
        "load",
        "popstate"
    ].forEach((ev)=>window.addEventListener(ev, ()=>initializePage(ev)));
};
const initializePage = async function(ev) {
    // debugger;
    // const mainUrl = getCurrentMainUrl();
    const previewHandlers = [
        (0, _assetFormControllerJs.controlPreviewResults),
        (0, _assetFormControllerJs.controlSelectPreview),
        (0, _assetFormControllerJs.controlClosePreview)
    ];
    switch(window.location.pathname){
        case `/asset/`:
            (0, _baseViewJsDefault.default).initialize(controlShowDashboard);
            break;
        // VIEW DEVICES
        case `/asset/views/devices`:
            // after the oage loads, get the data from the API
            // will be listening for closePreview, but does not return a result since it never renders the close button
            (0, _devicesViewJsDefault.default).initialize(controlShowDevices, previewHandlers);
            (0, _paginationViewJsDefault.default).initialize();
            (0, _paginationViewJsDefault.default).addHandlerClick(controlPagination, (0, _devicesViewJsDefault.default)._scrollStartEl);
            _modelJs.state.page = "devices";
            _modelJs.state.search.bookmarked = false;
            (0, _devicesViewJsDefault.default).addHandlerExportExcel(controlExportExcel);
            (0, _devicesViewJsDefault.default).addHandlerFilter(controlFilterDevices); // instead of add handler search
            (0, _devicesViewJsDefault.default).addHandlerClearFilter(controlClearFilters);
            (0, _devicesViewJsDefault.default).addHandlerFilterBookmark(controlFilterBookmarks);
            if (ev === "popstate") window.location.reload;
            break;
        // SHOW DEVICE: MIGHT BE DIFFICULT
        case `/asset/views/show_device`:
            _modelJs.state.page = "device";
            (0, _showDeviceViewJsDefault.default).initialize(controlShowDevice);
            (0, _showDeviceViewJsDefault.default).addActionHandlers(controlDeviceActions);
            (0, _showDeviceViewJsDefault.default).addHandlerAddBookmark(controlUpdateBookmark);
            (0, _showDeviceViewJsDefault.default).addHandlerDownloadFile((0, _assetFormControllerJs.controlDownloadPDF));
            (0, _editViewJsDefault.default).addEditHandlers(controlEdit);
            break;
        // DEVICE HISTORY
        case `/asset/views/history`:
            _modelJs.state.page = "history";
            (0, _historyViewJsDefault.default).initialize(controlShowEvents, previewHandlers);
            (0, _paginationViewJsDefault.default).initialize();
            (0, _paginationViewJsDefault.default).addHandlerClick(controlPagination, (0, _historyViewJsDefault.default)._scrollStartEl);
            (0, _historyViewJsDefault.default).addHandlerExportExcel(controlExportExcel);
            (0, _historyViewJsDefault.default).addHandlerFilter(controlFilterEvents);
            (0, _historyViewJsDefault.default).addHandlerClearFilter(controlClearFilters);
            (0, _historyViewJsDefault.default).addHandlerRedirect();
            break;
        // VIEW USERS
        case `/asset/views/users`:
            _modelJs.state.page = "users";
            (0, _usersViewJsDefault.default).initialize(controlShowUsers);
            (0, _paginationViewJsDefault.default).initialize();
            (0, _paginationViewJsDefault.default).addHandlerClick(controlPagination, (0, _usersViewJsDefault.default)._scrollStartEl);
            _modelJs.state.search.bookmarked = false;
            (0, _usersViewJsDefault.default).addHandlerExportExcel(controlExportExcel);
            (0, _usersViewJsDefault.default).addHandlerFilter(controlFilterUsers);
            (0, _usersViewJsDefault.default).addHandlerClearFilter(controlClearFilters);
            (0, _usersViewJsDefault.default).addHandlerFilterBookmark(controlFilterBookmarks);
            if (ev === "popstate") window.location.reload;
            break;
        // SHOW USER: MIGHT BE DIFFICULT
        case `/asset/views/show_user`:
            _modelJs.state.page = "user";
            (0, _showUserViewJsDefault.default).initialize(controlShowUser);
            (0, _showUserViewJsDefault.default).addActionHandlers(controlUserActions);
            (0, _showUserViewJsDefault.default).addHandlerDownloadFile((0, _assetFormControllerJs.controlDownloadPDF));
            (0, _showUserViewJsDefault.default).addHandlerAddBookmark(controlUpdateBookmark);
            (0, _editViewJsDefault.default).addEditHandlers(controlEdit);
            break;
    }
};
init();

},{"../models/model.js":"1nwSQ","../models/deviceModel.js":"eVjfs","../models/userModel.js":"2rh01","../models/eventModel.js":"l6zea","../models/excelModel.js":"k6kDZ","./assetFormController.js":"aSnAl","../views/devicesView.js":"1b910","../views/usersView.js":"4ypuw","../views/showDeviceView.js":"ji4Yy","../views/showUserView.js":"8x44x","../views/historyView.js":"7utSO","../views/paginationView.js":"iHc12","../views/editView.js":"gBDug","../views/baseView.js":"iX81K","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","../../utilities/config.js":"4wtf3"}],"1nwSQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "state", ()=>state);
parcelHelpers.export(exports, "compareObjectsFilter", ()=>compareObjectsFilter);
parcelHelpers.export(exports, "clearFilters", ()=>clearFilters);
parcelHelpers.export(exports, "resetState", ()=>resetState);
parcelHelpers.export(exports, "getResultsPage", ()=>getResultsPage);
parcelHelpers.export(exports, "addBookmark", ()=>addBookmark);
parcelHelpers.export(exports, "deleteBookmark", ()=>deleteBookmark);
parcelHelpers.export(exports, "filterBookmarks", ()=>filterBookmarks);
parcelHelpers.export(exports, "updateEdit", ()=>updateEdit);
parcelHelpers.export(exports, "loadPreviewResults", ()=>loadPreviewResults);
parcelHelpers.export(exports, "getPreviewUser", ()=>getPreviewUser);
parcelHelpers.export(exports, "uploadData", ()=>uploadData);
var _helpersJs = require("../../utilities/helpers.js");
var _configJs = require("../../utilities/config.js");
var _deviceModelJs = require("./deviceModel.js");
var _eventModelJs = require("./eventModel.js");
var _userModelJs = require("./userModel.js");
const state = {
    page: "",
    object: {},
    search: {
        // results is for the filter, results is for the actual results, cache is for bookmarks
        search: ``,
        results: [],
        bookmarks: [],
        page: 1,
        resultsPerPage: (0, _configJs.RES_PER_PAGE),
        bookmarked: false
    },
    allResults: [],
    // FOR `OTHERS`
    labels: {},
    excel: false,
    fileLoaded: false,
    rawFormInputs: [],
    formInputs: [],
    pdfFile: {},
    excelFile: {}
};
const compareObjectsFilter = function(filterObj, realObj, ...keys) {
    let identical = true;
    // console.log(realObj);
    for (const key of keys)// console.log(key);
    // console.log(filterObj[key], realObj[key]);
    if (!(!filterObj[key] || String(filterObj[key]) === String(realObj[key]))) {
        // console.log(identical);
        identical = false;
        break;
    }
    return identical;
};
const clearFilters = function() {
    resetState(state.allResults);
    console.log(state);
};
const resetBookmarks = function() {
    state.search.bookmarked = false;
    state.search.bookmarks = state.search.results.filter((result)=>{
        return result.bookmarked === 1 ? true : false;
    });
};
const resetState = function(newResults) {
    state.search.search = ``;
    state.search.results = newResults;
    console.log(newResults);
    state.search.page = 1;
    resetBookmarks();
    console.log(state.search.results);
};
const getResultsPage = function(page = state.search.page) {
    state.search.page = page;
    const start = (page - 1) * (0, _configJs.RES_PER_PAGE);
    const end = page * (0, _configJs.RES_PER_PAGE);
    if (state.search.bookmarked) return state.search.bookmarks.slice(start, end);
    else return state.search.results.slice(start, end);
};
const addBookmark = async function(details) {
    try {
        if (details.assetId) await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}views/show_device`, [
            details.assetId,
            `add`
        ]);
        else if (details.userId) await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}views/show_user`, [
            details.userId,
            `add`
        ]);
        // mark current bookmark
        state.object.details.bookmarked = 1;
    } catch (err) {
        throw err;
    }
};
const deleteBookmark = async function(details) {
    try {
        if (details.assetId) await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}views/show_device`, [
            details.assetId,
            `delete`
        ]);
        else if (details.userId) await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}views/show_user`, [
            details.userId,
            `delete`
        ]);
        // mark current bookmark
        state.object.details.bookmarked = 0;
    } catch (err) {
        throw err;
    }
};
const filterBookmarks = function() {
    if (!state.search.bookmarked) state.search.bookmarked = true;
    else state.search.bookmarked = false;
};
const updateEdit = async function(type, id, data) {
    try {
        await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/edit_data`, [
            type,
            id,
            data
        ]);
    } catch (err) {
        throw err;
    }
};
const loadPreviewResults = async function(query, dataType) {
    try {
        let data;
        let results;
        let order = [];
        switch(dataType){
            case `model-name`:
                data = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/models`, query);
                console.log(data);
                results = data.map((model)=>{
                    return {
                        deviceType: model.device_type,
                        modelName: model.model_name,
                        modelId: model.model_id
                    };
                });
                return results;
            // case 
            case `asset-tag`:
                if (state.page === "loan device" || state.page === "condemned device") order = "available";
                else if (state.page === "returned device") order = "loaned";
                data = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/devices`, [
                    query,
                    order
                ]);
                results = data.map((device)=>(0, _deviceModelJs.createDeviceObject)(device));
                return results;
            case `user-name`:
                if (state.page === "loan device") order = false;
                else if (state.page === "remove user") order = true;
                data = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/users`, [
                    query,
                    order
                ]);
                results = (0, _userModelJs.combinedUsers)(data.map((user)=>(0, _userModelJs.createUserObject)(user)));
                return results;
        }
    } catch (err) {
        throw err;
    }
};
const getPreviewUser = async function(assetId) {
    try {
        const [data, event] = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/user`, assetId);
        console.log(event);
        const user = {
            userId: data[0].user_id,
            deptName: data[0].dept_name,
            userName: data[0].user_name,
            ...event[0].event_id && event[0].filepath && {
                eventId: event[0].event_id,
                fileName: event[0].filepath
            }
        };
        console.log(user);
        return user;
    } catch (err) {
        throw err;
    }
};
const uploadData = async function(data = state.formInputs) {
    try {
        let res;
        console.log(data);
        switch(state.page){
            case `onboard`:
                console.log(data);
                res = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}forms/onboard`, data);
                break;
            case `register model`:
                res = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}forms/register_model`, data);
                break;
            case `register device`:
                console.log(data);
                res = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}forms/register_device`, data);
                break;
            case `loan device`:
                console.log(data);
                res = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}forms/loan_device`, data);
                break;
            case `returned device`:
                res = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}forms/returned_device`, data);
                break;
            case `condemned device`:
                res = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}forms/condemned_device`, data);
                break;
            case `create user`:
                res = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}forms/create_user`, data);
                break;
            case `remove user`:
                res = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}forms/remove_user`, data);
                break;
            case `upload pdf`:
                res = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/upload_pdf`, data, false);
                break;
            default:
                break;
        }
        return res;
    } catch (err) {
        throw err;
    }
};

},{"../../utilities/helpers.js":"ePVjH","../../utilities/config.js":"4wtf3","./deviceModel.js":"eVjfs","./eventModel.js":"l6zea","./userModel.js":"2rh01","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ePVjH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AJAX", ()=>AJAX);
parcelHelpers.export(exports, "clearEl", ()=>clearEl);
parcelHelpers.export(exports, "hideEl", ()=>hideEl);
parcelHelpers.export(exports, "showEl", ()=>showEl);
parcelHelpers.export(exports, "transparentEl", ()=>transparentEl);
parcelHelpers.export(exports, "opaqueEl", ()=>opaqueEl);
parcelHelpers.export(exports, "resetInputs", ()=>resetInputs);
parcelHelpers.export(exports, "addFields", ()=>addFields);
parcelHelpers.export(exports, "removeFields", ()=>removeFields);
parcelHelpers.export(exports, "toggleFields", ()=>toggleFields);
parcelHelpers.export(exports, "arrToString", ()=>arrToString);
parcelHelpers.export(exports, "toCamelCase", ()=>toCamelCase);
parcelHelpers.export(exports, "eventToStatus", ()=>eventToStatus);
parcelHelpers.export(exports, "oldNewCheck", ()=>oldNewCheck);
parcelHelpers.export(exports, "excelToJSDate", ()=>excelToJSDate);
parcelHelpers.export(exports, "setFormData", ()=>setFormData);
parcelHelpers.export(exports, "capitalizeWords", ()=>capitalizeWords);
var _configJs = require("./config.js");
const timeout = function(s) {
    return new Promise(function(_, reject) {
        setTimeout(function() {
            reject(new Error(`Request took too long! Timeout after ${s} second`));
        }, s * 1000);
    });
};
const AJAX = async function(url, uploadData, header = true, blob = false) {
    try {
        if (uploadData) console.log(...uploadData);
        console.log(url);
        const fetchPro = uploadData ? header ? fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(uploadData)
        }) : fetch(url, {
            method: "POST",
            body: uploadData
        }) : fetch(url);
        console.log(url);
        const res = await Promise.race([
            fetchPro,
            timeout((0, _configJs.TIMEOUT_SEC))
        ]);
        if (!res.ok) {
            const errData = await res.json();
            throw new Error(`${errData.error}`);
        }
        if (res.redirected) {
            console.log("redirected");
            window.location.href = res.url; // Redirect the user to the new location  
        } else {
            console.log(header);
            const data = blob === false ? await res.json() : await res.blob();
            return data;
        }
    } catch (err) {
        throw err;
    }
};
const clearEl = function(...els) {
    els.forEach((el)=>el.innerHTML = "");
};
const hideEl = function(...els) {
    els.forEach((el)=>el.classList.add("hidden"));
};
const showEl = function(...els) {
    els.forEach((el)=>el.classList.remove("hidden"));
};
const transparentEl = function(...els) {
    els.forEach((el)=>el.classList.add("hidden-visibility"));
};
const opaqueEl = function(...els) {
    els.forEach((el)=>el.classList.remove("hidden-visibility"));
};
const resetInputs = function(inputArr) {
    inputArr.forEach((input)=>input.value = "");
};
const addFields = function(toggleClass, ...fields) {
    fields.forEach((field)=>field.classList.add(toggleClass));
};
const removeFields = function(toggleClass, ...fields) {
    fields.forEach((field)=>field.classList.remove(toggleClass));
};
const toggleFields = function(toggleClass, ...fields) {
    fields.forEach((field)=>field.classList.toggle(toggleClass));
};
const arrToString = function(arr) {
    return arr.map((el)=>el.toString());
};
const toCamelCase = function(text) {
    return text.includes("-") ? text.split("-").map((word, i)=>i !== 0 ? word[0].toUpperCase() + word.slice(1) : word).join("") : text;
};
const eventToStatus = function(event) {
    let status;
    switch(event){
        case "registered":
            status = "REGISTERED";
            break;
        case "loaned":
            status = "ON LOAN";
            break;
        case "available":
            status = "AVAILABLE";
            break;
        case "condemned":
            status = "CONDEMNED";
            break;
    }
    return status;
};
const oldNewCheck = function(defaultSelect, oldInput, newInput, name) {
    // Both selected
    if (oldInput.value !== defaultSelect && newInput.value) {
        this.renderError("Please do not display both fields");
        return false;
    }
    // no vendor selected
    if (newInput.value === "" && oldInput.value === defaultSelect) {
        console.log("reject");
        this.renderError(`${name} cannot be blank!`);
        return false;
    }
    return true;
};
const excelToJSDate = function(date) {
    newDate = new Date(Math.round((date - 25569) * 86400000)).toISOString();
    return newDate;
};
const setFormData = function(formData, key, oldValue = "", newValue = "All") {
    if (formData.get(key) === oldValue) formData.set(key, newValue);
};
const capitalizeWords = function(str) {
    return str.replace(/\b\w/g, (match)=>match.toUpperCase());
};

},{"./config.js":"4wtf3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4wtf3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TIMEOUT_SEC", ()=>TIMEOUT_SEC);
parcelHelpers.export(exports, "PREVIEW_TIMEOUT_BLUR", ()=>PREVIEW_TIMEOUT_BLUR);
parcelHelpers.export(exports, "ASSET_HOMEPAGE_URL", ()=>ASSET_HOMEPAGE_URL);
parcelHelpers.export(exports, "RES_PER_PAGE", ()=>RES_PER_PAGE);
parcelHelpers.export(exports, "dateTimeObject", ()=>dateTimeObject);
parcelHelpers.export(exports, "COLORSCALE", ()=>COLORSCALE);
var _chromaJs = require("chroma-js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
const TIMEOUT_SEC = 300;
const PREVIEW_TIMEOUT_BLUR = 100;
const ASSET_HOMEPAGE_URL = `${window.location.origin}/asset/`;
const RES_PER_PAGE = 30;
const dateTimeObject = {
    weekday: "short",
    hour: "numeric",
    minute: "numeric",
    day: "numeric",
    month: "short",
    year: "2-digit"
};
const baseColors = [
    "rgb(255, 99, 132)",
    "rgb(25, 196, 166)",
    "rgb(54, 162, 235)",
    "rgb(255, 165, 63)",
    "rgb(255, 245, 143)",
    "rgb(181, 130, 211)"
];
const numberOfAdditionalColors = 5;
const COLORSCALE = (0, _chromaJsDefault.default).scale(baseColors).colors(numberOfAdditionalColors);

},{"chroma-js":"iVrwS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iVrwS":[function(require,module,exports) {
/**
 * chroma.js - JavaScript library for color conversions
 *
 * Copyright (c) 2011-2019, Gregor Aisch
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -------------------------------------------------------
 *
 * chroma.js includes colors from colorbrewer2.org, which are released under
 * the following license:
 *
 * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,
 * and The Pennsylvania State University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * ------------------------------------------------------
 *
 * Named colors are taken from X11 Color Names.
 * http://www.w3.org/TR/css3-color/#svg-color
 *
 * @preserve
 */ (function(global, factory) {
    module.exports = factory();
})(this, function() {
    "use strict";
    var limit$2 = function(x, min, max) {
        if (min === void 0) min = 0;
        if (max === void 0) max = 1;
        return x < min ? min : x > max ? max : x;
    };
    var limit$1 = limit$2;
    var clip_rgb$3 = function(rgb) {
        rgb._clipped = false;
        rgb._unclipped = rgb.slice(0);
        for(var i = 0; i <= 3; i++){
            if (i < 3) {
                if (rgb[i] < 0 || rgb[i] > 255) rgb._clipped = true;
                rgb[i] = limit$1(rgb[i], 0, 255);
            } else if (i === 3) rgb[i] = limit$1(rgb[i], 0, 1);
        }
        return rgb;
    };
    // ported from jQuery's $.type
    var classToType = {};
    for(var i$1 = 0, list$1 = [
        "Boolean",
        "Number",
        "String",
        "Function",
        "Array",
        "Date",
        "RegExp",
        "Undefined",
        "Null"
    ]; i$1 < list$1.length; i$1 += 1){
        var name = list$1[i$1];
        classToType["[object " + name + "]"] = name.toLowerCase();
    }
    var type$p = function(obj) {
        return classToType[Object.prototype.toString.call(obj)] || "object";
    };
    var type$o = type$p;
    var unpack$B = function(args, keyOrder) {
        if (keyOrder === void 0) keyOrder = null;
        // if called with more than 3 arguments, we return the arguments
        if (args.length >= 3) return Array.prototype.slice.call(args);
        // with less than 3 args we check if first arg is object
        // and use the keyOrder string to extract and sort properties
        if (type$o(args[0]) == "object" && keyOrder) return keyOrder.split("").filter(function(k) {
            return args[0][k] !== undefined;
        }).map(function(k) {
            return args[0][k];
        });
        // otherwise we just return the first argument
        // (which we suppose is an array of args)
        return args[0];
    };
    var type$n = type$p;
    var last$4 = function(args) {
        if (args.length < 2) return null;
        var l = args.length - 1;
        if (type$n(args[l]) == "string") return args[l].toLowerCase();
        return null;
    };
    var PI$2 = Math.PI;
    var utils = {
        clip_rgb: clip_rgb$3,
        limit: limit$2,
        type: type$p,
        unpack: unpack$B,
        last: last$4,
        PI: PI$2,
        TWOPI: PI$2 * 2,
        PITHIRD: PI$2 / 3,
        DEG2RAD: PI$2 / 180,
        RAD2DEG: 180 / PI$2
    };
    var input$h = {
        format: {},
        autodetect: []
    };
    var last$3 = utils.last;
    var clip_rgb$2 = utils.clip_rgb;
    var type$m = utils.type;
    var _input = input$h;
    var Color$D = function Color() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var me = this;
        if (type$m(args[0]) === "object" && args[0].constructor && args[0].constructor === this.constructor) // the argument is already a Color instance
        return args[0];
        // last argument could be the mode
        var mode = last$3(args);
        var autodetect = false;
        if (!mode) {
            autodetect = true;
            if (!_input.sorted) {
                _input.autodetect = _input.autodetect.sort(function(a, b) {
                    return b.p - a.p;
                });
                _input.sorted = true;
            }
            // auto-detect format
            for(var i = 0, list = _input.autodetect; i < list.length; i += 1){
                var chk = list[i];
                mode = chk.test.apply(chk, args);
                if (mode) break;
            }
        }
        if (_input.format[mode]) {
            var rgb = _input.format[mode].apply(null, autodetect ? args : args.slice(0, -1));
            me._rgb = clip_rgb$2(rgb);
        } else throw new Error("unknown format: " + args);
        // add alpha channel
        if (me._rgb.length === 3) me._rgb.push(1);
    };
    Color$D.prototype.toString = function toString() {
        if (type$m(this.hex) == "function") return this.hex();
        return "[" + this._rgb.join(",") + "]";
    };
    var Color_1 = Color$D;
    var chroma$k = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(chroma$k.Color, [
            null
        ].concat(args)));
    };
    chroma$k.Color = Color_1;
    chroma$k.version = "2.4.2";
    var chroma_1 = chroma$k;
    var unpack$A = utils.unpack;
    var max$2 = Math.max;
    var rgb2cmyk$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var ref = unpack$A(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        r = r / 255;
        g = g / 255;
        b = b / 255;
        var k = 1 - max$2(r, max$2(g, b));
        var f = k < 1 ? 1 / (1 - k) : 0;
        var c = (1 - r - k) * f;
        var m = (1 - g - k) * f;
        var y = (1 - b - k) * f;
        return [
            c,
            m,
            y,
            k
        ];
    };
    var rgb2cmyk_1 = rgb2cmyk$1;
    var unpack$z = utils.unpack;
    var cmyk2rgb = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        args = unpack$z(args, "cmyk");
        var c = args[0];
        var m = args[1];
        var y = args[2];
        var k = args[3];
        var alpha = args.length > 4 ? args[4] : 1;
        if (k === 1) return [
            0,
            0,
            0,
            alpha
        ];
        return [
            c >= 1 ? 0 : 255 * (1 - c) * (1 - k),
            m >= 1 ? 0 : 255 * (1 - m) * (1 - k),
            y >= 1 ? 0 : 255 * (1 - y) * (1 - k),
            alpha
        ];
    };
    var cmyk2rgb_1 = cmyk2rgb;
    var chroma$j = chroma_1;
    var Color$C = Color_1;
    var input$g = input$h;
    var unpack$y = utils.unpack;
    var type$l = utils.type;
    var rgb2cmyk = rgb2cmyk_1;
    Color$C.prototype.cmyk = function() {
        return rgb2cmyk(this._rgb);
    };
    chroma$j.cmyk = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$C, [
            null
        ].concat(args, [
            "cmyk"
        ])));
    };
    input$g.format.cmyk = cmyk2rgb_1;
    input$g.autodetect.push({
        p: 2,
        test: function() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            args = unpack$y(args, "cmyk");
            if (type$l(args) === "array" && args.length === 4) return "cmyk";
        }
    });
    var unpack$x = utils.unpack;
    var last$2 = utils.last;
    var rnd = function(a) {
        return Math.round(a * 100) / 100;
    };
    /*
     * supported arguments:
     * - hsl2css(h,s,l)
     * - hsl2css(h,s,l,a)
     * - hsl2css([h,s,l], mode)
     * - hsl2css([h,s,l,a], mode)
     * - hsl2css({h,s,l,a}, mode)
     */ var hsl2css$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var hsla = unpack$x(args, "hsla");
        var mode = last$2(args) || "lsa";
        hsla[0] = rnd(hsla[0] || 0);
        hsla[1] = rnd(hsla[1] * 100) + "%";
        hsla[2] = rnd(hsla[2] * 100) + "%";
        if (mode === "hsla" || hsla.length > 3 && hsla[3] < 1) {
            hsla[3] = hsla.length > 3 ? hsla[3] : 1;
            mode = "hsla";
        } else hsla.length = 3;
        return mode + "(" + hsla.join(",") + ")";
    };
    var hsl2css_1 = hsl2css$1;
    var unpack$w = utils.unpack;
    /*
     * supported arguments:
     * - rgb2hsl(r,g,b)
     * - rgb2hsl(r,g,b,a)
     * - rgb2hsl([r,g,b])
     * - rgb2hsl([r,g,b,a])
     * - rgb2hsl({r,g,b,a})
     */ var rgb2hsl$3 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        args = unpack$w(args, "rgba");
        var r = args[0];
        var g = args[1];
        var b = args[2];
        r /= 255;
        g /= 255;
        b /= 255;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var l = (max + min) / 2;
        var s, h;
        if (max === min) {
            s = 0;
            h = Number.NaN;
        } else s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
        if (r == max) h = (g - b) / (max - min);
        else if (g == max) h = 2 + (b - r) / (max - min);
        else if (b == max) h = 4 + (r - g) / (max - min);
        h *= 60;
        if (h < 0) h += 360;
        if (args.length > 3 && args[3] !== undefined) return [
            h,
            s,
            l,
            args[3]
        ];
        return [
            h,
            s,
            l
        ];
    };
    var rgb2hsl_1 = rgb2hsl$3;
    var unpack$v = utils.unpack;
    var last$1 = utils.last;
    var hsl2css = hsl2css_1;
    var rgb2hsl$2 = rgb2hsl_1;
    var round$6 = Math.round;
    /*
     * supported arguments:
     * - rgb2css(r,g,b)
     * - rgb2css(r,g,b,a)
     * - rgb2css([r,g,b], mode)
     * - rgb2css([r,g,b,a], mode)
     * - rgb2css({r,g,b,a}, mode)
     */ var rgb2css$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var rgba = unpack$v(args, "rgba");
        var mode = last$1(args) || "rgb";
        if (mode.substr(0, 3) == "hsl") return hsl2css(rgb2hsl$2(rgba), mode);
        rgba[0] = round$6(rgba[0]);
        rgba[1] = round$6(rgba[1]);
        rgba[2] = round$6(rgba[2]);
        if (mode === "rgba" || rgba.length > 3 && rgba[3] < 1) {
            rgba[3] = rgba.length > 3 ? rgba[3] : 1;
            mode = "rgba";
        }
        return mode + "(" + rgba.slice(0, mode === "rgb" ? 3 : 4).join(",") + ")";
    };
    var rgb2css_1 = rgb2css$1;
    var unpack$u = utils.unpack;
    var round$5 = Math.round;
    var hsl2rgb$1 = function() {
        var assign;
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        args = unpack$u(args, "hsl");
        var h = args[0];
        var s = args[1];
        var l = args[2];
        var r, g, b;
        if (s === 0) r = g = b = l * 255;
        else {
            var t3 = [
                0,
                0,
                0
            ];
            var c = [
                0,
                0,
                0
            ];
            var t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var t1 = 2 * l - t2;
            var h_ = h / 360;
            t3[0] = h_ + 1 / 3;
            t3[1] = h_;
            t3[2] = h_ - 1 / 3;
            for(var i = 0; i < 3; i++){
                if (t3[i] < 0) t3[i] += 1;
                if (t3[i] > 1) t3[i] -= 1;
                if (6 * t3[i] < 1) c[i] = t1 + (t2 - t1) * 6 * t3[i];
                else if (2 * t3[i] < 1) c[i] = t2;
                else if (3 * t3[i] < 2) c[i] = t1 + (t2 - t1) * (2 / 3 - t3[i]) * 6;
                else c[i] = t1;
            }
            assign = [
                round$5(c[0] * 255),
                round$5(c[1] * 255),
                round$5(c[2] * 255)
            ], r = assign[0], g = assign[1], b = assign[2];
        }
        if (args.length > 3) // keep alpha channel
        return [
            r,
            g,
            b,
            args[3]
        ];
        return [
            r,
            g,
            b,
            1
        ];
    };
    var hsl2rgb_1 = hsl2rgb$1;
    var hsl2rgb = hsl2rgb_1;
    var input$f = input$h;
    var RE_RGB = /^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/;
    var RE_RGBA = /^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/;
    var RE_RGB_PCT = /^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
    var RE_RGBA_PCT = /^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
    var RE_HSL = /^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
    var RE_HSLA = /^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
    var round$4 = Math.round;
    var css2rgb$1 = function(css) {
        css = css.toLowerCase().trim();
        var m;
        if (input$f.format.named) try {
            return input$f.format.named(css);
        } catch (e) {
        // eslint-disable-next-line
        }
        // rgb(250,20,0)
        if (m = css.match(RE_RGB)) {
            var rgb = m.slice(1, 4);
            for(var i = 0; i < 3; i++)rgb[i] = +rgb[i];
            rgb[3] = 1; // default alpha
            return rgb;
        }
        // rgba(250,20,0,0.4)
        if (m = css.match(RE_RGBA)) {
            var rgb$1 = m.slice(1, 5);
            for(var i$1 = 0; i$1 < 4; i$1++)rgb$1[i$1] = +rgb$1[i$1];
            return rgb$1;
        }
        // rgb(100%,0%,0%)
        if (m = css.match(RE_RGB_PCT)) {
            var rgb$2 = m.slice(1, 4);
            for(var i$2 = 0; i$2 < 3; i$2++)rgb$2[i$2] = round$4(rgb$2[i$2] * 2.55);
            rgb$2[3] = 1; // default alpha
            return rgb$2;
        }
        // rgba(100%,0%,0%,0.4)
        if (m = css.match(RE_RGBA_PCT)) {
            var rgb$3 = m.slice(1, 5);
            for(var i$3 = 0; i$3 < 3; i$3++)rgb$3[i$3] = round$4(rgb$3[i$3] * 2.55);
            rgb$3[3] = +rgb$3[3];
            return rgb$3;
        }
        // hsl(0,100%,50%)
        if (m = css.match(RE_HSL)) {
            var hsl = m.slice(1, 4);
            hsl[1] *= 0.01;
            hsl[2] *= 0.01;
            var rgb$4 = hsl2rgb(hsl);
            rgb$4[3] = 1;
            return rgb$4;
        }
        // hsla(0,100%,50%,0.5)
        if (m = css.match(RE_HSLA)) {
            var hsl$1 = m.slice(1, 4);
            hsl$1[1] *= 0.01;
            hsl$1[2] *= 0.01;
            var rgb$5 = hsl2rgb(hsl$1);
            rgb$5[3] = +m[4]; // default alpha = 1
            return rgb$5;
        }
    };
    css2rgb$1.test = function(s) {
        return RE_RGB.test(s) || RE_RGBA.test(s) || RE_RGB_PCT.test(s) || RE_RGBA_PCT.test(s) || RE_HSL.test(s) || RE_HSLA.test(s);
    };
    var css2rgb_1 = css2rgb$1;
    var chroma$i = chroma_1;
    var Color$B = Color_1;
    var input$e = input$h;
    var type$k = utils.type;
    var rgb2css = rgb2css_1;
    var css2rgb = css2rgb_1;
    Color$B.prototype.css = function(mode) {
        return rgb2css(this._rgb, mode);
    };
    chroma$i.css = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$B, [
            null
        ].concat(args, [
            "css"
        ])));
    };
    input$e.format.css = css2rgb;
    input$e.autodetect.push({
        p: 5,
        test: function(h) {
            var rest = [], len = arguments.length - 1;
            while(len-- > 0)rest[len] = arguments[len + 1];
            if (!rest.length && type$k(h) === "string" && css2rgb.test(h)) return "css";
        }
    });
    var Color$A = Color_1;
    var chroma$h = chroma_1;
    var input$d = input$h;
    var unpack$t = utils.unpack;
    input$d.format.gl = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var rgb = unpack$t(args, "rgba");
        rgb[0] *= 255;
        rgb[1] *= 255;
        rgb[2] *= 255;
        return rgb;
    };
    chroma$h.gl = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$A, [
            null
        ].concat(args, [
            "gl"
        ])));
    };
    Color$A.prototype.gl = function() {
        var rgb = this._rgb;
        return [
            rgb[0] / 255,
            rgb[1] / 255,
            rgb[2] / 255,
            rgb[3]
        ];
    };
    var unpack$s = utils.unpack;
    var rgb2hcg$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var ref = unpack$s(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var c = delta * 100 / 255;
        var _g = min / (255 - delta) * 100;
        var h;
        if (delta === 0) h = Number.NaN;
        else {
            if (r === max) h = (g - b) / delta;
            if (g === max) h = 2 + (b - r) / delta;
            if (b === max) h = 4 + (r - g) / delta;
            h *= 60;
            if (h < 0) h += 360;
        }
        return [
            h,
            c,
            _g
        ];
    };
    var rgb2hcg_1 = rgb2hcg$1;
    var unpack$r = utils.unpack;
    var floor$3 = Math.floor;
    /*
     * this is basically just HSV with some minor tweaks
     *
     * hue.. [0..360]
     * chroma .. [0..1]
     * grayness .. [0..1]
     */ var hcg2rgb = function() {
        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        args = unpack$r(args, "hcg");
        var h = args[0];
        var c = args[1];
        var _g = args[2];
        var r, g, b;
        _g = _g * 255;
        var _c = c * 255;
        if (c === 0) r = g = b = _g;
        else {
            if (h === 360) h = 0;
            if (h > 360) h -= 360;
            if (h < 0) h += 360;
            h /= 60;
            var i = floor$3(h);
            var f = h - i;
            var p = _g * (1 - c);
            var q = p + _c * (1 - f);
            var t = p + _c * f;
            var v = p + _c;
            switch(i){
                case 0:
                    assign = [
                        v,
                        t,
                        p
                    ], r = assign[0], g = assign[1], b = assign[2];
                    break;
                case 1:
                    assign$1 = [
                        q,
                        v,
                        p
                    ], r = assign$1[0], g = assign$1[1], b = assign$1[2];
                    break;
                case 2:
                    assign$2 = [
                        p,
                        v,
                        t
                    ], r = assign$2[0], g = assign$2[1], b = assign$2[2];
                    break;
                case 3:
                    assign$3 = [
                        p,
                        q,
                        v
                    ], r = assign$3[0], g = assign$3[1], b = assign$3[2];
                    break;
                case 4:
                    assign$4 = [
                        t,
                        p,
                        v
                    ], r = assign$4[0], g = assign$4[1], b = assign$4[2];
                    break;
                case 5:
                    assign$5 = [
                        v,
                        p,
                        q
                    ], r = assign$5[0], g = assign$5[1], b = assign$5[2];
                    break;
            }
        }
        return [
            r,
            g,
            b,
            args.length > 3 ? args[3] : 1
        ];
    };
    var hcg2rgb_1 = hcg2rgb;
    var unpack$q = utils.unpack;
    var type$j = utils.type;
    var chroma$g = chroma_1;
    var Color$z = Color_1;
    var input$c = input$h;
    var rgb2hcg = rgb2hcg_1;
    Color$z.prototype.hcg = function() {
        return rgb2hcg(this._rgb);
    };
    chroma$g.hcg = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$z, [
            null
        ].concat(args, [
            "hcg"
        ])));
    };
    input$c.format.hcg = hcg2rgb_1;
    input$c.autodetect.push({
        p: 1,
        test: function() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            args = unpack$q(args, "hcg");
            if (type$j(args) === "array" && args.length === 3) return "hcg";
        }
    });
    var unpack$p = utils.unpack;
    var last = utils.last;
    var round$3 = Math.round;
    var rgb2hex$2 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var ref = unpack$p(args, "rgba");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var a = ref[3];
        var mode = last(args) || "auto";
        if (a === undefined) a = 1;
        if (mode === "auto") mode = a < 1 ? "rgba" : "rgb";
        r = round$3(r);
        g = round$3(g);
        b = round$3(b);
        var u = r << 16 | g << 8 | b;
        var str = "000000" + u.toString(16); //#.toUpperCase();
        str = str.substr(str.length - 6);
        var hxa = "0" + round$3(a * 255).toString(16);
        hxa = hxa.substr(hxa.length - 2);
        switch(mode.toLowerCase()){
            case "rgba":
                return "#" + str + hxa;
            case "argb":
                return "#" + hxa + str;
            default:
                return "#" + str;
        }
    };
    var rgb2hex_1 = rgb2hex$2;
    var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
    var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;
    var hex2rgb$1 = function(hex) {
        if (hex.match(RE_HEX)) {
            // remove optional leading #
            if (hex.length === 4 || hex.length === 7) hex = hex.substr(1);
            // expand short-notation to full six-digit
            if (hex.length === 3) {
                hex = hex.split("");
                hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
            }
            var u = parseInt(hex, 16);
            var r = u >> 16;
            var g = u >> 8 & 0xFF;
            var b = u & 0xFF;
            return [
                r,
                g,
                b,
                1
            ];
        }
        // match rgba hex format, eg #FF000077
        if (hex.match(RE_HEXA)) {
            if (hex.length === 5 || hex.length === 9) // remove optional leading #
            hex = hex.substr(1);
            // expand short-notation to full eight-digit
            if (hex.length === 4) {
                hex = hex.split("");
                hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
            }
            var u$1 = parseInt(hex, 16);
            var r$1 = u$1 >> 24 & 0xFF;
            var g$1 = u$1 >> 16 & 0xFF;
            var b$1 = u$1 >> 8 & 0xFF;
            var a = Math.round((u$1 & 0xFF) / 0xFF * 100) / 100;
            return [
                r$1,
                g$1,
                b$1,
                a
            ];
        }
        // we used to check for css colors here
        // if _input.css? and rgb = _input.css hex
        //     return rgb
        throw new Error("unknown hex color: " + hex);
    };
    var hex2rgb_1 = hex2rgb$1;
    var chroma$f = chroma_1;
    var Color$y = Color_1;
    var type$i = utils.type;
    var input$b = input$h;
    var rgb2hex$1 = rgb2hex_1;
    Color$y.prototype.hex = function(mode) {
        return rgb2hex$1(this._rgb, mode);
    };
    chroma$f.hex = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$y, [
            null
        ].concat(args, [
            "hex"
        ])));
    };
    input$b.format.hex = hex2rgb_1;
    input$b.autodetect.push({
        p: 4,
        test: function(h) {
            var rest = [], len = arguments.length - 1;
            while(len-- > 0)rest[len] = arguments[len + 1];
            if (!rest.length && type$i(h) === "string" && [
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ].indexOf(h.length) >= 0) return "hex";
        }
    });
    var unpack$o = utils.unpack;
    var TWOPI$2 = utils.TWOPI;
    var min$2 = Math.min;
    var sqrt$4 = Math.sqrt;
    var acos = Math.acos;
    var rgb2hsi$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        /*
        borrowed from here:
        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
        */ var ref = unpack$o(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        r /= 255;
        g /= 255;
        b /= 255;
        var h;
        var min_ = min$2(r, g, b);
        var i = (r + g + b) / 3;
        var s = i > 0 ? 1 - min_ / i : 0;
        if (s === 0) h = NaN;
        else {
            h = (r - g + (r - b)) / 2;
            h /= sqrt$4((r - g) * (r - g) + (r - b) * (g - b));
            h = acos(h);
            if (b > g) h = TWOPI$2 - h;
            h /= TWOPI$2;
        }
        return [
            h * 360,
            s,
            i
        ];
    };
    var rgb2hsi_1 = rgb2hsi$1;
    var unpack$n = utils.unpack;
    var limit = utils.limit;
    var TWOPI$1 = utils.TWOPI;
    var PITHIRD = utils.PITHIRD;
    var cos$4 = Math.cos;
    /*
     * hue [0..360]
     * saturation [0..1]
     * intensity [0..1]
     */ var hsi2rgb = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        /*
        borrowed from here:
        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
        */ args = unpack$n(args, "hsi");
        var h = args[0];
        var s = args[1];
        var i = args[2];
        var r, g, b;
        if (isNaN(h)) h = 0;
        if (isNaN(s)) s = 0;
        // normalize hue
        if (h > 360) h -= 360;
        if (h < 0) h += 360;
        h /= 360;
        if (h < 1 / 3) {
            b = (1 - s) / 3;
            r = (1 + s * cos$4(TWOPI$1 * h) / cos$4(PITHIRD - TWOPI$1 * h)) / 3;
            g = 1 - (b + r);
        } else if (h < 2 / 3) {
            h -= 1 / 3;
            r = (1 - s) / 3;
            g = (1 + s * cos$4(TWOPI$1 * h) / cos$4(PITHIRD - TWOPI$1 * h)) / 3;
            b = 1 - (r + g);
        } else {
            h -= 2 / 3;
            g = (1 - s) / 3;
            b = (1 + s * cos$4(TWOPI$1 * h) / cos$4(PITHIRD - TWOPI$1 * h)) / 3;
            r = 1 - (g + b);
        }
        r = limit(i * r * 3);
        g = limit(i * g * 3);
        b = limit(i * b * 3);
        return [
            r * 255,
            g * 255,
            b * 255,
            args.length > 3 ? args[3] : 1
        ];
    };
    var hsi2rgb_1 = hsi2rgb;
    var unpack$m = utils.unpack;
    var type$h = utils.type;
    var chroma$e = chroma_1;
    var Color$x = Color_1;
    var input$a = input$h;
    var rgb2hsi = rgb2hsi_1;
    Color$x.prototype.hsi = function() {
        return rgb2hsi(this._rgb);
    };
    chroma$e.hsi = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$x, [
            null
        ].concat(args, [
            "hsi"
        ])));
    };
    input$a.format.hsi = hsi2rgb_1;
    input$a.autodetect.push({
        p: 2,
        test: function() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            args = unpack$m(args, "hsi");
            if (type$h(args) === "array" && args.length === 3) return "hsi";
        }
    });
    var unpack$l = utils.unpack;
    var type$g = utils.type;
    var chroma$d = chroma_1;
    var Color$w = Color_1;
    var input$9 = input$h;
    var rgb2hsl$1 = rgb2hsl_1;
    Color$w.prototype.hsl = function() {
        return rgb2hsl$1(this._rgb);
    };
    chroma$d.hsl = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$w, [
            null
        ].concat(args, [
            "hsl"
        ])));
    };
    input$9.format.hsl = hsl2rgb_1;
    input$9.autodetect.push({
        p: 2,
        test: function() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            args = unpack$l(args, "hsl");
            if (type$g(args) === "array" && args.length === 3) return "hsl";
        }
    });
    var unpack$k = utils.unpack;
    var min$1 = Math.min;
    var max$1 = Math.max;
    /*
     * supported arguments:
     * - rgb2hsv(r,g,b)
     * - rgb2hsv([r,g,b])
     * - rgb2hsv({r,g,b})
     */ var rgb2hsl = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        args = unpack$k(args, "rgb");
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var min_ = min$1(r, g, b);
        var max_ = max$1(r, g, b);
        var delta = max_ - min_;
        var h, s, v;
        v = max_ / 255.0;
        if (max_ === 0) {
            h = Number.NaN;
            s = 0;
        } else {
            s = delta / max_;
            if (r === max_) h = (g - b) / delta;
            if (g === max_) h = 2 + (b - r) / delta;
            if (b === max_) h = 4 + (r - g) / delta;
            h *= 60;
            if (h < 0) h += 360;
        }
        return [
            h,
            s,
            v
        ];
    };
    var rgb2hsv$1 = rgb2hsl;
    var unpack$j = utils.unpack;
    var floor$2 = Math.floor;
    var hsv2rgb = function() {
        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        args = unpack$j(args, "hsv");
        var h = args[0];
        var s = args[1];
        var v = args[2];
        var r, g, b;
        v *= 255;
        if (s === 0) r = g = b = v;
        else {
            if (h === 360) h = 0;
            if (h > 360) h -= 360;
            if (h < 0) h += 360;
            h /= 60;
            var i = floor$2(h);
            var f = h - i;
            var p = v * (1 - s);
            var q = v * (1 - s * f);
            var t = v * (1 - s * (1 - f));
            switch(i){
                case 0:
                    assign = [
                        v,
                        t,
                        p
                    ], r = assign[0], g = assign[1], b = assign[2];
                    break;
                case 1:
                    assign$1 = [
                        q,
                        v,
                        p
                    ], r = assign$1[0], g = assign$1[1], b = assign$1[2];
                    break;
                case 2:
                    assign$2 = [
                        p,
                        v,
                        t
                    ], r = assign$2[0], g = assign$2[1], b = assign$2[2];
                    break;
                case 3:
                    assign$3 = [
                        p,
                        q,
                        v
                    ], r = assign$3[0], g = assign$3[1], b = assign$3[2];
                    break;
                case 4:
                    assign$4 = [
                        t,
                        p,
                        v
                    ], r = assign$4[0], g = assign$4[1], b = assign$4[2];
                    break;
                case 5:
                    assign$5 = [
                        v,
                        p,
                        q
                    ], r = assign$5[0], g = assign$5[1], b = assign$5[2];
                    break;
            }
        }
        return [
            r,
            g,
            b,
            args.length > 3 ? args[3] : 1
        ];
    };
    var hsv2rgb_1 = hsv2rgb;
    var unpack$i = utils.unpack;
    var type$f = utils.type;
    var chroma$c = chroma_1;
    var Color$v = Color_1;
    var input$8 = input$h;
    var rgb2hsv = rgb2hsv$1;
    Color$v.prototype.hsv = function() {
        return rgb2hsv(this._rgb);
    };
    chroma$c.hsv = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$v, [
            null
        ].concat(args, [
            "hsv"
        ])));
    };
    input$8.format.hsv = hsv2rgb_1;
    input$8.autodetect.push({
        p: 2,
        test: function() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            args = unpack$i(args, "hsv");
            if (type$f(args) === "array" && args.length === 3) return "hsv";
        }
    });
    var labConstants = {
        // Corresponds roughly to RGB brighter/darker
        Kn: 18,
        // D65 standard referent
        Xn: 0.950470,
        Yn: 1,
        Zn: 1.088830,
        t0: 0.137931034,
        t1: 0.206896552,
        t2: 0.12841855,
        t3: 0.008856452
    };
    var LAB_CONSTANTS$3 = labConstants;
    var unpack$h = utils.unpack;
    var pow$a = Math.pow;
    var rgb2lab$2 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var ref = unpack$h(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2xyz(r, g, b);
        var x = ref$1[0];
        var y = ref$1[1];
        var z = ref$1[2];
        var l = 116 * y - 16;
        return [
            l < 0 ? 0 : l,
            500 * (x - y),
            200 * (y - z)
        ];
    };
    var rgb_xyz = function(r) {
        if ((r /= 255) <= 0.04045) return r / 12.92;
        return pow$a((r + 0.055) / 1.055, 2.4);
    };
    var xyz_lab = function(t) {
        if (t > LAB_CONSTANTS$3.t3) return pow$a(t, 1 / 3);
        return t / LAB_CONSTANTS$3.t2 + LAB_CONSTANTS$3.t0;
    };
    var rgb2xyz = function(r, g, b) {
        r = rgb_xyz(r);
        g = rgb_xyz(g);
        b = rgb_xyz(b);
        var x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS$3.Xn);
        var y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS$3.Yn);
        var z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS$3.Zn);
        return [
            x,
            y,
            z
        ];
    };
    var rgb2lab_1 = rgb2lab$2;
    var LAB_CONSTANTS$2 = labConstants;
    var unpack$g = utils.unpack;
    var pow$9 = Math.pow;
    /*
     * L* [0..100]
     * a [-100..100]
     * b [-100..100]
     */ var lab2rgb$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        args = unpack$g(args, "lab");
        var l = args[0];
        var a = args[1];
        var b = args[2];
        var x, y, z, r, g, b_;
        y = (l + 16) / 116;
        x = isNaN(a) ? y : y + a / 500;
        z = isNaN(b) ? y : y - b / 200;
        y = LAB_CONSTANTS$2.Yn * lab_xyz(y);
        x = LAB_CONSTANTS$2.Xn * lab_xyz(x);
        z = LAB_CONSTANTS$2.Zn * lab_xyz(z);
        r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z); // D65 -> sRGB
        g = xyz_rgb(-0.969266 * x + 1.8760108 * y + 0.0415560 * z);
        b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
        return [
            r,
            g,
            b_,
            args.length > 3 ? args[3] : 1
        ];
    };
    var xyz_rgb = function(r) {
        return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow$9(r, 1 / 2.4) - 0.055);
    };
    var lab_xyz = function(t) {
        return t > LAB_CONSTANTS$2.t1 ? t * t * t : LAB_CONSTANTS$2.t2 * (t - LAB_CONSTANTS$2.t0);
    };
    var lab2rgb_1 = lab2rgb$1;
    var unpack$f = utils.unpack;
    var type$e = utils.type;
    var chroma$b = chroma_1;
    var Color$u = Color_1;
    var input$7 = input$h;
    var rgb2lab$1 = rgb2lab_1;
    Color$u.prototype.lab = function() {
        return rgb2lab$1(this._rgb);
    };
    chroma$b.lab = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$u, [
            null
        ].concat(args, [
            "lab"
        ])));
    };
    input$7.format.lab = lab2rgb_1;
    input$7.autodetect.push({
        p: 2,
        test: function() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            args = unpack$f(args, "lab");
            if (type$e(args) === "array" && args.length === 3) return "lab";
        }
    });
    var unpack$e = utils.unpack;
    var RAD2DEG = utils.RAD2DEG;
    var sqrt$3 = Math.sqrt;
    var atan2$2 = Math.atan2;
    var round$2 = Math.round;
    var lab2lch$2 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var ref = unpack$e(args, "lab");
        var l = ref[0];
        var a = ref[1];
        var b = ref[2];
        var c = sqrt$3(a * a + b * b);
        var h = (atan2$2(b, a) * RAD2DEG + 360) % 360;
        if (round$2(c * 10000) === 0) h = Number.NaN;
        return [
            l,
            c,
            h
        ];
    };
    var lab2lch_1 = lab2lch$2;
    var unpack$d = utils.unpack;
    var rgb2lab = rgb2lab_1;
    var lab2lch$1 = lab2lch_1;
    var rgb2lch$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var ref = unpack$d(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2lab(r, g, b);
        var l = ref$1[0];
        var a = ref$1[1];
        var b_ = ref$1[2];
        return lab2lch$1(l, a, b_);
    };
    var rgb2lch_1 = rgb2lch$1;
    var unpack$c = utils.unpack;
    var DEG2RAD = utils.DEG2RAD;
    var sin$3 = Math.sin;
    var cos$3 = Math.cos;
    var lch2lab$2 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        /*
        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
        These formulas were invented by David Dalrymple to obtain maximum contrast without going
        out of gamut if the parameters are in the range 0-1.

        A saturation multiplier was added by Gregor Aisch
        */ var ref = unpack$c(args, "lch");
        var l = ref[0];
        var c = ref[1];
        var h = ref[2];
        if (isNaN(h)) h = 0;
        h = h * DEG2RAD;
        return [
            l,
            cos$3(h) * c,
            sin$3(h) * c
        ];
    };
    var lch2lab_1 = lch2lab$2;
    var unpack$b = utils.unpack;
    var lch2lab$1 = lch2lab_1;
    var lab2rgb = lab2rgb_1;
    var lch2rgb$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        args = unpack$b(args, "lch");
        var l = args[0];
        var c = args[1];
        var h = args[2];
        var ref = lch2lab$1(l, c, h);
        var L = ref[0];
        var a = ref[1];
        var b_ = ref[2];
        var ref$1 = lab2rgb(L, a, b_);
        var r = ref$1[0];
        var g = ref$1[1];
        var b = ref$1[2];
        return [
            r,
            g,
            b,
            args.length > 3 ? args[3] : 1
        ];
    };
    var lch2rgb_1 = lch2rgb$1;
    var unpack$a = utils.unpack;
    var lch2rgb = lch2rgb_1;
    var hcl2rgb = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var hcl = unpack$a(args, "hcl").reverse();
        return lch2rgb.apply(void 0, hcl);
    };
    var hcl2rgb_1 = hcl2rgb;
    var unpack$9 = utils.unpack;
    var type$d = utils.type;
    var chroma$a = chroma_1;
    var Color$t = Color_1;
    var input$6 = input$h;
    var rgb2lch = rgb2lch_1;
    Color$t.prototype.lch = function() {
        return rgb2lch(this._rgb);
    };
    Color$t.prototype.hcl = function() {
        return rgb2lch(this._rgb).reverse();
    };
    chroma$a.lch = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$t, [
            null
        ].concat(args, [
            "lch"
        ])));
    };
    chroma$a.hcl = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$t, [
            null
        ].concat(args, [
            "hcl"
        ])));
    };
    input$6.format.lch = lch2rgb_1;
    input$6.format.hcl = hcl2rgb_1;
    [
        "lch",
        "hcl"
    ].forEach(function(m) {
        return input$6.autodetect.push({
            p: 2,
            test: function() {
                var args = [], len = arguments.length;
                while(len--)args[len] = arguments[len];
                args = unpack$9(args, m);
                if (type$d(args) === "array" && args.length === 3) return m;
            }
        });
    });
    /**
    	X11 color names

    	http://www.w3.org/TR/css3-color/#svg-color
    */ var w3cx11$1 = {
        aliceblue: "#f0f8ff",
        antiquewhite: "#faebd7",
        aqua: "#00ffff",
        aquamarine: "#7fffd4",
        azure: "#f0ffff",
        beige: "#f5f5dc",
        bisque: "#ffe4c4",
        black: "#000000",
        blanchedalmond: "#ffebcd",
        blue: "#0000ff",
        blueviolet: "#8a2be2",
        brown: "#a52a2a",
        burlywood: "#deb887",
        cadetblue: "#5f9ea0",
        chartreuse: "#7fff00",
        chocolate: "#d2691e",
        coral: "#ff7f50",
        cornflower: "#6495ed",
        cornflowerblue: "#6495ed",
        cornsilk: "#fff8dc",
        crimson: "#dc143c",
        cyan: "#00ffff",
        darkblue: "#00008b",
        darkcyan: "#008b8b",
        darkgoldenrod: "#b8860b",
        darkgray: "#a9a9a9",
        darkgreen: "#006400",
        darkgrey: "#a9a9a9",
        darkkhaki: "#bdb76b",
        darkmagenta: "#8b008b",
        darkolivegreen: "#556b2f",
        darkorange: "#ff8c00",
        darkorchid: "#9932cc",
        darkred: "#8b0000",
        darksalmon: "#e9967a",
        darkseagreen: "#8fbc8f",
        darkslateblue: "#483d8b",
        darkslategray: "#2f4f4f",
        darkslategrey: "#2f4f4f",
        darkturquoise: "#00ced1",
        darkviolet: "#9400d3",
        deeppink: "#ff1493",
        deepskyblue: "#00bfff",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1e90ff",
        firebrick: "#b22222",
        floralwhite: "#fffaf0",
        forestgreen: "#228b22",
        fuchsia: "#ff00ff",
        gainsboro: "#dcdcdc",
        ghostwhite: "#f8f8ff",
        gold: "#ffd700",
        goldenrod: "#daa520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#adff2f",
        grey: "#808080",
        honeydew: "#f0fff0",
        hotpink: "#ff69b4",
        indianred: "#cd5c5c",
        indigo: "#4b0082",
        ivory: "#fffff0",
        khaki: "#f0e68c",
        laserlemon: "#ffff54",
        lavender: "#e6e6fa",
        lavenderblush: "#fff0f5",
        lawngreen: "#7cfc00",
        lemonchiffon: "#fffacd",
        lightblue: "#add8e6",
        lightcoral: "#f08080",
        lightcyan: "#e0ffff",
        lightgoldenrod: "#fafad2",
        lightgoldenrodyellow: "#fafad2",
        lightgray: "#d3d3d3",
        lightgreen: "#90ee90",
        lightgrey: "#d3d3d3",
        lightpink: "#ffb6c1",
        lightsalmon: "#ffa07a",
        lightseagreen: "#20b2aa",
        lightskyblue: "#87cefa",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#b0c4de",
        lightyellow: "#ffffe0",
        lime: "#00ff00",
        limegreen: "#32cd32",
        linen: "#faf0e6",
        magenta: "#ff00ff",
        maroon: "#800000",
        maroon2: "#7f0000",
        maroon3: "#b03060",
        mediumaquamarine: "#66cdaa",
        mediumblue: "#0000cd",
        mediumorchid: "#ba55d3",
        mediumpurple: "#9370db",
        mediumseagreen: "#3cb371",
        mediumslateblue: "#7b68ee",
        mediumspringgreen: "#00fa9a",
        mediumturquoise: "#48d1cc",
        mediumvioletred: "#c71585",
        midnightblue: "#191970",
        mintcream: "#f5fffa",
        mistyrose: "#ffe4e1",
        moccasin: "#ffe4b5",
        navajowhite: "#ffdead",
        navy: "#000080",
        oldlace: "#fdf5e6",
        olive: "#808000",
        olivedrab: "#6b8e23",
        orange: "#ffa500",
        orangered: "#ff4500",
        orchid: "#da70d6",
        palegoldenrod: "#eee8aa",
        palegreen: "#98fb98",
        paleturquoise: "#afeeee",
        palevioletred: "#db7093",
        papayawhip: "#ffefd5",
        peachpuff: "#ffdab9",
        peru: "#cd853f",
        pink: "#ffc0cb",
        plum: "#dda0dd",
        powderblue: "#b0e0e6",
        purple: "#800080",
        purple2: "#7f007f",
        purple3: "#a020f0",
        rebeccapurple: "#663399",
        red: "#ff0000",
        rosybrown: "#bc8f8f",
        royalblue: "#4169e1",
        saddlebrown: "#8b4513",
        salmon: "#fa8072",
        sandybrown: "#f4a460",
        seagreen: "#2e8b57",
        seashell: "#fff5ee",
        sienna: "#a0522d",
        silver: "#c0c0c0",
        skyblue: "#87ceeb",
        slateblue: "#6a5acd",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#fffafa",
        springgreen: "#00ff7f",
        steelblue: "#4682b4",
        tan: "#d2b48c",
        teal: "#008080",
        thistle: "#d8bfd8",
        tomato: "#ff6347",
        turquoise: "#40e0d0",
        violet: "#ee82ee",
        wheat: "#f5deb3",
        white: "#ffffff",
        whitesmoke: "#f5f5f5",
        yellow: "#ffff00",
        yellowgreen: "#9acd32"
    };
    var w3cx11_1 = w3cx11$1;
    var Color$s = Color_1;
    var input$5 = input$h;
    var type$c = utils.type;
    var w3cx11 = w3cx11_1;
    var hex2rgb = hex2rgb_1;
    var rgb2hex = rgb2hex_1;
    Color$s.prototype.name = function() {
        var hex = rgb2hex(this._rgb, "rgb");
        for(var i = 0, list = Object.keys(w3cx11); i < list.length; i += 1){
            var n = list[i];
            if (w3cx11[n] === hex) return n.toLowerCase();
        }
        return hex;
    };
    input$5.format.named = function(name) {
        name = name.toLowerCase();
        if (w3cx11[name]) return hex2rgb(w3cx11[name]);
        throw new Error("unknown color name: " + name);
    };
    input$5.autodetect.push({
        p: 5,
        test: function(h) {
            var rest = [], len = arguments.length - 1;
            while(len-- > 0)rest[len] = arguments[len + 1];
            if (!rest.length && type$c(h) === "string" && w3cx11[h.toLowerCase()]) return "named";
        }
    });
    var unpack$8 = utils.unpack;
    var rgb2num$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var ref = unpack$8(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        return (r << 16) + (g << 8) + b;
    };
    var rgb2num_1 = rgb2num$1;
    var type$b = utils.type;
    var num2rgb = function(num) {
        if (type$b(num) == "number" && num >= 0 && num <= 0xFFFFFF) {
            var r = num >> 16;
            var g = num >> 8 & 0xFF;
            var b = num & 0xFF;
            return [
                r,
                g,
                b,
                1
            ];
        }
        throw new Error("unknown num color: " + num);
    };
    var num2rgb_1 = num2rgb;
    var chroma$9 = chroma_1;
    var Color$r = Color_1;
    var input$4 = input$h;
    var type$a = utils.type;
    var rgb2num = rgb2num_1;
    Color$r.prototype.num = function() {
        return rgb2num(this._rgb);
    };
    chroma$9.num = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$r, [
            null
        ].concat(args, [
            "num"
        ])));
    };
    input$4.format.num = num2rgb_1;
    input$4.autodetect.push({
        p: 5,
        test: function() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            if (args.length === 1 && type$a(args[0]) === "number" && args[0] >= 0 && args[0] <= 0xFFFFFF) return "num";
        }
    });
    var chroma$8 = chroma_1;
    var Color$q = Color_1;
    var input$3 = input$h;
    var unpack$7 = utils.unpack;
    var type$9 = utils.type;
    var round$1 = Math.round;
    Color$q.prototype.rgb = function(rnd) {
        if (rnd === void 0) rnd = true;
        if (rnd === false) return this._rgb.slice(0, 3);
        return this._rgb.slice(0, 3).map(round$1);
    };
    Color$q.prototype.rgba = function(rnd) {
        if (rnd === void 0) rnd = true;
        return this._rgb.slice(0, 4).map(function(v, i) {
            return i < 3 ? rnd === false ? v : round$1(v) : v;
        });
    };
    chroma$8.rgb = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$q, [
            null
        ].concat(args, [
            "rgb"
        ])));
    };
    input$3.format.rgb = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var rgba = unpack$7(args, "rgba");
        if (rgba[3] === undefined) rgba[3] = 1;
        return rgba;
    };
    input$3.autodetect.push({
        p: 3,
        test: function() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            args = unpack$7(args, "rgba");
            if (type$9(args) === "array" && (args.length === 3 || args.length === 4 && type$9(args[3]) == "number" && args[3] >= 0 && args[3] <= 1)) return "rgb";
        }
    });
    /*
     * Based on implementation by Neil Bartlett
     * https://github.com/neilbartlett/color-temperature
     */ var log$1 = Math.log;
    var temperature2rgb$1 = function(kelvin) {
        var temp = kelvin / 100;
        var r, g, b;
        if (temp < 66) {
            r = 255;
            g = temp < 6 ? 0 : -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log$1(g);
            b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log$1(b);
        } else {
            r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log$1(r);
            g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log$1(g);
            b = 255;
        }
        return [
            r,
            g,
            b,
            1
        ];
    };
    var temperature2rgb_1 = temperature2rgb$1;
    /*
     * Based on implementation by Neil Bartlett
     * https://github.com/neilbartlett/color-temperature
     **/ var temperature2rgb = temperature2rgb_1;
    var unpack$6 = utils.unpack;
    var round = Math.round;
    var rgb2temperature$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var rgb = unpack$6(args, "rgb");
        var r = rgb[0], b = rgb[2];
        var minTemp = 1000;
        var maxTemp = 40000;
        var eps = 0.4;
        var temp;
        while(maxTemp - minTemp > eps){
            temp = (maxTemp + minTemp) * 0.5;
            var rgb$1 = temperature2rgb(temp);
            if (rgb$1[2] / rgb$1[0] >= b / r) maxTemp = temp;
            else minTemp = temp;
        }
        return round(temp);
    };
    var rgb2temperature_1 = rgb2temperature$1;
    var chroma$7 = chroma_1;
    var Color$p = Color_1;
    var input$2 = input$h;
    var rgb2temperature = rgb2temperature_1;
    Color$p.prototype.temp = Color$p.prototype.kelvin = Color$p.prototype.temperature = function() {
        return rgb2temperature(this._rgb);
    };
    chroma$7.temp = chroma$7.kelvin = chroma$7.temperature = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$p, [
            null
        ].concat(args, [
            "temp"
        ])));
    };
    input$2.format.temp = input$2.format.kelvin = input$2.format.temperature = temperature2rgb_1;
    var unpack$5 = utils.unpack;
    var cbrt = Math.cbrt;
    var pow$8 = Math.pow;
    var sign$1 = Math.sign;
    var rgb2oklab$2 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        // OKLab color space implementation taken from
        // https://bottosson.github.io/posts/oklab/
        var ref = unpack$5(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = [
            rgb2lrgb(r / 255),
            rgb2lrgb(g / 255),
            rgb2lrgb(b / 255)
        ];
        var lr = ref$1[0];
        var lg = ref$1[1];
        var lb = ref$1[2];
        var l = cbrt(0.4122214708 * lr + 0.5363325363 * lg + 0.0514459929 * lb);
        var m = cbrt(0.2119034982 * lr + 0.6806995451 * lg + 0.1073969566 * lb);
        var s = cbrt(0.0883024619 * lr + 0.2817188376 * lg + 0.6299787005 * lb);
        return [
            0.2104542553 * l + 0.793617785 * m - 0.0040720468 * s,
            1.9779984951 * l - 2.428592205 * m + 0.4505937099 * s,
            0.0259040371 * l + 0.7827717662 * m - 0.808675766 * s
        ];
    };
    var rgb2oklab_1 = rgb2oklab$2;
    function rgb2lrgb(c) {
        var abs = Math.abs(c);
        if (abs < 0.04045) return c / 12.92;
        return (sign$1(c) || 1) * pow$8((abs + 0.055) / 1.055, 2.4);
    }
    var unpack$4 = utils.unpack;
    var pow$7 = Math.pow;
    var sign = Math.sign;
    /*
     * L* [0..100]
     * a [-100..100]
     * b [-100..100]
     */ var oklab2rgb$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        args = unpack$4(args, "lab");
        var L = args[0];
        var a = args[1];
        var b = args[2];
        var l = pow$7(L + 0.3963377774 * a + 0.2158037573 * b, 3);
        var m = pow$7(L - 0.1055613458 * a - 0.0638541728 * b, 3);
        var s = pow$7(L - 0.0894841775 * a - 1.291485548 * b, 3);
        return [
            255 * lrgb2rgb(4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s),
            255 * lrgb2rgb(-1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s),
            255 * lrgb2rgb(-0.0041960863 * l - 0.7034186147 * m + 1.707614701 * s),
            args.length > 3 ? args[3] : 1
        ];
    };
    var oklab2rgb_1 = oklab2rgb$1;
    function lrgb2rgb(c) {
        var abs = Math.abs(c);
        if (abs > 0.0031308) return (sign(c) || 1) * (1.055 * pow$7(abs, 1 / 2.4) - 0.055);
        return c * 12.92;
    }
    var unpack$3 = utils.unpack;
    var type$8 = utils.type;
    var chroma$6 = chroma_1;
    var Color$o = Color_1;
    var input$1 = input$h;
    var rgb2oklab$1 = rgb2oklab_1;
    Color$o.prototype.oklab = function() {
        return rgb2oklab$1(this._rgb);
    };
    chroma$6.oklab = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$o, [
            null
        ].concat(args, [
            "oklab"
        ])));
    };
    input$1.format.oklab = oklab2rgb_1;
    input$1.autodetect.push({
        p: 3,
        test: function() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            args = unpack$3(args, "oklab");
            if (type$8(args) === "array" && args.length === 3) return "oklab";
        }
    });
    var unpack$2 = utils.unpack;
    var rgb2oklab = rgb2oklab_1;
    var lab2lch = lab2lch_1;
    var rgb2oklch$1 = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        var ref = unpack$2(args, "rgb");
        var r = ref[0];
        var g = ref[1];
        var b = ref[2];
        var ref$1 = rgb2oklab(r, g, b);
        var l = ref$1[0];
        var a = ref$1[1];
        var b_ = ref$1[2];
        return lab2lch(l, a, b_);
    };
    var rgb2oklch_1 = rgb2oklch$1;
    var unpack$1 = utils.unpack;
    var lch2lab = lch2lab_1;
    var oklab2rgb = oklab2rgb_1;
    var oklch2rgb = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        args = unpack$1(args, "lch");
        var l = args[0];
        var c = args[1];
        var h = args[2];
        var ref = lch2lab(l, c, h);
        var L = ref[0];
        var a = ref[1];
        var b_ = ref[2];
        var ref$1 = oklab2rgb(L, a, b_);
        var r = ref$1[0];
        var g = ref$1[1];
        var b = ref$1[2];
        return [
            r,
            g,
            b,
            args.length > 3 ? args[3] : 1
        ];
    };
    var oklch2rgb_1 = oklch2rgb;
    var unpack = utils.unpack;
    var type$7 = utils.type;
    var chroma$5 = chroma_1;
    var Color$n = Color_1;
    var input = input$h;
    var rgb2oklch = rgb2oklch_1;
    Color$n.prototype.oklch = function() {
        return rgb2oklch(this._rgb);
    };
    chroma$5.oklch = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$n, [
            null
        ].concat(args, [
            "oklch"
        ])));
    };
    input.format.oklch = oklch2rgb_1;
    input.autodetect.push({
        p: 3,
        test: function() {
            var args = [], len = arguments.length;
            while(len--)args[len] = arguments[len];
            args = unpack(args, "oklch");
            if (type$7(args) === "array" && args.length === 3) return "oklch";
        }
    });
    var Color$m = Color_1;
    var type$6 = utils.type;
    Color$m.prototype.alpha = function(a, mutate) {
        if (mutate === void 0) mutate = false;
        if (a !== undefined && type$6(a) === "number") {
            if (mutate) {
                this._rgb[3] = a;
                return this;
            }
            return new Color$m([
                this._rgb[0],
                this._rgb[1],
                this._rgb[2],
                a
            ], "rgb");
        }
        return this._rgb[3];
    };
    var Color$l = Color_1;
    Color$l.prototype.clipped = function() {
        return this._rgb._clipped || false;
    };
    var Color$k = Color_1;
    var LAB_CONSTANTS$1 = labConstants;
    Color$k.prototype.darken = function(amount) {
        if (amount === void 0) amount = 1;
        var me = this;
        var lab = me.lab();
        lab[0] -= LAB_CONSTANTS$1.Kn * amount;
        return new Color$k(lab, "lab").alpha(me.alpha(), true);
    };
    Color$k.prototype.brighten = function(amount) {
        if (amount === void 0) amount = 1;
        return this.darken(-amount);
    };
    Color$k.prototype.darker = Color$k.prototype.darken;
    Color$k.prototype.brighter = Color$k.prototype.brighten;
    var Color$j = Color_1;
    Color$j.prototype.get = function(mc) {
        var ref = mc.split(".");
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
            var i = mode.indexOf(channel) - (mode.substr(0, 2) === "ok" ? 2 : 0);
            if (i > -1) return src[i];
            throw new Error("unknown channel " + channel + " in mode " + mode);
        } else return src;
    };
    var Color$i = Color_1;
    var type$5 = utils.type;
    var pow$6 = Math.pow;
    var EPS = 1e-7;
    var MAX_ITER = 20;
    Color$i.prototype.luminance = function(lum) {
        if (lum !== undefined && type$5(lum) === "number") {
            if (lum === 0) // return pure black
            return new Color$i([
                0,
                0,
                0,
                this._rgb[3]
            ], "rgb");
            if (lum === 1) // return pure white
            return new Color$i([
                255,
                255,
                255,
                this._rgb[3]
            ], "rgb");
            // compute new color using...
            var cur_lum = this.luminance();
            var mode = "rgb";
            var max_iter = MAX_ITER;
            var test = function(low, high) {
                var mid = low.interpolate(high, 0.5, mode);
                var lm = mid.luminance();
                if (Math.abs(lum - lm) < EPS || !max_iter--) // close enough
                return mid;
                return lm > lum ? test(low, mid) : test(mid, high);
            };
            var rgb = (cur_lum > lum ? test(new Color$i([
                0,
                0,
                0
            ]), this) : test(this, new Color$i([
                255,
                255,
                255
            ]))).rgb();
            return new Color$i(rgb.concat([
                this._rgb[3]
            ]));
        }
        return rgb2luminance.apply(void 0, this._rgb.slice(0, 3));
    };
    var rgb2luminance = function(r, g, b) {
        // relative luminance
        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        r = luminance_x(r);
        g = luminance_x(g);
        b = luminance_x(b);
        return 0.2126 * r + 0.7152 * g + 0.0722 * b;
    };
    var luminance_x = function(x) {
        x /= 255;
        return x <= 0.03928 ? x / 12.92 : pow$6((x + 0.055) / 1.055, 2.4);
    };
    var interpolator$1 = {};
    var Color$h = Color_1;
    var type$4 = utils.type;
    var interpolator = interpolator$1;
    var mix$1 = function(col1, col2, f) {
        if (f === void 0) f = 0.5;
        var rest = [], len = arguments.length - 3;
        while(len-- > 0)rest[len] = arguments[len + 3];
        var mode = rest[0] || "lrgb";
        if (!interpolator[mode] && !rest.length) // fall back to the first supported mode
        mode = Object.keys(interpolator)[0];
        if (!interpolator[mode]) throw new Error("interpolation mode " + mode + " is not defined");
        if (type$4(col1) !== "object") col1 = new Color$h(col1);
        if (type$4(col2) !== "object") col2 = new Color$h(col2);
        return interpolator[mode](col1, col2, f).alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
    };
    var Color$g = Color_1;
    var mix = mix$1;
    Color$g.prototype.mix = Color$g.prototype.interpolate = function(col2, f) {
        if (f === void 0) f = 0.5;
        var rest = [], len = arguments.length - 2;
        while(len-- > 0)rest[len] = arguments[len + 2];
        return mix.apply(void 0, [
            this,
            col2,
            f
        ].concat(rest));
    };
    var Color$f = Color_1;
    Color$f.prototype.premultiply = function(mutate) {
        if (mutate === void 0) mutate = false;
        var rgb = this._rgb;
        var a = rgb[3];
        if (mutate) {
            this._rgb = [
                rgb[0] * a,
                rgb[1] * a,
                rgb[2] * a,
                a
            ];
            return this;
        } else return new Color$f([
            rgb[0] * a,
            rgb[1] * a,
            rgb[2] * a,
            a
        ], "rgb");
    };
    var Color$e = Color_1;
    var LAB_CONSTANTS = labConstants;
    Color$e.prototype.saturate = function(amount) {
        if (amount === void 0) amount = 1;
        var me = this;
        var lch = me.lch();
        lch[1] += LAB_CONSTANTS.Kn * amount;
        if (lch[1] < 0) lch[1] = 0;
        return new Color$e(lch, "lch").alpha(me.alpha(), true);
    };
    Color$e.prototype.desaturate = function(amount) {
        if (amount === void 0) amount = 1;
        return this.saturate(-amount);
    };
    var Color$d = Color_1;
    var type$3 = utils.type;
    Color$d.prototype.set = function(mc, value, mutate) {
        if (mutate === void 0) mutate = false;
        var ref = mc.split(".");
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
            var i = mode.indexOf(channel) - (mode.substr(0, 2) === "ok" ? 2 : 0);
            if (i > -1) {
                if (type$3(value) == "string") switch(value.charAt(0)){
                    case "+":
                        src[i] += +value;
                        break;
                    case "-":
                        src[i] += +value;
                        break;
                    case "*":
                        src[i] *= +value.substr(1);
                        break;
                    case "/":
                        src[i] /= +value.substr(1);
                        break;
                    default:
                        src[i] = +value;
                }
                else if (type$3(value) === "number") src[i] = value;
                else throw new Error("unsupported value for Color.set");
                var out = new Color$d(src, mode);
                if (mutate) {
                    this._rgb = out._rgb;
                    return this;
                }
                return out;
            }
            throw new Error("unknown channel " + channel + " in mode " + mode);
        } else return src;
    };
    var Color$c = Color_1;
    var rgb = function(col1, col2, f) {
        var xyz0 = col1._rgb;
        var xyz1 = col2._rgb;
        return new Color$c(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), "rgb");
    };
    // register interpolator
    interpolator$1.rgb = rgb;
    var Color$b = Color_1;
    var sqrt$2 = Math.sqrt;
    var pow$5 = Math.pow;
    var lrgb = function(col1, col2, f) {
        var ref = col1._rgb;
        var x1 = ref[0];
        var y1 = ref[1];
        var z1 = ref[2];
        var ref$1 = col2._rgb;
        var x2 = ref$1[0];
        var y2 = ref$1[1];
        var z2 = ref$1[2];
        return new Color$b(sqrt$2(pow$5(x1, 2) * (1 - f) + pow$5(x2, 2) * f), sqrt$2(pow$5(y1, 2) * (1 - f) + pow$5(y2, 2) * f), sqrt$2(pow$5(z1, 2) * (1 - f) + pow$5(z2, 2) * f), "rgb");
    };
    // register interpolator
    interpolator$1.lrgb = lrgb;
    var Color$a = Color_1;
    var lab = function(col1, col2, f) {
        var xyz0 = col1.lab();
        var xyz1 = col2.lab();
        return new Color$a(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), "lab");
    };
    // register interpolator
    interpolator$1.lab = lab;
    var Color$9 = Color_1;
    var _hsx = function(col1, col2, f, m) {
        var assign, assign$1;
        var xyz0, xyz1;
        if (m === "hsl") {
            xyz0 = col1.hsl();
            xyz1 = col2.hsl();
        } else if (m === "hsv") {
            xyz0 = col1.hsv();
            xyz1 = col2.hsv();
        } else if (m === "hcg") {
            xyz0 = col1.hcg();
            xyz1 = col2.hcg();
        } else if (m === "hsi") {
            xyz0 = col1.hsi();
            xyz1 = col2.hsi();
        } else if (m === "lch" || m === "hcl") {
            m = "hcl";
            xyz0 = col1.hcl();
            xyz1 = col2.hcl();
        } else if (m === "oklch") {
            xyz0 = col1.oklch().reverse();
            xyz1 = col2.oklch().reverse();
        }
        var hue0, hue1, sat0, sat1, lbv0, lbv1;
        if (m.substr(0, 1) === "h" || m === "oklch") {
            assign = xyz0, hue0 = assign[0], sat0 = assign[1], lbv0 = assign[2];
            assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2];
        }
        var sat, hue, lbv, dh;
        if (!isNaN(hue0) && !isNaN(hue1)) {
            // both colors have hue
            if (hue1 > hue0 && hue1 - hue0 > 180) dh = hue1 - (hue0 + 360);
            else if (hue1 < hue0 && hue0 - hue1 > 180) dh = hue1 + 360 - hue0;
            else dh = hue1 - hue0;
            hue = hue0 + f * dh;
        } else if (!isNaN(hue0)) {
            hue = hue0;
            if ((lbv1 == 1 || lbv1 == 0) && m != "hsv") sat = sat0;
        } else if (!isNaN(hue1)) {
            hue = hue1;
            if ((lbv0 == 1 || lbv0 == 0) && m != "hsv") sat = sat1;
        } else hue = Number.NaN;
        if (sat === undefined) sat = sat0 + f * (sat1 - sat0);
        lbv = lbv0 + f * (lbv1 - lbv0);
        return m === "oklch" ? new Color$9([
            lbv,
            sat,
            hue
        ], m) : new Color$9([
            hue,
            sat,
            lbv
        ], m);
    };
    var interpolate_hsx$5 = _hsx;
    var lch = function(col1, col2, f) {
        return interpolate_hsx$5(col1, col2, f, "lch");
    };
    // register interpolator
    interpolator$1.lch = lch;
    interpolator$1.hcl = lch;
    var Color$8 = Color_1;
    var num = function(col1, col2, f) {
        var c1 = col1.num();
        var c2 = col2.num();
        return new Color$8(c1 + f * (c2 - c1), "num");
    };
    // register interpolator
    interpolator$1.num = num;
    var interpolate_hsx$4 = _hsx;
    var hcg = function(col1, col2, f) {
        return interpolate_hsx$4(col1, col2, f, "hcg");
    };
    // register interpolator
    interpolator$1.hcg = hcg;
    var interpolate_hsx$3 = _hsx;
    var hsi = function(col1, col2, f) {
        return interpolate_hsx$3(col1, col2, f, "hsi");
    };
    // register interpolator
    interpolator$1.hsi = hsi;
    var interpolate_hsx$2 = _hsx;
    var hsl = function(col1, col2, f) {
        return interpolate_hsx$2(col1, col2, f, "hsl");
    };
    // register interpolator
    interpolator$1.hsl = hsl;
    var interpolate_hsx$1 = _hsx;
    var hsv = function(col1, col2, f) {
        return interpolate_hsx$1(col1, col2, f, "hsv");
    };
    // register interpolator
    interpolator$1.hsv = hsv;
    var Color$7 = Color_1;
    var oklab = function(col1, col2, f) {
        var xyz0 = col1.oklab();
        var xyz1 = col2.oklab();
        return new Color$7(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), "oklab");
    };
    // register interpolator
    interpolator$1.oklab = oklab;
    var interpolate_hsx = _hsx;
    var oklch = function(col1, col2, f) {
        return interpolate_hsx(col1, col2, f, "oklch");
    };
    // register interpolator
    interpolator$1.oklch = oklch;
    var Color$6 = Color_1;
    var clip_rgb$1 = utils.clip_rgb;
    var pow$4 = Math.pow;
    var sqrt$1 = Math.sqrt;
    var PI$1 = Math.PI;
    var cos$2 = Math.cos;
    var sin$2 = Math.sin;
    var atan2$1 = Math.atan2;
    var average = function(colors, mode, weights) {
        if (mode === void 0) mode = "lrgb";
        if (weights === void 0) weights = null;
        var l = colors.length;
        if (!weights) weights = Array.from(new Array(l)).map(function() {
            return 1;
        });
        // normalize weights
        var k = l / weights.reduce(function(a, b) {
            return a + b;
        });
        weights.forEach(function(w, i) {
            weights[i] *= k;
        });
        // convert colors to Color objects
        colors = colors.map(function(c) {
            return new Color$6(c);
        });
        if (mode === "lrgb") return _average_lrgb(colors, weights);
        var first = colors.shift();
        var xyz = first.get(mode);
        var cnt = [];
        var dx = 0;
        var dy = 0;
        // initial color
        for(var i = 0; i < xyz.length; i++){
            xyz[i] = (xyz[i] || 0) * weights[0];
            cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);
            if (mode.charAt(i) === "h" && !isNaN(xyz[i])) {
                var A = xyz[i] / 180 * PI$1;
                dx += cos$2(A) * weights[0];
                dy += sin$2(A) * weights[0];
            }
        }
        var alpha = first.alpha() * weights[0];
        colors.forEach(function(c, ci) {
            var xyz2 = c.get(mode);
            alpha += c.alpha() * weights[ci + 1];
            for(var i = 0; i < xyz.length; i++)if (!isNaN(xyz2[i])) {
                cnt[i] += weights[ci + 1];
                if (mode.charAt(i) === "h") {
                    var A = xyz2[i] / 180 * PI$1;
                    dx += cos$2(A) * weights[ci + 1];
                    dy += sin$2(A) * weights[ci + 1];
                } else xyz[i] += xyz2[i] * weights[ci + 1];
            }
        });
        for(var i$1 = 0; i$1 < xyz.length; i$1++)if (mode.charAt(i$1) === "h") {
            var A$1 = atan2$1(dy / cnt[i$1], dx / cnt[i$1]) / PI$1 * 180;
            while(A$1 < 0)A$1 += 360;
            while(A$1 >= 360)A$1 -= 360;
            xyz[i$1] = A$1;
        } else xyz[i$1] = xyz[i$1] / cnt[i$1];
        alpha /= l;
        return new Color$6(xyz, mode).alpha(alpha > 0.99999 ? 1 : alpha, true);
    };
    var _average_lrgb = function(colors, weights) {
        var l = colors.length;
        var xyz = [
            0,
            0,
            0,
            0
        ];
        for(var i = 0; i < colors.length; i++){
            var col = colors[i];
            var f = weights[i] / l;
            var rgb = col._rgb;
            xyz[0] += pow$4(rgb[0], 2) * f;
            xyz[1] += pow$4(rgb[1], 2) * f;
            xyz[2] += pow$4(rgb[2], 2) * f;
            xyz[3] += rgb[3] * f;
        }
        xyz[0] = sqrt$1(xyz[0]);
        xyz[1] = sqrt$1(xyz[1]);
        xyz[2] = sqrt$1(xyz[2]);
        if (xyz[3] > 0.9999999) xyz[3] = 1;
        return new Color$6(clip_rgb$1(xyz));
    };
    // minimal multi-purpose interface
    // @requires utils color analyze
    var chroma$4 = chroma_1;
    var type$2 = utils.type;
    var pow$3 = Math.pow;
    var scale$2 = function(colors) {
        // constructor
        var _mode = "rgb";
        var _nacol = chroma$4("#ccc");
        var _spread = 0;
        // const _fixed = false;
        var _domain = [
            0,
            1
        ];
        var _pos = [];
        var _padding = [
            0,
            0
        ];
        var _classes = false;
        var _colors = [];
        var _out = false;
        var _min = 0;
        var _max = 1;
        var _correctLightness = false;
        var _colorCache = {};
        var _useCache = true;
        var _gamma = 1;
        // private methods
        var setColors = function(colors) {
            colors = colors || [
                "#fff",
                "#000"
            ];
            if (colors && type$2(colors) === "string" && chroma$4.brewer && chroma$4.brewer[colors.toLowerCase()]) colors = chroma$4.brewer[colors.toLowerCase()];
            if (type$2(colors) === "array") {
                // handle single color
                if (colors.length === 1) colors = [
                    colors[0],
                    colors[0]
                ];
                // make a copy of the colors
                colors = colors.slice(0);
                // convert to chroma classes
                for(var c = 0; c < colors.length; c++)colors[c] = chroma$4(colors[c]);
                // auto-fill color position
                _pos.length = 0;
                for(var c$1 = 0; c$1 < colors.length; c$1++)_pos.push(c$1 / (colors.length - 1));
            }
            resetCache();
            return _colors = colors;
        };
        var getClass = function(value) {
            if (_classes != null) {
                var n = _classes.length - 1;
                var i = 0;
                while(i < n && value >= _classes[i])i++;
                return i - 1;
            }
            return 0;
        };
        var tMapLightness = function(t) {
            return t;
        };
        var tMapDomain = function(t) {
            return t;
        };
        // const classifyValue = function(value) {
        //     let val = value;
        //     if (_classes.length > 2) {
        //         const n = _classes.length-1;
        //         const i = getClass(value);
        //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class
        //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class
        //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));
        //     }
        //     return val;
        // };
        var getColor = function(val, bypassMap) {
            var col, t;
            if (bypassMap == null) bypassMap = false;
            if (isNaN(val) || val === null) return _nacol;
            if (!bypassMap) {
                if (_classes && _classes.length > 2) {
                    // find the class
                    var c = getClass(val);
                    t = c / (_classes.length - 2);
                } else if (_max !== _min) // just interpolate between min/max
                t = (val - _min) / (_max - _min);
                else t = 1;
            } else t = val;
            // domain map
            t = tMapDomain(t);
            if (!bypassMap) t = tMapLightness(t); // lightness correction
            if (_gamma !== 1) t = pow$3(t, _gamma);
            t = _padding[0] + t * (1 - _padding[0] - _padding[1]);
            t = Math.min(1, Math.max(0, t));
            var k = Math.floor(t * 10000);
            if (_useCache && _colorCache[k]) col = _colorCache[k];
            else {
                if (type$2(_colors) === "array") //for i in [0.._pos.length-1]
                for(var i = 0; i < _pos.length; i++){
                    var p = _pos[i];
                    if (t <= p) {
                        col = _colors[i];
                        break;
                    }
                    if (t >= p && i === _pos.length - 1) {
                        col = _colors[i];
                        break;
                    }
                    if (t > p && t < _pos[i + 1]) {
                        t = (t - p) / (_pos[i + 1] - p);
                        col = chroma$4.interpolate(_colors[i], _colors[i + 1], t, _mode);
                        break;
                    }
                }
                else if (type$2(_colors) === "function") col = _colors(t);
                if (_useCache) _colorCache[k] = col;
            }
            return col;
        };
        var resetCache = function() {
            return _colorCache = {};
        };
        setColors(colors);
        // public interface
        var f = function(v) {
            var c = chroma$4(getColor(v));
            if (_out && c[_out]) return c[_out]();
            else return c;
        };
        f.classes = function(classes) {
            if (classes != null) {
                if (type$2(classes) === "array") {
                    _classes = classes;
                    _domain = [
                        classes[0],
                        classes[classes.length - 1]
                    ];
                } else {
                    var d = chroma$4.analyze(_domain);
                    if (classes === 0) _classes = [
                        d.min,
                        d.max
                    ];
                    else _classes = chroma$4.limits(d, "e", classes);
                }
                return f;
            }
            return _classes;
        };
        f.domain = function(domain) {
            if (!arguments.length) return _domain;
            _min = domain[0];
            _max = domain[domain.length - 1];
            _pos = [];
            var k = _colors.length;
            if (domain.length === k && _min !== _max) // update positions
            for(var i = 0, list = Array.from(domain); i < list.length; i += 1){
                var d = list[i];
                _pos.push((d - _min) / (_max - _min));
            }
            else {
                for(var c = 0; c < k; c++)_pos.push(c / (k - 1));
                if (domain.length > 2) {
                    // set domain map
                    var tOut = domain.map(function(d, i) {
                        return i / (domain.length - 1);
                    });
                    var tBreaks = domain.map(function(d) {
                        return (d - _min) / (_max - _min);
                    });
                    if (!tBreaks.every(function(val, i) {
                        return tOut[i] === val;
                    })) tMapDomain = function(t) {
                        if (t <= 0 || t >= 1) return t;
                        var i = 0;
                        while(t >= tBreaks[i + 1])i++;
                        var f = (t - tBreaks[i]) / (tBreaks[i + 1] - tBreaks[i]);
                        var out = tOut[i] + f * (tOut[i + 1] - tOut[i]);
                        return out;
                    };
                }
            }
            _domain = [
                _min,
                _max
            ];
            return f;
        };
        f.mode = function(_m) {
            if (!arguments.length) return _mode;
            _mode = _m;
            resetCache();
            return f;
        };
        f.range = function(colors, _pos) {
            setColors(colors);
            return f;
        };
        f.out = function(_o) {
            _out = _o;
            return f;
        };
        f.spread = function(val) {
            if (!arguments.length) return _spread;
            _spread = val;
            return f;
        };
        f.correctLightness = function(v) {
            if (v == null) v = true;
            _correctLightness = v;
            resetCache();
            if (_correctLightness) tMapLightness = function(t) {
                var L0 = getColor(0, true).lab()[0];
                var L1 = getColor(1, true).lab()[0];
                var pol = L0 > L1;
                var L_actual = getColor(t, true).lab()[0];
                var L_ideal = L0 + (L1 - L0) * t;
                var L_diff = L_actual - L_ideal;
                var t0 = 0;
                var t1 = 1;
                var max_iter = 20;
                while(Math.abs(L_diff) > 1e-2 && max_iter-- > 0)(function() {
                    if (pol) L_diff *= -1;
                    if (L_diff < 0) {
                        t0 = t;
                        t += (t1 - t) * 0.5;
                    } else {
                        t1 = t;
                        t += (t0 - t) * 0.5;
                    }
                    L_actual = getColor(t, true).lab()[0];
                    return L_diff = L_actual - L_ideal;
                })();
                return t;
            };
            else tMapLightness = function(t) {
                return t;
            };
            return f;
        };
        f.padding = function(p) {
            if (p != null) {
                if (type$2(p) === "number") p = [
                    p,
                    p
                ];
                _padding = p;
                return f;
            } else return _padding;
        };
        f.colors = function(numColors, out) {
            // If no arguments are given, return the original colors that were provided
            if (arguments.length < 2) out = "hex";
            var result = [];
            if (arguments.length === 0) result = _colors.slice(0);
            else if (numColors === 1) result = [
                f(0.5)
            ];
            else if (numColors > 1) {
                var dm = _domain[0];
                var dd = _domain[1] - dm;
                result = __range__(0, numColors, false).map(function(i) {
                    return f(dm + i / (numColors - 1) * dd);
                });
            } else {
                colors = [];
                var samples = [];
                if (_classes && _classes.length > 2) for(var i = 1, end = _classes.length, asc = 1 <= end; asc ? i < end : i > end; asc ? i++ : i--)samples.push((_classes[i - 1] + _classes[i]) * 0.5);
                else samples = _domain;
                result = samples.map(function(v) {
                    return f(v);
                });
            }
            if (chroma$4[out]) result = result.map(function(c) {
                return c[out]();
            });
            return result;
        };
        f.cache = function(c) {
            if (c != null) {
                _useCache = c;
                return f;
            } else return _useCache;
        };
        f.gamma = function(g) {
            if (g != null) {
                _gamma = g;
                return f;
            } else return _gamma;
        };
        f.nodata = function(d) {
            if (d != null) {
                _nacol = chroma$4(d);
                return f;
            } else return _nacol;
        };
        return f;
    };
    function __range__(left, right, inclusive) {
        var range = [];
        var ascending = left < right;
        var end = !inclusive ? right : ascending ? right + 1 : right - 1;
        for(var i = left; ascending ? i < end : i > end; ascending ? i++ : i--)range.push(i);
        return range;
    }
    //
    // interpolates between a set of colors uzing a bezier spline
    //
    // @requires utils lab
    var Color$5 = Color_1;
    var scale$1 = scale$2;
    // nth row of the pascal triangle
    var binom_row = function(n) {
        var row = [
            1,
            1
        ];
        for(var i = 1; i < n; i++){
            var newrow = [
                1
            ];
            for(var j = 1; j <= row.length; j++)newrow[j] = (row[j] || 0) + row[j - 1];
            row = newrow;
        }
        return row;
    };
    var bezier = function(colors) {
        var assign, assign$1, assign$2;
        var I, lab0, lab1, lab2;
        colors = colors.map(function(c) {
            return new Color$5(c);
        });
        if (colors.length === 2) {
            // linear interpolation
            assign = colors.map(function(c) {
                return c.lab();
            }), lab0 = assign[0], lab1 = assign[1];
            I = function(t) {
                var lab = [
                    0,
                    1,
                    2
                ].map(function(i) {
                    return lab0[i] + t * (lab1[i] - lab0[i]);
                });
                return new Color$5(lab, "lab");
            };
        } else if (colors.length === 3) {
            // quadratic bezier interpolation
            assign$1 = colors.map(function(c) {
                return c.lab();
            }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2];
            I = function(t) {
                var lab = [
                    0,
                    1,
                    2
                ].map(function(i) {
                    return (1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i];
                });
                return new Color$5(lab, "lab");
            };
        } else if (colors.length === 4) {
            // cubic bezier interpolation
            var lab3;
            assign$2 = colors.map(function(c) {
                return c.lab();
            }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3];
            I = function(t) {
                var lab = [
                    0,
                    1,
                    2
                ].map(function(i) {
                    return (1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i];
                });
                return new Color$5(lab, "lab");
            };
        } else if (colors.length >= 5) {
            // general case (degree n bezier)
            var labs, row, n;
            labs = colors.map(function(c) {
                return c.lab();
            });
            n = colors.length - 1;
            row = binom_row(n);
            I = function(t) {
                var u = 1 - t;
                var lab = [
                    0,
                    1,
                    2
                ].map(function(i) {
                    return labs.reduce(function(sum, el, j) {
                        return sum + row[j] * Math.pow(u, n - j) * Math.pow(t, j) * el[i];
                    }, 0);
                });
                return new Color$5(lab, "lab");
            };
        } else throw new RangeError("No point in running bezier with only one color.");
        return I;
    };
    var bezier_1 = function(colors) {
        var f = bezier(colors);
        f.scale = function() {
            return scale$1(f);
        };
        return f;
    };
    /*
     * interpolates between a set of colors uzing a bezier spline
     * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/
     */ var chroma$3 = chroma_1;
    var blend = function(bottom, top, mode) {
        if (!blend[mode]) throw new Error("unknown blend mode " + mode);
        return blend[mode](bottom, top);
    };
    var blend_f = function(f) {
        return function(bottom, top) {
            var c0 = chroma$3(top).rgb();
            var c1 = chroma$3(bottom).rgb();
            return chroma$3.rgb(f(c0, c1));
        };
    };
    var each = function(f) {
        return function(c0, c1) {
            var out = [];
            out[0] = f(c0[0], c1[0]);
            out[1] = f(c0[1], c1[1]);
            out[2] = f(c0[2], c1[2]);
            return out;
        };
    };
    var normal = function(a) {
        return a;
    };
    var multiply = function(a, b) {
        return a * b / 255;
    };
    var darken = function(a, b) {
        return a > b ? b : a;
    };
    var lighten = function(a, b) {
        return a > b ? a : b;
    };
    var screen = function(a, b) {
        return 255 * (1 - (1 - a / 255) * (1 - b / 255));
    };
    var overlay = function(a, b) {
        return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
    };
    var burn = function(a, b) {
        return 255 * (1 - (1 - b / 255) / (a / 255));
    };
    var dodge = function(a, b) {
        if (a === 255) return 255;
        a = 255 * (b / 255) / (1 - a / 255);
        return a > 255 ? 255 : a;
    };
    // # add = (a,b) ->
    // #     if (a + b > 255) then 255 else a + b
    blend.normal = blend_f(each(normal));
    blend.multiply = blend_f(each(multiply));
    blend.screen = blend_f(each(screen));
    blend.overlay = blend_f(each(overlay));
    blend.darken = blend_f(each(darken));
    blend.lighten = blend_f(each(lighten));
    blend.dodge = blend_f(each(dodge));
    blend.burn = blend_f(each(burn));
    // blend.add = blend_f(each(add));
    var blend_1 = blend;
    // cubehelix interpolation
    // based on D.A. Green "A colour scheme for the display of astronomical intensity images"
    // http://astron-soc.in/bulletin/11June/289392011.pdf
    var type$1 = utils.type;
    var clip_rgb = utils.clip_rgb;
    var TWOPI = utils.TWOPI;
    var pow$2 = Math.pow;
    var sin$1 = Math.sin;
    var cos$1 = Math.cos;
    var chroma$2 = chroma_1;
    var cubehelix = function(start, rotations, hue, gamma, lightness) {
        if (start === void 0) start = 300;
        if (rotations === void 0) rotations = -1.5;
        if (hue === void 0) hue = 1;
        if (gamma === void 0) gamma = 1;
        if (lightness === void 0) lightness = [
            0,
            1
        ];
        var dh = 0, dl;
        if (type$1(lightness) === "array") dl = lightness[1] - lightness[0];
        else {
            dl = 0;
            lightness = [
                lightness,
                lightness
            ];
        }
        var f = function(fract) {
            var a = TWOPI * ((start + 120) / 360 + rotations * fract);
            var l = pow$2(lightness[0] + dl * fract, gamma);
            var h = dh !== 0 ? hue[0] + fract * dh : hue;
            var amp = h * l * (1 - l) / 2;
            var cos_a = cos$1(a);
            var sin_a = sin$1(a);
            var r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
            var g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
            var b = l + amp * (1.97294 * cos_a);
            return chroma$2(clip_rgb([
                r * 255,
                g * 255,
                b * 255,
                1
            ]));
        };
        f.start = function(s) {
            if (s == null) return start;
            start = s;
            return f;
        };
        f.rotations = function(r) {
            if (r == null) return rotations;
            rotations = r;
            return f;
        };
        f.gamma = function(g) {
            if (g == null) return gamma;
            gamma = g;
            return f;
        };
        f.hue = function(h) {
            if (h == null) return hue;
            hue = h;
            if (type$1(hue) === "array") {
                dh = hue[1] - hue[0];
                if (dh === 0) hue = hue[1];
            } else dh = 0;
            return f;
        };
        f.lightness = function(h) {
            if (h == null) return lightness;
            if (type$1(h) === "array") {
                lightness = h;
                dl = h[1] - h[0];
            } else {
                lightness = [
                    h,
                    h
                ];
                dl = 0;
            }
            return f;
        };
        f.scale = function() {
            return chroma$2.scale(f);
        };
        f.hue(hue);
        return f;
    };
    var Color$4 = Color_1;
    var digits = "0123456789abcdef";
    var floor$1 = Math.floor;
    var random = Math.random;
    var random_1 = function() {
        var code = "#";
        for(var i = 0; i < 6; i++)code += digits.charAt(floor$1(random() * 16));
        return new Color$4(code, "hex");
    };
    var type = type$p;
    var log = Math.log;
    var pow$1 = Math.pow;
    var floor = Math.floor;
    var abs$1 = Math.abs;
    var analyze = function(data, key) {
        if (key === void 0) key = null;
        var r = {
            min: Number.MAX_VALUE,
            max: Number.MAX_VALUE * -1,
            sum: 0,
            values: [],
            count: 0
        };
        if (type(data) === "object") data = Object.values(data);
        data.forEach(function(val) {
            if (key && type(val) === "object") val = val[key];
            if (val !== undefined && val !== null && !isNaN(val)) {
                r.values.push(val);
                r.sum += val;
                if (val < r.min) r.min = val;
                if (val > r.max) r.max = val;
                r.count += 1;
            }
        });
        r.domain = [
            r.min,
            r.max
        ];
        r.limits = function(mode, num) {
            return limits(r, mode, num);
        };
        return r;
    };
    var limits = function(data, mode, num) {
        if (mode === void 0) mode = "equal";
        if (num === void 0) num = 7;
        if (type(data) == "array") data = analyze(data);
        var min = data.min;
        var max = data.max;
        var values = data.values.sort(function(a, b) {
            return a - b;
        });
        if (num === 1) return [
            min,
            max
        ];
        var limits = [];
        if (mode.substr(0, 1) === "c") {
            limits.push(min);
            limits.push(max);
        }
        if (mode.substr(0, 1) === "e") {
            limits.push(min);
            for(var i = 1; i < num; i++)limits.push(min + i / num * (max - min));
            limits.push(max);
        } else if (mode.substr(0, 1) === "l") {
            if (min <= 0) throw new Error("Logarithmic scales are only possible for values > 0");
            var min_log = Math.LOG10E * log(min);
            var max_log = Math.LOG10E * log(max);
            limits.push(min);
            for(var i$1 = 1; i$1 < num; i$1++)limits.push(pow$1(10, min_log + i$1 / num * (max_log - min_log)));
            limits.push(max);
        } else if (mode.substr(0, 1) === "q") {
            limits.push(min);
            for(var i$2 = 1; i$2 < num; i$2++){
                var p = (values.length - 1) * i$2 / num;
                var pb = floor(p);
                if (pb === p) limits.push(values[pb]);
                else {
                    var pr = p - pb;
                    limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
                }
            }
            limits.push(max);
        } else if (mode.substr(0, 1) === "k") {
            /*
            implementation based on
            http://code.google.com/p/figue/source/browse/trunk/figue.js#336
            simplified for 1-d input values
            */ var cluster;
            var n = values.length;
            var assignments = new Array(n);
            var clusterSizes = new Array(num);
            var repeat = true;
            var nb_iters = 0;
            var centroids = null;
            // get seed values
            centroids = [];
            centroids.push(min);
            for(var i$3 = 1; i$3 < num; i$3++)centroids.push(min + i$3 / num * (max - min));
            centroids.push(max);
            while(repeat){
                // assignment step
                for(var j = 0; j < num; j++)clusterSizes[j] = 0;
                for(var i$4 = 0; i$4 < n; i$4++){
                    var value = values[i$4];
                    var mindist = Number.MAX_VALUE;
                    var best = void 0;
                    for(var j$1 = 0; j$1 < num; j$1++){
                        var dist = abs$1(centroids[j$1] - value);
                        if (dist < mindist) {
                            mindist = dist;
                            best = j$1;
                        }
                        clusterSizes[best]++;
                        assignments[i$4] = best;
                    }
                }
                // update centroids step
                var newCentroids = new Array(num);
                for(var j$2 = 0; j$2 < num; j$2++)newCentroids[j$2] = null;
                for(var i$5 = 0; i$5 < n; i$5++){
                    cluster = assignments[i$5];
                    if (newCentroids[cluster] === null) newCentroids[cluster] = values[i$5];
                    else newCentroids[cluster] += values[i$5];
                }
                for(var j$3 = 0; j$3 < num; j$3++)newCentroids[j$3] *= 1 / clusterSizes[j$3];
                // check convergence
                repeat = false;
                for(var j$4 = 0; j$4 < num; j$4++)if (newCentroids[j$4] !== centroids[j$4]) {
                    repeat = true;
                    break;
                }
                centroids = newCentroids;
                nb_iters++;
                if (nb_iters > 200) repeat = false;
            }
            // finished k-means clustering
            // the next part is borrowed from gabrielflor.it
            var kClusters = {};
            for(var j$5 = 0; j$5 < num; j$5++)kClusters[j$5] = [];
            for(var i$6 = 0; i$6 < n; i$6++){
                cluster = assignments[i$6];
                kClusters[cluster].push(values[i$6]);
            }
            var tmpKMeansBreaks = [];
            for(var j$6 = 0; j$6 < num; j$6++){
                tmpKMeansBreaks.push(kClusters[j$6][0]);
                tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length - 1]);
            }
            tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
                return a - b;
            });
            limits.push(tmpKMeansBreaks[0]);
            for(var i$7 = 1; i$7 < tmpKMeansBreaks.length; i$7 += 2){
                var v = tmpKMeansBreaks[i$7];
                if (!isNaN(v) && limits.indexOf(v) === -1) limits.push(v);
            }
        }
        return limits;
    };
    var analyze_1 = {
        analyze: analyze,
        limits: limits
    };
    var Color$3 = Color_1;
    var contrast = function(a, b) {
        // WCAG contrast ratio
        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
        a = new Color$3(a);
        b = new Color$3(b);
        var l1 = a.luminance();
        var l2 = b.luminance();
        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);
    };
    var Color$2 = Color_1;
    var sqrt = Math.sqrt;
    var pow = Math.pow;
    var min = Math.min;
    var max = Math.max;
    var atan2 = Math.atan2;
    var abs = Math.abs;
    var cos = Math.cos;
    var sin = Math.sin;
    var exp = Math.exp;
    var PI = Math.PI;
    var deltaE = function(a, b, Kl, Kc, Kh) {
        if (Kl === void 0) Kl = 1;
        if (Kc === void 0) Kc = 1;
        if (Kh === void 0) Kh = 1;
        // Delta E (CIE 2000)
        // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html
        var rad2deg = function(rad) {
            return 360 * rad / (2 * PI);
        };
        var deg2rad = function(deg) {
            return 2 * PI * deg / 360;
        };
        a = new Color$2(a);
        b = new Color$2(b);
        var ref = Array.from(a.lab());
        var L1 = ref[0];
        var a1 = ref[1];
        var b1 = ref[2];
        var ref$1 = Array.from(b.lab());
        var L2 = ref$1[0];
        var a2 = ref$1[1];
        var b2 = ref$1[2];
        var avgL = (L1 + L2) / 2;
        var C1 = sqrt(pow(a1, 2) + pow(b1, 2));
        var C2 = sqrt(pow(a2, 2) + pow(b2, 2));
        var avgC = (C1 + C2) / 2;
        var G = 0.5 * (1 - sqrt(pow(avgC, 7) / (pow(avgC, 7) + pow(25, 7))));
        var a1p = a1 * (1 + G);
        var a2p = a2 * (1 + G);
        var C1p = sqrt(pow(a1p, 2) + pow(b1, 2));
        var C2p = sqrt(pow(a2p, 2) + pow(b2, 2));
        var avgCp = (C1p + C2p) / 2;
        var arctan1 = rad2deg(atan2(b1, a1p));
        var arctan2 = rad2deg(atan2(b2, a2p));
        var h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;
        var h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;
        var avgHp = abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2;
        var T = 1 - 0.17 * cos(deg2rad(avgHp - 30)) + 0.24 * cos(deg2rad(2 * avgHp)) + 0.32 * cos(deg2rad(3 * avgHp + 6)) - 0.2 * cos(deg2rad(4 * avgHp - 63));
        var deltaHp = h2p - h1p;
        deltaHp = abs(deltaHp) <= 180 ? deltaHp : h2p <= h1p ? deltaHp + 360 : deltaHp - 360;
        deltaHp = 2 * sqrt(C1p * C2p) * sin(deg2rad(deltaHp) / 2);
        var deltaL = L2 - L1;
        var deltaCp = C2p - C1p;
        var sl = 1 + 0.015 * pow(avgL - 50, 2) / sqrt(20 + pow(avgL - 50, 2));
        var sc = 1 + 0.045 * avgCp;
        var sh = 1 + 0.015 * avgCp * T;
        var deltaTheta = 30 * exp(-pow((avgHp - 275) / 25, 2));
        var Rc = 2 * sqrt(pow(avgCp, 7) / (pow(avgCp, 7) + pow(25, 7)));
        var Rt = -Rc * sin(2 * deg2rad(deltaTheta));
        var result = sqrt(pow(deltaL / (Kl * sl), 2) + pow(deltaCp / (Kc * sc), 2) + pow(deltaHp / (Kh * sh), 2) + Rt * (deltaCp / (Kc * sc)) * (deltaHp / (Kh * sh)));
        return max(0, min(100, result));
    };
    var Color$1 = Color_1;
    // simple Euclidean distance
    var distance = function(a, b, mode) {
        if (mode === void 0) mode = "lab";
        // Delta E (CIE 1976)
        // see http://www.brucelindbloom.com/index.html?Equations.html
        a = new Color$1(a);
        b = new Color$1(b);
        var l1 = a.get(mode);
        var l2 = b.get(mode);
        var sum_sq = 0;
        for(var i in l1){
            var d = (l1[i] || 0) - (l2[i] || 0);
            sum_sq += d * d;
        }
        return Math.sqrt(sum_sq);
    };
    var Color = Color_1;
    var valid = function() {
        var args = [], len = arguments.length;
        while(len--)args[len] = arguments[len];
        try {
            new (Function.prototype.bind.apply(Color, [
                null
            ].concat(args)));
            return true;
        } catch (e) {
            return false;
        }
    };
    // some pre-defined color scales:
    var chroma$1 = chroma_1;
    var scale = scale$2;
    var scales = {
        cool: function cool() {
            return scale([
                chroma$1.hsl(180, 1, .9),
                chroma$1.hsl(250, .7, .4)
            ]);
        },
        hot: function hot() {
            return scale([
                "#000",
                "#f00",
                "#ff0",
                "#fff"
            ]).mode("rgb");
        }
    };
    /**
        ColorBrewer colors for chroma.js

        Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The
        Pennsylvania State University.

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software distributed
        under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
        CONDITIONS OF ANY KIND, either express or implied. See the License for the
        specific language governing permissions and limitations under the License.
    */ var colorbrewer = {
        // sequential
        OrRd: [
            "#fff7ec",
            "#fee8c8",
            "#fdd49e",
            "#fdbb84",
            "#fc8d59",
            "#ef6548",
            "#d7301f",
            "#b30000",
            "#7f0000"
        ],
        PuBu: [
            "#fff7fb",
            "#ece7f2",
            "#d0d1e6",
            "#a6bddb",
            "#74a9cf",
            "#3690c0",
            "#0570b0",
            "#045a8d",
            "#023858"
        ],
        BuPu: [
            "#f7fcfd",
            "#e0ecf4",
            "#bfd3e6",
            "#9ebcda",
            "#8c96c6",
            "#8c6bb1",
            "#88419d",
            "#810f7c",
            "#4d004b"
        ],
        Oranges: [
            "#fff5eb",
            "#fee6ce",
            "#fdd0a2",
            "#fdae6b",
            "#fd8d3c",
            "#f16913",
            "#d94801",
            "#a63603",
            "#7f2704"
        ],
        BuGn: [
            "#f7fcfd",
            "#e5f5f9",
            "#ccece6",
            "#99d8c9",
            "#66c2a4",
            "#41ae76",
            "#238b45",
            "#006d2c",
            "#00441b"
        ],
        YlOrBr: [
            "#ffffe5",
            "#fff7bc",
            "#fee391",
            "#fec44f",
            "#fe9929",
            "#ec7014",
            "#cc4c02",
            "#993404",
            "#662506"
        ],
        YlGn: [
            "#ffffe5",
            "#f7fcb9",
            "#d9f0a3",
            "#addd8e",
            "#78c679",
            "#41ab5d",
            "#238443",
            "#006837",
            "#004529"
        ],
        Reds: [
            "#fff5f0",
            "#fee0d2",
            "#fcbba1",
            "#fc9272",
            "#fb6a4a",
            "#ef3b2c",
            "#cb181d",
            "#a50f15",
            "#67000d"
        ],
        RdPu: [
            "#fff7f3",
            "#fde0dd",
            "#fcc5c0",
            "#fa9fb5",
            "#f768a1",
            "#dd3497",
            "#ae017e",
            "#7a0177",
            "#49006a"
        ],
        Greens: [
            "#f7fcf5",
            "#e5f5e0",
            "#c7e9c0",
            "#a1d99b",
            "#74c476",
            "#41ab5d",
            "#238b45",
            "#006d2c",
            "#00441b"
        ],
        YlGnBu: [
            "#ffffd9",
            "#edf8b1",
            "#c7e9b4",
            "#7fcdbb",
            "#41b6c4",
            "#1d91c0",
            "#225ea8",
            "#253494",
            "#081d58"
        ],
        Purples: [
            "#fcfbfd",
            "#efedf5",
            "#dadaeb",
            "#bcbddc",
            "#9e9ac8",
            "#807dba",
            "#6a51a3",
            "#54278f",
            "#3f007d"
        ],
        GnBu: [
            "#f7fcf0",
            "#e0f3db",
            "#ccebc5",
            "#a8ddb5",
            "#7bccc4",
            "#4eb3d3",
            "#2b8cbe",
            "#0868ac",
            "#084081"
        ],
        Greys: [
            "#ffffff",
            "#f0f0f0",
            "#d9d9d9",
            "#bdbdbd",
            "#969696",
            "#737373",
            "#525252",
            "#252525",
            "#000000"
        ],
        YlOrRd: [
            "#ffffcc",
            "#ffeda0",
            "#fed976",
            "#feb24c",
            "#fd8d3c",
            "#fc4e2a",
            "#e31a1c",
            "#bd0026",
            "#800026"
        ],
        PuRd: [
            "#f7f4f9",
            "#e7e1ef",
            "#d4b9da",
            "#c994c7",
            "#df65b0",
            "#e7298a",
            "#ce1256",
            "#980043",
            "#67001f"
        ],
        Blues: [
            "#f7fbff",
            "#deebf7",
            "#c6dbef",
            "#9ecae1",
            "#6baed6",
            "#4292c6",
            "#2171b5",
            "#08519c",
            "#08306b"
        ],
        PuBuGn: [
            "#fff7fb",
            "#ece2f0",
            "#d0d1e6",
            "#a6bddb",
            "#67a9cf",
            "#3690c0",
            "#02818a",
            "#016c59",
            "#014636"
        ],
        Viridis: [
            "#440154",
            "#482777",
            "#3f4a8a",
            "#31678e",
            "#26838f",
            "#1f9d8a",
            "#6cce5a",
            "#b6de2b",
            "#fee825"
        ],
        // diverging
        Spectral: [
            "#9e0142",
            "#d53e4f",
            "#f46d43",
            "#fdae61",
            "#fee08b",
            "#ffffbf",
            "#e6f598",
            "#abdda4",
            "#66c2a5",
            "#3288bd",
            "#5e4fa2"
        ],
        RdYlGn: [
            "#a50026",
            "#d73027",
            "#f46d43",
            "#fdae61",
            "#fee08b",
            "#ffffbf",
            "#d9ef8b",
            "#a6d96a",
            "#66bd63",
            "#1a9850",
            "#006837"
        ],
        RdBu: [
            "#67001f",
            "#b2182b",
            "#d6604d",
            "#f4a582",
            "#fddbc7",
            "#f7f7f7",
            "#d1e5f0",
            "#92c5de",
            "#4393c3",
            "#2166ac",
            "#053061"
        ],
        PiYG: [
            "#8e0152",
            "#c51b7d",
            "#de77ae",
            "#f1b6da",
            "#fde0ef",
            "#f7f7f7",
            "#e6f5d0",
            "#b8e186",
            "#7fbc41",
            "#4d9221",
            "#276419"
        ],
        PRGn: [
            "#40004b",
            "#762a83",
            "#9970ab",
            "#c2a5cf",
            "#e7d4e8",
            "#f7f7f7",
            "#d9f0d3",
            "#a6dba0",
            "#5aae61",
            "#1b7837",
            "#00441b"
        ],
        RdYlBu: [
            "#a50026",
            "#d73027",
            "#f46d43",
            "#fdae61",
            "#fee090",
            "#ffffbf",
            "#e0f3f8",
            "#abd9e9",
            "#74add1",
            "#4575b4",
            "#313695"
        ],
        BrBG: [
            "#543005",
            "#8c510a",
            "#bf812d",
            "#dfc27d",
            "#f6e8c3",
            "#f5f5f5",
            "#c7eae5",
            "#80cdc1",
            "#35978f",
            "#01665e",
            "#003c30"
        ],
        RdGy: [
            "#67001f",
            "#b2182b",
            "#d6604d",
            "#f4a582",
            "#fddbc7",
            "#ffffff",
            "#e0e0e0",
            "#bababa",
            "#878787",
            "#4d4d4d",
            "#1a1a1a"
        ],
        PuOr: [
            "#7f3b08",
            "#b35806",
            "#e08214",
            "#fdb863",
            "#fee0b6",
            "#f7f7f7",
            "#d8daeb",
            "#b2abd2",
            "#8073ac",
            "#542788",
            "#2d004b"
        ],
        // qualitative
        Set2: [
            "#66c2a5",
            "#fc8d62",
            "#8da0cb",
            "#e78ac3",
            "#a6d854",
            "#ffd92f",
            "#e5c494",
            "#b3b3b3"
        ],
        Accent: [
            "#7fc97f",
            "#beaed4",
            "#fdc086",
            "#ffff99",
            "#386cb0",
            "#f0027f",
            "#bf5b17",
            "#666666"
        ],
        Set1: [
            "#e41a1c",
            "#377eb8",
            "#4daf4a",
            "#984ea3",
            "#ff7f00",
            "#ffff33",
            "#a65628",
            "#f781bf",
            "#999999"
        ],
        Set3: [
            "#8dd3c7",
            "#ffffb3",
            "#bebada",
            "#fb8072",
            "#80b1d3",
            "#fdb462",
            "#b3de69",
            "#fccde5",
            "#d9d9d9",
            "#bc80bd",
            "#ccebc5",
            "#ffed6f"
        ],
        Dark2: [
            "#1b9e77",
            "#d95f02",
            "#7570b3",
            "#e7298a",
            "#66a61e",
            "#e6ab02",
            "#a6761d",
            "#666666"
        ],
        Paired: [
            "#a6cee3",
            "#1f78b4",
            "#b2df8a",
            "#33a02c",
            "#fb9a99",
            "#e31a1c",
            "#fdbf6f",
            "#ff7f00",
            "#cab2d6",
            "#6a3d9a",
            "#ffff99",
            "#b15928"
        ],
        Pastel2: [
            "#b3e2cd",
            "#fdcdac",
            "#cbd5e8",
            "#f4cae4",
            "#e6f5c9",
            "#fff2ae",
            "#f1e2cc",
            "#cccccc"
        ],
        Pastel1: [
            "#fbb4ae",
            "#b3cde3",
            "#ccebc5",
            "#decbe4",
            "#fed9a6",
            "#ffffcc",
            "#e5d8bd",
            "#fddaec",
            "#f2f2f2"
        ]
    };
    // add lowercase aliases for case-insensitive matches
    for(var i = 0, list = Object.keys(colorbrewer); i < list.length; i += 1){
        var key = list[i];
        colorbrewer[key.toLowerCase()] = colorbrewer[key];
    }
    var colorbrewer_1 = colorbrewer;
    var chroma = chroma_1;
    // feel free to comment out anything to rollup
    // a smaller chroma.js built
    // io --> convert colors
    // operators --> modify existing Colors
    // interpolators
    // generators -- > create new colors
    chroma.average = average;
    chroma.bezier = bezier_1;
    chroma.blend = blend_1;
    chroma.cubehelix = cubehelix;
    chroma.mix = chroma.interpolate = mix$1;
    chroma.random = random_1;
    chroma.scale = scale$2;
    // other utility methods
    chroma.analyze = analyze_1.analyze;
    chroma.contrast = contrast;
    chroma.deltaE = deltaE;
    chroma.distance = distance;
    chroma.limits = analyze_1.limits;
    chroma.valid = valid;
    // scale
    chroma.scales = scales;
    // colors
    chroma.colors = w3cx11_1;
    chroma.brewer = colorbrewer_1;
    var chroma_js = chroma;
    return chroma_js;
});

},{}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"eVjfs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOverview", ()=>getOverview);
parcelHelpers.export(exports, "createDeviceObject", ()=>createDeviceObject);
parcelHelpers.export(exports, "getDevices", ()=>getDevices);
parcelHelpers.export(exports, "getFilterDevices", ()=>getFilterDevices);
parcelHelpers.export(exports, "getDevice", ()=>getDevice);
var _helpersJs = require("../../utilities/helpers.js");
var _modelJs = require("./model.js");
var _eventModelJs = require("./eventModel.js");
var _configJs = require("../../utilities/config.js");
const getOverview = async function() {
    try {
        const data = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/devices_overview`);
        console.log("hello model");
        return data;
    } catch (err) {
        throw err;
    }
};
const createDeviceObject = function(device) {
    return {
        assetId: device.asset_id || device.id,
        serialNumber: device.serial_number,
        assetTag: device.asset_tag,
        modelName: device.model_name,
        bookmarked: device.device_bookmarked || device.bookmarked || 0,
        status: device.status,
        vendorName: device.vendor_name,
        modelValue: String(parseFloat(device.model_value).toFixed(2)) || "Unspecified",
        ...device.registered_date && {
            registeredDate: Intl.DateTimeFormat("en-sg", (0, _configJs.dateTimeObject)).format(new Date(device.registered_date))
        },
        ...device.user_name && {
            userName: device.user_name
        },
        ...device.user_id && {
            userId: device.user_id
        },
        ...device.user_bookmarked && {
            userbookmarked: device.user_bookmarked
        },
        ...device.device_type && {
            deviceType: device.device_type
        },
        ...device.location && {
            location: device.location
        },
        ...device.device_age && {
            deviceAge: device.device_age
        },
        ...device.device_type && {
            deviceType: device.device_type
        }
    };
};
const getDevices = async function() {
    try {
        const data = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/all_devices`);
        if (!data) return;
        console.log(data);
        const results = data.map((device)=>createDeviceObject(device));
        console.log(results);
        (0, _modelJs.state).allResults = results;
        (0, _modelJs.resetState)((0, _modelJs.state).allResults);
        console.log((0, _modelJs.state));
    } catch (err) {
        throw err;
    }
};
const getFilterDevices = function() {
    const urlSearchParams = new URLSearchParams(window.location.search);
    filters = {};
    for (const [key, value] of urlSearchParams.entries()){
        if (value === "All") continue;
        filters[decodeURIComponent(key)] = decodeURIComponent(value);
    }
    const newResults = (0, _modelJs.state).allResults.filter((result)=>{
        valid = true;
        valid = (0, _modelJs.compareObjectsFilter)(filters, result, "deviceType", "vendorName", "status", "location", "deviceAge");
        if (!valid) return valid;
        if (filters.id) valid = result.assetTag?.includes(filters.id.toUpperCase()) || result.serialNumber.includes(filters.id.toUpperCase());
        if (!valid) return valid;
        if (filters.modelName) valid = result.modelName?.toUpperCase().includes(filters.modelName.toUpperCase());
        return valid;
    });
    console.log(filters);
    (0, _modelJs.resetState)(newResults);
};
const getDevice = async function(deviceId) {
    try {
        const data = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/devices/${deviceId}`);
        const [details, events, pastUsers, currentUser] = data;
        console.log(details);
        const finalDetails = details.map((device)=>createDeviceObject(device));
        const finalEvents = events.map((event)=>(0, _eventModelJs.createEventObject)(event));
        const finalPastUsers = pastUsers.map((user)=>({
                userId: user.user_id,
                userName: user.user_name
            }));
        const finalCurrentUser = currentUser.map((user)=>({
                userId: user.user_id,
                userName: user.user_name
            }));
        (0, _modelJs.state).object = {
            details: finalDetails[0],
            events: finalEvents,
            pastUsers: finalPastUsers,
            currentUser: finalCurrentUser[0]
        };
        console.log((0, _modelJs.state).object);
    } catch (err) {
        throw err;
    }
};

},{"../../utilities/helpers.js":"ePVjH","./model.js":"1nwSQ","./eventModel.js":"l6zea","../../utilities/config.js":"4wtf3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l6zea":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createEventObject", ()=>createEventObject);
parcelHelpers.export(exports, "getEvents", ()=>getEvents);
parcelHelpers.export(exports, "getFilterEvents", ()=>getFilterEvents);
var _configJs = require("../../utilities/config.js");
var _helpersJs = require("../../utilities/helpers.js");
var _modelJs = require("./model.js");
const createEventObject = function(event) {
    return {
        eventDate: Intl.DateTimeFormat("en-sg", (0, _configJs.dateTimeObject)).format(new Date(event.event_date)),
        eventId: event.event_id,
        ...event.asset_id && {
            assetId: event.asset_id
        },
        ...event.event_type && {
            eventType: event.event_type
        },
        ...event.user_id && {
            userId: event.user_id
        },
        ...event.remarks && {
            remarks: event.remarks
        },
        ...event.asset_tag && {
            assetTag: event.asset_tag
        },
        ...event.user_name && {
            userName: event.user_name
        },
        ...event.serial_number && {
            serialNumber: event.serial_number
        },
        ...event.device_type && {
            deviceType: event.device_type
        },
        ...event.model_name && {
            modelName: event.model_name
        },
        ...event.filepath && {
            filePath: event.filepath
        }
    };
};
const getEvents = async function() {
    try {
        const data = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/all_events`);
        const results = data.map((event)=>createEventObject(event));
        console.log(results);
        // TODO
        (0, _modelJs.state).allResults = results;
        (0, _modelJs.resetState)((0, _modelJs.state).allResults);
    } catch (err) {
        throw err;
    }
};
const getFilterEvents = function() {
    const urlSearchParams = new URLSearchParams(window.location.search);
    filters = {};
    for (const [key, value] of urlSearchParams.entries()){
        if (value === "All") continue;
        filters[decodeURIComponent(key)] = decodeURIComponent(value);
    }
    const newResults = (0, _modelJs.state).allResults.filter((result)=>{
        valid = true;
        console.log(result);
        valid = (0, _modelJs.compareObjectsFilter)(filters, result, "deviceType", "eventType");
        if (!valid) return valid;
        if (filters.id) valid = result.assetTag?.includes(filters.id.toUpperCase()) || result.serialNumber.includes(filters.id.toUpperCase());
        if (!valid) return valid;
        if (filters.modelName) valid = result.modelName?.toUpperCase().includes(filters.modelName.toUpperCase());
        if (!valid) return valid;
        if (filters.userName) valid = result.userName?.toLowerCase().includes(filters.userName.toLowerCase());
        return valid;
    });
    console.log(filters);
    (0, _modelJs.resetState)(newResults);
};

},{"../../utilities/config.js":"4wtf3","../../utilities/helpers.js":"ePVjH","./model.js":"1nwSQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2rh01":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUserObject", ()=>createUserObject);
parcelHelpers.export(exports, "combinedUsers", ()=>combinedUsers);
parcelHelpers.export(exports, "getUsers", ()=>getUsers);
parcelHelpers.export(exports, "getFilterUsers", ()=>getFilterUsers);
parcelHelpers.export(exports, "getUser", ()=>getUser);
var _helpersJs = require("../../utilities/helpers.js");
var _modelJs = require("./model.js");
var _eventModelJs = require("./eventModel.js");
var _configJs = require("../../utilities/config.js");
const createUserObject = function(user) {
    return {
        userId: user.user_id || user.id,
        userName: user.user_name,
        deptName: user.dept_name,
        bookmarked: user.user_bookmarked || user.bookmarked || 0,
        hasResigned: user.has_resigned || 0,
        ...user.asset_tag && user.model_name && user.asset_id && user.device_bookmarked !== undefined && {
            device: {
                assetTag: user.asset_tag,
                modelName: user.model_name,
                assetId: user.asset_id,
                bookmarked: user.device_bookmarked
            }
        }
    };
};
const combinedUsers = function(usersArray) {
    return usersArray.reduce((users, user)=>{
        // existingUser will return the user if found
        const existingUser = users.find((filteredUser)=>filteredUser.userId === user.userId);
        if (existingUser) {
            // User already exists, add the device details to the existing user's users array
            existingUser.devices.push(user.device);
            existingUser.deviceCount = user.device ? existingUser.deviceCount++ : existingUser.deviceCount;
        } else {
            // TODO check on the count
            // Create a new user object with the device details
            const newUser = {
                userId: user.userId,
                userName: user.userName,
                deptName: user.deptName,
                bookmarked: user.bookmarked || 0,
                hasResigned: user.hasResigned || 0,
                ...user.device && {
                    devices: [
                        user.device
                    ]
                },
                deviceCount: user.device ? 1 : 0
            };
            users.push(newUser);
        }
        return users;
    }, []);
};
const getUsers = async function() {
    try {
        const data = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/all_users`);
        if (!data) return;
        const results = combinedUsers(data.map((user)=>createUserObject(user)));
        console.log(results);
        // TODO IMPROVE
        (0, _modelJs.state).allResults = results;
        (0, _modelJs.resetState)((0, _modelJs.state).allResults);
        console.log((0, _modelJs.state));
        (0, _modelJs.state).deviceCount = [
            ...new Set(results.map((user)=>user.deviceCount))
        ].sort((a, b)=>a - b);
        console.log((0, _modelJs.state).deviceCount);
    } catch (err) {
        throw err;
    }
};
const getFilterUsers = function() {
    const urlSearchParams = new URLSearchParams(window.location.search);
    filters = {};
    for (const [key, value] of urlSearchParams.entries()){
        if (value === "All") continue;
        filters[decodeURIComponent(key)] = decodeURIComponent(value);
    }
    const newResults = (0, _modelJs.state).allResults.filter((result)=>{
        valid = true;
        valid = (0, _modelJs.compareObjectsFilter)(filters, result, "deptName", "deviceCount");
        if (!valid) return valid;
        if (filters.userName) valid = result.userName?.toLowerCase().includes(filters.userName.toLowerCase());
        return valid;
    });
    console.log(filters);
    (0, _modelJs.resetState)(newResults);
};
const getUser = async function(userId) {
    try {
        const data = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/users/${userId}`);
        const [details, events, pastDevices, currentDevices] = data;
        console.log(currentDevices);
        const finalDetails = details.map((user)=>createUserObject(user));
        const finalEvents = events.map((event)=>(0, _eventModelJs.createEventObject)(event));
        const finalPastDevices = pastDevices.map((device)=>({
                assetId: device.asset_id,
                assetTag: device.asset_tag,
                modelName: device.model_name
            }));
        const finalCurrentDevices = currentDevices.map((device)=>({
                assetId: device.asset_id,
                assetTag: device.asset_tag,
                modelName: device.model_name
            }));
        (0, _modelJs.state).object = {
            details: finalDetails[0],
            events: finalEvents,
            pastDevices: finalPastDevices,
            currentDevices: finalCurrentDevices
        };
        console.log((0, _modelJs.state).object);
    } catch (err) {
        throw err;
    }
};

},{"../../utilities/helpers.js":"ePVjH","./model.js":"1nwSQ","./eventModel.js":"l6zea","../../utilities/config.js":"4wtf3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k6kDZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "exportExcel", ()=>exportExcel);
parcelHelpers.export(exports, "readExcel", ()=>readExcel);
parcelHelpers.export(exports, "getOnboardConfirmation", ()=>getOnboardConfirmation);
var _xlsxMjs = require("xlsx/xlsx.mjs");
var _helpersJs = require("../../utilities/helpers.js");
var _modelJs = require("./model.js");
var _configJs = require("../../utilities/config.js");
const filterExcelHeaders = function(excludedColumns) {
    const data = (0, _modelJs.state).allResults;
    console.log(data);
    const filteredDatas = data.map((obj)=>{
        const filteredData = {};
        for(let header in obj)if (!excludedColumns.includes(header)) filteredData[header] = obj[header];
        return filteredData;
    });
    return filteredDatas;
};
const getExcelDetails = function() {
    let data;
    const curPage = (0, _modelJs.state).page;
    switch(curPage){
        case "onboard":
            // skip user info
            data = [
                {
                    "deviceType": "",
                    "modelName": "",
                    "modelValue": "",
                    "vendorName": "",
                    "serialNumber": "",
                    "assetTag": "",
                    "registeredDate": "",
                    "registeredRemarks": "",
                    "location": "",
                    "bookmarked": "",
                    "userName": "",
                    "deptName": "",
                    "loanedDate": "",
                    "loanedRemarks": ""
                }
            ];
            return [
                data,
                "Onboard Devices",
                "Inventory_Onboard.xlsx"
            ];
        case "devices":
            data = filterExcelHeaders([
                "assetId",
                "userId"
            ]);
            return [
                data,
                "All Devices",
                "Devices_Inventory.xlsx"
            ];
        case "history":
            data = filterExcelHeaders([
                "eventId",
                "userId",
                "assetId"
            ]);
            return [
                data,
                "All Events",
                "Events_Inventory.xlsx"
            ];
        case "users":
            console.log("hello");
            data = filterExcelHeaders([
                "devices",
                "userId"
            ]);
            return [
                data,
                "All Users",
                "Users_Inventory.xlsx"
            ];
        case "register device":
            data = [
                {
                    "serialNumber": "",
                    "assetTag": "",
                    "remarks": ""
                }
            ];
            return [
                data,
                "Register Devices",
                "Register_Devices.xlsx"
            ];
        case "condemned device":
            data = [
                {
                    "assetTag": "",
                    "remarks": ""
                }
            ];
            return [
                data,
                "Condemn Devices",
                "Condemn_Devices.xlsx"
            ];
        case "create user":
            data = [
                {
                    "userName": "",
                    "remarks": ""
                }
            ];
            return [
                data,
                "New Users",
                "New_Users.xlsx"
            ];
        case "remove user":
            data = [
                {
                    "userName": "",
                    "remarks": ""
                }
            ];
            return [
                data,
                "Remove Users",
                "Remove_Users.xlsx"
            ];
        default:
            return;
    }
};
const exportExcel = async function() {
    try {
        console.log("getting excel");
        const [data, sheetName, bookName] = getExcelDetails();
        const workbook = _xlsxMjs.utils.book_new();
        const worksheet = _xlsxMjs.utils.json_to_sheet(data);
        // Add the worksheet to the workbook
        _xlsxMjs.utils.book_append_sheet(workbook, worksheet, sheetName);
        // Generate the Excel file
        const excelBuffer = _xlsxMjs.write(workbook, {
            bookType: "xlsx",
            type: "array"
        });
        const blob = new Blob([
            excelBuffer
        ], {
            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        });
        // Create a download link and trigger the download
        const downloadLink = document.createElement("a");
        downloadLink.href = URL.createObjectURL(blob);
        downloadLink.download = bookName;
        downloadLink.click();
        // Clean up the object URL
        URL.revokeObjectURL(downloadLink.href);
    } catch (err) {
        throw err;
    }
};
const readExcel = async function(file) {
    const fileReader = new FileReader();
    fileReader.readAsArrayBuffer(file);
    const loadData = ()=>{
        return new Promise((resolve, reject)=>{
            fileReader.onload = function(e) {
                console.log(fileReader.result);
                console.log(e);
                const data = new Uint8Array(fileReader.result);
                const workbook = _xlsxMjs.read(data, {
                    type: "array"
                });
                const sheetName = workbook.SheetNames[0];
                const sheetData = _xlsxMjs.utils.sheet_to_json(workbook.Sheets[sheetName], {
                    defval: ""
                });
                console.log(sheetData);
                resolve(sheetData);
            };
            fileReader.onerror = function(err) {
                console.log(fileReader.error);
                reject(err);
            };
        });
    };
    try {
        const sheetData = await loadData();
        return sheetData;
    } catch (err) {
        console.error(err);
    }
};
const getOnboardConfirmation = async function(data) {
    try {
        if (!data) return;
        console.log(data);
        const filteredData = await (0, _helpersJs.AJAX)(`${(0, _configJs.ASSET_HOMEPAGE_URL)}api/check_onboard`, data);
        console.log(filteredData);
        return filteredData;
    } catch (err) {
        throw err;
    }
};

},{"../../utilities/helpers.js":"ePVjH","./model.js":"1nwSQ","../../utilities/config.js":"4wtf3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","xlsx/xlsx.mjs":"8Re9q"}],"8Re9q":[function(require,module,exports) {
/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */ /* vim: set ts=2: */ /*exported XLSX */ /*global process:false, Buffer:false, ArrayBuffer:false, DataView:false, Deno:false */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "set_cptable", ()=>set_cptable);
parcelHelpers.export(exports, "set_fs", ()=>set_fs);
parcelHelpers.export(exports, "version", ()=>version);
parcelHelpers.export(exports, "parse_xlscfb", ()=>parse_xlscfb);
parcelHelpers.export(exports, "parse_zip", ()=>parse_zip);
parcelHelpers.export(exports, "read", ()=>readSync);
parcelHelpers.export(exports, "readFile", ()=>readFileSync);
parcelHelpers.export(exports, "readFileSync", ()=>readFileSync);
parcelHelpers.export(exports, "write", ()=>writeSync);
parcelHelpers.export(exports, "writeFile", ()=>writeFileSync);
parcelHelpers.export(exports, "writeFileSync", ()=>writeFileSync);
parcelHelpers.export(exports, "writeFileAsync", ()=>writeFileAsync);
parcelHelpers.export(exports, "writeXLSX", ()=>writeSyncXLSX);
parcelHelpers.export(exports, "writeFileXLSX", ()=>writeFileSyncXLSX);
parcelHelpers.export(exports, "utils", ()=>utils);
parcelHelpers.export(exports, "stream", ()=>__stream);
parcelHelpers.export(exports, "SSF", ()=>SSF);
parcelHelpers.export(exports, "CFB", ()=>CFB);
var Buffer = require("f481c164bc92069e").Buffer;
var process = require("1e1b0fdaf6fdd859");
var XLSX = {};
XLSX.version = "0.18.5";
var current_codepage = 1200, current_ansi = 1252;
var VALID_ANSI = [
    874,
    932,
    936,
    949,
    950,
    1250,
    1251,
    1252,
    1253,
    1254,
    1255,
    1256,
    1257,
    1258,
    10000
];
/* ECMA-376 Part I 18.4.1 charset to codepage mapping */ var CS2CP = {
    /*::[*/ 0: 1252,
    /* ANSI */ /*::[*/ 1: 65001,
    /* DEFAULT */ /*::[*/ 2: 65001,
    /* SYMBOL */ /*::[*/ 77: 10000,
    /* MAC */ /*::[*/ 128: 932,
    /* SHIFTJIS */ /*::[*/ 129: 949,
    /* HANGUL */ /*::[*/ 130: 1361,
    /* JOHAB */ /*::[*/ 134: 936,
    /* GB2312 */ /*::[*/ 136: 950,
    /* CHINESEBIG5 */ /*::[*/ 161: 1253,
    /* GREEK */ /*::[*/ 162: 1254,
    /* TURKISH */ /*::[*/ 163: 1258,
    /* VIETNAMESE */ /*::[*/ 177: 1255,
    /* HEBREW */ /*::[*/ 178: 1256,
    /* ARABIC */ /*::[*/ 186: 1257,
    /* BALTIC */ /*::[*/ 204: 1251,
    /* RUSSIAN */ /*::[*/ 222: 874,
    /* THAI */ /*::[*/ 238: 1250,
    /* EASTEUROPE */ /*::[*/ 255: 1252,
    /* OEM */ /*::[*/ 69: 6969 /* MISC */ 
} /*:any*/ ;
var set_ansi = function(cp /*:number*/ ) {
    if (VALID_ANSI.indexOf(cp) == -1) return;
    current_ansi = CS2CP[0] = cp;
};
function reset_ansi() {
    set_ansi(1252);
}
var set_cp = function(cp /*:number*/ ) {
    current_codepage = cp;
    set_ansi(cp);
};
function reset_cp() {
    set_cp(1200);
    reset_ansi();
}
function char_codes(data /*:string*/ ) /*:Array<number>*/ {
    var o /*:Array<number>*/  = [];
    for(var i = 0, len = data.length; i < len; ++i)o[i] = data.charCodeAt(i);
    return o;
}
function utf16leread(data /*:string*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [];
    for(var i = 0; i < data.length >> 1; ++i)o[i] = String.fromCharCode(data.charCodeAt(2 * i) + (data.charCodeAt(2 * i + 1) << 8));
    return o.join("");
}
function utf16beread(data /*:string*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [];
    for(var i = 0; i < data.length >> 1; ++i)o[i] = String.fromCharCode(data.charCodeAt(2 * i + 1) + (data.charCodeAt(2 * i) << 8));
    return o.join("");
}
var debom = function(data /*:string*/ ) /*:string*/ {
    var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
    if (c1 == 0xFF && c2 == 0xFE) return utf16leread(data.slice(2));
    if (c1 == 0xFE && c2 == 0xFF) return utf16beread(data.slice(2));
    if (c1 == 0xFEFF) return data.slice(1);
    return data;
};
var _getchar = function _gc1(x /*:number*/ ) /*:string*/ {
    return String.fromCharCode(x);
};
var _getansi = function _ga1(x /*:number*/ ) /*:string*/ {
    return String.fromCharCode(x);
};
var $cptable;
function set_cptable(cptable) {
    $cptable = cptable;
    set_cp = function(cp /*:number*/ ) {
        current_codepage = cp;
        set_ansi(cp);
    };
    debom = function(data /*:string*/ ) {
        if (data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) return $cptable.utils.decode(1200, char_codes(data.slice(2)));
        return data;
    };
    _getchar = function _gc2(x /*:number*/ ) /*:string*/ {
        if (current_codepage === 1200) return String.fromCharCode(x);
        return $cptable.utils.decode(current_codepage, [
            x & 255,
            x >> 8
        ])[0];
    };
    _getansi = function _ga2(x /*:number*/ ) /*:string*/ {
        return $cptable.utils.decode(current_ansi, [
            x
        ])[0];
    };
    cpdoit();
}
var DENSE = null;
var DIF_XL = true;
var Base64_map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
function Base64_encode(input) {
    var o = "";
    var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
    for(var i = 0; i < input.length;){
        c1 = input.charCodeAt(i++);
        e1 = c1 >> 2;
        c2 = input.charCodeAt(i++);
        e2 = (c1 & 3) << 4 | c2 >> 4;
        c3 = input.charCodeAt(i++);
        e3 = (c2 & 15) << 2 | c3 >> 6;
        e4 = c3 & 63;
        if (isNaN(c2)) e3 = e4 = 64;
        else if (isNaN(c3)) e4 = 64;
        o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
    }
    return o;
}
function Base64_decode(input) {
    var o = "";
    var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
    input = input.replace(/[^\w\+\/\=]/g, "");
    for(var i = 0; i < input.length;){
        e1 = Base64_map.indexOf(input.charAt(i++));
        e2 = Base64_map.indexOf(input.charAt(i++));
        c1 = e1 << 2 | e2 >> 4;
        o += String.fromCharCode(c1);
        e3 = Base64_map.indexOf(input.charAt(i++));
        c2 = (e2 & 15) << 4 | e3 >> 2;
        if (e3 !== 64) o += String.fromCharCode(c2);
        e4 = Base64_map.indexOf(input.charAt(i++));
        c3 = (e3 & 3) << 6 | e4;
        if (e4 !== 64) o += String.fromCharCode(c3);
    }
    return o;
}
var has_buf = /*#__PURE__*/ function() {
    return typeof Buffer !== "undefined" && typeof process !== "undefined" && typeof process.versions !== "undefined" && !!process.versions.node;
}();
var Buffer_from = /*#__PURE__*/ function() {
    if (typeof Buffer !== "undefined") {
        var nbfs = !Buffer.from;
        if (!nbfs) try {
            Buffer.from("foo", "utf8");
        } catch (e) {
            nbfs = true;
        }
        return nbfs ? function(buf, enc) {
            return enc ? new Buffer(buf, enc) : new Buffer(buf);
        } : Buffer.from.bind(Buffer);
    }
    return function() {};
}();
function new_raw_buf(len /*:number*/ ) {
    /* jshint -W056 */ if (has_buf) return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
    return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
/* jshint +W056 */ }
function new_unsafe_buf(len /*:number*/ ) {
    /* jshint -W056 */ if (has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
    return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
/* jshint +W056 */ }
var s2a = function s2a(s /*:string*/ ) /*:any*/ {
    if (has_buf) return Buffer_from(s, "binary");
    return s.split("").map(function(x /*:string*/ ) /*:number*/ {
        return x.charCodeAt(0) & 0xff;
    });
};
function s2ab(s /*:string*/ ) /*:any*/ {
    if (typeof ArrayBuffer === "undefined") return s2a(s);
    var buf = new ArrayBuffer(s.length), view = new Uint8Array(buf);
    for(var i = 0; i != s.length; ++i)view[i] = s.charCodeAt(i) & 0xFF;
    return buf;
}
function a2s(data /*:any*/ ) /*:string*/ {
    if (Array.isArray(data)) return data.map(function(c) {
        return String.fromCharCode(c);
    }).join("");
    var o /*:Array<string>*/  = [];
    for(var i = 0; i < data.length; ++i)o[i] = String.fromCharCode(data[i]);
    return o.join("");
}
function a2u(data /*:Array<number>*/ ) /*:Uint8Array*/ {
    if (typeof Uint8Array === "undefined") throw new Error("Unsupported");
    return new Uint8Array(data);
}
function ab2a(data /*:ArrayBuffer|Uint8Array*/ ) /*:Array<number>*/ {
    if (typeof ArrayBuffer == "undefined") throw new Error("Unsupported");
    if (data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));
    /*:: if(data instanceof ArrayBuffer) throw new Error("unreachable"); */ var o = new Array(data.length);
    for(var i = 0; i < data.length; ++i)o[i] = data[i];
    return o;
}
var bconcat = has_buf ? function(bufs) {
    return Buffer.concat(bufs.map(function(buf) {
        return Buffer.isBuffer(buf) ? buf : Buffer_from(buf);
    }));
} : function(bufs) {
    if (typeof Uint8Array !== "undefined") {
        var i = 0, maxlen = 0;
        for(i = 0; i < bufs.length; ++i)maxlen += bufs[i].length;
        var o = new Uint8Array(maxlen);
        var len = 0;
        for(i = 0, maxlen = 0; i < bufs.length; maxlen += len, ++i){
            len = bufs[i].length;
            if (bufs[i] instanceof Uint8Array) o.set(bufs[i], maxlen);
            else if (typeof bufs[i] == "string") throw "wtf";
            else o.set(new Uint8Array(bufs[i]), maxlen);
        }
        return o;
    }
    return [].concat.apply([], bufs.map(function(buf) {
        return Array.isArray(buf) ? buf : [].slice.call(buf);
    }));
};
function utf8decode(content /*:string*/ ) {
    var out = [], widx = 0, L = content.length + 250;
    var o = new_raw_buf(content.length + 255);
    for(var ridx = 0; ridx < content.length; ++ridx){
        var c = content.charCodeAt(ridx);
        if (c < 0x80) o[widx++] = c;
        else if (c < 0x800) {
            o[widx++] = 192 | c >> 6 & 31;
            o[widx++] = 128 | c & 63;
        } else if (c >= 0xD800 && c < 0xE000) {
            c = (c & 1023) + 64;
            var d = content.charCodeAt(++ridx) & 1023;
            o[widx++] = 240 | c >> 8 & 7;
            o[widx++] = 128 | c >> 2 & 63;
            o[widx++] = 128 | d >> 6 & 15 | (c & 3) << 4;
            o[widx++] = 128 | d & 63;
        } else {
            o[widx++] = 224 | c >> 12 & 15;
            o[widx++] = 128 | c >> 6 & 63;
            o[widx++] = 128 | c & 63;
        }
        if (widx > L) {
            out.push(o.slice(0, widx));
            widx = 0;
            o = new_raw_buf(65535);
            L = 65530;
        }
    }
    out.push(o.slice(0, widx));
    return bconcat(out);
}
var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
/*::
declare type Block = any;
declare type BufArray = {
	newblk(sz:number):Block;
	next(sz:number):Block;
	end():any;
	push(buf:Block):void;
};

type RecordHopperCB = {(d:any, Rn:string, RT:number):?boolean;};

type EvertType = {[string]:string};
type EvertNumType = {[string]:number};
type EvertArrType = {[string]:Array<string>};

type StringConv = {(string):string};

*/ /* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */ /*jshint -W041 */ function _strrev(x /*:string*/ ) /*:string*/ {
    var o = "", i = x.length - 1;
    while(i >= 0)o += x.charAt(i--);
    return o;
}
function pad0(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    var t = "" + v;
    return t.length >= d ? t : fill("0", d - t.length) + t;
}
function pad_(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    var t = "" + v;
    return t.length >= d ? t : fill(" ", d - t.length) + t;
}
function rpad_(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    var t = "" + v;
    return t.length >= d ? t : t + fill(" ", d - t.length);
}
function pad0r1(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    var t = "" + Math.round(v);
    return t.length >= d ? t : fill("0", d - t.length) + t;
}
function pad0r2(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    var t = "" + v;
    return t.length >= d ? t : fill("0", d - t.length) + t;
}
var p2_32 = /*#__PURE__*/ Math.pow(2, 32);
function pad0r(v /*:any*/ , d /*:number*/ ) /*:string*/ {
    if (v > p2_32 || v < -p2_32) return pad0r1(v, d);
    var i = Math.round(v);
    return pad0r2(i, d);
}
/* yes, in 2022 this is still faster than string compare */ function SSF_isgeneral(s /*:string*/ , i /*:?number*/ ) /*:boolean*/ {
    i = i || 0;
    return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108;
}
var days /*:Array<Array<string> >*/  = [
    [
        "Sun",
        "Sunday"
    ],
    [
        "Mon",
        "Monday"
    ],
    [
        "Tue",
        "Tuesday"
    ],
    [
        "Wed",
        "Wednesday"
    ],
    [
        "Thu",
        "Thursday"
    ],
    [
        "Fri",
        "Friday"
    ],
    [
        "Sat",
        "Saturday"
    ]
];
var months /*:Array<Array<string> >*/  = [
    [
        "J",
        "Jan",
        "January"
    ],
    [
        "F",
        "Feb",
        "February"
    ],
    [
        "M",
        "Mar",
        "March"
    ],
    [
        "A",
        "Apr",
        "April"
    ],
    [
        "M",
        "May",
        "May"
    ],
    [
        "J",
        "Jun",
        "June"
    ],
    [
        "J",
        "Jul",
        "July"
    ],
    [
        "A",
        "Aug",
        "August"
    ],
    [
        "S",
        "Sep",
        "September"
    ],
    [
        "O",
        "Oct",
        "October"
    ],
    [
        "N",
        "Nov",
        "November"
    ],
    [
        "D",
        "Dec",
        "December"
    ]
];
function SSF_init_table(t /*:any*/ ) {
    if (!t) t = {};
    t[0] = "General";
    t[1] = "0";
    t[2] = "0.00";
    t[3] = "#,##0";
    t[4] = "#,##0.00";
    t[9] = "0%";
    t[10] = "0.00%";
    t[11] = "0.00E+00";
    t[12] = "# ?/?";
    t[13] = "# ??/??";
    t[14] = "m/d/yy";
    t[15] = "d-mmm-yy";
    t[16] = "d-mmm";
    t[17] = "mmm-yy";
    t[18] = "h:mm AM/PM";
    t[19] = "h:mm:ss AM/PM";
    t[20] = "h:mm";
    t[21] = "h:mm:ss";
    t[22] = "m/d/yy h:mm";
    t[37] = "#,##0 ;(#,##0)";
    t[38] = "#,##0 ;[Red](#,##0)";
    t[39] = "#,##0.00;(#,##0.00)";
    t[40] = "#,##0.00;[Red](#,##0.00)";
    t[45] = "mm:ss";
    t[46] = "[h]:mm:ss";
    t[47] = "mmss.0";
    t[48] = "##0.0E+0";
    t[49] = "@";
    t[56] = '"上午/下午 "hh"時"mm"分"ss"秒 "';
    return t;
}
/* repeated to satiate webpack */ var table_fmt = {
    0: "General",
    1: "0",
    2: "0.00",
    3: "#,##0",
    4: "#,##0.00",
    9: "0%",
    10: "0.00%",
    11: "0.00E+00",
    12: "# ?/?",
    13: "# ??/??",
    14: "m/d/yy",
    15: "d-mmm-yy",
    16: "d-mmm",
    17: "mmm-yy",
    18: "h:mm AM/PM",
    19: "h:mm:ss AM/PM",
    20: "h:mm",
    21: "h:mm:ss",
    22: "m/d/yy h:mm",
    37: "#,##0 ;(#,##0)",
    38: "#,##0 ;[Red](#,##0)",
    39: "#,##0.00;(#,##0.00)",
    40: "#,##0.00;[Red](#,##0.00)",
    45: "mm:ss",
    46: "[h]:mm:ss",
    47: "mmss.0",
    48: "##0.0E+0",
    49: "@",
    56: '"上午/下午 "hh"時"mm"分"ss"秒 "'
};
/* Defaults determined by systematically testing in Excel 2019 */ /* These formats appear to default to other formats in the table */ var SSF_default_map = {
    5: 37,
    6: 38,
    7: 39,
    8: 40,
    23: 0,
    24: 0,
    25: 0,
    26: 0,
    27: 14,
    28: 14,
    29: 14,
    30: 14,
    31: 14,
    50: 14,
    51: 14,
    52: 14,
    53: 14,
    54: 14,
    55: 14,
    56: 14,
    57: 14,
    58: 14,
    59: 1,
    60: 2,
    61: 3,
    62: 4,
    67: 9,
    68: 10,
    69: 12,
    70: 13,
    71: 14,
    72: 14,
    73: 15,
    74: 16,
    75: 17,
    76: 20,
    77: 21,
    78: 22,
    79: 45,
    80: 46,
    81: 47,
    82: 0 // 82 ->  0 ... 65536 -> 0 (omitted)
};
/* These formats technically refer to Accounting formats with no equivalent */ var SSF_default_str = {
    //  5 -- Currency,   0 decimal, black negative
    5: '"$"#,##0_);\\("$"#,##0\\)',
    63: '"$"#,##0_);\\("$"#,##0\\)',
    //  6 -- Currency,   0 decimal, red   negative
    6: '"$"#,##0_);[Red]\\("$"#,##0\\)',
    64: '"$"#,##0_);[Red]\\("$"#,##0\\)',
    //  7 -- Currency,   2 decimal, black negative
    7: '"$"#,##0.00_);\\("$"#,##0.00\\)',
    65: '"$"#,##0.00_);\\("$"#,##0.00\\)',
    //  8 -- Currency,   2 decimal, red   negative
    8: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    // 41 -- Accounting, 0 decimal, No Symbol
    41: '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',
    // 42 -- Accounting, 0 decimal, $  Symbol
    42: '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',
    // 43 -- Accounting, 2 decimal, No Symbol
    43: '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',
    // 44 -- Accounting, 2 decimal, $  Symbol
    44: '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'
};
function SSF_frac(x /*:number*/ , D /*:number*/ , mixed /*:?boolean*/ ) /*:Array<number>*/ {
    var sgn = x < 0 ? -1 : 1;
    var B = x * sgn;
    var P_2 = 0, P_1 = 1, P = 0;
    var Q_2 = 1, Q_1 = 0, Q = 0;
    var A = Math.floor(B);
    while(Q_1 < D){
        A = Math.floor(B);
        P = A * P_1 + P_2;
        Q = A * Q_1 + Q_2;
        if (B - A < 0.00000005) break;
        B = 1 / (B - A);
        P_2 = P_1;
        P_1 = P;
        Q_2 = Q_1;
        Q_1 = Q;
    }
    if (Q > D) {
        if (Q_1 > D) {
            Q = Q_2;
            P = P_2;
        } else {
            Q = Q_1;
            P = P_1;
        }
    }
    if (!mixed) return [
        0,
        sgn * P,
        Q
    ];
    var q = Math.floor(sgn * P / Q);
    return [
        q,
        sgn * P - q * Q,
        Q
    ];
}
function SSF_parse_date_code(v /*:number*/ , opts /*:?any*/ , b2 /*:?boolean*/ ) {
    if (v > 2958465 || v < 0) return null;
    var date = v | 0, time = Math.floor(86400 * (v - date)), dow = 0;
    var dout = [];
    var out = {
        D: date,
        T: time,
        u: 86400 * (v - date) - time,
        y: 0,
        m: 0,
        d: 0,
        H: 0,
        M: 0,
        S: 0,
        q: 0
    };
    if (Math.abs(out.u) < 1e-6) out.u = 0;
    if (opts && opts.date1904) date += 1462;
    if (out.u > 0.9999) {
        out.u = 0;
        if (++time == 86400) {
            out.T = time = 0;
            ++date;
            ++out.D;
        }
    }
    if (date === 60) {
        dout = b2 ? [
            1317,
            10,
            29
        ] : [
            1900,
            2,
            29
        ];
        dow = 3;
    } else if (date === 0) {
        dout = b2 ? [
            1317,
            8,
            29
        ] : [
            1900,
            1,
            0
        ];
        dow = 6;
    } else {
        if (date > 60) --date;
        /* 1 = Jan 1 1900 in Gregorian */ var d = new Date(1900, 0, 1);
        d.setDate(d.getDate() + date - 1);
        dout = [
            d.getFullYear(),
            d.getMonth() + 1,
            d.getDate()
        ];
        dow = d.getDay();
        if (date < 60) dow = (dow + 6) % 7;
        if (b2) dow = SSF_fix_hijri(d, dout);
    }
    out.y = dout[0];
    out.m = dout[1];
    out.d = dout[2];
    out.S = time % 60;
    time = Math.floor(time / 60);
    out.M = time % 60;
    time = Math.floor(time / 60);
    out.H = time;
    out.q = dow;
    return out;
}
var SSFbasedate = /*#__PURE__*/ new Date(1899, 11, 31, 0, 0, 0);
var SSFdnthresh = /*#__PURE__*/ SSFbasedate.getTime();
var SSFbase1904 = /*#__PURE__*/ new Date(1900, 2, 1, 0, 0, 0);
function datenum_local(v /*:Date*/ , date1904 /*:?boolean*/ ) /*:number*/ {
    var epoch = /*#__PURE__*/ v.getTime();
    if (date1904) epoch -= 126230400000;
    else if (v >= SSFbase1904) epoch += 86400000;
    return (epoch - (SSFdnthresh + /*#__PURE__*/ (v.getTimezoneOffset() - /*#__PURE__*/ SSFbasedate.getTimezoneOffset()) * 60000)) / 86400000;
}
/* ECMA-376 18.8.30 numFmt*/ /* Note: `toPrecision` uses standard form when prec > E and E >= -6 */ /* exponent >= -9 and <= 9 */ function SSF_strip_decimal(o /*:string*/ ) /*:string*/ {
    return o.indexOf(".") == -1 ? o : o.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, "$1");
}
/* General Exponential always shows 2 digits exp and trims the mantissa */ function SSF_normalize_exp(o /*:string*/ ) /*:string*/ {
    if (o.indexOf("E") == -1) return o;
    return o.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/, "$1E").replace(/(E[+-])(\d)$/, "$10$2");
}
/* exponent >= -9 and <= 9 */ function SSF_small_exp(v /*:number*/ ) /*:string*/ {
    var w = v < 0 ? 12 : 11;
    var o = SSF_strip_decimal(v.toFixed(12));
    if (o.length <= w) return o;
    o = v.toPrecision(10);
    if (o.length <= w) return o;
    return v.toExponential(5);
}
/* exponent >= 11 or <= -10 likely exponential */ function SSF_large_exp(v /*:number*/ ) /*:string*/ {
    var o = SSF_strip_decimal(v.toFixed(11));
    return o.length > (v < 0 ? 12 : 11) || o === "0" || o === "-0" ? v.toPrecision(6) : o;
}
function SSF_general_num(v /*:number*/ ) /*:string*/ {
    var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E), o;
    if (V >= -4 && V <= -1) o = v.toPrecision(10 + V);
    else if (Math.abs(V) <= 9) o = SSF_small_exp(v);
    else if (V === 10) o = v.toFixed(10).substr(0, 12);
    else o = SSF_large_exp(v);
    return SSF_strip_decimal(SSF_normalize_exp(o.toUpperCase()));
}
/*
	"General" rules:
	- text is passed through ("@")
	- booleans are rendered as TRUE/FALSE
	- "up to 11 characters" displayed for numbers
	- Default date format (code 14) used for Dates

	The longest 32-bit integer text is "-2147483648", exactly 11 chars
	TODO: technically the display depends on the width of the cell
*/ function SSF_general(v /*:any*/ , opts /*:any*/ ) {
    switch(typeof v){
        case "string":
            return v;
        case "boolean":
            return v ? "TRUE" : "FALSE";
        case "number":
            return (v | 0) === v ? v.toString(10) : SSF_general_num(v);
        case "undefined":
            return "";
        case "object":
            if (v == null) return "";
            if (v instanceof Date) return SSF_format(14, datenum_local(v, opts && opts.date1904), opts);
    }
    throw new Error("unsupported value in General format: " + v);
}
function SSF_fix_hijri(date /*:Date*/ , o /*:[number, number, number]*/ ) {
    /* TODO: properly adjust y/m/d and  */ o[0] -= 581;
    var dow = date.getDay();
    if (date < 60) dow = (dow + 6) % 7;
    return dow;
}
//var THAI_DIGITS = "\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59".split("");
function SSF_write_date(type /*:number*/ , fmt /*:string*/ , val, ss0 /*:?number*/ ) /*:string*/ {
    var o = "", ss = 0, tt = 0, y = val.y, out, outl = 0;
    switch(type){
        case 98:
            /* 'b' buddhist year */ y = val.y + 543;
        /* falls through */ case 121:
            /* 'y' year */ switch(fmt.length){
                case 1:
                case 2:
                    out = y % 100;
                    outl = 2;
                    break;
                default:
                    out = y % 10000;
                    outl = 4;
                    break;
            }
            break;
        case 109:
            /* 'm' month */ switch(fmt.length){
                case 1:
                case 2:
                    out = val.m;
                    outl = fmt.length;
                    break;
                case 3:
                    return months[val.m - 1][1];
                case 5:
                    return months[val.m - 1][0];
                default:
                    return months[val.m - 1][2];
            }
            break;
        case 100:
            /* 'd' day */ switch(fmt.length){
                case 1:
                case 2:
                    out = val.d;
                    outl = fmt.length;
                    break;
                case 3:
                    return days[val.q][0];
                default:
                    return days[val.q][1];
            }
            break;
        case 104:
            /* 'h' 12-hour */ switch(fmt.length){
                case 1:
                case 2:
                    out = 1 + (val.H + 11) % 12;
                    outl = fmt.length;
                    break;
                default:
                    throw "bad hour format: " + fmt;
            }
            break;
        case 72:
            /* 'H' 24-hour */ switch(fmt.length){
                case 1:
                case 2:
                    out = val.H;
                    outl = fmt.length;
                    break;
                default:
                    throw "bad hour format: " + fmt;
            }
            break;
        case 77:
            /* 'M' minutes */ switch(fmt.length){
                case 1:
                case 2:
                    out = val.M;
                    outl = fmt.length;
                    break;
                default:
                    throw "bad minute format: " + fmt;
            }
            break;
        case 115:
            /* 's' seconds */ if (fmt != "s" && fmt != "ss" && fmt != ".0" && fmt != ".00" && fmt != ".000") throw "bad second format: " + fmt;
            if (val.u === 0 && (fmt == "s" || fmt == "ss")) return pad0(val.S, fmt.length);
            /*::if(!ss0) ss0 = 0; */ if (ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;
            else tt = ss0 === 1 ? 10 : 1;
            ss = Math.round(tt * (val.S + val.u));
            if (ss >= 60 * tt) ss = 0;
            if (fmt === "s") return ss === 0 ? "0" : "" + ss / tt;
            o = pad0(ss, 2 + ss0);
            if (fmt === "ss") return o.substr(0, 2);
            return "." + o.substr(2, fmt.length - 1);
        case 90:
            /* 'Z' absolute time */ switch(fmt){
                case "[h]":
                case "[hh]":
                    out = val.D * 24 + val.H;
                    break;
                case "[m]":
                case "[mm]":
                    out = (val.D * 24 + val.H) * 60 + val.M;
                    break;
                case "[s]":
                case "[ss]":
                    out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);
                    break;
                default:
                    throw "bad abstime format: " + fmt;
            }
            outl = fmt.length === 3 ? 1 : 2;
            break;
        case 101:
            /* 'e' era */ out = y;
            outl = 1;
            break;
    }
    var outstr = outl > 0 ? pad0(out, outl) : "";
    return outstr;
}
/*jshint -W086 */ /*jshint +W086 */ function commaify(s /*:string*/ ) /*:string*/ {
    var w = 3;
    if (s.length <= w) return s;
    var j = s.length % w, o = s.substr(0, j);
    for(; j != s.length; j += w)o += (o.length > 0 ? "," : "") + s.substr(j, w);
    return o;
}
var pct1 = /%/g;
function write_num_pct(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
    return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
}
function write_num_cm(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var idx = fmt.length - 1;
    while(fmt.charCodeAt(idx - 1) === 44)--idx;
    return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
}
function write_num_exp(fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var o /*:string*/ ;
    var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
    if (fmt.match(/^#+0.0E\+0$/)) {
        if (val == 0) return "0.0E+0";
        else if (val < 0) return "-" + write_num_exp(fmt, -val);
        var period = fmt.indexOf(".");
        if (period === -1) period = fmt.indexOf("E");
        var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
        if (ee < 0) ee += period;
        o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
        if (o.indexOf("e") === -1) {
            var fakee = Math.floor(Math.log(val) * Math.LOG10E);
            if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
            else o += "E+" + (fakee - ee);
            while(o.substr(0, 2) === "0."){
                o = o.charAt(0) + o.substr(2, period) + "." + o.substr(2 + period);
                o = o.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
            }
            o = o.replace(/\+-/, "-");
        }
        o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
            return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
        });
    } else o = val.toExponential(idx);
    if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
    if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e");
    return o.replace("e", "E");
}
var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
function write_num_f1(r /*:Array<string>*/ , aval /*:number*/ , sign /*:string*/ ) /*:string*/ {
    var den = parseInt(r[4], 10), rr = Math.round(aval * den), base = Math.floor(rr / den);
    var myn = rr - base * den, myd = den;
    return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + "/" + r[3] + pad0(myd, r[4].length));
}
function write_num_f2(r /*:Array<string>*/ , aval /*:number*/ , sign /*:string*/ ) /*:string*/ {
    return sign + (aval === 0 ? "" : "" + aval) + fill(" ", r[1].length + 2 + r[4].length);
}
var dec1 = /^#*0*\.([0#]+)/;
var closeparen = /\).*[0#]/;
var phone = /\(###\) ###\\?-####/;
function hashq(str /*:string*/ ) /*:string*/ {
    var o = "", cc;
    for(var i = 0; i != str.length; ++i)switch(cc = str.charCodeAt(i)){
        case 35:
            break;
        case 63:
            o += " ";
            break;
        case 48:
            o += "0";
            break;
        default:
            o += String.fromCharCode(cc);
    }
    return o;
}
function rnd(val /*:number*/ , d /*:number*/ ) /*:string*/ {
    var dd = Math.pow(10, d);
    return "" + Math.round(val * dd) / dd;
}
function dec(val /*:number*/ , d /*:number*/ ) /*:number*/ {
    var _frac = val - Math.floor(val), dd = Math.pow(10, d);
    if (d < ("" + Math.round(_frac * dd)).length) return 0;
    return Math.round(_frac * dd);
}
function carry(val /*:number*/ , d /*:number*/ ) /*:number*/ {
    if (d < ("" + Math.round((val - Math.floor(val)) * Math.pow(10, d))).length) return 1;
    return 0;
}
function flr(val /*:number*/ ) /*:string*/ {
    if (val < 2147483647 && val > -2147483648) return "" + (val >= 0 ? val | 0 : val - 1 | 0);
    return "" + Math.floor(val);
}
function write_num_flt(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
        var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
        if (val >= 0) return write_num_flt("n", ffmt, val);
        return "(" + write_num_flt("n", ffmt, -val) + ")";
    }
    if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
    if (fmt.indexOf("%") !== -1) return write_num_pct(type, fmt, val);
    if (fmt.indexOf("E") !== -1) return write_num_exp(fmt, val);
    if (fmt.charCodeAt(0) === 36) return "$" + write_num_flt(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
    var o;
    var r /*:?Array<string>*/ , ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
    if (fmt.match(/^00+$/)) return sign + pad0r(aval, fmt.length);
    if (fmt.match(/^[#?]+$/)) {
        o = pad0r(val, 0);
        if (o === "0") o = "";
        return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
    }
    if (r = fmt.match(frac1)) return write_num_f1(r, aval, sign);
    if (fmt.match(/^#+0+$/)) return sign + pad0r(aval, fmt.length - fmt.indexOf("0"));
    if (r = fmt.match(dec1)) {
        o = rnd(val, r[1].length).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1])).replace(/\.(\d*)$/, function($$, $1) {
            return "." + $1 + fill("0", hashq(/*::(*/ r /*::||[""])*/ [1]).length - $1.length);
        });
        return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
    }
    fmt = fmt.replace(/^#+([0.])/, "$1");
    if (r = fmt.match(/^(0*)\.(#*)$/)) return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
    if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify(pad0r(aval, 0));
    if (r = fmt.match(/^#,##0\.([#0]*0)$/)) return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify("" + (Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length), r[1].length);
    if (r = fmt.match(/^#,#*,#0/)) return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val);
    if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
        o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val));
        ri = 0;
        return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x) {
            return ri < o.length ? o.charAt(ri++) : x === "0" ? "0" : "";
        }));
    }
    if (fmt.match(phone)) {
        o = write_num_flt(type, "##########", val);
        return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
    }
    var oa = "";
    if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
        ri = Math.min(/*::String(*/ r[4]/*::)*/ .length, 7);
        ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
        o = "" + sign;
        oa = write_num("n", /*::String(*/ r[1], ff[1]);
        if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0";
        o += oa + /*::String(*/ r[2] + "/" + /*::String(*/ r[3] /*::)*/ ;
        oa = rpad_(ff[2], ri);
        if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
        o += oa;
        return o;
    }
    if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
        ri = Math.min(Math.max(r[1].length, r[4].length), 7);
        ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
        return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
    }
    if (r = fmt.match(/^[#0?]+$/)) {
        o = pad0r(val, 0);
        if (fmt.length <= o.length) return o;
        return hashq(fmt.substr(0, fmt.length - o.length)) + o;
    }
    if (r = fmt.match(/^([#0?]+)\.([#0]+)$/)) {
        o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
        ri = o.indexOf(".");
        var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
        return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
    }
    if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
        ri = dec(val, r[1].length);
        return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
            return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
        }) + "." + pad0(ri, r[1].length);
    }
    switch(fmt){
        case "###,##0.00":
            return write_num_flt(type, "#,##0.00", val);
        case "###,###":
        case "##,###":
        case "#,###":
            var x = commaify(pad0r(aval, 0));
            return x !== "0" ? sign + x : "";
        case "###,###.00":
            return write_num_flt(type, "###,##0.00", val).replace(/^0\./, ".");
        case "#,###.00":
            return write_num_flt(type, "#,##0.00", val).replace(/^0\./, ".");
        default:
    }
    throw new Error("unsupported format |" + fmt + "|");
}
function write_num_cm2(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var idx = fmt.length - 1;
    while(fmt.charCodeAt(idx - 1) === 44)--idx;
    return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
}
function write_num_pct2(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
    return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
}
function write_num_exp2(fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    var o /*:string*/ ;
    var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
    if (fmt.match(/^#+0.0E\+0$/)) {
        if (val == 0) return "0.0E+0";
        else if (val < 0) return "-" + write_num_exp2(fmt, -val);
        var period = fmt.indexOf(".");
        if (period === -1) period = fmt.indexOf("E");
        var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
        if (ee < 0) ee += period;
        o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
        if (!o.match(/[Ee]/)) {
            var fakee = Math.floor(Math.log(val) * Math.LOG10E);
            if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
            else o += "E+" + (fakee - ee);
            o = o.replace(/\+-/, "-");
        }
        o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
            return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
        });
    } else o = val.toExponential(idx);
    if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
    if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e");
    return o.replace("e", "E");
}
function write_num_int(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
        var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
        if (val >= 0) return write_num_int("n", ffmt, val);
        return "(" + write_num_int("n", ffmt, -val) + ")";
    }
    if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
    if (fmt.indexOf("%") !== -1) return write_num_pct2(type, fmt, val);
    if (fmt.indexOf("E") !== -1) return write_num_exp2(fmt, val);
    if (fmt.charCodeAt(0) === 36) return "$" + write_num_int(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
    var o;
    var r /*:?Array<string>*/ , ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
    if (fmt.match(/^00+$/)) return sign + pad0(aval, fmt.length);
    if (fmt.match(/^[#?]+$/)) {
        o = "" + val;
        if (val === 0) o = "";
        return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
    }
    if (r = fmt.match(frac1)) return write_num_f2(r, aval, sign);
    if (fmt.match(/^#+0+$/)) return sign + pad0(aval, fmt.length - fmt.indexOf("0"));
    if (r = fmt.match(dec1)) {
        /*:: if(!Array.isArray(r)) throw new Error("unreachable"); */ o = ("" + val).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1]));
        o = o.replace(/\.(\d*)$/, function($$, $1) {
            /*:: if(!Array.isArray(r)) throw new Error("unreachable"); */ return "." + $1 + fill("0", hashq(r[1]).length - $1.length);
        });
        return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
    }
    fmt = fmt.replace(/^#+([0.])/, "$1");
    if (r = fmt.match(/^(0*)\.(#*)$/)) return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
    if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify("" + aval);
    if (r = fmt.match(/^#,##0\.([#0]*0)$/)) return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val) + "." + fill("0", r[1].length);
    if (r = fmt.match(/^#,#*,#0/)) return write_num_int(type, fmt.replace(/^#,#*,/, ""), val);
    if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
        o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val));
        ri = 0;
        return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x) {
            return ri < o.length ? o.charAt(ri++) : x === "0" ? "0" : "";
        }));
    }
    if (fmt.match(phone)) {
        o = write_num_int(type, "##########", val);
        return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
    }
    var oa = "";
    if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
        ri = Math.min(/*::String(*/ r[4]/*::)*/ .length, 7);
        ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
        o = "" + sign;
        oa = write_num("n", /*::String(*/ r[1], ff[1]);
        if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0";
        o += oa + /*::String(*/ r[2] + "/" + /*::String(*/ r[3] /*::)*/ ;
        oa = rpad_(ff[2], ri);
        if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
        o += oa;
        return o;
    }
    if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
        ri = Math.min(Math.max(r[1].length, r[4].length), 7);
        ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
        return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
    }
    if (r = fmt.match(/^[#0?]+$/)) {
        o = "" + val;
        if (fmt.length <= o.length) return o;
        return hashq(fmt.substr(0, fmt.length - o.length)) + o;
    }
    if (r = fmt.match(/^([#0]+)\.([#0]+)$/)) {
        o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
        ri = o.indexOf(".");
        var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
        return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
    }
    if (r = fmt.match(/^00,000\.([#0]*0)$/)) return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
        return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
    }) + "." + pad0(0, r[1].length);
    switch(fmt){
        case "###,###":
        case "##,###":
        case "#,###":
            var x = commaify("" + aval);
            return x !== "0" ? sign + x : "";
        default:
            if (fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
    }
    throw new Error("unsupported format |" + fmt + "|");
}
function write_num(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {
    return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
}
function SSF_split_fmt(fmt /*:string*/ ) /*:Array<string>*/ {
    var out /*:Array<string>*/  = [];
    var in_str = false /*, cc*/ ;
    for(var i = 0, j = 0; i < fmt.length; ++i)switch(/*cc=*/ fmt.charCodeAt(i)){
        case 34:
            /* '"' */ in_str = !in_str;
            break;
        case 95:
        case 42:
        case 92:
            /* '_' '*' '\\' */ ++i;
            break;
        case 59:
            /* ';' */ out[out.length] = fmt.substr(j, i - j);
            j = i + 1;
    }
    out[out.length] = fmt.substr(j);
    if (in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
    return out;
}
var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
function fmt_is_date(fmt /*:string*/ ) /*:boolean*/ {
    var i = 0, /*cc = 0,*/ c = "", o = "";
    while(i < fmt.length)switch(c = fmt.charAt(i)){
        case "G":
            if (SSF_isgeneral(fmt, i)) i += 6;
            i++;
            break;
        case '"':
            for(; /*cc=*/ fmt.charCodeAt(++i) !== 34 && i < fmt.length;);
            ++i;
            break;
        case "\\":
            i += 2;
            break;
        case "_":
            i += 2;
            break;
        case "@":
            ++i;
            break;
        case "B":
        case "b":
            if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") return true;
        /* falls through */ case "M":
        case "D":
        case "Y":
        case "H":
        case "S":
        case "E":
        /* falls through */ case "m":
        case "d":
        case "y":
        case "h":
        case "s":
        case "e":
        case "g":
            return true;
        case "A":
        case "a":
        case "上":
            if (fmt.substr(i, 3).toUpperCase() === "A/P") return true;
            if (fmt.substr(i, 5).toUpperCase() === "AM/PM") return true;
            if (fmt.substr(i, 5).toUpperCase() === "上午/下午") return true;
            ++i;
            break;
        case "[":
            o = c;
            while(fmt.charAt(i++) !== "]" && i < fmt.length)o += fmt.charAt(i);
            if (o.match(SSF_abstime)) return true;
            break;
        case ".":
        /* falls through */ case "0":
        case "#":
            while(i < fmt.length && ("0#?.,E+-%".indexOf(c = fmt.charAt(++i)) > -1 || c == "\\" && fmt.charAt(i + 1) == "-" && "0#".indexOf(fmt.charAt(i + 2)) > -1));
            break;
        case "?":
            while(fmt.charAt(++i) === c);
            break;
        case "*":
            ++i;
            if (fmt.charAt(i) == " " || fmt.charAt(i) == "*") ++i;
            break;
        case "(":
        case ")":
            ++i;
            break;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
            while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1);
            break;
        case " ":
            ++i;
            break;
        default:
            ++i;
            break;
    }
    return false;
}
function eval_fmt(fmt /*:string*/ , v /*:any*/ , opts /*:any*/ , flen /*:number*/ ) {
    var out = [], o = "", i = 0, c = "", lst = "t", dt, j, cc;
    var hr = "H";
    /* Tokenize */ while(i < fmt.length)switch(c = fmt.charAt(i)){
        case "G":
            /* General */ if (!SSF_isgeneral(fmt, i)) throw new Error("unrecognized character " + c + " in " + fmt);
            out[out.length] = {
                t: "G",
                v: "General"
            };
            i += 7;
            break;
        case '"':
            /* Literal text */ for(o = ""; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length;)o += String.fromCharCode(cc);
            out[out.length] = {
                t: "t",
                v: o
            };
            ++i;
            break;
        case "\\":
            var w = fmt.charAt(++i), t = w === "(" || w === ")" ? w : "t";
            out[out.length] = {
                t: t,
                v: w
            };
            ++i;
            break;
        case "_":
            out[out.length] = {
                t: "t",
                v: " "
            };
            i += 2;
            break;
        case "@":
            /* Text Placeholder */ out[out.length] = {
                t: "T",
                v: v
            };
            ++i;
            break;
        case "B":
        case "b":
            if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") {
                if (dt == null) {
                    dt = SSF_parse_date_code(v, opts, fmt.charAt(i + 1) === "2");
                    if (dt == null) return "";
                }
                out[out.length] = {
                    t: "X",
                    v: fmt.substr(i, 2)
                };
                lst = c;
                i += 2;
                break;
            }
        /* falls through */ case "M":
        case "D":
        case "Y":
        case "H":
        case "S":
        case "E":
            c = c.toLowerCase();
        /* falls through */ case "m":
        case "d":
        case "y":
        case "h":
        case "s":
        case "e":
        case "g":
            if (v < 0) return "";
            if (dt == null) {
                dt = SSF_parse_date_code(v, opts);
                if (dt == null) return "";
            }
            o = c;
            while(++i < fmt.length && fmt.charAt(i).toLowerCase() === c)o += c;
            if (c === "m" && lst.toLowerCase() === "h") c = "M";
            if (c === "h") c = hr;
            out[out.length] = {
                t: c,
                v: o
            };
            lst = c;
            break;
        case "A":
        case "a":
        case "上":
            var q = {
                t: c,
                v: c
            };
            if (dt == null) dt = SSF_parse_date_code(v, opts);
            if (fmt.substr(i, 3).toUpperCase() === "A/P") {
                if (dt != null) q.v = dt.H >= 12 ? "P" : "A";
                q.t = "T";
                hr = "h";
                i += 3;
            } else if (fmt.substr(i, 5).toUpperCase() === "AM/PM") {
                if (dt != null) q.v = dt.H >= 12 ? "PM" : "AM";
                q.t = "T";
                i += 5;
                hr = "h";
            } else if (fmt.substr(i, 5).toUpperCase() === "上午/下午") {
                if (dt != null) q.v = dt.H >= 12 ? "下午" : "上午";
                q.t = "T";
                i += 5;
                hr = "h";
            } else {
                q.t = "t";
                ++i;
            }
            if (dt == null && q.t === "T") return "";
            out[out.length] = q;
            lst = c;
            break;
        case "[":
            o = c;
            while(fmt.charAt(i++) !== "]" && i < fmt.length)o += fmt.charAt(i);
            if (o.slice(-1) !== "]") throw 'unterminated "[" block: |' + o + "|";
            if (o.match(SSF_abstime)) {
                if (dt == null) {
                    dt = SSF_parse_date_code(v, opts);
                    if (dt == null) return "";
                }
                out[out.length] = {
                    t: "Z",
                    v: o.toLowerCase()
                };
                lst = o.charAt(1);
            } else if (o.indexOf("$") > -1) {
                o = (o.match(/\$([^-\[\]]*)/) || [])[1] || "$";
                if (!fmt_is_date(fmt)) out[out.length] = {
                    t: "t",
                    v: o
                };
            }
            break;
        /* Numbers */ case ".":
            if (dt != null) {
                o = c;
                while(++i < fmt.length && (c = fmt.charAt(i)) === "0")o += c;
                out[out.length] = {
                    t: "s",
                    v: o
                };
                break;
            }
        /* falls through */ case "0":
        case "#":
            o = c;
            while(++i < fmt.length && "0#?.,E+-%".indexOf(c = fmt.charAt(i)) > -1)o += c;
            out[out.length] = {
                t: "n",
                v: o
            };
            break;
        case "?":
            o = c;
            while(fmt.charAt(++i) === c)o += c;
            out[out.length] = {
                t: c,
                v: o
            };
            lst = c;
            break;
        case "*":
            ++i;
            if (fmt.charAt(i) == " " || fmt.charAt(i) == "*") ++i;
            break; // **
        case "(":
        case ")":
            out[out.length] = {
                t: flen === 1 ? "t" : c,
                v: c
            };
            ++i;
            break;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
            o = c;
            while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1)o += fmt.charAt(i);
            out[out.length] = {
                t: "D",
                v: o
            };
            break;
        case " ":
            out[out.length] = {
                t: c,
                v: c
            };
            ++i;
            break;
        case "$":
            out[out.length] = {
                t: "t",
                v: "$"
            };
            ++i;
            break;
        default:
            if (",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP".indexOf(c) === -1) throw new Error("unrecognized character " + c + " in " + fmt);
            out[out.length] = {
                t: "t",
                v: c
            };
            ++i;
            break;
    }
    /* Scan for date/time parts */ var bt = 0, ss0 = 0, ssm;
    for(i = out.length - 1, lst = "t"; i >= 0; --i)switch(out[i].t){
        case "h":
        case "H":
            out[i].t = hr;
            lst = "h";
            if (bt < 1) bt = 1;
            break;
        case "s":
            if (ssm = out[i].v.match(/\.0+$/)) ss0 = Math.max(ss0, ssm[0].length - 1);
            if (bt < 3) bt = 3;
        /* falls through */ case "d":
        case "y":
        case "M":
        case "e":
            lst = out[i].t;
            break;
        case "m":
            if (lst === "s") {
                out[i].t = "M";
                if (bt < 2) bt = 2;
            }
            break;
        case "X":
            break;
        case "Z":
            if (bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;
            if (bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;
            if (bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;
    }
    /* time rounding depends on presence of minute / second / usec fields */ switch(bt){
        case 0:
            break;
        case 1:
            /*::if(!dt) break;*/ if (dt.u >= 0.5) {
                dt.u = 0;
                ++dt.S;
            }
            if (dt.S >= 60) {
                dt.S = 0;
                ++dt.M;
            }
            if (dt.M >= 60) {
                dt.M = 0;
                ++dt.H;
            }
            break;
        case 2:
            /*::if(!dt) break;*/ if (dt.u >= 0.5) {
                dt.u = 0;
                ++dt.S;
            }
            if (dt.S >= 60) {
                dt.S = 0;
                ++dt.M;
            }
            break;
    }
    /* replace fields */ var nstr = "", jj;
    for(i = 0; i < out.length; ++i)switch(out[i].t){
        case "t":
        case "T":
        case " ":
        case "D":
            break;
        case "X":
            out[i].v = "";
            out[i].t = ";";
            break;
        case "d":
        case "m":
        case "y":
        case "h":
        case "H":
        case "M":
        case "s":
        case "e":
        case "b":
        case "Z":
            /*::if(!dt) throw "unreachable"; */ out[i].v = SSF_write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
            out[i].t = "t";
            break;
        case "n":
        case "?":
            jj = i + 1;
            while(out[jj] != null && ((c = out[jj].t) === "?" || c === "D" || (c === " " || c === "t") && out[jj + 1] != null && (out[jj + 1].t === "?" || out[jj + 1].t === "t" && out[jj + 1].v === "/") || out[i].t === "(" && (c === " " || c === "n" || c === ")") || c === "t" && (out[jj].v === "/" || out[jj].v === " " && out[jj + 1] != null && out[jj + 1].t == "?"))){
                out[i].v += out[jj].v;
                out[jj] = {
                    v: "",
                    t: ";"
                };
                ++jj;
            }
            nstr += out[i].v;
            i = jj - 1;
            break;
        case "G":
            out[i].t = "t";
            out[i].v = SSF_general(v, opts);
            break;
    }
    var vv = "", myv, ostr;
    if (nstr.length > 0) {
        if (nstr.charCodeAt(0) == 40) /* '(' */ {
            myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v;
            ostr = write_num("n", nstr, myv);
        } else {
            myv = v < 0 && flen > 1 ? -v : v;
            ostr = write_num("n", nstr, myv);
            if (myv < 0 && out[0] && out[0].t == "t") {
                ostr = ostr.substr(1);
                out[0].v = "-" + out[0].v;
            }
        }
        jj = ostr.length - 1;
        var decpt = out.length;
        for(i = 0; i < out.length; ++i)if (out[i] != null && out[i].t != "t" && out[i].v.indexOf(".") > -1) {
            decpt = i;
            break;
        }
        var lasti = out.length;
        if (decpt === out.length && ostr.indexOf("E") === -1) {
            for(i = out.length - 1; i >= 0; --i){
                if (out[i] == null || "n?".indexOf(out[i].t) === -1) continue;
                if (jj >= out[i].v.length - 1) {
                    jj -= out[i].v.length;
                    out[i].v = ostr.substr(jj + 1, out[i].v.length);
                } else if (jj < 0) out[i].v = "";
                else {
                    out[i].v = ostr.substr(0, jj + 1);
                    jj = -1;
                }
                out[i].t = "t";
                lasti = i;
            }
            if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
        } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
            jj = ostr.indexOf(".") - 1;
            for(i = decpt; i >= 0; --i){
                if (out[i] == null || "n?".indexOf(out[i].t) === -1) continue;
                j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") - 1 : out[i].v.length - 1;
                vv = out[i].v.substr(j + 1);
                for(; j >= 0; --j)if (jj >= 0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv;
                out[i].v = vv;
                out[i].t = "t";
                lasti = i;
            }
            if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
            jj = ostr.indexOf(".") + 1;
            for(i = decpt; i < out.length; ++i){
                if (out[i] == null || "n?(".indexOf(out[i].t) === -1 && i !== decpt) continue;
                j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") + 1 : 0;
                vv = out[i].v.substr(0, j);
                for(; j < out[i].v.length; ++j)if (jj < ostr.length) vv += ostr.charAt(jj++);
                out[i].v = vv;
                out[i].t = "t";
                lasti = i;
            }
        }
    }
    for(i = 0; i < out.length; ++i)if (out[i] != null && "n?".indexOf(out[i].t) > -1) {
        myv = flen > 1 && v < 0 && i > 0 && out[i - 1].v === "-" ? -v : v;
        out[i].v = write_num(out[i].t, out[i].v, myv);
        out[i].t = "t";
    }
    var retval = "";
    for(i = 0; i !== out.length; ++i)if (out[i] != null) retval += out[i].v;
    return retval;
}
var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
function chkcond(v, rr) {
    if (rr == null) return false;
    var thresh = parseFloat(rr[2]);
    switch(rr[1]){
        case "=":
            if (v == thresh) return true;
            break;
        case ">":
            if (v > thresh) return true;
            break;
        case "<":
            if (v < thresh) return true;
            break;
        case "<>":
            if (v != thresh) return true;
            break;
        case ">=":
            if (v >= thresh) return true;
            break;
        case "<=":
            if (v <= thresh) return true;
            break;
    }
    return false;
}
function choose_fmt(f /*:string*/ , v /*:any*/ ) {
    var fmt = SSF_split_fmt(f);
    var l = fmt.length, lat = fmt[l - 1].indexOf("@");
    if (l < 4 && lat > -1) --l;
    if (fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
    if (typeof v !== "number") return [
        4,
        fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"
    ];
    switch(fmt.length){
        case 1:
            fmt = lat > -1 ? [
                "General",
                "General",
                "General",
                fmt[0]
            ] : [
                fmt[0],
                fmt[0],
                fmt[0],
                "@"
            ];
            break;
        case 2:
            fmt = lat > -1 ? [
                fmt[0],
                fmt[0],
                fmt[0],
                fmt[1]
            ] : [
                fmt[0],
                fmt[1],
                fmt[0],
                "@"
            ];
            break;
        case 3:
            fmt = lat > -1 ? [
                fmt[0],
                fmt[1],
                fmt[0],
                fmt[2]
            ] : [
                fmt[0],
                fmt[1],
                fmt[2],
                "@"
            ];
            break;
        case 4:
            break;
    }
    var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
    if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [
        l,
        ff
    ];
    if (fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
        var m1 = fmt[0].match(cfregex2);
        var m2 = fmt[1].match(cfregex2);
        return chkcond(v, m1) ? [
            l,
            fmt[0]
        ] : chkcond(v, m2) ? [
            l,
            fmt[1]
        ] : [
            l,
            fmt[m1 != null && m2 != null ? 2 : 1]
        ];
    }
    return [
        l,
        ff
    ];
}
function SSF_format(fmt /*:string|number*/ , v /*:any*/ , o /*:?any*/ ) {
    if (o == null) o = {};
    var sfmt = "";
    switch(typeof fmt){
        case "string":
            if (fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF;
            else sfmt = fmt;
            break;
        case "number":
            if (fmt == 14 && o.dateNF) sfmt = o.dateNF;
            else sfmt = (o.table != null ? o.table /*:any*/  : table_fmt)[fmt];
            if (sfmt == null) sfmt = o.table && o.table[SSF_default_map[fmt]] || table_fmt[SSF_default_map[fmt]];
            if (sfmt == null) sfmt = SSF_default_str[fmt] || "General";
            break;
    }
    if (SSF_isgeneral(sfmt, 0)) return SSF_general(v, o);
    if (v instanceof Date) v = datenum_local(v, o.date1904);
    var f = choose_fmt(sfmt, v);
    if (SSF_isgeneral(f[1])) return SSF_general(v, o);
    if (v === true) v = "TRUE";
    else if (v === false) v = "FALSE";
    else if (v === "" || v == null) return "";
    return eval_fmt(f[1], v, o, f[0]);
}
function SSF_load(fmt /*:string*/ , idx /*:?number*/ ) /*:number*/ {
    if (typeof idx != "number") {
        idx = +idx || -1;
        /*::if(typeof idx != 'number') return 0x188; */ for(var i = 0; i < 0x0188; ++i){
            /*::if(typeof idx != 'number') return 0x188; */ if (table_fmt[i] == undefined) {
                if (idx < 0) idx = i;
                continue;
            }
            if (table_fmt[i] == fmt) {
                idx = i;
                break;
            }
        }
        /*::if(typeof idx != 'number') return 0x188; */ if (idx < 0) idx = 0x187;
    }
    /*::if(typeof idx != 'number') return 0x188; */ table_fmt[idx] = fmt;
    return idx;
}
function SSF_load_table(tbl /*:SSFTable*/ ) /*:void*/ {
    for(var i = 0; i != 0x0188; ++i)if (tbl[i] !== undefined) SSF_load(tbl[i], i);
}
function make_ssf() {
    table_fmt = SSF_init_table();
}
var SSF = {
    format: SSF_format,
    load: SSF_load,
    _table: table_fmt,
    load_table: SSF_load_table,
    parse_date_code: SSF_parse_date_code,
    is_date: fmt_is_date,
    get_table: function get_table() {
        return SSF._table = table_fmt;
    }
};
var SSFImplicit /*{[number]:string}*/  = {
    "5": '"$"#,##0_);\\("$"#,##0\\)',
    "6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    "7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    "8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    "23": "General",
    "24": "General",
    "25": "General",
    "26": "General",
    "27": "m/d/yy",
    "28": "m/d/yy",
    "29": "m/d/yy",
    "30": "m/d/yy",
    "31": "m/d/yy",
    "32": "h:mm:ss",
    "33": "h:mm:ss",
    "34": "h:mm:ss",
    "35": "h:mm:ss",
    "36": "m/d/yy",
    "41": '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',
    "42": '_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)',
    "43": '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)',
    "44": '_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)',
    "50": "m/d/yy",
    "51": "m/d/yy",
    "52": "m/d/yy",
    "53": "m/d/yy",
    "54": "m/d/yy",
    "55": "m/d/yy",
    "56": "m/d/yy",
    "57": "m/d/yy",
    "58": "m/d/yy",
    "59": "0",
    "60": "0.00",
    "61": "#,##0",
    "62": "#,##0.00",
    "63": '"$"#,##0_);\\("$"#,##0\\)',
    "64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    "65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    "66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    "67": "0%",
    "68": "0.00%",
    "69": "# ?/?",
    "70": "# ??/??",
    "71": "m/d/yy",
    "72": "m/d/yy",
    "73": "d-mmm-yy",
    "74": "d-mmm",
    "75": "mmm-yy",
    "76": "h:mm",
    "77": "h:mm:ss",
    "78": "m/d/yy h:mm",
    "79": "mm:ss",
    "80": "[h]:mm:ss",
    "81": "mmss.0"
} /*:any*/ ;
/* dateNF parse TODO: move to SSF */ var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
function dateNF_regex(dateNF /*:string|number*/ ) /*:RegExp*/ {
    var fmt = typeof dateNF == "number" ? table_fmt[dateNF] : dateNF;
    fmt = fmt.replace(dateNFregex, "(\\d+)");
    return new RegExp("^" + fmt + "$");
}
function dateNF_fix(str /*:string*/ , dateNF /*:string*/ , match /*:Array<string>*/ ) /*:string*/ {
    var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;
    (dateNF.match(dateNFregex) || []).forEach(function(n, i) {
        var v = parseInt(match[i + 1], 10);
        switch(n.toLowerCase().charAt(0)){
            case "y":
                Y = v;
                break;
            case "d":
                d = v;
                break;
            case "h":
                H = v;
                break;
            case "s":
                S = v;
                break;
            case "m":
                if (H >= 0) M = v;
                else m = v;
                break;
        }
    });
    if (S >= 0 && M == -1 && m >= 0) {
        M = m;
        m = -1;
    }
    var datestr = ("" + (Y >= 0 ? Y : new Date().getFullYear())).slice(-4) + "-" + ("00" + (m >= 1 ? m : 1)).slice(-2) + "-" + ("00" + (d >= 1 ? d : 1)).slice(-2);
    if (datestr.length == 7) datestr = "0" + datestr;
    if (datestr.length == 8) datestr = "20" + datestr;
    var timestr = ("00" + (H >= 0 ? H : 0)).slice(-2) + ":" + ("00" + (M >= 0 ? M : 0)).slice(-2) + ":" + ("00" + (S >= 0 ? S : 0)).slice(-2);
    if (H == -1 && M == -1 && S == -1) return datestr;
    if (Y == -1 && m == -1 && d == -1) return timestr;
    return datestr + "T" + timestr;
}
/*::
declare var ReadShift:any;
declare var CheckField:any;
declare var prep_blob:any;
declare var __readUInt32LE:any;
declare var __readInt32LE:any;
declare var __toBuffer:any;
declare var __utf16le:any;
declare var bconcat:any;
declare var s2a:any;
declare var chr0:any;
declare var chr1:any;
declare var has_buf:boolean;
declare var new_buf:any;
declare var new_raw_buf:any;
declare var new_unsafe_buf:any;
declare var Buffer_from:any;
*/ /* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */ /* vim: set ts=2: */ /*jshint eqnull:true */ /*exported CFB */ /*global Uint8Array:false, Uint16Array:false */ /*::
type SectorEntry = {
	name?:string;
	nodes?:Array<number>;
	data:RawBytes;
};
type SectorList = {
	[k:string|number]:SectorEntry;
	name:?string;
	fat_addrs:Array<number>;
	ssz:number;
}
type CFBFiles = {[n:string]:CFBEntry};
*/ /* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */ /* vim: set ts=2: */ /*exported CRC32 */ var CRC32 = /*#__PURE__*/ function() {
    var CRC32 = {};
    CRC32.version = "1.2.0";
    /* see perf/crc32table.js */ /*global Int32Array */ function signed_crc_table() /*:any*/ {
        var c = 0, table /*:Array<number>*/  = new Array(256);
        for(var n = 0; n != 256; ++n){
            c = n;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            table[n] = c;
        }
        return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
    }
    var T0 = signed_crc_table();
    function slice_by_16_tables(T) {
        var c = 0, v = 0, n = 0, table /*:Array<number>*/  = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
        for(n = 0; n != 256; ++n)table[n] = T[n];
        for(n = 0; n != 256; ++n){
            v = T[n];
            for(c = 256 + n; c < 4096; c += 256)v = table[c] = v >>> 8 ^ T[v & 0xFF];
        }
        var out = [];
        for(n = 1; n != 16; ++n)out[n - 1] = typeof Int32Array !== "undefined" ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
        return out;
    }
    var TT = slice_by_16_tables(T0);
    var T1 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
    var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];
    var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
    function crc32_bstr(bstr /*:string*/ , seed /*:number*/ ) /*:number*/ {
        var C = seed /*:: ? 0 : 0 */  ^ -1;
        for(var i = 0, L = bstr.length; i < L;)C = C >>> 8 ^ T0[(C ^ bstr.charCodeAt(i++)) & 0xFF];
        return ~C;
    }
    function crc32_buf(B /*:Uint8Array|Array<number>*/ , seed /*:number*/ ) /*:number*/ {
        var C = seed /*:: ? 0 : 0 */  ^ -1, L = B.length - 15, i = 0;
        for(; i < L;)C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
        L += 15;
        while(i < L)C = C >>> 8 ^ T0[(C ^ B[i++]) & 0xFF];
        return ~C;
    }
    function crc32_str(str /*:string*/ , seed /*:number*/ ) /*:number*/ {
        var C = seed ^ -1;
        for(var i = 0, L = str.length, c = 0, d = 0; i < L;){
            c = str.charCodeAt(i++);
            if (c < 0x80) C = C >>> 8 ^ T0[(C ^ c) & 0xFF];
            else if (c < 0x800) {
                C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];
            } else if (c >= 0xD800 && c < 0xE000) {
                c = (c & 1023) + 64;
                d = str.charCodeAt(i++) & 1023;
                C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 0xFF];
            } else {
                C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];
            }
        }
        return ~C;
    }
    CRC32.table = T0;
    CRC32.bstr = crc32_bstr;
    CRC32.buf = crc32_buf;
    CRC32.str = crc32_str;
    return CRC32;
}();
/* [MS-CFB] v20171201 */ var CFB = /*#__PURE__*/ function _CFB() {
    var exports = {};
    exports.version = "1.2.1";
    /* [MS-CFB] 2.6.4 */ function namecmp(l /*:string*/ , r /*:string*/ ) /*:number*/ {
        var L = l.split("/"), R = r.split("/");
        for(var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i){
            if (c = L[i].length - R[i].length) return c;
            if (L[i] != R[i]) return L[i] < R[i] ? -1 : 1;
        }
        return L.length - R.length;
    }
    function dirname(p /*:string*/ ) /*:string*/ {
        if (p.charAt(p.length - 1) == "/") return p.slice(0, -1).indexOf("/") === -1 ? p : dirname(p.slice(0, -1));
        var c = p.lastIndexOf("/");
        return c === -1 ? p : p.slice(0, c + 1);
    }
    function filename(p /*:string*/ ) /*:string*/ {
        if (p.charAt(p.length - 1) == "/") return filename(p.slice(0, -1));
        var c = p.lastIndexOf("/");
        return c === -1 ? p : p.slice(c + 1);
    }
    /* -------------------------------------------------------------------------- */ /* DOS Date format:
   high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low
   add 1980 to stored year
   stored second should be doubled
*/ /* write JS date to buf as a DOS date */ function write_dos_date(buf /*:CFBlob*/ , date /*:Date|string*/ ) {
        if (typeof date === "string") date = new Date(date);
        var hms /*:number*/  = date.getHours();
        hms = hms << 6 | date.getMinutes();
        hms = hms << 5 | date.getSeconds() >>> 1;
        buf.write_shift(2, hms);
        var ymd /*:number*/  = date.getFullYear() - 1980;
        ymd = ymd << 4 | date.getMonth() + 1;
        ymd = ymd << 5 | date.getDate();
        buf.write_shift(2, ymd);
    }
    /* read four bytes from buf and interpret as a DOS date */ function parse_dos_date(buf /*:CFBlob*/ ) /*:Date*/ {
        var hms = buf.read_shift(2) & 0xFFFF;
        var ymd = buf.read_shift(2) & 0xFFFF;
        var val = new Date();
        var d = ymd & 0x1F;
        ymd >>>= 5;
        var m = ymd & 0x0F;
        ymd >>>= 4;
        val.setMilliseconds(0);
        val.setFullYear(ymd + 1980);
        val.setMonth(m - 1);
        val.setDate(d);
        var S = hms & 0x1F;
        hms >>>= 5;
        var M = hms & 0x3F;
        hms >>>= 6;
        val.setHours(hms);
        val.setMinutes(M);
        val.setSeconds(S << 1);
        return val;
    }
    function parse_extra_field(blob /*:CFBlob*/ ) /*:any*/ {
        prep_blob(blob, 0);
        var o = /*::(*/ {} /*:: :any)*/ ;
        var flags = 0;
        while(blob.l <= blob.length - 4){
            var type = blob.read_shift(2);
            var sz = blob.read_shift(2), tgt = blob.l + sz;
            var p = {};
            switch(type){
                /* UNIX-style Timestamps */ case 0x5455:
                    flags = blob.read_shift(1);
                    if (flags & 1) p.mtime = blob.read_shift(4);
                    /* for some reason, CD flag corresponds to LFH */ if (sz > 5) {
                        if (flags & 2) p.atime = blob.read_shift(4);
                        if (flags & 4) p.ctime = blob.read_shift(4);
                    }
                    if (p.mtime) p.mt = new Date(p.mtime * 1000);
                    break;
            }
            blob.l = tgt;
            o[type] = p;
        }
        return o;
    }
    var fs /*:: = require('fs'); */ ;
    function get_fs() {
        return fs || (fs = {});
    }
    function parse(file /*:RawBytes*/ , options /*:CFBReadOpts*/ ) /*:CFBContainer*/ {
        if (file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);
        if ((file[0] | 0x20) == 0x6d && (file[1] | 0x20) == 0x69) return parse_mad(file, options);
        if (file.length < 512) throw new Error("CFB file size " + file.length + " < 512");
        var mver = 3;
        var ssz = 512;
        var nmfs = 0; // number of mini FAT sectors
        var difat_sec_cnt = 0;
        var dir_start = 0;
        var minifat_start = 0;
        var difat_start = 0;
        var fat_addrs /*:Array<number>*/  = []; // locations of FAT sectors
        /* [MS-CFB] 2.2 Compound File Header */ var blob /*:CFBlob*/  = /*::(*/ file.slice(0, 512) /*:: :any)*/ ;
        prep_blob(blob, 0);
        /* major version */ var mv = check_get_mver(blob);
        mver = mv[0];
        switch(mver){
            case 3:
                ssz = 512;
                break;
            case 4:
                ssz = 4096;
                break;
            case 0:
                if (mv[1] == 0) return parse_zip(file, options);
            /* falls through */ default:
                throw new Error("Major Version: Expected 3 or 4 saw " + mver);
        }
        /* reprocess header */ if (ssz !== 512) {
            blob = /*::(*/ file.slice(0, ssz) /*:: :any)*/ ;
            prep_blob(blob, 28 /* blob.l */ );
        }
        /* Save header for final object */ var header /*:RawBytes*/  = file.slice(0, ssz);
        check_shifts(blob, mver);
        // Number of Directory Sectors
        var dir_cnt /*:number*/  = blob.read_shift(4, "i");
        if (mver === 3 && dir_cnt !== 0) throw new Error("# Directory Sectors: Expected 0 saw " + dir_cnt);
        // Number of FAT Sectors
        blob.l += 4;
        // First Directory Sector Location
        dir_start = blob.read_shift(4, "i");
        // Transaction Signature
        blob.l += 4;
        // Mini Stream Cutoff Size
        blob.chk("00100000", "Mini Stream Cutoff Size: ");
        // First Mini FAT Sector Location
        minifat_start = blob.read_shift(4, "i");
        // Number of Mini FAT Sectors
        nmfs = blob.read_shift(4, "i");
        // First DIFAT sector location
        difat_start = blob.read_shift(4, "i");
        // Number of DIFAT Sectors
        difat_sec_cnt = blob.read_shift(4, "i");
        // Grab FAT Sector Locations
        for(var q = -1, j = 0; j < 109; ++j){
            q = blob.read_shift(4, "i");
            if (q < 0) break;
            fat_addrs[j] = q;
        }
        /** Break the file up into sectors */ var sectors /*:Array<RawBytes>*/  = sectorify(file, ssz);
        sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
        /** Chains */ var sector_list /*:SectorList*/  = make_sector_list(sectors, dir_start, fat_addrs, ssz);
        sector_list[dir_start].name = "!Directory";
        if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT";
        sector_list[fat_addrs[0]].name = "!FAT";
        sector_list.fat_addrs = fat_addrs;
        sector_list.ssz = ssz;
        /* [MS-CFB] 2.6.1 Compound File Directory Entry */ var files /*:CFBFiles*/  = {}, Paths /*:Array<string>*/  = [], FileIndex /*:CFBFileIndex*/  = [], FullPaths /*:Array<string>*/  = [];
        read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);
        build_full_paths(FileIndex, FullPaths, Paths);
        Paths.shift();
        var o = {
            FileIndex: FileIndex,
            FullPaths: FullPaths
        };
        // $FlowIgnore
        if (options && options.raw) o.raw = {
            header: header,
            sectors: sectors
        };
        return o;
    } // parse
    /* [MS-CFB] 2.2 Compound File Header -- read up to major version */ function check_get_mver(blob /*:CFBlob*/ ) /*:[number, number]*/ {
        if (blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [
            0,
            0
        ];
        // header signature 8
        blob.chk(HEADER_SIGNATURE, "Header Signature: ");
        // clsid 16
        //blob.chk(HEADER_CLSID, 'CLSID: ');
        blob.l += 16;
        // minor version 2
        var mver /*:number*/  = blob.read_shift(2, "u");
        return [
            blob.read_shift(2, "u"),
            mver
        ];
    }
    function check_shifts(blob /*:CFBlob*/ , mver /*:number*/ ) /*:void*/ {
        var shift = 0x09;
        // Byte Order
        //blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff
        blob.l += 2;
        // Sector Shift
        switch(shift = blob.read_shift(2)){
            case 0x09:
                if (mver != 3) throw new Error("Sector Shift: Expected 9 saw " + shift);
                break;
            case 0x0c:
                if (mver != 4) throw new Error("Sector Shift: Expected 12 saw " + shift);
                break;
            default:
                throw new Error("Sector Shift: Expected 9 or 12 saw " + shift);
        }
        // Mini Sector Shift
        blob.chk("0600", "Mini Sector Shift: ");
        // Reserved
        blob.chk("000000000000", "Reserved: ");
    }
    /** Break the file up into sectors */ function sectorify(file /*:RawBytes*/ , ssz /*:number*/ ) /*:Array<RawBytes>*/ {
        var nsectors = Math.ceil(file.length / ssz) - 1;
        var sectors /*:Array<RawBytes>*/  = [];
        for(var i = 1; i < nsectors; ++i)sectors[i - 1] = file.slice(i * ssz, (i + 1) * ssz);
        sectors[nsectors - 1] = file.slice(nsectors * ssz);
        return sectors;
    }
    /* [MS-CFB] 2.6.4 Red-Black Tree */ function build_full_paths(FI /*:CFBFileIndex*/ , FP /*:Array<string>*/ , Paths /*:Array<string>*/ ) /*:void*/ {
        var i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;
        var dad /*:Array<number>*/  = [], q /*:Array<number>*/  = [];
        for(; i < pl; ++i){
            dad[i] = q[i] = i;
            FP[i] = Paths[i];
        }
        for(; j < q.length; ++j){
            i = q[j];
            L = FI[i].L;
            R = FI[i].R;
            C = FI[i].C;
            if (dad[i] === i) {
                if (L !== -1 /*NOSTREAM*/  && dad[L] !== L) dad[i] = dad[L];
                if (R !== -1 && dad[R] !== R) dad[i] = dad[R];
            }
            if (C !== -1 /*NOSTREAM*/ ) dad[C] = i;
            if (L !== -1 && i != dad[i]) {
                dad[L] = dad[i];
                if (q.lastIndexOf(L) < j) q.push(L);
            }
            if (R !== -1 && i != dad[i]) {
                dad[R] = dad[i];
                if (q.lastIndexOf(R) < j) q.push(R);
            }
        }
        for(i = 1; i < pl; ++i)if (dad[i] === i) {
            if (R !== -1 /*NOSTREAM*/  && dad[R] !== R) dad[i] = dad[R];
            else if (L !== -1 && dad[L] !== L) dad[i] = dad[L];
        }
        for(i = 1; i < pl; ++i){
            if (FI[i].type === 0 /* unknown */ ) continue;
            j = i;
            if (j != dad[j]) do {
                j = dad[j];
                FP[i] = FP[j] + "/" + FP[i];
            }while (j !== 0 && -1 !== dad[j] && j != dad[j]);
            dad[i] = -1;
        }
        FP[0] += "/";
        for(i = 1; i < pl; ++i)if (FI[i].type !== 2 /* stream */ ) FP[i] += "/";
    }
    function get_mfat_entry(entry /*:CFBEntry*/ , payload /*:RawBytes*/ , mini /*:?RawBytes*/ ) /*:CFBlob*/ {
        var start = entry.start, size = entry.size;
        //return (payload.slice(start*MSSZ, start*MSSZ + size)/*:any*/);
        var o = [];
        var idx = start;
        while(mini && size > 0 && idx >= 0){
            o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
            size -= MSSZ;
            idx = __readInt32LE(mini, idx * 4);
        }
        if (o.length === 0) return new_buf(0);
        return bconcat(o).slice(0, entry.size);
    }
    /** Chase down the rest of the DIFAT chain to build a comprehensive list
    DIFAT chains by storing the next sector number as the last 32 bits */ function sleuth_fat(idx /*:number*/ , cnt /*:number*/ , sectors /*:Array<RawBytes>*/ , ssz /*:number*/ , fat_addrs) /*:void*/ {
        var q /*:number*/  = ENDOFCHAIN;
        if (idx === ENDOFCHAIN) {
            if (cnt !== 0) throw new Error("DIFAT chain shorter than expected");
        } else if (idx !== -1 /*FREESECT*/ ) {
            var sector = sectors[idx], m = (ssz >>> 2) - 1;
            if (!sector) return;
            for(var i = 0; i < m; ++i){
                if ((q = __readInt32LE(sector, i * 4)) === ENDOFCHAIN) break;
                fat_addrs.push(q);
            }
            sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);
        }
    }
    /** Follow the linked list of sectors for a given starting point */ function get_sector_list(sectors /*:Array<RawBytes>*/ , start /*:number*/ , fat_addrs /*:Array<number>*/ , ssz /*:number*/ , chkd /*:?Array<boolean>*/ ) /*:SectorEntry*/ {
        var buf /*:Array<number>*/  = [], buf_chain /*:Array<any>*/  = [];
        if (!chkd) chkd = [];
        var modulus = ssz - 1, j = 0, jj = 0;
        for(j = start; j >= 0;){
            chkd[j] = true;
            buf[buf.length] = j;
            buf_chain.push(sectors[j]);
            var addr = fat_addrs[Math.floor(j * 4 / ssz)];
            jj = j * 4 & modulus;
            if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
            if (!sectors[addr]) break;
            j = __readInt32LE(sectors[addr], jj);
        }
        return {
            nodes: buf,
            data: __toBuffer([
                buf_chain
            ])
        };
    }
    /** Chase down the sector linked lists */ function make_sector_list(sectors /*:Array<RawBytes>*/ , dir_start /*:number*/ , fat_addrs /*:Array<number>*/ , ssz /*:number*/ ) /*:SectorList*/ {
        var sl = sectors.length, sector_list /*:SectorList*/  = [];
        var chkd /*:Array<boolean>*/  = [], buf /*:Array<number>*/  = [], buf_chain /*:Array<RawBytes>*/  = [];
        var modulus = ssz - 1, i = 0, j = 0, k = 0, jj = 0;
        for(i = 0; i < sl; ++i){
            buf = [];
            k = i + dir_start;
            if (k >= sl) k -= sl;
            if (chkd[k]) continue;
            buf_chain = [];
            var seen = [];
            for(j = k; j >= 0;){
                seen[j] = true;
                chkd[j] = true;
                buf[buf.length] = j;
                buf_chain.push(sectors[j]);
                var addr /*:number*/  = fat_addrs[Math.floor(j * 4 / ssz)];
                jj = j * 4 & modulus;
                if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
                if (!sectors[addr]) break;
                j = __readInt32LE(sectors[addr], jj);
                if (seen[j]) break;
            }
            sector_list[k] = {
                nodes: buf,
                data: __toBuffer([
                    buf_chain
                ])
            } /*:SectorEntry*/ ;
        }
        return sector_list;
    }
    /* [MS-CFB] 2.6.1 Compound File Directory Entry */ function read_directory(dir_start /*:number*/ , sector_list /*:SectorList*/ , sectors /*:Array<RawBytes>*/ , Paths /*:Array<string>*/ , nmfs, files, FileIndex, mini) {
        var minifat_store = 0, pl = Paths.length ? 2 : 0;
        var sector = sector_list[dir_start].data;
        var i = 0, namelen = 0, name;
        for(; i < sector.length; i += 128){
            var blob /*:CFBlob*/  = /*::(*/ sector.slice(i, i + 128) /*:: :any)*/ ;
            prep_blob(blob, 64);
            namelen = blob.read_shift(2);
            name = __utf16le(blob, 0, namelen - pl);
            Paths.push(name);
            var o /*:CFBEntry*/  = {
                name: name,
                type: blob.read_shift(1),
                color: blob.read_shift(1),
                L: blob.read_shift(4, "i"),
                R: blob.read_shift(4, "i"),
                C: blob.read_shift(4, "i"),
                clsid: blob.read_shift(16),
                state: blob.read_shift(4, "i"),
                start: 0,
                size: 0
            };
            var ctime /*:number*/  = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if (ctime !== 0) o.ct = read_date(blob, blob.l - 8);
            var mtime /*:number*/  = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if (mtime !== 0) o.mt = read_date(blob, blob.l - 8);
            o.start = blob.read_shift(4, "i");
            o.size = blob.read_shift(4, "i");
            if (o.size < 0 && o.start < 0) {
                o.size = o.type = 0;
                o.start = ENDOFCHAIN;
                o.name = "";
            }
            if (o.type === 5) {
                minifat_store = o.start;
                if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData";
            /*minifat_size = o.size;*/ } else if (o.size >= 4096 /* MSCSZ */ ) {
                o.storage = "fat";
                if (sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
                sector_list[o.start].name = o.name;
                o.content = sector_list[o.start].data.slice(0, o.size);
            } else {
                o.storage = "minifat";
                if (o.size < 0) o.size = 0;
                else if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini] || {}).data);
            }
            if (o.content) prep_blob(o.content, 0);
            files[name] = o;
            FileIndex.push(o);
        }
    }
    function read_date(blob /*:RawBytes|CFBlob*/ , offset /*:number*/ ) /*:Date*/ {
        return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1000);
    }
    function read_file(filename /*:string*/ , options /*:CFBReadOpts*/ ) {
        get_fs();
        return parse(fs.readFileSync(filename), options);
    }
    function read(blob /*:RawBytes|string*/ , options /*:CFBReadOpts*/ ) {
        var type = options && options.type;
        if (!type) {
            if (has_buf && Buffer.isBuffer(blob)) type = "buffer";
        }
        switch(type || "base64"){
            case "file":
                /*:: if(typeof blob !== 'string') throw "Must pass a filename when type='file'"; */ return read_file(blob, options);
            case "base64":
                /*:: if(typeof blob !== 'string') throw "Must pass a base64-encoded binary string when type='file'"; */ return parse(s2a(Base64_decode(blob)), options);
            case "binary":
                /*:: if(typeof blob !== 'string') throw "Must pass a binary string when type='file'"; */ return parse(s2a(blob), options);
        }
        return parse(/*::typeof blob == 'string' ? new Buffer(blob, 'utf-8') : */ blob, options);
    }
    function init_cfb(cfb /*:CFBContainer*/ , opts /*:?any*/ ) /*:void*/ {
        var o = opts || {}, root = o.root || "Root Entry";
        if (!cfb.FullPaths) cfb.FullPaths = [];
        if (!cfb.FileIndex) cfb.FileIndex = [];
        if (cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error("inconsistent CFB structure");
        if (cfb.FullPaths.length === 0) {
            cfb.FullPaths[0] = root + "/";
            cfb.FileIndex[0] = {
                name: root,
                type: 5
            } /*:any*/ ;
        }
        if (o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;
        seed_cfb(cfb);
    }
    function seed_cfb(cfb /*:CFBContainer*/ ) /*:void*/ {
        var nm = "\x01Sh33tJ5";
        if (CFB.find(cfb, "/" + nm)) return;
        var p = new_buf(4);
        p[0] = 55;
        p[1] = p[3] = 50;
        p[2] = 54;
        cfb.FileIndex.push({
            name: nm,
            type: 2,
            content: p,
            size: 4,
            L: 69,
            R: 69,
            C: 69
        } /*:any*/ );
        cfb.FullPaths.push(cfb.FullPaths[0] + nm);
        rebuild_cfb(cfb);
    }
    function rebuild_cfb(cfb /*:CFBContainer*/ , f /*:?boolean*/ ) /*:void*/ {
        init_cfb(cfb);
        var gc = false, s = false;
        for(var i = cfb.FullPaths.length - 1; i >= 0; --i){
            var _file = cfb.FileIndex[i];
            switch(_file.type){
                case 0:
                    if (s) gc = true;
                    else {
                        cfb.FileIndex.pop();
                        cfb.FullPaths.pop();
                    }
                    break;
                case 1:
                case 2:
                case 5:
                    s = true;
                    if (isNaN(_file.R * _file.L * _file.C)) gc = true;
                    if (_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;
                    break;
                default:
                    gc = true;
                    break;
            }
        }
        if (!gc && !f) return;
        var now = new Date(1987, 1, 19), j = 0;
        // Track which names exist
        var fullPaths = Object.create ? Object.create(null) : {};
        var data /*:Array<[string, CFBEntry]>*/  = [];
        for(i = 0; i < cfb.FullPaths.length; ++i){
            fullPaths[cfb.FullPaths[i]] = true;
            if (cfb.FileIndex[i].type === 0) continue;
            data.push([
                cfb.FullPaths[i],
                cfb.FileIndex[i]
            ]);
        }
        for(i = 0; i < data.length; ++i){
            var dad = dirname(data[i][0]);
            s = fullPaths[dad];
            if (!s) {
                data.push([
                    dad,
                    {
                        name: filename(dad).replace("/", ""),
                        type: 1,
                        clsid: HEADER_CLSID,
                        ct: now,
                        mt: now,
                        content: null
                    } /*:any*/ 
                ]);
                // Add name to set
                fullPaths[dad] = true;
            }
        }
        data.sort(function(x, y) {
            return namecmp(x[0], y[0]);
        });
        cfb.FullPaths = [];
        cfb.FileIndex = [];
        for(i = 0; i < data.length; ++i){
            cfb.FullPaths[i] = data[i][0];
            cfb.FileIndex[i] = data[i][1];
        }
        for(i = 0; i < data.length; ++i){
            var elt = cfb.FileIndex[i];
            var nm = cfb.FullPaths[i];
            elt.name = filename(nm).replace("/", "");
            elt.L = elt.R = elt.C = -(elt.color = 1);
            elt.size = elt.content ? elt.content.length : 0;
            elt.start = 0;
            elt.clsid = elt.clsid || HEADER_CLSID;
            if (i === 0) {
                elt.C = data.length > 1 ? 1 : -1;
                elt.size = 0;
                elt.type = 5;
            } else if (nm.slice(-1) == "/") {
                for(j = i + 1; j < data.length; ++j)if (dirname(cfb.FullPaths[j]) == nm) break;
                elt.C = j >= data.length ? -1 : j;
                for(j = i + 1; j < data.length; ++j)if (dirname(cfb.FullPaths[j]) == dirname(nm)) break;
                elt.R = j >= data.length ? -1 : j;
                elt.type = 1;
            } else {
                if (dirname(cfb.FullPaths[i + 1] || "") == dirname(nm)) elt.R = i + 1;
                elt.type = 2;
            }
        }
    }
    function _write(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:RawBytes|string*/ {
        var _opts = options || {};
        /* MAD is order-sensitive, skip rebuild and sort */ if (_opts.fileType == "mad") return write_mad(cfb, _opts);
        rebuild_cfb(cfb);
        switch(_opts.fileType){
            case "zip":
                return write_zip(cfb, _opts);
        }
        var L = function(cfb /*:CFBContainer*/ ) /*:Array<number>*/ {
            var mini_size = 0, fat_size = 0;
            for(var i = 0; i < cfb.FileIndex.length; ++i){
                var file = cfb.FileIndex[i];
                if (!file.content) continue;
                /*:: if(file.content == null) throw new Error("unreachable"); */ var flen = file.content.length;
                if (flen > 0) {
                    if (flen < 0x1000) mini_size += flen + 0x3F >> 6;
                    else fat_size += flen + 0x01FF >> 9;
                }
            }
            var dir_cnt = cfb.FullPaths.length + 3 >> 2;
            var mini_cnt = mini_size + 7 >> 3;
            var mfat_cnt = mini_size + 0x7F >> 7;
            var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
            var fat_cnt = fat_base + 0x7F >> 7;
            var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);
            while(fat_base + fat_cnt + difat_cnt + 0x7F >> 7 > fat_cnt)difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);
            var L = [
                1,
                difat_cnt,
                fat_cnt,
                mfat_cnt,
                dir_cnt,
                fat_size,
                mini_size,
                0
            ];
            cfb.FileIndex[0].size = mini_size << 6;
            L[7] = (cfb.FileIndex[0].start = L[0] + L[1] + L[2] + L[3] + L[4] + L[5]) + (L[6] + 7 >> 3);
            return L;
        }(cfb);
        var o = new_buf(L[7] << 9);
        var i = 0, T = 0;
        for(i = 0; i < 8; ++i)o.write_shift(1, HEADER_SIG[i]);
        for(i = 0; i < 8; ++i)o.write_shift(2, 0);
        o.write_shift(2, 0x003E);
        o.write_shift(2, 0x0003);
        o.write_shift(2, 0xFFFE);
        o.write_shift(2, 0x0009);
        o.write_shift(2, 0x0006);
        for(i = 0; i < 3; ++i)o.write_shift(2, 0);
        o.write_shift(4, 0);
        o.write_shift(4, L[2]);
        o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
        o.write_shift(4, 0);
        o.write_shift(4, 4096);
        o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);
        o.write_shift(4, L[3]);
        o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);
        o.write_shift(4, L[1]);
        for(i = 0; i < 109; ++i)o.write_shift(-4, i < L[2] ? L[1] + i : -1);
        if (L[1]) for(T = 0; T < L[1]; ++T){
            for(; i < 236 + T * 127; ++i)o.write_shift(-4, i < L[2] ? L[1] + i : -1);
            o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
        }
        var chainit = function(w /*:number*/ ) /*:void*/ {
            for(T += w; i < T - 1; ++i)o.write_shift(-4, i + 1);
            if (w) {
                ++i;
                o.write_shift(-4, ENDOFCHAIN);
            }
        };
        T = i = 0;
        for(T += L[1]; i < T; ++i)o.write_shift(-4, consts.DIFSECT);
        for(T += L[2]; i < T; ++i)o.write_shift(-4, consts.FATSECT);
        chainit(L[3]);
        chainit(L[4]);
        var j /*:number*/  = 0, flen /*:number*/  = 0;
        var file /*:CFBEntry*/  = cfb.FileIndex[0];
        for(; j < cfb.FileIndex.length; ++j){
            file = cfb.FileIndex[j];
            if (!file.content) continue;
            /*:: if(file.content == null) throw new Error("unreachable"); */ flen = file.content.length;
            if (flen < 0x1000) continue;
            file.start = T;
            chainit(flen + 0x01FF >> 9);
        }
        chainit(L[6] + 7 >> 3);
        while(o.l & 0x1FF)o.write_shift(-4, consts.ENDOFCHAIN);
        T = i = 0;
        for(j = 0; j < cfb.FileIndex.length; ++j){
            file = cfb.FileIndex[j];
            if (!file.content) continue;
            /*:: if(file.content == null) throw new Error("unreachable"); */ flen = file.content.length;
            if (!flen || flen >= 0x1000) continue;
            file.start = T;
            chainit(flen + 0x3F >> 6);
        }
        while(o.l & 0x1FF)o.write_shift(-4, consts.ENDOFCHAIN);
        for(i = 0; i < L[4] << 2; ++i){
            var nm = cfb.FullPaths[i];
            if (!nm || nm.length === 0) {
                for(j = 0; j < 17; ++j)o.write_shift(4, 0);
                for(j = 0; j < 3; ++j)o.write_shift(4, -1);
                for(j = 0; j < 12; ++j)o.write_shift(4, 0);
                continue;
            }
            file = cfb.FileIndex[i];
            if (i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;
            var _nm /*:string*/  = i === 0 && _opts.root || file.name;
            flen = 2 * (_nm.length + 1);
            o.write_shift(64, _nm, "utf16le");
            o.write_shift(2, flen);
            o.write_shift(1, file.type);
            o.write_shift(1, file.color);
            o.write_shift(-4, file.L);
            o.write_shift(-4, file.R);
            o.write_shift(-4, file.C);
            if (!file.clsid) for(j = 0; j < 4; ++j)o.write_shift(4, 0);
            else o.write_shift(16, file.clsid, "hex");
            o.write_shift(4, file.state || 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, file.start);
            o.write_shift(4, file.size);
            o.write_shift(4, 0);
        }
        for(i = 1; i < cfb.FileIndex.length; ++i){
            file = cfb.FileIndex[i];
            /*:: if(!file.content) throw new Error("unreachable"); */ if (file.size >= 0x1000) {
                o.l = file.start + 1 << 9;
                if (has_buf && Buffer.isBuffer(file.content)) {
                    file.content.copy(o, o.l, 0, file.size);
                    // o is a 0-filled Buffer so just set next offset
                    o.l += file.size + 511 & -512;
                } else {
                    for(j = 0; j < file.size; ++j)o.write_shift(1, file.content[j]);
                    for(; j & 0x1FF; ++j)o.write_shift(1, 0);
                }
            }
        }
        for(i = 1; i < cfb.FileIndex.length; ++i){
            file = cfb.FileIndex[i];
            /*:: if(!file.content) throw new Error("unreachable"); */ if (file.size > 0 && file.size < 0x1000) {
                if (has_buf && Buffer.isBuffer(file.content)) {
                    file.content.copy(o, o.l, 0, file.size);
                    // o is a 0-filled Buffer so just set next offset
                    o.l += file.size + 63 & -64;
                } else {
                    for(j = 0; j < file.size; ++j)o.write_shift(1, file.content[j]);
                    for(; j & 0x3F; ++j)o.write_shift(1, 0);
                }
            }
        }
        if (has_buf) o.l = o.length;
        else // When using Buffer, already 0-filled
        while(o.l < o.length)o.write_shift(1, 0);
        return o;
    }
    /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */ function find(cfb /*:CFBContainer*/ , path /*:string*/ ) /*:?CFBEntry*/ {
        var UCFullPaths /*:Array<string>*/  = cfb.FullPaths.map(function(x) {
            return x.toUpperCase();
        });
        var UCPaths /*:Array<string>*/  = UCFullPaths.map(function(x) {
            var y = x.split("/");
            return y[y.length - (x.slice(-1) == "/" ? 2 : 1)];
        });
        var k /*:boolean*/  = false;
        if (path.charCodeAt(0) === 47 /* "/" */ ) {
            k = true;
            path = UCFullPaths[0].slice(0, -1) + path;
        } else k = path.indexOf("/") !== -1;
        var UCPath /*:string*/  = path.toUpperCase();
        var w /*:number*/  = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
        if (w !== -1) return cfb.FileIndex[w];
        var m = !UCPath.match(chr1);
        UCPath = UCPath.replace(chr0, "");
        if (m) UCPath = UCPath.replace(chr1, "!");
        for(w = 0; w < UCFullPaths.length; ++w){
            if ((m ? UCFullPaths[w].replace(chr1, "!") : UCFullPaths[w]).replace(chr0, "") == UCPath) return cfb.FileIndex[w];
            if ((m ? UCPaths[w].replace(chr1, "!") : UCPaths[w]).replace(chr0, "") == UCPath) return cfb.FileIndex[w];
        }
        return null;
    }
    /** CFB Constants */ var MSSZ = 64; /* Mini Sector Size = 1<<6 */ 
    //var MSCSZ = 4096; /* Mini Stream Cutoff Size */
    /* 2.1 Compound File Sector Numbers and Types */ var ENDOFCHAIN = -2;
    /* 2.2 Compound File Header */ var HEADER_SIGNATURE = "d0cf11e0a1b11ae1";
    var HEADER_SIG = [
        0xD0,
        0xCF,
        0x11,
        0xE0,
        0xA1,
        0xB1,
        0x1A,
        0xE1
    ];
    var HEADER_CLSID = "00000000000000000000000000000000";
    var consts = {
        /* 2.1 Compund File Sector Numbers and Types */ MAXREGSECT: -6,
        DIFSECT: -4,
        FATSECT: -3,
        ENDOFCHAIN: ENDOFCHAIN,
        FREESECT: -1,
        /* 2.2 Compound File Header */ HEADER_SIGNATURE: HEADER_SIGNATURE,
        HEADER_MINOR_VERSION: "3e00",
        MAXREGSID: -6,
        NOSTREAM: -1,
        HEADER_CLSID: HEADER_CLSID,
        /* 2.6.1 Compound File Directory Entry */ EntryTypes: [
            "unknown",
            "storage",
            "stream",
            "lockbytes",
            "property",
            "root"
        ]
    };
    function write_file(cfb /*:CFBContainer*/ , filename /*:string*/ , options /*:CFBWriteOpts*/ ) /*:void*/ {
        get_fs();
        var o = _write(cfb, options);
        /*:: if(typeof Buffer == 'undefined' || !Buffer.isBuffer(o) || !(o instanceof Buffer)) throw new Error("unreachable"); */ fs.writeFileSync(filename, o);
    }
    function a2s(o /*:RawBytes*/ ) /*:string*/ {
        var out = new Array(o.length);
        for(var i = 0; i < o.length; ++i)out[i] = String.fromCharCode(o[i]);
        return out.join("");
    }
    function write(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:RawBytes|string*/ {
        var o = _write(cfb, options);
        switch(options && options.type || "buffer"){
            case "file":
                get_fs();
                fs.writeFileSync(options.filename, o /*:any*/ );
                return o;
            case "binary":
                return typeof o == "string" ? o : a2s(o);
            case "base64":
                return Base64_encode(typeof o == "string" ? o : a2s(o));
            case "buffer":
                if (has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);
            /* falls through */ case "array":
                return typeof o == "string" ? s2a(o) : o;
        }
        return o;
    }
    /* node < 8.1 zlib does not expose bytesRead, so default to pure JS */ var _zlib;
    function use_zlib(zlib) {
        try {
            var InflateRaw = zlib.InflateRaw;
            var InflRaw = new InflateRaw();
            InflRaw._processChunk(new Uint8Array([
                3,
                0
            ]), InflRaw._finishFlushFlag);
            if (InflRaw.bytesRead) _zlib = zlib;
            else throw new Error("zlib does not expose bytesRead");
        } catch (e) {
            console.error("cannot use native zlib: " + (e.message || e));
        }
    }
    function _inflateRawSync(payload, usz) {
        if (!_zlib) return _inflate(payload, usz);
        var InflateRaw = _zlib.InflateRaw;
        var InflRaw = new InflateRaw();
        var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
        payload.l += InflRaw.bytesRead;
        return out;
    }
    function _deflateRawSync(payload) {
        return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
    }
    var CLEN_ORDER = [
        16,
        17,
        18,
        0,
        8,
        7,
        9,
        6,
        10,
        5,
        11,
        4,
        12,
        3,
        13,
        2,
        14,
        1,
        15
    ];
    /*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */ var LEN_LN = [
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        17,
        19,
        23,
        27,
        31,
        35,
        43,
        51,
        59,
        67,
        83,
        99,
        115,
        131,
        163,
        195,
        227,
        258
    ];
    /*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */ var DST_LN = [
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        13,
        17,
        25,
        33,
        49,
        65,
        97,
        129,
        193,
        257,
        385,
        513,
        769,
        1025,
        1537,
        2049,
        3073,
        4097,
        6145,
        8193,
        12289,
        16385,
        24577
    ];
    function bit_swap_8(n) {
        var t = (n << 1 | n << 11) & 0x22110 | (n << 5 | n << 15) & 0x88440;
        return (t >> 16 | t >> 8 | t) & 0xFF;
    }
    var use_typed_arrays = typeof Uint8Array !== "undefined";
    var bitswap8 = use_typed_arrays ? new Uint8Array(256) : [];
    for(var q = 0; q < 256; ++q)bitswap8[q] = bit_swap_8(q);
    function bit_swap_n(n, b) {
        var rev = bitswap8[n & 0xFF];
        if (b <= 8) return rev >>> 8 - b;
        rev = rev << 8 | bitswap8[n >> 8 & 0xFF];
        if (b <= 16) return rev >>> 16 - b;
        rev = rev << 8 | bitswap8[n >> 16 & 0xFF];
        return rev >>> 24 - b;
    }
    /* helpers for unaligned bit reads */ function read_bits_2(buf, bl) {
        var w = bl & 7, h = bl >>> 3;
        return (buf[h] | (w <= 6 ? 0 : buf[h + 1] << 8)) >>> w & 0x03;
    }
    function read_bits_3(buf, bl) {
        var w = bl & 7, h = bl >>> 3;
        return (buf[h] | (w <= 5 ? 0 : buf[h + 1] << 8)) >>> w & 0x07;
    }
    function read_bits_4(buf, bl) {
        var w = bl & 7, h = bl >>> 3;
        return (buf[h] | (w <= 4 ? 0 : buf[h + 1] << 8)) >>> w & 0x0F;
    }
    function read_bits_5(buf, bl) {
        var w = bl & 7, h = bl >>> 3;
        return (buf[h] | (w <= 3 ? 0 : buf[h + 1] << 8)) >>> w & 0x1F;
    }
    function read_bits_7(buf, bl) {
        var w = bl & 7, h = bl >>> 3;
        return (buf[h] | (w <= 1 ? 0 : buf[h + 1] << 8)) >>> w & 0x7F;
    }
    /* works up to n = 3 * 8 + 1 = 25 */ function read_bits_n(buf, bl, n) {
        var w = bl & 7, h = bl >>> 3, f = (1 << n) - 1;
        var v = buf[h] >>> w;
        if (n < 8 - w) return v & f;
        v |= buf[h + 1] << 8 - w;
        if (n < 16 - w) return v & f;
        v |= buf[h + 2] << 16 - w;
        if (n < 24 - w) return v & f;
        v |= buf[h + 3] << 24 - w;
        return v & f;
    }
    /* helpers for unaligned bit writes */ function write_bits_3(buf, bl, v) {
        var w = bl & 7, h = bl >>> 3;
        if (w <= 5) buf[h] |= (v & 7) << w;
        else {
            buf[h] |= v << w & 0xFF;
            buf[h + 1] = (v & 7) >> 8 - w;
        }
        return bl + 3;
    }
    function write_bits_1(buf, bl, v) {
        var w = bl & 7, h = bl >>> 3;
        v = (v & 1) << w;
        buf[h] |= v;
        return bl + 1;
    }
    function write_bits_8(buf, bl, v) {
        var w = bl & 7, h = bl >>> 3;
        v <<= w;
        buf[h] |= v & 0xFF;
        v >>>= 8;
        buf[h + 1] = v;
        return bl + 8;
    }
    function write_bits_16(buf, bl, v) {
        var w = bl & 7, h = bl >>> 3;
        v <<= w;
        buf[h] |= v & 0xFF;
        v >>>= 8;
        buf[h + 1] = v & 0xFF;
        buf[h + 2] = v >>> 8;
        return bl + 16;
    }
    /* until ArrayBuffer#realloc is a thing, fake a realloc */ function realloc(b, sz /*:number*/ ) {
        var L = b.length, M = 2 * L > sz ? 2 * L : sz + 5, i = 0;
        if (L >= sz) return b;
        if (has_buf) {
            var o = new_unsafe_buf(M);
            // $FlowIgnore
            if (b.copy) b.copy(o);
            else for(; i < b.length; ++i)o[i] = b[i];
            return o;
        } else if (use_typed_arrays) {
            var a = new Uint8Array(M);
            if (a.set) a.set(b);
            else for(; i < L; ++i)a[i] = b[i];
            return a;
        }
        b.length = M;
        return b;
    }
    /* zero-filled arrays for older browsers */ function zero_fill_array(n) {
        var o = new Array(n);
        for(var i = 0; i < n; ++i)o[i] = 0;
        return o;
    }
    /* build tree (used for literals and lengths) */ function build_tree(clens, cmap, MAX /*:number*/ ) /*:number*/ {
        var maxlen = 1, w = 0, i = 0, j = 0, ccode = 0, L = clens.length;
        var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
        for(i = 0; i < 32; ++i)bl_count[i] = 0;
        for(i = L; i < MAX; ++i)clens[i] = 0;
        L = clens.length;
        var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []
        /* build code tree */ for(i = 0; i < L; ++i){
            bl_count[w = clens[i]]++;
            if (maxlen < w) maxlen = w;
            ctree[i] = 0;
        }
        bl_count[0] = 0;
        for(i = 1; i <= maxlen; ++i)bl_count[i + 16] = ccode = ccode + bl_count[i - 1] << 1;
        for(i = 0; i < L; ++i){
            ccode = clens[i];
            if (ccode != 0) ctree[i] = bl_count[ccode + 16]++;
        }
        /* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */ var cleni = 0;
        for(i = 0; i < L; ++i){
            cleni = clens[i];
            if (cleni != 0) {
                ccode = bit_swap_n(ctree[i], maxlen) >> maxlen - cleni;
                for(j = (1 << maxlen + 4 - cleni) - 1; j >= 0; --j)cmap[ccode | j << cleni] = cleni & 15 | i << 4;
            }
        }
        return maxlen;
    }
    /* Fixed Huffman */ var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
    var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
    if (!use_typed_arrays) {
        for(var i = 0; i < 512; ++i)fix_lmap[i] = 0;
        for(i = 0; i < 32; ++i)fix_dmap[i] = 0;
    }
    (function() {
        var dlens /*:Array<number>*/  = [];
        var i = 0;
        for(; i < 32; i++)dlens.push(5);
        build_tree(dlens, fix_dmap, 32);
        var clens /*:Array<number>*/  = [];
        i = 0;
        for(; i <= 143; i++)clens.push(8);
        for(; i <= 255; i++)clens.push(9);
        for(; i <= 279; i++)clens.push(7);
        for(; i <= 287; i++)clens.push(8);
        build_tree(clens, fix_lmap, 288);
    })();
    var _deflateRaw = /*#__PURE__*/ function _deflateRawIIFE() {
        var DST_LN_RE = use_typed_arrays ? new Uint8Array(0x8000) : [];
        var j = 0, k = 0;
        for(; j < DST_LN.length - 1; ++j)for(; k < DST_LN[j + 1]; ++k)DST_LN_RE[k] = j;
        for(; k < 32768; ++k)DST_LN_RE[k] = 29;
        var LEN_LN_RE = use_typed_arrays ? new Uint8Array(0x103) : [];
        for(j = 0, k = 0; j < LEN_LN.length - 1; ++j)for(; k < LEN_LN[j + 1]; ++k)LEN_LN_RE[k] = j;
        function write_stored(data, out) {
            var boff = 0;
            while(boff < data.length){
                var L = Math.min(0xFFFF, data.length - boff);
                var h = boff + L == data.length;
                out.write_shift(1, +h);
                out.write_shift(2, L);
                out.write_shift(2, ~L & 0xFFFF);
                while(L-- > 0)out[out.l++] = data[boff++];
            }
            return out.l;
        }
        /* Fixed Huffman */ function write_huff_fixed(data, out) {
            var bl = 0;
            var boff = 0;
            var addrs = use_typed_arrays ? new Uint16Array(0x8000) : [];
            while(boff < data.length){
                var L = /* data.length - boff; */ Math.min(0xFFFF, data.length - boff);
                /* write a stored block for short data */ if (L < 10) {
                    bl = write_bits_3(out, bl, +!!(boff + L == data.length)); // jshint ignore:line
                    if (bl & 7) bl += 8 - (bl & 7);
                    out.l = bl / 8 | 0;
                    out.write_shift(2, L);
                    out.write_shift(2, ~L & 0xFFFF);
                    while(L-- > 0)out[out.l++] = data[boff++];
                    bl = out.l * 8;
                    continue;
                }
                bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2); // jshint ignore:line
                var hash = 0;
                while(L-- > 0){
                    var d = data[boff];
                    hash = (hash << 5 ^ d) & 0x7FFF;
                    var match = -1, mlen = 0;
                    if (match = addrs[hash]) {
                        match |= boff & -32768;
                        if (match > boff) match -= 0x8000;
                        if (match < boff) while(data[match + mlen] == data[boff + mlen] && mlen < 250)++mlen;
                    }
                    if (mlen > 2) {
                        /* Copy Token  */ d = LEN_LN_RE[mlen];
                        if (d <= 22) bl = write_bits_8(out, bl, bitswap8[d + 1] >> 1) - 1;
                        else {
                            write_bits_8(out, bl, 3);
                            bl += 5;
                            write_bits_8(out, bl, bitswap8[d - 23] >> 5);
                            bl += 3;
                        }
                        var len_eb = d < 8 ? 0 : d - 4 >> 2;
                        if (len_eb > 0) {
                            write_bits_16(out, bl, mlen - LEN_LN[d]);
                            bl += len_eb;
                        }
                        d = DST_LN_RE[boff - match];
                        bl = write_bits_8(out, bl, bitswap8[d] >> 3);
                        bl -= 3;
                        var dst_eb = d < 4 ? 0 : d - 2 >> 1;
                        if (dst_eb > 0) {
                            write_bits_16(out, bl, boff - match - DST_LN[d]);
                            bl += dst_eb;
                        }
                        for(var q = 0; q < mlen; ++q){
                            addrs[hash] = boff & 0x7FFF;
                            hash = (hash << 5 ^ data[boff]) & 0x7FFF;
                            ++boff;
                        }
                        L -= mlen - 1;
                    } else {
                        /* Literal Token */ if (d <= 143) d = d + 48;
                        else bl = write_bits_1(out, bl, 1);
                        bl = write_bits_8(out, bl, bitswap8[d]);
                        addrs[hash] = boff & 0x7FFF;
                        ++boff;
                    }
                }
                bl = write_bits_8(out, bl, 0) - 1;
            }
            out.l = (bl + 7) / 8 | 0;
            return out.l;
        }
        return function _deflateRaw(data, out) {
            if (data.length < 8) return write_stored(data, out);
            return write_huff_fixed(data, out);
        };
    }();
    function _deflate(data) {
        var buf = new_buf(50 + Math.floor(data.length * 1.1));
        var off = _deflateRaw(data, buf);
        return buf.slice(0, off);
    }
    /* modified inflate function also moves original read head */ var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);
    var dyn_len_1 = 1, dyn_len_2 = 1;
    /* 5.5.3 Expanding Huffman Codes */ function dyn(data, boff /*:number*/ ) {
        /* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */ var _HLIT = read_bits_5(data, boff) + 257;
        boff += 5;
        var _HDIST = read_bits_5(data, boff) + 1;
        boff += 5;
        var _HCLEN = read_bits_4(data, boff) + 4;
        boff += 4;
        var w = 0;
        /* grab and store code lengths */ var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
        var ctree = [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ];
        var maxlen = 1;
        var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
        var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
        var L = clens.length; /* 19 */ 
        for(var i = 0; i < _HCLEN; ++i){
            clens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);
            if (maxlen < w) maxlen = w;
            bl_count[w]++;
            boff += 3;
        }
        /* build code tree */ var ccode = 0;
        bl_count[0] = 0;
        for(i = 1; i <= maxlen; ++i)next_code[i] = ccode = ccode + bl_count[i - 1] << 1;
        for(i = 0; i < L; ++i)if ((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;
        /* cmap[7 bits from stream] = (off&7) + (lit<<3) */ var cleni = 0;
        for(i = 0; i < L; ++i){
            cleni = clens[i];
            if (cleni != 0) {
                ccode = bitswap8[ctree[i]] >> 8 - cleni;
                for(var j = (1 << 7 - cleni) - 1; j >= 0; --j)dyn_cmap[ccode | j << cleni] = cleni & 7 | i << 3;
            }
        }
        /* read literal and dist codes at once */ var hcodes /*:Array<number>*/  = [];
        maxlen = 1;
        for(; hcodes.length < _HLIT + _HDIST;){
            ccode = dyn_cmap[read_bits_7(data, boff)];
            boff += ccode & 7;
            switch(ccode >>>= 3){
                case 16:
                    w = 3 + read_bits_2(data, boff);
                    boff += 2;
                    ccode = hcodes[hcodes.length - 1];
                    while(w-- > 0)hcodes.push(ccode);
                    break;
                case 17:
                    w = 3 + read_bits_3(data, boff);
                    boff += 3;
                    while(w-- > 0)hcodes.push(0);
                    break;
                case 18:
                    w = 11 + read_bits_7(data, boff);
                    boff += 7;
                    while(w-- > 0)hcodes.push(0);
                    break;
                default:
                    hcodes.push(ccode);
                    if (maxlen < ccode) maxlen = ccode;
                    break;
            }
        }
        /* build literal / length trees */ var h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);
        for(i = _HLIT; i < 286; ++i)h1[i] = 0;
        for(i = _HDIST; i < 30; ++i)h2[i] = 0;
        dyn_len_1 = build_tree(h1, dyn_lmap, 286);
        dyn_len_2 = build_tree(h2, dyn_dmap, 30);
        return boff;
    }
    /* return [ data, bytesRead ] */ function inflate(data, usz /*:number*/ ) {
        /* shortcircuit for empty buffer [0x03, 0x00] */ if (data[0] == 3 && !(data[1] & 0x3)) return [
            new_raw_buf(usz),
            2
        ];
        /* bit offset */ var boff = 0;
        /* header includes final bit and type bits */ var header = 0;
        var outbuf = new_unsafe_buf(usz ? usz : 262144);
        var woff = 0;
        var OL = outbuf.length >>> 0;
        var max_len_1 = 0, max_len_2 = 0;
        while((header & 1) == 0){
            header = read_bits_3(data, boff);
            boff += 3;
            if (header >>> 1 == 0) {
                /* Stored block */ if (boff & 7) boff += 8 - (boff & 7);
                /* 2 bytes sz, 2 bytes bit inverse */ var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;
                boff += 32;
                /* push sz bytes */ if (sz > 0) {
                    if (!usz && OL < woff + sz) {
                        outbuf = realloc(outbuf, woff + sz);
                        OL = outbuf.length;
                    }
                    while(sz-- > 0){
                        outbuf[woff++] = data[boff >>> 3];
                        boff += 8;
                    }
                }
                continue;
            } else if (header >> 1 == 1) {
                /* Fixed Huffman */ max_len_1 = 9;
                max_len_2 = 5;
            } else {
                /* Dynamic Huffman */ boff = dyn(data, boff);
                max_len_1 = dyn_len_1;
                max_len_2 = dyn_len_2;
            }
            for(;;){
                if (!usz && OL < woff + 32767) {
                    outbuf = realloc(outbuf, woff + 32767);
                    OL = outbuf.length;
                }
                /* ingest code and move read head */ var bits = read_bits_n(data, boff, max_len_1);
                var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];
                boff += code & 15;
                code >>>= 4;
                /* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */ if ((code >>> 8 & 0xFF) === 0) outbuf[woff++] = code;
                else if (code == 256) break;
                else {
                    code -= 257;
                    var len_eb = code < 8 ? 0 : code - 4 >> 2;
                    if (len_eb > 5) len_eb = 0;
                    var tgt = woff + LEN_LN[code];
                    /* length extra bits */ if (len_eb > 0) {
                        tgt += read_bits_n(data, boff, len_eb);
                        boff += len_eb;
                    }
                    /* dist code */ bits = read_bits_n(data, boff, max_len_2);
                    code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];
                    boff += code & 15;
                    code >>>= 4;
                    var dst_eb = code < 4 ? 0 : code - 2 >> 1;
                    var dst = DST_LN[code];
                    /* dist extra bits */ if (dst_eb > 0) {
                        dst += read_bits_n(data, boff, dst_eb);
                        boff += dst_eb;
                    }
                    /* in the common case, manual byte copy is faster than TA set / Buffer copy */ if (!usz && OL < tgt) {
                        outbuf = realloc(outbuf, tgt + 100);
                        OL = outbuf.length;
                    }
                    while(woff < tgt){
                        outbuf[woff] = outbuf[woff - dst];
                        ++woff;
                    }
                }
            }
        }
        if (usz) return [
            outbuf,
            boff + 7 >>> 3
        ];
        return [
            outbuf.slice(0, woff),
            boff + 7 >>> 3
        ];
    }
    function _inflate(payload, usz) {
        var data = payload.slice(payload.l || 0);
        var out = inflate(data, usz);
        payload.l += out[1];
        return out[0];
    }
    function warn_or_throw(wrn, msg) {
        if (wrn) {
            if (typeof console !== "undefined") console.error(msg);
        } else throw new Error(msg);
    }
    function parse_zip(file /*:RawBytes*/ , options /*:CFBReadOpts*/ ) /*:CFBContainer*/ {
        var blob /*:CFBlob*/  = /*::(*/ file /*:: :any)*/ ;
        prep_blob(blob, 0);
        var FileIndex /*:CFBFileIndex*/  = [], FullPaths /*:Array<string>*/  = [];
        var o = {
            FileIndex: FileIndex,
            FullPaths: FullPaths
        };
        init_cfb(o, {
            root: options.root
        });
        /* find end of central directory, start just after signature */ var i = blob.length - 4;
        while((blob[i] != 0x50 || blob[i + 1] != 0x4b || blob[i + 2] != 0x05 || blob[i + 3] != 0x06) && i >= 0)--i;
        blob.l = i + 4;
        /* parse end of central directory */ blob.l += 4;
        var fcnt = blob.read_shift(2);
        blob.l += 6;
        var start_cd = blob.read_shift(4);
        /* parse central directory */ blob.l = start_cd;
        for(i = 0; i < fcnt; ++i){
            /* trust local file header instead of CD entry */ blob.l += 20;
            var csz = blob.read_shift(4);
            var usz = blob.read_shift(4);
            var namelen = blob.read_shift(2);
            var efsz = blob.read_shift(2);
            var fcsz = blob.read_shift(2);
            blob.l += 8;
            var offset = blob.read_shift(4);
            var EF = parse_extra_field(/*::(*/ blob.slice(blob.l + namelen, blob.l + namelen + efsz));
            blob.l += namelen + efsz + fcsz;
            var L = blob.l;
            blob.l = offset + 4;
            parse_local_file(blob, csz, usz, o, EF);
            blob.l = L;
        }
        return o;
    }
    /* head starts just after local file header signature */ function parse_local_file(blob /*:CFBlob*/ , csz /*:number*/ , usz /*:number*/ , o /*:CFBContainer*/ , EF) {
        /* [local file header] */ blob.l += 2;
        var flags = blob.read_shift(2);
        var meth = blob.read_shift(2);
        var date = parse_dos_date(blob);
        if (flags & 0x2041) throw new Error("Unsupported ZIP encryption");
        var crc32 = blob.read_shift(4);
        var _csz = blob.read_shift(4);
        var _usz = blob.read_shift(4);
        var namelen = blob.read_shift(2);
        var efsz = blob.read_shift(2);
        // TODO: flags & (1<<11) // UTF8
        var name = "";
        for(var i = 0; i < namelen; ++i)name += String.fromCharCode(blob[blob.l++]);
        if (efsz) {
            var ef = parse_extra_field(/*::(*/ blob.slice(blob.l, blob.l + efsz));
            if ((ef[0x5455] || {}).mt) date = ef[0x5455].mt;
            if (((EF || {})[0x5455] || {}).mt) date = EF[0x5455].mt;
        }
        blob.l += efsz;
        /* [encryption header] */ /* [file data] */ var data = blob.slice(blob.l, blob.l + _csz);
        switch(meth){
            case 8:
                data = _inflateRawSync(blob, _usz);
                break;
            case 0:
                break; // TODO: scan for magic number
            default:
                throw new Error("Unsupported ZIP Compression method " + meth);
        }
        /* [data descriptor] */ var wrn = false;
        if (flags & 8) {
            crc32 = blob.read_shift(4);
            if (crc32 == 0x08074b50) {
                crc32 = blob.read_shift(4);
                wrn = true;
            }
            _csz = blob.read_shift(4);
            _usz = blob.read_shift(4);
        }
        if (_csz != csz) warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
        if (_usz != usz) warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
        //var _crc32 = CRC32.buf(data, 0);
        //if((crc32>>0) != (_crc32>>0)) warn_or_throw(wrn, "Bad CRC32 checksum: " + crc32 + " != " + _crc32);
        cfb_add(o, name, data, {
            unsafe: true,
            mt: date
        });
    }
    function write_zip(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:RawBytes*/ {
        var _opts = options || {};
        var out = [], cdirs = [];
        var o /*:CFBlob*/  = new_buf(1);
        var method = _opts.compression ? 8 : 0, flags = 0;
        var desc = false;
        if (desc) flags |= 8;
        var i = 0, j = 0;
        var start_cd = 0, fcnt = 0;
        var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
        var crcs = [];
        var sz_cd = 0;
        for(i = 1; i < cfb.FullPaths.length; ++i){
            fp = cfb.FullPaths[i].slice(root.length);
            fi = cfb.FileIndex[i];
            if (!fi.size || !fi.content || fp == "\x01Sh33tJ5") continue;
            var start = start_cd;
            /* TODO: CP437 filename */ var namebuf = new_buf(fp.length);
            for(j = 0; j < fp.length; ++j)namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);
            namebuf = namebuf.slice(0, namebuf.l);
            crcs[fcnt] = CRC32.buf(/*::((*/ fi.content /*::||[]):any)*/ , 0);
            var outbuf = fi.content /*::||[]*/ ;
            if (method == 8) outbuf = _deflateRawSync(outbuf);
            /* local file header */ o = new_buf(30);
            o.write_shift(4, 0x04034b50);
            o.write_shift(2, 20);
            o.write_shift(2, flags);
            o.write_shift(2, method);
            /* TODO: last mod file time/date */ if (fi.mt) write_dos_date(o, fi.mt);
            else o.write_shift(4, 0);
            o.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);
            o.write_shift(4, flags & 8 ? 0 : outbuf.length);
            o.write_shift(4, flags & 8 ? 0 : /*::(*/ fi.content /*::||[])*/ .length);
            o.write_shift(2, namebuf.length);
            o.write_shift(2, 0);
            start_cd += o.length;
            out.push(o);
            start_cd += namebuf.length;
            out.push(namebuf);
            /* TODO: extra fields? */ /* TODO: encryption header ? */ start_cd += outbuf.length;
            out.push(outbuf);
            /* data descriptor */ if (flags & 8) {
                o = new_buf(12);
                o.write_shift(-4, crcs[fcnt]);
                o.write_shift(4, outbuf.length);
                o.write_shift(4, /*::(*/ fi.content /*::||[])*/ .length);
                start_cd += o.l;
                out.push(o);
            }
            /* central directory */ o = new_buf(46);
            o.write_shift(4, 0x02014b50);
            o.write_shift(2, 0);
            o.write_shift(2, 20);
            o.write_shift(2, flags);
            o.write_shift(2, method);
            o.write_shift(4, 0); /* TODO: last mod file time/date */ 
            o.write_shift(-4, crcs[fcnt]);
            o.write_shift(4, outbuf.length);
            o.write_shift(4, /*::(*/ fi.content /*::||[])*/ .length);
            o.write_shift(2, namebuf.length);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(4, 0);
            o.write_shift(4, start);
            sz_cd += o.l;
            cdirs.push(o);
            sz_cd += namebuf.length;
            cdirs.push(namebuf);
            ++fcnt;
        }
        /* end of central directory */ o = new_buf(22);
        o.write_shift(4, 0x06054b50);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, fcnt);
        o.write_shift(2, fcnt);
        o.write_shift(4, sz_cd);
        o.write_shift(4, start_cd);
        o.write_shift(2, 0);
        return bconcat([
            bconcat(out /*:any*/ ),
            bconcat(cdirs),
            o
        ]);
    }
    var ContentTypeMap = {
        "htm": "text/html",
        "xml": "text/xml",
        "gif": "image/gif",
        "jpg": "image/jpeg",
        "png": "image/png",
        "mso": "application/x-mso",
        "thmx": "application/vnd.ms-officetheme",
        "sh33tj5": "application/octet-stream"
    } /*:any*/ ;
    function get_content_type(fi /*:CFBEntry*/ , fp /*:string*/ ) /*:string*/ {
        if (fi.ctype) return fi.ctype;
        var ext = fi.name || "", m = ext.match(/\.([^\.]+)$/);
        if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];
        if (fp) {
            m = (ext = fp).match(/[\.\\]([^\.\\])+$/);
            if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];
        }
        return "application/octet-stream";
    }
    /* 76 character chunks TODO: intertwine encoding */ function write_base64_76(bstr /*:string*/ ) /*:string*/ {
        var data = Base64_encode(bstr);
        var o = [];
        for(var i = 0; i < data.length; i += 76)o.push(data.slice(i, i + 76));
        return o.join("\r\n") + "\r\n";
    }
    /*
Rules for QP:
	- escape =## applies for all non-display characters and literal "="
	- space or tab at end of line must be encoded
	- \r\n newlines can be preserved, but bare \r and \n must be escaped
	- lines must not exceed 76 characters, use soft breaks =\r\n

TODO: Some files from word appear to write line extensions with bare equals:

```
<table class=3DMsoTableGrid border=3D1 cellspacing=3D0 cellpadding=3D0 width=
="70%"
```
*/ function write_quoted_printable(text /*:string*/ ) /*:string*/ {
        var encoded = text.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g, function(c) {
            var w = c.charCodeAt(0).toString(16).toUpperCase();
            return "=" + (w.length == 1 ? "0" + w : w);
        });
        encoded = encoded.replace(/ $/mg, "=20").replace(/\t$/mg, "=09");
        if (encoded.charAt(0) == "\n") encoded = "=0D" + encoded.slice(1);
        encoded = encoded.replace(/\r(?!\n)/mg, "=0D").replace(/\n\n/mg, "\n=0A").replace(/([^\r\n])\n/mg, "$1=0A");
        var o /*:Array<string>*/  = [], split = encoded.split("\r\n");
        for(var si = 0; si < split.length; ++si){
            var str = split[si];
            if (str.length == 0) {
                o.push("");
                continue;
            }
            for(var i = 0; i < str.length;){
                var end = 76;
                var tmp = str.slice(i, i + end);
                if (tmp.charAt(end - 1) == "=") end--;
                else if (tmp.charAt(end - 2) == "=") end -= 2;
                else if (tmp.charAt(end - 3) == "=") end -= 3;
                tmp = str.slice(i, i + end);
                i += end;
                if (i < str.length) tmp += "=";
                o.push(tmp);
            }
        }
        return o.join("\r\n");
    }
    function parse_quoted_printable(data /*:Array<string>*/ ) /*:RawBytes*/ {
        var o = [];
        /* unify long lines */ for(var di = 0; di < data.length; ++di){
            var line = data[di];
            while(di <= data.length && line.charAt(line.length - 1) == "=")line = line.slice(0, line.length - 1) + data[++di];
            o.push(line);
        }
        /* decode */ for(var oi = 0; oi < o.length; ++oi)o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function($$) {
            return String.fromCharCode(parseInt($$.slice(1), 16));
        });
        return s2a(o.join("\r\n"));
    }
    function parse_mime(cfb /*:CFBContainer*/ , data /*:Array<string>*/ , root /*:string*/ ) /*:void*/ {
        var fname = "", cte = "", ctype = "", fdata;
        var di = 0;
        for(; di < 10; ++di){
            var line = data[di];
            if (!line || line.match(/^\s*$/)) break;
            var m = line.match(/^(.*?):\s*([^\s].*)$/);
            if (m) switch(m[1].toLowerCase()){
                case "content-location":
                    fname = m[2].trim();
                    break;
                case "content-type":
                    ctype = m[2].trim();
                    break;
                case "content-transfer-encoding":
                    cte = m[2].trim();
                    break;
            }
        }
        ++di;
        switch(cte.toLowerCase()){
            case "base64":
                fdata = s2a(Base64_decode(data.slice(di).join("")));
                break;
            case "quoted-printable":
                fdata = parse_quoted_printable(data.slice(di));
                break;
            default:
                throw new Error("Unsupported Content-Transfer-Encoding " + cte);
        }
        var file = cfb_add(cfb, fname.slice(root.length), fdata, {
            unsafe: true
        });
        if (ctype) file.ctype = ctype;
    }
    function parse_mad(file /*:RawBytes*/ , options /*:CFBReadOpts*/ ) /*:CFBContainer*/ {
        if (a2s(file.slice(0, 13)).toLowerCase() != "mime-version:") throw new Error("Unsupported MAD header");
        var root = options && options.root || "";
        // $FlowIgnore
        var data = (has_buf && Buffer.isBuffer(file) ? file.toString("binary") : a2s(file)).split("\r\n");
        var di = 0, row = "";
        /* if root is not specified, scan for the common prefix */ for(di = 0; di < data.length; ++di){
            row = data[di];
            if (!/^Content-Location:/i.test(row)) continue;
            row = row.slice(row.indexOf("file"));
            if (!root) root = row.slice(0, row.lastIndexOf("/") + 1);
            if (row.slice(0, root.length) == root) continue;
            while(root.length > 0){
                root = root.slice(0, root.length - 1);
                root = root.slice(0, root.lastIndexOf("/") + 1);
                if (row.slice(0, root.length) == root) break;
            }
        }
        var mboundary = (data[1] || "").match(/boundary="(.*?)"/);
        if (!mboundary) throw new Error("MAD cannot find boundary");
        var boundary = "--" + (mboundary[1] || "");
        var FileIndex /*:CFBFileIndex*/  = [], FullPaths /*:Array<string>*/  = [];
        var o = {
            FileIndex: FileIndex,
            FullPaths: FullPaths
        };
        init_cfb(o);
        var start_di, fcnt = 0;
        for(di = 0; di < data.length; ++di){
            var line = data[di];
            if (line !== boundary && line !== boundary + "--") continue;
            if (fcnt++) parse_mime(o, data.slice(start_di, di), root);
            start_di = di;
        }
        return o;
    }
    function write_mad(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:string*/ {
        var opts = options || {};
        var boundary = opts.boundary || "SheetJS";
        boundary = "------=" + boundary;
        var out = [
            "MIME-Version: 1.0",
            'Content-Type: multipart/related; boundary="' + boundary.slice(2) + '"',
            "",
            "",
            ""
        ];
        var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
        for(var i = 1; i < cfb.FullPaths.length; ++i){
            fp = cfb.FullPaths[i].slice(root.length);
            fi = cfb.FileIndex[i];
            if (!fi.size || !fi.content || fp == "\x01Sh33tJ5") continue;
            /* Normalize filename */ fp = fp.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function(c) {
                return "_x" + c.charCodeAt(0).toString(16) + "_";
            }).replace(/[\u0080-\uFFFF]/g, function(u) {
                return "_u" + u.charCodeAt(0).toString(16) + "_";
            });
            /* Extract content as binary string */ var ca = fi.content;
            // $FlowIgnore
            var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString("binary") : a2s(ca);
            /* 4/5 of first 1024 chars ascii -> quoted printable, else base64 */ var dispcnt = 0, L = Math.min(1024, cstr.length), cc = 0;
            for(var csl = 0; csl <= L; ++csl)if ((cc = cstr.charCodeAt(csl)) >= 0x20 && cc < 0x80) ++dispcnt;
            var qp = dispcnt >= L * 4 / 5;
            out.push(boundary);
            out.push("Content-Location: " + (opts.root || "file:///C:/SheetJS/") + fp);
            out.push("Content-Transfer-Encoding: " + (qp ? "quoted-printable" : "base64"));
            out.push("Content-Type: " + get_content_type(fi, fp));
            out.push("");
            out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
        }
        out.push(boundary + "--\r\n");
        return out.join("\r\n");
    }
    function cfb_new(opts /*:?any*/ ) /*:CFBContainer*/ {
        var o /*:CFBContainer*/  = {} /*:any*/ ;
        init_cfb(o, opts);
        return o;
    }
    function cfb_add(cfb /*:CFBContainer*/ , name /*:string*/ , content /*:?RawBytes*/ , opts /*:?any*/ ) /*:CFBEntry*/ {
        var unsafe = opts && opts.unsafe;
        if (!unsafe) init_cfb(cfb);
        var file = !unsafe && CFB.find(cfb, name);
        if (!file) {
            var fpath /*:string*/  = cfb.FullPaths[0];
            if (name.slice(0, fpath.length) == fpath) fpath = name;
            else {
                if (fpath.slice(-1) != "/") fpath += "/";
                fpath = (fpath + name).replace("//", "/");
            }
            file = {
                name: filename(name),
                type: 2
            } /*:any*/ ;
            cfb.FileIndex.push(file);
            cfb.FullPaths.push(fpath);
            if (!unsafe) CFB.utils.cfb_gc(cfb);
        }
        /*:: if(!file) throw new Error("unreachable"); */ file.content = content /*:any*/ ;
        file.size = content ? content.length : 0;
        if (opts) {
            if (opts.CLSID) file.clsid = opts.CLSID;
            if (opts.mt) file.mt = opts.mt;
            if (opts.ct) file.ct = opts.ct;
        }
        return file;
    }
    function cfb_del(cfb /*:CFBContainer*/ , name /*:string*/ ) /*:boolean*/ {
        init_cfb(cfb);
        var file = CFB.find(cfb, name);
        if (file) {
            for(var j = 0; j < cfb.FileIndex.length; ++j)if (cfb.FileIndex[j] == file) {
                cfb.FileIndex.splice(j, 1);
                cfb.FullPaths.splice(j, 1);
                return true;
            }
        }
        return false;
    }
    function cfb_mov(cfb /*:CFBContainer*/ , old_name /*:string*/ , new_name /*:string*/ ) /*:boolean*/ {
        init_cfb(cfb);
        var file = CFB.find(cfb, old_name);
        if (file) {
            for(var j = 0; j < cfb.FileIndex.length; ++j)if (cfb.FileIndex[j] == file) {
                cfb.FileIndex[j].name = filename(new_name);
                cfb.FullPaths[j] = new_name;
                return true;
            }
        }
        return false;
    }
    function cfb_gc(cfb /*:CFBContainer*/ ) /*:void*/ {
        rebuild_cfb(cfb, true);
    }
    exports.find = find;
    exports.read = read;
    exports.parse = parse;
    exports.write = write;
    exports.writeFile = write_file;
    exports.utils = {
        cfb_new: cfb_new,
        cfb_add: cfb_add,
        cfb_del: cfb_del,
        cfb_mov: cfb_mov,
        cfb_gc: cfb_gc,
        ReadShift: ReadShift,
        CheckField: CheckField,
        prep_blob: prep_blob,
        bconcat: bconcat,
        use_zlib: use_zlib,
        _deflateRaw: _deflate,
        _inflateRaw: _inflate,
        consts: consts
    };
    return exports;
}();
let _fs = void 0;
function set_fs(fs) {
    _fs = fs;
}
/* normalize data for blob ctor */ function blobify(data) {
    if (typeof data === "string") return s2ab(data);
    if (Array.isArray(data)) return a2u(data);
    return data;
}
/* write or download file */ function write_dl(fname /*:string*/ , payload /*:any*/ , enc /*:?string*/ ) {
    /*global IE_SaveFile, Blob, navigator, saveAs, document, File, chrome */ if (typeof _fs !== "undefined" && _fs.writeFileSync) return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);
    if (typeof Deno !== "undefined") {
        /* in this spot, it's safe to assume typed arrays and TextEncoder/TextDecoder exist */ if (enc && typeof payload == "string") switch(enc){
            case "utf8":
                payload = new TextEncoder(enc).encode(payload);
                break;
            case "binary":
                payload = s2ab(payload);
                break;
            /* TODO: binary equivalent */ default:
                throw new Error("Unsupported encoding " + enc);
        }
        return Deno.writeFileSync(fname, payload);
    }
    var data = enc == "utf8" ? utf8write(payload) : payload;
    /*:: declare var IE_SaveFile: any; */ if (typeof IE_SaveFile !== "undefined") return IE_SaveFile(data, fname);
    if (typeof Blob !== "undefined") {
        var blob = new Blob([
            blobify(data)
        ], {
            type: "application/octet-stream"
        });
        /*:: declare var navigator: any; */ if (typeof navigator !== "undefined" && navigator.msSaveBlob) return navigator.msSaveBlob(blob, fname);
        /*:: declare var saveAs: any; */ if (typeof saveAs !== "undefined") return saveAs(blob, fname);
        if (typeof URL !== "undefined" && typeof document !== "undefined" && document.createElement && URL.createObjectURL) {
            var url = URL.createObjectURL(blob);
            /*:: declare var chrome: any; */ if (typeof chrome === "object" && typeof (chrome.downloads || {}).download == "function") {
                if (URL.revokeObjectURL && typeof setTimeout !== "undefined") setTimeout(function() {
                    URL.revokeObjectURL(url);
                }, 60000);
                return chrome.downloads.download({
                    url: url,
                    filename: fname,
                    saveAs: true
                });
            }
            var a = document.createElement("a");
            if (a.download != null) {
                /*:: if(document.body == null) throw new Error("unreachable"); */ a.download = fname;
                a.href = url;
                document.body.appendChild(a);
                a.click();
                /*:: if(document.body == null) throw new Error("unreachable"); */ document.body.removeChild(a);
                if (URL.revokeObjectURL && typeof setTimeout !== "undefined") setTimeout(function() {
                    URL.revokeObjectURL(url);
                }, 60000);
                return url;
            }
        }
    }
    // $FlowIgnore
    if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined") try {
        // $FlowIgnore
        var out = File(fname);
        out.open("w");
        out.encoding = "binary";
        if (Array.isArray(payload)) payload = a2s(payload);
        out.write(payload);
        out.close();
        return payload;
    } catch (e) {
        if (!e.message || !e.message.match(/onstruct/)) throw e;
    }
    throw new Error("cannot save file " + fname);
}
/* read binary data from file */ function read_binary(path /*:string*/ ) {
    if (typeof _fs !== "undefined") return _fs.readFileSync(path);
    if (typeof Deno !== "undefined") return Deno.readFileSync(path);
    // $FlowIgnore
    if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined") try {
        // $FlowIgnore
        var infile = File(path);
        infile.open("r");
        infile.encoding = "binary";
        var data = infile.read();
        infile.close();
        return data;
    } catch (e) {
        if (!e.message || !e.message.match(/onstruct/)) throw e;
    }
    throw new Error("Cannot access file " + path);
}
function keys(o /*:any*/ ) /*:Array<any>*/ {
    var ks = Object.keys(o), o2 = [];
    for(var i = 0; i < ks.length; ++i)if (Object.prototype.hasOwnProperty.call(o, ks[i])) o2.push(ks[i]);
    return o2;
}
function evert_key(obj /*:any*/ , key /*:string*/ ) /*:EvertType*/ {
    var o = [], K = keys(obj);
    for(var i = 0; i !== K.length; ++i)if (o[obj[K[i]][key]] == null) o[obj[K[i]][key]] = K[i];
    return o;
}
function evert(obj /*:any*/ ) /*:EvertType*/ {
    var o = [], K = keys(obj);
    for(var i = 0; i !== K.length; ++i)o[obj[K[i]]] = K[i];
    return o;
}
function evert_num(obj /*:any*/ ) /*:EvertNumType*/ {
    var o = [], K = keys(obj);
    for(var i = 0; i !== K.length; ++i)o[obj[K[i]]] = parseInt(K[i], 10);
    return o;
}
function evert_arr(obj /*:any*/ ) /*:EvertArrType*/ {
    var o /*:EvertArrType*/  = [], K = keys(obj);
    for(var i = 0; i !== K.length; ++i){
        if (o[obj[K[i]]] == null) o[obj[K[i]]] = [];
        o[obj[K[i]]].push(K[i]);
    }
    return o;
}
var basedate = /*#__PURE__*/ new Date(1899, 11, 30, 0, 0, 0); // 2209161600000
function datenum(v /*:Date*/ , date1904 /*:?boolean*/ ) /*:number*/ {
    var epoch = /*#__PURE__*/ v.getTime();
    if (date1904) epoch -= 126316800000;
    var dnthresh = /*#__PURE__*/ basedate.getTime() + /*#__PURE__*/ (v.getTimezoneOffset() - /*#__PURE__*/ basedate.getTimezoneOffset()) * 60000;
    return (epoch - dnthresh) / 86400000;
}
var refdate = /*#__PURE__*/ new Date();
var dnthresh = /*#__PURE__*/ basedate.getTime() + /*#__PURE__*/ (refdate.getTimezoneOffset() - /*#__PURE__*/ basedate.getTimezoneOffset()) * 60000;
var refoffset = /*#__PURE__*/ refdate.getTimezoneOffset();
function numdate(v /*:number*/ ) /*:Date*/ {
    var out = new Date();
    out.setTime(v * 86400000 + dnthresh);
    if (out.getTimezoneOffset() !== refoffset) out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 60000);
    return out;
}
/* ISO 8601 Duration */ function parse_isodur(s) {
    var sec = 0, mt = 0, time = false;
    var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
    if (!m) throw new Error("|" + s + "| is not an ISO8601 Duration");
    for(var i = 1; i != m.length; ++i){
        if (!m[i]) continue;
        mt = 1;
        if (i > 3) time = true;
        switch(m[i].slice(m[i].length - 1)){
            case "Y":
                throw new Error("Unsupported ISO Duration Field: " + m[i].slice(m[i].length - 1));
            case "D":
                mt *= 24;
            /* falls through */ case "H":
                mt *= 60;
            /* falls through */ case "M":
                if (!time) throw new Error("Unsupported ISO Duration Field: M");
                else mt *= 60;
            /* falls through */ case "S":
                break;
        }
        sec += mt * parseInt(m[i], 10);
    }
    return sec;
}
var good_pd_date_1 = /*#__PURE__*/ new Date("2017-02-19T19:06:09.000Z");
var good_pd_date = /*#__PURE__*/ isNaN(/*#__PURE__*/ good_pd_date_1.getFullYear()) ? /*#__PURE__*/ new Date("2/19/17") : good_pd_date_1;
var good_pd = /*#__PURE__*/ good_pd_date.getFullYear() == 2017;
/* parses a date as a local date */ function parseDate(str /*:string|Date*/ , fixdate /*:?number*/ ) /*:Date*/ {
    var d = new Date(str);
    if (good_pd) {
        /*:: if(fixdate == null) fixdate = 0; */ if (fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60000);
        else if (fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60000);
        return d;
    }
    if (str instanceof Date) return str;
    if (good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {
        var s = d.getFullYear();
        if (str.indexOf("" + s) > -1) return d;
        d.setFullYear(d.getFullYear() + 100);
        return d;
    }
    var n = str.match(/\d+/g) || [
        "2017",
        "2",
        "19",
        "0",
        "0",
        "0"
    ];
    var out = new Date(+n[0], +n[1] - 1, +n[2], +n[3] || 0, +n[4] || 0, +n[5] || 0);
    if (str.indexOf("Z") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60000);
    return out;
}
function cc2str(arr /*:Array<number>*/ , debomit) /*:string*/ {
    if (has_buf && Buffer.isBuffer(arr)) {
        if (debomit) {
            if (arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(arr.slice(2).toString("utf16le"));
            if (arr[1] == 0xFE && arr[2] == 0xFF) return utf8write(utf16beread(arr.slice(2).toString("binary")));
        }
        return arr.toString("binary");
    }
    if (typeof TextDecoder !== "undefined") try {
        if (debomit) {
            if (arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(new TextDecoder("utf-16le").decode(arr.slice(2)));
            if (arr[0] == 0xFE && arr[1] == 0xFF) return utf8write(new TextDecoder("utf-16be").decode(arr.slice(2)));
        }
        var rev = {
            "€": "\x80",
            "‚": "\x82",
            "ƒ": "\x83",
            "„": "\x84",
            "…": "\x85",
            "†": "\x86",
            "‡": "\x87",
            "ˆ": "\x88",
            "‰": "\x89",
            "Š": "\x8a",
            "‹": "\x8b",
            "Œ": "\x8c",
            "Ž": "\x8e",
            "‘": "\x91",
            "’": "\x92",
            "“": "\x93",
            "”": "\x94",
            "•": "\x95",
            "–": "\x96",
            "—": "\x97",
            "˜": "\x98",
            "™": "\x99",
            "š": "\x9a",
            "›": "\x9b",
            "œ": "\x9c",
            "ž": "\x9e",
            "Ÿ": "\x9f"
        };
        if (Array.isArray(arr)) arr = new Uint8Array(arr);
        return new TextDecoder("latin1").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function(c) {
            return rev[c] || c;
        });
    } catch (e) {}
    var o = [];
    for(var i = 0; i != arr.length; ++i)o.push(String.fromCharCode(arr[i]));
    return o.join("");
}
function dup(o /*:any*/ ) /*:any*/ {
    if (typeof JSON != "undefined" && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));
    if (typeof o != "object" || o == null) return o;
    if (o instanceof Date) return new Date(o.getTime());
    var out = {};
    for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);
    return out;
}
function fill(c /*:string*/ , l /*:number*/ ) /*:string*/ {
    var o = "";
    while(o.length < l)o += c;
    return o;
}
/* TODO: stress test */ function fuzzynum(s /*:string*/ ) /*:number*/ {
    var v /*:number*/  = Number(s);
    if (!isNaN(v)) return isFinite(v) ? v : NaN;
    if (!/\d/.test(s)) return v;
    var wt = 1;
    var ss = s.replace(/([\d]),([\d])/g, "$1$2").replace(/[$]/g, "").replace(/[%]/g, function() {
        wt *= 100;
        return "";
    });
    if (!isNaN(v = Number(ss))) return v / wt;
    ss = ss.replace(/[(](.*)[)]/, function($$, $1) {
        wt = -wt;
        return $1;
    });
    if (!isNaN(v = Number(ss))) return v / wt;
    return v;
}
var lower_months = [
    "january",
    "february",
    "march",
    "april",
    "may",
    "june",
    "july",
    "august",
    "september",
    "october",
    "november",
    "december"
];
function fuzzydate(s /*:string*/ ) /*:Date*/ {
    var o = new Date(s), n = new Date(NaN);
    var y = o.getYear(), m = o.getMonth(), d = o.getDate();
    if (isNaN(d)) return n;
    var lower = s.toLowerCase();
    if (lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
        lower = lower.replace(/[^a-z]/g, "").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/, "");
        if (lower.length > 3 && lower_months.indexOf(lower) == -1) return n;
    } else if (lower.match(/[a-z]/)) return n;
    if (y < 0 || y > 8099) return n;
    if ((m > 0 || d > 1) && y != 101) return o;
    if (s.match(/[^-0-9:,\/\\]/)) return n;
    return o;
}
var split_regex = /*#__PURE__*/ function() {
    var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
    return function split_regex(str /*:string*/ , re, def /*:string*/ ) /*:Array<string>*/ {
        if (safe_split_regex || typeof re == "string") return str.split(re);
        var p = str.split(re), o = [
            p[0]
        ];
        for(var i = 1; i < p.length; ++i){
            o.push(def);
            o.push(p[i]);
        }
        return o;
    };
}();
function getdatastr(data) /*:?string*/ {
    if (!data) return null;
    if (data.content && data.type) return cc2str(data.content, true);
    if (data.data) return debom(data.data);
    if (data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString("binary"));
    if (data.asBinary) return debom(data.asBinary());
    if (data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));
    return null;
}
function getdatabin(data) {
    if (!data) return null;
    if (data.data) return char_codes(data.data);
    if (data.asNodeBuffer && has_buf) return data.asNodeBuffer();
    if (data._data && data._data.getContent) {
        var o = data._data.getContent();
        if (typeof o == "string") return char_codes(o);
        return Array.prototype.slice.call(o);
    }
    if (data.content && data.type) return data.content;
    return null;
}
function getdata(data) {
    return data && data.name.slice(-4) === ".bin" ? getdatabin(data) : getdatastr(data);
}
/* Part 2 Section 10.1.2 "Mapping Content Types" Names are case-insensitive */ /* OASIS does not comment on filename case sensitivity */ function safegetzipfile(zip, file /*:string*/ ) {
    var k = zip.FullPaths || keys(zip.files);
    var f = file.toLowerCase().replace(/[\/]/g, "\\"), g = f.replace(/\\/g, "/");
    for(var i = 0; i < k.length; ++i){
        var n = k[i].replace(/^Root Entry[\/]/, "").toLowerCase();
        if (f == n || g == n) return zip.files ? zip.files[k[i]] : zip.FileIndex[i];
    }
    return null;
}
function getzipfile(zip, file /*:string*/ ) {
    var o = safegetzipfile(zip, file);
    if (o == null) throw new Error("Cannot find file " + file + " in zip");
    return o;
}
function getzipdata(zip, file /*:string*/ , safe /*:?boolean*/ ) /*:any*/ {
    if (!safe) return getdata(getzipfile(zip, file));
    if (!file) return null;
    try {
        return getzipdata(zip, file);
    } catch (e) {
        return null;
    }
}
function getzipstr(zip, file /*:string*/ , safe /*:?boolean*/ ) /*:?string*/ {
    if (!safe) return getdatastr(getzipfile(zip, file));
    if (!file) return null;
    try {
        return getzipstr(zip, file);
    } catch (e) {
        return null;
    }
}
function getzipbin(zip, file /*:string*/ , safe /*:?boolean*/ ) /*:any*/ {
    if (!safe) return getdatabin(getzipfile(zip, file));
    if (!file) return null;
    try {
        return getzipbin(zip, file);
    } catch (e) {
        return null;
    }
}
function zipentries(zip) {
    var k = zip.FullPaths || keys(zip.files), o = [];
    for(var i = 0; i < k.length; ++i)if (k[i].slice(-1) != "/") o.push(k[i].replace(/^Root Entry[\/]/, ""));
    return o.sort();
}
function zip_add_file(zip, path, content) {
    if (zip.FullPaths) {
        if (typeof content == "string") {
            var res;
            if (has_buf) res = Buffer_from(content);
            else res = utf8decode(content);
            return CFB.utils.cfb_add(zip, path, res);
        }
        CFB.utils.cfb_add(zip, path, content);
    } else zip.file(path, content);
}
function zip_new() {
    return CFB.utils.cfb_new();
}
function zip_read(d, o) {
    switch(o.type){
        case "base64":
            return CFB.read(d, {
                type: "base64"
            });
        case "binary":
            return CFB.read(d, {
                type: "binary"
            });
        case "buffer":
        case "array":
            return CFB.read(d, {
                type: "buffer"
            });
    }
    throw new Error("Unrecognized type " + o.type);
}
function resolve_path(path /*:string*/ , base /*:string*/ ) /*:string*/ {
    if (path.charAt(0) == "/") return path.slice(1);
    var result = base.split("/");
    if (base.slice(-1) != "/") result.pop(); // folder path
    var target = path.split("/");
    while(target.length !== 0){
        var step = target.shift();
        if (step === "..") result.pop();
        else if (step !== ".") result.push(step);
    }
    return result.join("/");
}
var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
var attregexg = /([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
var tagregex1 = /<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg, tagregex2 = /<[^>]*>/g;
var tagregex = /*#__PURE__*/ XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
var nsregex = /<\w*:/, nsregex2 = /<(\/?)\w+:/;
function parsexmltag(tag /*:string*/ , skip_root /*:?boolean*/ , skip_LC /*:?boolean*/ ) /*:any*/ {
    var z = {} /*:any*/ ;
    var eq = 0, c = 0;
    for(; eq !== tag.length; ++eq)if ((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;
    if (!skip_root) z[0] = tag.slice(0, eq);
    if (eq === tag.length) return z;
    var m = tag.match(attregexg), j = 0, v = "", i = 0, q = "", cc = "", quot = 1;
    if (m) for(i = 0; i != m.length; ++i){
        cc = m[i];
        for(c = 0; c != cc.length; ++c)if (cc.charCodeAt(c) === 61) break;
        q = cc.slice(0, c).trim();
        while(cc.charCodeAt(c + 1) == 32)++c;
        quot = (eq = cc.charCodeAt(c + 1)) == 34 || eq == 39 ? 1 : 0;
        v = cc.slice(c + 1 + quot, cc.length - quot);
        for(j = 0; j != q.length; ++j)if (q.charCodeAt(j) === 58) break;
        if (j === q.length) {
            if (q.indexOf("_") > 0) q = q.slice(0, q.indexOf("_")); // from ods
            z[q] = v;
            if (!skip_LC) z[q.toLowerCase()] = v;
        } else {
            var k = (j === 5 && q.slice(0, 5) === "xmlns" ? "xmlns" : "") + q.slice(j + 1);
            if (z[k] && q.slice(j - 3, j) == "ext") continue; // from ods
            z[k] = v;
            if (!skip_LC) z[k.toLowerCase()] = v;
        }
    }
    return z;
}
function strip_ns(x /*:string*/ ) /*:string*/ {
    return x.replace(nsregex2, "<$1");
}
var encodings = {
    "&quot;": '"',
    "&apos;": "'",
    "&gt;": ">",
    "&lt;": "<",
    "&amp;": "&"
};
var rencoding = /*#__PURE__*/ evert(encodings);
//var rencstr = "&<>'\"".split("");
// TODO: CP remap (need to read file version to determine OS)
var unescapexml /*:StringConv*/  = /*#__PURE__*/ function() {
    /* 22.4.2.4 bstr (Basic String) */ var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
    return function unescapexml(text /*:string*/ ) /*:string*/ {
        var s = text + "", i = s.indexOf("<![CDATA[");
        if (i == -1) return s.replace(encregex, function($$, $1) {
            return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf("x") > -1 ? 16 : 10)) || $$;
        }).replace(coderegex, function(m, c) {
            return String.fromCharCode(parseInt(c, 16));
        });
        var j = s.indexOf("]]>");
        return unescapexml(s.slice(0, i)) + s.slice(i + 9, j) + unescapexml(s.slice(j + 3));
    };
}();
var decregex = /[&<>'"]/g, charegex = /[\u0000-\u0008\u000b-\u001f]/g;
function escapexml(text /*:string*/ ) /*:string*/ {
    var s = text + "";
    return s.replace(decregex, function(y) {
        return rencoding[y];
    }).replace(charegex, function(s) {
        return "_x" + ("000" + s.charCodeAt(0).toString(16)).slice(-4) + "_";
    });
}
function escapexmltag(text /*:string*/ ) /*:string*/ {
    return escapexml(text).replace(/ /g, "_x0020_");
}
var htmlcharegex = /[\u0000-\u001f]/g;
function escapehtml(text /*:string*/ ) /*:string*/ {
    var s = text + "";
    return s.replace(decregex, function(y) {
        return rencoding[y];
    }).replace(/\n/g, "<br/>").replace(htmlcharegex, function(s) {
        return "&#x" + ("000" + s.charCodeAt(0).toString(16)).slice(-4) + ";";
    });
}
function escapexlml(text /*:string*/ ) /*:string*/ {
    var s = text + "";
    return s.replace(decregex, function(y) {
        return rencoding[y];
    }).replace(htmlcharegex, function(s) {
        return "&#x" + s.charCodeAt(0).toString(16).toUpperCase() + ";";
    });
}
/* TODO: handle codepages */ var xlml_fixstr /*:StringConv*/  = /*#__PURE__*/ function() {
    var entregex = /&#(\d+);/g;
    function entrepl($$ /*:string*/ , $1 /*:string*/ ) /*:string*/ {
        return String.fromCharCode(parseInt($1, 10));
    }
    return function xlml_fixstr(str /*:string*/ ) /*:string*/ {
        return str.replace(entregex, entrepl);
    };
}();
function xlml_unfixstr(str /*:string*/ ) /*:string*/ {
    return str.replace(/(\r\n|[\r\n])/g, "&#10;");
}
function parsexmlbool(value /*:any*/ ) /*:boolean*/ {
    switch(value){
        case 1:
        case true:
        case "1":
        case "true":
        case "TRUE":
            return true;
        /* case '0': case 'false': case 'FALSE':*/ default:
            return false;
    }
}
function utf8reada(orig /*:string*/ ) /*:string*/ {
    var out = "", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;
    while(i < orig.length){
        c = orig.charCodeAt(i++);
        if (c < 128) {
            out += String.fromCharCode(c);
            continue;
        }
        d = orig.charCodeAt(i++);
        if (c > 191 && c < 224) {
            f = (c & 31) << 6;
            f |= d & 63;
            out += String.fromCharCode(f);
            continue;
        }
        e = orig.charCodeAt(i++);
        if (c < 240) {
            out += String.fromCharCode((c & 15) << 12 | (d & 63) << 6 | e & 63);
            continue;
        }
        f = orig.charCodeAt(i++);
        w = ((c & 7) << 18 | (d & 63) << 12 | (e & 63) << 6 | f & 63) - 65536;
        out += String.fromCharCode(0xD800 + (w >>> 10 & 1023));
        out += String.fromCharCode(0xDC00 + (w & 1023));
    }
    return out;
}
function utf8readb(data) {
    var out = new_raw_buf(2 * data.length), w, i, j = 1, k = 0, ww = 0, c;
    for(i = 0; i < data.length; i += j){
        j = 1;
        if ((c = data.charCodeAt(i)) < 128) w = c;
        else if (c < 224) {
            w = (c & 31) * 64 + (data.charCodeAt(i + 1) & 63);
            j = 2;
        } else if (c < 240) {
            w = (c & 15) * 4096 + (data.charCodeAt(i + 1) & 63) * 64 + (data.charCodeAt(i + 2) & 63);
            j = 3;
        } else {
            j = 4;
            w = (c & 7) * 262144 + (data.charCodeAt(i + 1) & 63) * 4096 + (data.charCodeAt(i + 2) & 63) * 64 + (data.charCodeAt(i + 3) & 63);
            w -= 65536;
            ww = 0xD800 + (w >>> 10 & 1023);
            w = 0xDC00 + (w & 1023);
        }
        if (ww !== 0) {
            out[k++] = ww & 255;
            out[k++] = ww >>> 8;
            ww = 0;
        }
        out[k++] = w % 256;
        out[k++] = w >>> 8;
    }
    return out.slice(0, k).toString("ucs2");
}
function utf8readc(data) {
    return Buffer_from(data, "binary").toString("utf8");
}
var utf8corpus = "foo bar baz\xe2\x98\x83\xf0\x9f\x8d\xa3";
var utf8read = has_buf && /*#__PURE__*/ (utf8readc(utf8corpus) == /*#__PURE__*/ utf8reada(utf8corpus) && utf8readc || /*#__PURE__*/ utf8readb(utf8corpus) == /*#__PURE__*/ utf8reada(utf8corpus) && utf8readb) || utf8reada;
var utf8write /*:StringConv*/  = has_buf ? function(data) {
    return Buffer_from(data, "utf8").toString("binary");
} : function(orig /*:string*/ ) /*:string*/ {
    var out /*:Array<string>*/  = [], i = 0, c = 0, d = 0;
    while(i < orig.length){
        c = orig.charCodeAt(i++);
        switch(true){
            case c < 128:
                out.push(String.fromCharCode(c));
                break;
            case c < 2048:
                out.push(String.fromCharCode(192 + (c >> 6)));
                out.push(String.fromCharCode(128 + (c & 63)));
                break;
            case c >= 55296 && c < 57344:
                c -= 55296;
                d = orig.charCodeAt(i++) - 56320 + (c << 10);
                out.push(String.fromCharCode(240 + (d >> 18 & 7)));
                out.push(String.fromCharCode(144 + (d >> 12 & 63)));
                out.push(String.fromCharCode(128 + (d >> 6 & 63)));
                out.push(String.fromCharCode(128 + (d & 63)));
                break;
            default:
                out.push(String.fromCharCode(224 + (c >> 12)));
                out.push(String.fromCharCode(128 + (c >> 6 & 63)));
                out.push(String.fromCharCode(128 + (c & 63)));
        }
    }
    return out.join("");
};
// matches <foo>...</foo> extracts content
var matchtag = /*#__PURE__*/ function() {
    var mtcache /*:{[k:string]:RegExp}*/  = {} /*:any*/ ;
    return function matchtag(f /*:string*/ , g /*:?string*/ ) /*:RegExp*/ {
        var t = f + "|" + (g || "");
        if (mtcache[t]) return mtcache[t];
        return mtcache[t] = new RegExp("<(?:\\w+:)?" + f + '(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?' + f + ">", g || "");
    };
}();
var htmldecode /*:{(s:string):string}*/  = /*#__PURE__*/ function() {
    var entities /*:Array<[RegExp, string]>*/  = [
        [
            "nbsp",
            " "
        ],
        [
            "middot",
            "\xb7"
        ],
        [
            "quot",
            '"'
        ],
        [
            "apos",
            "'"
        ],
        [
            "gt",
            ">"
        ],
        [
            "lt",
            "<"
        ],
        [
            "amp",
            "&"
        ]
    ].map(function(x /*:[string, string]*/ ) {
        return [
            new RegExp("&" + x[0] + ";", "ig"),
            x[1]
        ];
    });
    return function htmldecode(str /*:string*/ ) /*:string*/ {
        var o = str// Remove new lines and spaces from start of content
        .replace(/^[\t\n\r ]+/, "")// Remove new lines and spaces from end of content
        .replace(/[\t\n\r ]+$/, "")// Added line which removes any white space characters after and before html tags
        .replace(/>\s+/g, ">").replace(/\s+</g, "<")// Replace remaining new lines and spaces with space
        .replace(/[\t\n\r ]+/g, " ")// Replace <br> tags with new lines
        .replace(/<\s*[bB][rR]\s*\/?>/g, "\n")// Strip HTML elements
        .replace(/<[^>]*>/g, "");
        for(var i = 0; i < entities.length; ++i)o = o.replace(entities[i][0], entities[i][1]);
        return o;
    };
}();
var vtregex = /*#__PURE__*/ function() {
    var vt_cache = {};
    return function vt_regex(bt) {
        if (vt_cache[bt] !== undefined) return vt_cache[bt];
        return vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", "g");
    };
}();
var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
function parseVector(data /*:string*/ , opts) /*:Array<{v:string,t:string}>*/ {
    var h = parsexmltag(data);
    var matches /*:Array<string>*/  = data.match(vtregex(h.baseType)) || [];
    var res /*:Array<any>*/  = [];
    if (matches.length != h.size) {
        if (opts.WTF) throw new Error("unexpected vector length " + matches.length + " != " + h.size);
        return res;
    }
    matches.forEach(function(x /*:string*/ ) {
        var v = x.replace(vtvregex, "").match(vtmregex);
        if (v) res.push({
            v: utf8read(v[2]),
            t: v[1]
        });
    });
    return res;
}
var wtregex = /(^\s|\s$|\n)/;
function writetag(f /*:string*/ , g /*:string*/ ) /*:string*/ {
    return "<" + f + (g.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g + "</" + f + ">";
}
function wxt_helper(h) /*:string*/ {
    return keys(h).map(function(k) {
        return " " + k + '="' + h[k] + '"';
    }).join("");
}
function writextag(f /*:string*/ , g /*:?string*/ , h) {
    return "<" + f + (h != null ? wxt_helper(h) : "") + (g != null ? (g.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g + "</" + f : "/") + ">";
}
function write_w3cdtf(d /*:Date*/ , t /*:?boolean*/ ) /*:string*/ {
    try {
        return d.toISOString().replace(/\.\d*/, "");
    } catch (e) {
        if (t) throw e;
    }
    return "";
}
function write_vt(s, xlsx /*:?boolean*/ ) /*:string*/ {
    switch(typeof s){
        case "string":
            var o = writextag("vt:lpwstr", escapexml(s));
            if (xlsx) o = o.replace(/&quot;/g, "_x0022_");
            return o;
        case "number":
            return writextag((s | 0) == s ? "vt:i4" : "vt:r8", escapexml(String(s)));
        case "boolean":
            return writextag("vt:bool", s ? "true" : "false");
    }
    if (s instanceof Date) return writextag("vt:filetime", write_w3cdtf(s));
    throw new Error("Unable to serialize " + s);
}
function xlml_normalize(d) /*:string*/ {
    if (has_buf && /*::typeof Buffer !== "undefined" && d != null && d instanceof Buffer &&*/ Buffer.isBuffer(d)) return d.toString("utf8");
    if (typeof d === "string") return d;
    /* duktape */ if (typeof Uint8Array !== "undefined" && d instanceof Uint8Array) return utf8read(a2s(ab2a(d)));
    throw new Error("Bad input format: expected Buffer or string");
}
/* UOS uses CJK in tags */ var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg;
//var xlmlregex = /<(\/?)([a-z0-9]*:|)(\w+)[^>]*>/mg;
var XMLNS = {
    CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/metadata/core-properties",
    CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",
    EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",
    CT: "http://schemas.openxmlformats.org/package/2006/content-types",
    RELS: "http://schemas.openxmlformats.org/package/2006/relationships",
    TCMNT: "http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments",
    "dc": "http://purl.org/dc/elements/1.1/",
    "dcterms": "http://purl.org/dc/terms/",
    "dcmitype": "http://purl.org/dc/dcmitype/",
    "mx": "http://schemas.microsoft.com/office/mac/excel/2008/main",
    "r": "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
    "sjs": "http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties",
    "vt": "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",
    "xsi": "http://www.w3.org/2001/XMLSchema-instance",
    "xsd": "http://www.w3.org/2001/XMLSchema"
} /*:any*/ ;
var XMLNS_main = [
    "http://schemas.openxmlformats.org/spreadsheetml/2006/main",
    "http://purl.oclc.org/ooxml/spreadsheetml/main",
    "http://schemas.microsoft.com/office/excel/2006/main",
    "http://schemas.microsoft.com/office/excel/2006/2"
];
var XLMLNS = {
    "o": "urn:schemas-microsoft-com:office:office",
    "x": "urn:schemas-microsoft-com:office:excel",
    "ss": "urn:schemas-microsoft-com:office:spreadsheet",
    "dt": "uuid:C2F41010-65B3-11d1-A29F-00AA00C14882",
    "mv": "http://macVmlSchemaUri",
    "v": "urn:schemas-microsoft-com:vml",
    "html": "http://www.w3.org/TR/REC-html40"
} /*:any*/ ;
function read_double_le(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    var s = 1 - 2 * (b[idx + 7] >>> 7);
    var e = ((b[idx + 7] & 0x7f) << 4) + (b[idx + 6] >>> 4 & 0x0f);
    var m = b[idx + 6] & 0x0f;
    for(var i = 5; i >= 0; --i)m = m * 256 + b[idx + i];
    if (e == 0x7ff) return m == 0 ? s * Infinity : NaN;
    if (e == 0) e = -1022;
    else {
        e -= 1023;
        m += Math.pow(2, 52);
    }
    return s * Math.pow(2, e - 52) * m;
}
function write_double_le(b /*:RawBytes|CFBlob*/ , v /*:number*/ , idx /*:number*/ ) {
    var bs = (v < 0 || 1 / v == -Infinity ? 1 : 0) << 7, e = 0, m = 0;
    var av = bs ? -v : v;
    if (!isFinite(av)) {
        e = 0x7ff;
        m = isNaN(v) ? 0x6969 : 0;
    } else if (av == 0) e = m = 0;
    else {
        e = Math.floor(Math.log(av) / Math.LN2);
        m = av * Math.pow(2, 52 - e);
        if (e <= -1023 && (!isFinite(m) || m < Math.pow(2, 52))) e = -1022;
        else {
            m -= Math.pow(2, 52);
            e += 1023;
        }
    }
    for(var i = 0; i <= 5; ++i, m /= 256)b[idx + i] = m & 0xff;
    b[idx + 6] = (e & 0x0f) << 4 | m & 0xf;
    b[idx + 7] = e >> 4 | bs;
}
var ___toBuffer = function(bufs /*:Array<Array<RawBytes> >*/ ) /*:RawBytes*/ {
    var x = [], w = 10240;
    for(var i = 0; i < bufs[0].length; ++i)if (bufs[0][i]) for(var j = 0, L = bufs[0][i].length; j < L; j += w)x.push.apply(x, bufs[0][i].slice(j, j + w));
    return x;
};
var __toBuffer = has_buf ? function(bufs) {
    return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0].map(function(x) {
        return Buffer.isBuffer(x) ? x : Buffer_from(x);
    })) : ___toBuffer(bufs);
} : ___toBuffer;
var ___utf16le = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) /*:string*/ {
    var ss /*:Array<string>*/  = [];
    for(var i = s; i < e; i += 2)ss.push(String.fromCharCode(__readUInt16LE(b, i)));
    return ss.join("").replace(chr0, "");
};
var __utf16le = has_buf ? function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) /*:string*/ {
    if (!Buffer.isBuffer(b)) return ___utf16le(b, s, e);
    return b.toString("utf16le", s, e).replace(chr0, "") /*.replace(chr1,'!')*/ ;
} : ___utf16le;
var ___hexlify = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , l /*:number*/ ) /*:string*/ {
    var ss /*:Array<string>*/  = [];
    for(var i = s; i < s + l; ++i)ss.push(("0" + b[i].toString(16)).slice(-2));
    return ss.join("");
};
var __hexlify = has_buf ? function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , l /*:number*/ ) /*:string*/ {
    return Buffer.isBuffer(b) ? b.toString("hex", s, s + l) : ___hexlify(b, s, l);
} : ___hexlify;
var ___utf8 = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {
    var ss = [];
    for(var i = s; i < e; i++)ss.push(String.fromCharCode(__readUInt8(b, i)));
    return ss.join("");
};
var __utf8 = has_buf ? function utf8_b(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {
    return Buffer.isBuffer(b) ? b.toString("utf8", s, e) : ___utf8(b, s, e);
} : ___utf8;
var ___lpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
};
var __lpstr = ___lpstr;
var ___cpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
};
var __cpstr = ___cpstr;
var ___lpwstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
    var len = 2 * __readUInt32LE(b, i);
    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
};
var __lpwstr = ___lpwstr;
var ___lpp4 = function lpp4_(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? __utf16le(b, i + 4, i + 4 + len) : "";
};
var __lpp4 = ___lpp4;
var ___8lpp4 = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? __utf8(b, i + 4, i + 4 + len) : "";
};
var __8lpp4 = ___8lpp4;
var ___double = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) {
    return read_double_le(b, idx);
};
var __double = ___double;
var is_buf = function is_buf_a(a) {
    return Array.isArray(a) || typeof Uint8Array !== "undefined" && a instanceof Uint8Array;
};
if (has_buf /*:: && typeof Buffer !== 'undefined'*/ ) {
    __lpstr = function lpstr_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (!Buffer.isBuffer(b)) return ___lpstr(b, i);
        var len = b.readUInt32LE(i);
        return len > 0 ? b.toString("utf8", i + 4, i + 4 + len - 1) : "";
    };
    __cpstr = function cpstr_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (!Buffer.isBuffer(b)) return ___cpstr(b, i);
        var len = b.readUInt32LE(i);
        return len > 0 ? b.toString("utf8", i + 4, i + 4 + len - 1) : "";
    };
    __lpwstr = function lpwstr_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (!Buffer.isBuffer(b)) return ___lpwstr(b, i);
        var len = 2 * b.readUInt32LE(i);
        return b.toString("utf16le", i + 4, i + 4 + len - 1);
    };
    __lpp4 = function lpp4_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (!Buffer.isBuffer(b)) return ___lpp4(b, i);
        var len = b.readUInt32LE(i);
        return b.toString("utf16le", i + 4, i + 4 + len);
    };
    __8lpp4 = function lpp4_8b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (!Buffer.isBuffer(b)) return ___8lpp4(b, i);
        var len = b.readUInt32LE(i);
        return b.toString("utf8", i + 4, i + 4 + len);
    };
    __double = function double_(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        if (Buffer.isBuffer(b)) return b.readDoubleLE(i);
        return ___double(b, i);
    };
    is_buf = function is_buf_b(a) {
        return Buffer.isBuffer(a) || Array.isArray(a) || typeof Uint8Array !== "undefined" && a instanceof Uint8Array;
    };
}
/* from js-xls */ function cpdoit() {
    __utf16le = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {
        return $cptable.utils.decode(1200, b.slice(s, e)).replace(chr0, "");
    };
    __utf8 = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {
        return $cptable.utils.decode(65001, b.slice(s, e));
    };
    __lpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? $cptable.utils.decode(current_ansi, b.slice(i + 4, i + 4 + len - 1)) : "";
    };
    __cpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? $cptable.utils.decode(current_codepage, b.slice(i + 4, i + 4 + len - 1)) : "";
    };
    __lpwstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        var len = 2 * __readUInt32LE(b, i);
        return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len - 1)) : "";
    };
    __lpp4 = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len)) : "";
    };
    __8lpp4 = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? $cptable.utils.decode(65001, b.slice(i + 4, i + 4 + len)) : "";
    };
}
if (typeof $cptable !== "undefined") cpdoit();
var __readUInt8 = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    return b[idx];
};
var __readUInt16LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    return b[idx + 1] * 256 + b[idx];
};
var __readInt16LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    var u = b[idx + 1] * 256 + b[idx];
    return u < 0x8000 ? u : (0xffff - u + 1) * -1;
};
var __readUInt32LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    return b[idx + 3] * 16777216 + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];
};
var __readInt32LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    return b[idx + 3] << 24 | b[idx + 2] << 16 | b[idx + 1] << 8 | b[idx];
};
var __readInt32BE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {
    return b[idx] << 24 | b[idx + 1] << 16 | b[idx + 2] << 8 | b[idx + 3];
};
function ReadShift(size /*:number*/ , t /*:?string*/ ) /*:number|string*/ {
    var o = "", oI /*:: :number = 0*/ , oR, oo = [], w, vv, i, loc;
    switch(t){
        case "dbcs":
            loc = this.l;
            if (has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l + 2 * size).toString("utf16le");
            else for(i = 0; i < size; ++i){
                o += String.fromCharCode(__readUInt16LE(this, loc));
                loc += 2;
            }
            size *= 2;
            break;
        case "utf8":
            o = __utf8(this, this.l, this.l + size);
            break;
        case "utf16le":
            size *= 2;
            o = __utf16le(this, this.l, this.l + size);
            break;
        case "wstr":
            if (typeof $cptable !== "undefined") o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size));
            else return ReadShift.call(this, size, "dbcs");
            size = 2 * size;
            break;
        /* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */ case "lpstr-ansi":
            o = __lpstr(this, this.l);
            size = 4 + __readUInt32LE(this, this.l);
            break;
        case "lpstr-cp":
            o = __cpstr(this, this.l);
            size = 4 + __readUInt32LE(this, this.l);
            break;
        /* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */ case "lpwstr":
            o = __lpwstr(this, this.l);
            size = 4 + 2 * __readUInt32LE(this, this.l);
            break;
        /* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */ case "lpp4":
            size = 4 + __readUInt32LE(this, this.l);
            o = __lpp4(this, this.l);
            if (size & 0x02) size += 2;
            break;
        /* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */ case "8lpp4":
            size = 4 + __readUInt32LE(this, this.l);
            o = __8lpp4(this, this.l);
            if (size & 0x03) size += 4 - (size & 0x03);
            break;
        case "cstr":
            size = 0;
            o = "";
            while((w = __readUInt8(this, this.l + size++)) !== 0)oo.push(_getchar(w));
            o = oo.join("");
            break;
        case "_wstr":
            size = 0;
            o = "";
            while((w = __readUInt16LE(this, this.l + size)) !== 0){
                oo.push(_getchar(w));
                size += 2;
            }
            size += 2;
            o = oo.join("");
            break;
        /* sbcs and dbcs support continue records in the SST way TODO codepages */ case "dbcs-cont":
            o = "";
            loc = this.l;
            for(i = 0; i < size; ++i){
                if (this.lens && this.lens.indexOf(loc) !== -1) {
                    w = __readUInt8(this, loc);
                    this.l = loc + 1;
                    vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont");
                    return oo.join("") + vv;
                }
                oo.push(_getchar(__readUInt16LE(this, loc)));
                loc += 2;
            }
            o = oo.join("");
            size *= 2;
            break;
        case "cpstr":
            if (typeof $cptable !== "undefined") {
                o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));
                break;
            }
        /* falls through */ case "sbcs-cont":
            o = "";
            loc = this.l;
            for(i = 0; i != size; ++i){
                if (this.lens && this.lens.indexOf(loc) !== -1) {
                    w = __readUInt8(this, loc);
                    this.l = loc + 1;
                    vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont");
                    return oo.join("") + vv;
                }
                oo.push(_getchar(__readUInt8(this, loc)));
                loc += 1;
            }
            o = oo.join("");
            break;
        default:
            switch(size){
                case 1:
                    oI = __readUInt8(this, this.l);
                    this.l++;
                    return oI;
                case 2:
                    oI = (t === "i" ? __readInt16LE : __readUInt16LE)(this, this.l);
                    this.l += 2;
                    return oI;
                case 4:
                case -4:
                    if (t === "i" || (this[this.l + 3] & 0x80) === 0) {
                        oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);
                        this.l += 4;
                        return oI;
                    } else {
                        oR = __readUInt32LE(this, this.l);
                        this.l += 4;
                    }
                    return oR;
                case 8:
                case -8:
                    if (t === "f") {
                        if (size == 8) oR = __double(this, this.l);
                        else oR = __double([
                            this[this.l + 7],
                            this[this.l + 6],
                            this[this.l + 5],
                            this[this.l + 4],
                            this[this.l + 3],
                            this[this.l + 2],
                            this[this.l + 1],
                            this[this.l + 0]
                        ], 0);
                        this.l += 8;
                        return oR;
                    } else size = 8;
                /* falls through */ case 16:
                    o = __hexlify(this, this.l, size);
                    break;
            }
    }
    this.l += size;
    return o;
}
var __writeUInt32LE = function(b /*:RawBytes|CFBlob*/ , val /*:number*/ , idx /*:number*/ ) /*:void*/ {
    b[idx] = val & 0xFF;
    b[idx + 1] = val >>> 8 & 0xFF;
    b[idx + 2] = val >>> 16 & 0xFF;
    b[idx + 3] = val >>> 24 & 0xFF;
};
var __writeInt32LE = function(b /*:RawBytes|CFBlob*/ , val /*:number*/ , idx /*:number*/ ) /*:void*/ {
    b[idx] = val & 0xFF;
    b[idx + 1] = val >> 8 & 0xFF;
    b[idx + 2] = val >> 16 & 0xFF;
    b[idx + 3] = val >> 24 & 0xFF;
};
var __writeUInt16LE = function(b /*:RawBytes|CFBlob*/ , val /*:number*/ , idx /*:number*/ ) /*:void*/ {
    b[idx] = val & 0xFF;
    b[idx + 1] = val >>> 8 & 0xFF;
};
function WriteShift(t /*:number*/ , val /*:string|number*/ , f /*:?string*/ ) /*:any*/ {
    var size = 0, i = 0;
    if (f === "dbcs") {
        /*:: if(typeof val !== 'string') throw new Error("unreachable"); */ for(i = 0; i != val.length; ++i)__writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);
        size = 2 * val.length;
    } else if (f === "sbcs") {
        if (typeof $cptable !== "undefined" && current_ansi == 874) /* TODO: use tables directly, don't encode */ /*:: if(typeof val !== "string") throw new Error("unreachable"); */ for(i = 0; i != val.length; ++i){
            var cppayload = $cptable.utils.encode(current_ansi, val.charAt(i));
            this[this.l + i] = cppayload[0];
        }
        else {
            /*:: if(typeof val !== 'string') throw new Error("unreachable"); */ val = val.replace(/[^\x00-\x7F]/g, "_");
            /*:: if(typeof val !== 'string') throw new Error("unreachable"); */ for(i = 0; i != val.length; ++i)this[this.l + i] = val.charCodeAt(i) & 0xFF;
        }
        size = val.length;
    } else if (f === "hex") {
        for(; i < t; ++i)/*:: if(typeof val !== "string") throw new Error("unreachable"); */ this[this.l++] = parseInt(val.slice(2 * i, 2 * i + 2), 16) || 0;
        return this;
    } else if (f === "utf16le") {
        /*:: if(typeof val !== "string") throw new Error("unreachable"); */ var end /*:number*/  = Math.min(this.l + t, this.length);
        for(i = 0; i < Math.min(val.length, t); ++i){
            var cc = val.charCodeAt(i);
            this[this.l++] = cc & 0xff;
            this[this.l++] = cc >> 8;
        }
        while(this.l < end)this[this.l++] = 0;
        return this;
    } else /*:: if(typeof val === 'number') */ switch(t){
        case 1:
            size = 1;
            this[this.l] = val & 0xFF;
            break;
        case 2:
            size = 2;
            this[this.l] = val & 0xFF;
            val >>>= 8;
            this[this.l + 1] = val & 0xFF;
            break;
        case 3:
            size = 3;
            this[this.l] = val & 0xFF;
            val >>>= 8;
            this[this.l + 1] = val & 0xFF;
            val >>>= 8;
            this[this.l + 2] = val & 0xFF;
            break;
        case 4:
            size = 4;
            __writeUInt32LE(this, val, this.l);
            break;
        case 8:
            size = 8;
            if (f === "f") {
                write_double_le(this, val, this.l);
                break;
            }
        /* falls through */ case 16:
            break;
        case -4:
            size = 4;
            __writeInt32LE(this, val, this.l);
            break;
    }
    this.l += size;
    return this;
}
function CheckField(hexstr /*:string*/ , fld /*:string*/ ) /*:void*/ {
    var m = __hexlify(this, this.l, hexstr.length >> 1);
    if (m !== hexstr) throw new Error(fld + "Expected " + hexstr + " saw " + m);
    this.l += hexstr.length >> 1;
}
function prep_blob(blob, pos /*:number*/ ) /*:void*/ {
    blob.l = pos;
    blob.read_shift = /*::(*/ ReadShift /*:: :any)*/ ;
    blob.chk = CheckField;
    blob.write_shift = WriteShift;
}
function parsenoop(blob, length /*:: :number, opts?:any */ ) {
    blob.l += length;
}
function new_buf(sz /*:number*/ ) /*:Block*/ {
    var o = new_raw_buf(sz);
    prep_blob(o, 0);
    return o;
}
/* [MS-XLSB] 2.1.4 Record */ function recordhopper(data, cb /*:RecordHopperCB*/ , opts /*:?any*/ ) {
    if (!data) return;
    var tmpbyte, cntbyte, length;
    prep_blob(data, data.l || 0);
    var L = data.length, RT = 0, tgt = 0;
    while(data.l < L){
        RT = data.read_shift(1);
        if (RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F) << 7);
        var R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];
        tmpbyte = data.read_shift(1);
        length = tmpbyte & 0x7F;
        for(cntbyte = 1; cntbyte < 4 && tmpbyte & 0x80; ++cntbyte)length += ((tmpbyte = data.read_shift(1)) & 0x7F) << 7 * cntbyte;
        tgt = data.l + length;
        var d = R.f && R.f(data, length, opts);
        data.l = tgt;
        if (cb(d, R, RT)) return;
    }
}
/* control buffer usage for fixed-length buffers */ function buf_array() /*:BufArray*/ {
    var bufs /*:Array<Block>*/  = [], blksz = has_buf ? 256 : 2048;
    var newblk = function ba_newblk(sz /*:number*/ ) /*:Block*/ {
        var o /*:Block*/  = new_buf(sz);
        prep_blob(o, 0);
        return o;
    };
    var curbuf /*:Block*/  = newblk(blksz);
    var endbuf = function ba_endbuf() {
        if (!curbuf) return;
        if (curbuf.length > curbuf.l) {
            curbuf = curbuf.slice(0, curbuf.l);
            curbuf.l = curbuf.length;
        }
        if (curbuf.length > 0) bufs.push(curbuf);
        curbuf = null;
    };
    var next = function ba_next(sz /*:number*/ ) /*:Block*/ {
        if (curbuf && sz < curbuf.length - curbuf.l) return curbuf;
        endbuf();
        return curbuf = newblk(Math.max(sz + 1, blksz));
    };
    var end = function ba_end() {
        endbuf();
        return bconcat(bufs);
    };
    var push = function ba_push(buf) {
        endbuf();
        curbuf = buf;
        if (curbuf.l == null) curbuf.l = curbuf.length;
        next(blksz);
    };
    return {
        next: next,
        push: push,
        end: end,
        _bufs: bufs
    } /*:any*/ ;
}
function write_record(ba /*:BufArray*/ , type /*:number*/ , payload, length /*:?number*/ ) {
    var t /*:number*/  = +type, l;
    if (isNaN(t)) return; // TODO: throw something here?
    if (!length) length = XLSBRecordEnum[t].p || (payload || []).length || 0;
    l = 1 + (t >= 0x80 ? 1 : 0) + 1 /* + length*/ ;
    if (length >= 0x80) ++l;
    if (length >= 0x4000) ++l;
    if (length >= 0x200000) ++l;
    var o = ba.next(l);
    if (t <= 0x7F) o.write_shift(1, t);
    else {
        o.write_shift(1, (t & 0x7F) + 0x80);
        o.write_shift(1, t >> 7);
    }
    for(var i = 0; i != 4; ++i)if (length >= 0x80) {
        o.write_shift(1, (length & 0x7F) + 0x80);
        length >>= 7;
    } else {
        o.write_shift(1, length);
        break;
    }
    if (/*:: length != null &&*/ length > 0 && is_buf(payload)) ba.push(payload);
}
/* XLS ranges enforced */ function shift_cell_xls(cell /*:CellAddress*/ , tgt /*:any*/ , opts /*:?any*/ ) /*:CellAddress*/ {
    var out = dup(cell);
    if (tgt.s) {
        if (out.cRel) out.c += tgt.s.c;
        if (out.rRel) out.r += tgt.s.r;
    } else {
        if (out.cRel) out.c += tgt.c;
        if (out.rRel) out.r += tgt.r;
    }
    if (!opts || opts.biff < 12) {
        while(out.c >= 0x100)out.c -= 0x100;
        while(out.r >= 0x10000)out.r -= 0x10000;
    }
    return out;
}
function shift_range_xls(cell, range, opts) {
    var out = dup(cell);
    out.s = shift_cell_xls(out.s, range.s, opts);
    out.e = shift_cell_xls(out.e, range.s, opts);
    return out;
}
function encode_cell_xls(c /*:CellAddress*/ , biff /*:number*/ ) /*:string*/ {
    if (c.cRel && c.c < 0) {
        c = dup(c);
        while(c.c < 0)c.c += biff > 8 ? 0x4000 : 0x100;
    }
    if (c.rRel && c.r < 0) {
        c = dup(c);
        while(c.r < 0)c.r += biff > 8 ? 0x100000 : biff > 5 ? 0x10000 : 0x4000;
    }
    var s = encode_cell(c);
    if (!c.cRel && c.cRel != null) s = fix_col(s);
    if (!c.rRel && c.rRel != null) s = fix_row(s);
    return s;
}
function encode_range_xls(r, opts) /*:string*/ {
    if (r.s.r == 0 && !r.s.rRel) {
        if (r.e.r == (opts.biff >= 12 ? 0xFFFFF : opts.biff >= 8 ? 0x10000 : 0x4000) && !r.e.rRel) return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
    }
    if (r.s.c == 0 && !r.s.cRel) {
        if (r.e.c == (opts.biff >= 12 ? 0x3FFF : 0xFF) && !r.e.cRel) return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
    }
    return encode_cell_xls(r.s, opts.biff) + ":" + encode_cell_xls(r.e, opts.biff);
}
function decode_row(rowstr /*:string*/ ) /*:number*/ {
    return parseInt(unfix_row(rowstr), 10) - 1;
}
function encode_row(row /*:number*/ ) /*:string*/ {
    return "" + (row + 1);
}
function fix_row(cstr /*:string*/ ) /*:string*/ {
    return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
}
function unfix_row(cstr /*:string*/ ) /*:string*/ {
    return cstr.replace(/\$(\d+)$/, "$1");
}
function decode_col(colstr /*:string*/ ) /*:number*/ {
    var c = unfix_col(colstr), d = 0, i = 0;
    for(; i !== c.length; ++i)d = 26 * d + c.charCodeAt(i) - 64;
    return d - 1;
}
function encode_col(col /*:number*/ ) /*:string*/ {
    if (col < 0) throw new Error("invalid column " + col);
    var s = "";
    for(++col; col; col = Math.floor((col - 1) / 26))s = String.fromCharCode((col - 1) % 26 + 65) + s;
    return s;
}
function fix_col(cstr /*:string*/ ) /*:string*/ {
    return cstr.replace(/^([A-Z])/, "$$$1");
}
function unfix_col(cstr /*:string*/ ) /*:string*/ {
    return cstr.replace(/^\$([A-Z])/, "$1");
}
function split_cell(cstr /*:string*/ ) /*:Array<string>*/ {
    return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
}
//function decode_cell(cstr/*:string*/)/*:CellAddress*/ { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }
function decode_cell(cstr /*:string*/ ) /*:CellAddress*/ {
    var R = 0, C = 0;
    for(var i = 0; i < cstr.length; ++i){
        var cc = cstr.charCodeAt(i);
        if (cc >= 48 && cc <= 57) R = 10 * R + (cc - 48);
        else if (cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);
    }
    return {
        c: C - 1,
        r: R - 1
    };
}
//function encode_cell(cell/*:CellAddress*/)/*:string*/ { return encode_col(cell.c) + encode_row(cell.r); }
function encode_cell(cell /*:CellAddress*/ ) /*:string*/ {
    var col = cell.c + 1;
    var s = "";
    for(; col; col = (col - 1) / 26 | 0)s = String.fromCharCode((col - 1) % 26 + 65) + s;
    return s + (cell.r + 1);
}
function decode_range(range /*:string*/ ) /*:Range*/ {
    var idx = range.indexOf(":");
    if (idx == -1) return {
        s: decode_cell(range),
        e: decode_cell(range)
    };
    return {
        s: decode_cell(range.slice(0, idx)),
        e: decode_cell(range.slice(idx + 1))
    };
}
/*# if only one arg, it is assumed to be a Range.  If 2 args, both are cell addresses */ function encode_range(cs /*:CellAddrSpec|Range*/ , ce /*:?CellAddrSpec*/ ) /*:string*/ {
    if (typeof ce === "undefined" || typeof ce === "number") /*:: if(!(cs instanceof Range)) throw "unreachable"; */ return encode_range(cs.s, cs.e);
    /*:: if((cs instanceof Range)) throw "unreachable"; */ if (typeof cs !== "string") cs = encode_cell(cs /*:any*/ );
    if (typeof ce !== "string") ce = encode_cell(ce /*:any*/ );
    /*:: if(typeof cs !== 'string') throw "unreachable"; */ /*:: if(typeof ce !== 'string') throw "unreachable"; */ return cs == ce ? cs : cs + ":" + ce;
}
function safe_decode_range(range /*:string*/ ) /*:Range*/ {
    var o = {
        s: {
            c: 0,
            r: 0
        },
        e: {
            c: 0,
            r: 0
        }
    };
    var idx = 0, i = 0, cc = 0;
    var len = range.length;
    for(idx = 0; i < len; ++i){
        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;
        idx = 26 * idx + cc;
    }
    o.s.c = --idx;
    for(idx = 0; i < len; ++i){
        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;
        idx = 10 * idx + cc;
    }
    o.s.r = --idx;
    if (i === len || cc != 10) {
        o.e.c = o.s.c;
        o.e.r = o.s.r;
        return o;
    }
    ++i;
    for(idx = 0; i != len; ++i){
        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;
        idx = 26 * idx + cc;
    }
    o.e.c = --idx;
    for(idx = 0; i != len; ++i){
        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;
        idx = 10 * idx + cc;
    }
    o.e.r = --idx;
    return o;
}
function safe_format_cell(cell /*:Cell*/ , v /*:any*/ ) {
    var q = cell.t == "d" && v instanceof Date;
    if (cell.z != null) try {
        return cell.w = SSF_format(cell.z, q ? datenum(v) : v);
    } catch (e) {}
    try {
        return cell.w = SSF_format((cell.XF || {}).numFmtId || (q ? 14 : 0), q ? datenum(v) : v);
    } catch (e) {
        return "" + v;
    }
}
function format_cell(cell /*:Cell*/ , v /*:any*/ , o /*:any*/ ) {
    if (cell == null || cell.t == null || cell.t == "z") return "";
    if (cell.w !== undefined) return cell.w;
    if (cell.t == "d" && !cell.z && o && o.dateNF) cell.z = o.dateNF;
    if (cell.t == "e") return BErr[cell.v] || cell.v;
    if (v == undefined) return safe_format_cell(cell, cell.v);
    return safe_format_cell(cell, v);
}
function sheet_to_workbook(sheet /*:Worksheet*/ , opts) /*:Workbook*/ {
    var n = opts && opts.sheet ? opts.sheet : "Sheet1";
    var sheets = {};
    sheets[n] = sheet;
    return {
        SheetNames: [
            n
        ],
        Sheets: sheets
    };
}
function sheet_add_aoa(_ws /*:?Worksheet*/ , data /*:AOA*/ , opts /*:?any*/ ) /*:Worksheet*/ {
    var o = opts || {};
    var dense = _ws ? Array.isArray(_ws) : o.dense;
    if (DENSE != null && dense == null) dense = DENSE;
    var ws /*:Worksheet*/  = _ws || (dense ? [] : {} /*:any*/ );
    var _R = 0, _C = 0;
    if (ws && o.origin != null) {
        if (typeof o.origin == "number") _R = o.origin;
        else {
            var _origin /*:CellAddress*/  = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
            _R = _origin.r;
            _C = _origin.c;
        }
        if (!ws["!ref"]) ws["!ref"] = "A1:A1";
    }
    var range /*:Range*/  = {
        s: {
            c: 10000000,
            r: 10000000
        },
        e: {
            c: 0,
            r: 0
        }
    } /*:any*/ ;
    if (ws["!ref"]) {
        var _range = safe_decode_range(ws["!ref"]);
        range.s.c = _range.s.c;
        range.s.r = _range.s.r;
        range.e.c = Math.max(range.e.c, _range.e.c);
        range.e.r = Math.max(range.e.r, _range.e.r);
        if (_R == -1) range.e.r = _R = _range.e.r + 1;
    }
    for(var R = 0; R != data.length; ++R){
        if (!data[R]) continue;
        if (!Array.isArray(data[R])) throw new Error("aoa_to_sheet expects an array of arrays");
        for(var C = 0; C != data[R].length; ++C){
            if (typeof data[R][C] === "undefined") continue;
            var cell /*:Cell*/  = {
                v: data[R][C]
            } /*:any*/ ;
            var __R = _R + R, __C = _C + C;
            if (range.s.r > __R) range.s.r = __R;
            if (range.s.c > __C) range.s.c = __C;
            if (range.e.r < __R) range.e.r = __R;
            if (range.e.c < __C) range.e.c = __C;
            if (data[R][C] && typeof data[R][C] === "object" && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date)) cell = data[R][C];
            else {
                if (Array.isArray(cell.v)) {
                    cell.f = data[R][C][1];
                    cell.v = cell.v[0];
                }
                if (cell.v === null) {
                    if (cell.f) cell.t = "n";
                    else if (o.nullError) {
                        cell.t = "e";
                        cell.v = 0;
                    } else if (!o.sheetStubs) continue;
                    else cell.t = "z";
                } else if (typeof cell.v === "number") cell.t = "n";
                else if (typeof cell.v === "boolean") cell.t = "b";
                else if (cell.v instanceof Date) {
                    cell.z = o.dateNF || table_fmt[14];
                    if (o.cellDates) {
                        cell.t = "d";
                        cell.w = SSF_format(cell.z, datenum(cell.v));
                    } else {
                        cell.t = "n";
                        cell.v = datenum(cell.v);
                        cell.w = SSF_format(cell.z, cell.v);
                    }
                } else cell.t = "s";
            }
            if (dense) {
                if (!ws[__R]) ws[__R] = [];
                if (ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;
                ws[__R][__C] = cell;
            } else {
                var cell_ref = encode_cell({
                    c: __C,
                    r: __R
                } /*:any*/ );
                if (ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;
                ws[cell_ref] = cell;
            }
        }
    }
    if (range.s.c < 10000000) ws["!ref"] = encode_range(range);
    return ws;
}
function aoa_to_sheet(data /*:AOA*/ , opts /*:?any*/ ) /*:Worksheet*/ {
    return sheet_add_aoa(null, data, opts);
}
function parse_Int32LE(data) {
    return data.read_shift(4, "i");
}
function write_UInt32LE(x /*:number*/ , o) {
    if (!o) o = new_buf(4);
    o.write_shift(4, x);
    return o;
}
/* [MS-XLSB] 2.5.168 */ function parse_XLWideString(data /*::, length*/ ) /*:string*/ {
    var cchCharacters = data.read_shift(4);
    return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "dbcs");
}
function write_XLWideString(data /*:string*/ , o) {
    var _null = false;
    if (o == null) {
        _null = true;
        o = new_buf(4 + 2 * data.length);
    }
    o.write_shift(4, data.length);
    if (data.length > 0) o.write_shift(0, data, "dbcs");
    return _null ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.5.91 */ //function parse_LPWideString(data/*::, length*/)/*:string*/ {
//	var cchCharacters = data.read_shift(2);
//	return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "utf16le");
//}
/* [MS-XLSB] 2.5.143 */ function parse_StrRun(data) {
    return {
        ich: data.read_shift(2),
        ifnt: data.read_shift(2)
    };
}
function write_StrRun(run, o) {
    if (!o) o = new_buf(4);
    o.write_shift(2, run.ich || 0);
    o.write_shift(2, run.ifnt || 0);
    return o;
}
/* [MS-XLSB] 2.5.121 */ function parse_RichStr(data, length /*:number*/ ) /*:XLString*/ {
    var start = data.l;
    var flags = data.read_shift(1);
    var str = parse_XLWideString(data);
    var rgsStrRun = [];
    var z = {
        t: str,
        h: str
    } /*:any*/ ;
    if ((flags & 1) !== 0) {
        /* TODO: formatted string */ var dwSizeStrRun = data.read_shift(4);
        for(var i = 0; i != dwSizeStrRun; ++i)rgsStrRun.push(parse_StrRun(data));
        z.r = rgsStrRun;
    } else z.r = [
        {
            ich: 0,
            ifnt: 0
        }
    ];
    //if((flags & 2) !== 0) { /* fExtStr */
    //	/* TODO: phonetic string */
    //}
    data.l = start + length;
    return z;
}
function write_RichStr(str /*:XLString*/ , o /*:?Block*/ ) /*:Block*/ {
    /* TODO: formatted string */ var _null = false;
    if (o == null) {
        _null = true;
        o = new_buf(15 + 4 * str.t.length);
    }
    o.write_shift(1, 0);
    write_XLWideString(str.t, o);
    return _null ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.328 BrtCommentText (RichStr w/1 run) */ var parse_BrtCommentText = parse_RichStr;
function write_BrtCommentText(str /*:XLString*/ , o /*:?Block*/ ) /*:Block*/ {
    /* TODO: formatted string */ var _null = false;
    if (o == null) {
        _null = true;
        o = new_buf(23 + 4 * str.t.length);
    }
    o.write_shift(1, 1);
    write_XLWideString(str.t, o);
    o.write_shift(4, 1);
    write_StrRun({
        ich: 0,
        ifnt: 0
    }, o);
    return _null ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.5.9 */ function parse_XLSBCell(data) /*:any*/ {
    var col = data.read_shift(4);
    var iStyleRef = data.read_shift(2);
    iStyleRef += data.read_shift(1) << 16;
    data.l++; //var fPhShow = data.read_shift(1);
    return {
        c: col,
        iStyleRef: iStyleRef
    };
}
function write_XLSBCell(cell /*:any*/ , o /*:?Block*/ ) {
    if (o == null) o = new_buf(8);
    o.write_shift(-4, cell.c);
    o.write_shift(3, cell.iStyleRef || cell.s);
    o.write_shift(1, 0); /* fPhShow */ 
    return o;
}
/* Short XLSB Cell does not include column */ function parse_XLSBShortCell(data) /*:any*/ {
    var iStyleRef = data.read_shift(2);
    iStyleRef += data.read_shift(1) << 16;
    data.l++; //var fPhShow = data.read_shift(1);
    return {
        c: -1,
        iStyleRef: iStyleRef
    };
}
function write_XLSBShortCell(cell /*:any*/ , o /*:?Block*/ ) {
    if (o == null) o = new_buf(4);
    o.write_shift(3, cell.iStyleRef || cell.s);
    o.write_shift(1, 0); /* fPhShow */ 
    return o;
}
/* [MS-XLSB] 2.5.21 */ var parse_XLSBCodeName = parse_XLWideString;
var write_XLSBCodeName = write_XLWideString;
/* [MS-XLSB] 2.5.166 */ function parse_XLNullableWideString(data /*::, length*/ ) /*:string*/ {
    var cchCharacters = data.read_shift(4);
    return cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? "" : data.read_shift(cchCharacters, "dbcs");
}
function write_XLNullableWideString(data /*:string*/ , o) {
    var _null = false;
    if (o == null) {
        _null = true;
        o = new_buf(127);
    }
    o.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);
    if (data.length > 0) o.write_shift(0, data, "dbcs");
    return _null ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.5.165 */ var parse_XLNameWideString = parse_XLWideString;
//var write_XLNameWideString = write_XLWideString;
/* [MS-XLSB] 2.5.114 */ var parse_RelID = parse_XLNullableWideString;
var write_RelID = write_XLNullableWideString;
/* [MS-XLS] 2.5.217 ; [MS-XLSB] 2.5.122 */ function parse_RkNumber(data) /*:number*/ {
    var b = data.slice(data.l, data.l + 4);
    var fX100 = b[0] & 1, fInt = b[0] & 2;
    data.l += 4;
    var RK = fInt === 0 ? __double([
        0,
        0,
        0,
        0,
        b[0] & 0xFC,
        b[1],
        b[2],
        b[3]
    ], 0) : __readInt32LE(b, 0) >> 2;
    return fX100 ? RK / 100 : RK;
}
function write_RkNumber(data /*:number*/ , o) {
    if (o == null) o = new_buf(4);
    var fX100 = 0, fInt = 0, d100 = data * 100;
    if (data == (data | 0) && data >= -536870912 && data < 536870912) fInt = 1;
    else if (d100 == (d100 | 0) && d100 >= -536870912 && d100 < 536870912) {
        fInt = 1;
        fX100 = 1;
    }
    if (fInt) o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));
    else throw new Error("unsupported RkNumber " + data); // TODO
}
/* [MS-XLSB] 2.5.117 RfX */ function parse_RfX(data /*::, length*/ ) /*:Range*/ {
    var cell /*:Range*/  = {
        s: {},
        e: {}
    } /*:any*/ ;
    cell.s.r = data.read_shift(4);
    cell.e.r = data.read_shift(4);
    cell.s.c = data.read_shift(4);
    cell.e.c = data.read_shift(4);
    return cell;
}
function write_RfX(r /*:Range*/ , o) {
    if (!o) o = new_buf(16);
    o.write_shift(4, r.s.r);
    o.write_shift(4, r.e.r);
    o.write_shift(4, r.s.c);
    o.write_shift(4, r.e.c);
    return o;
}
/* [MS-XLSB] 2.5.153 UncheckedRfX */ var parse_UncheckedRfX = parse_RfX;
var write_UncheckedRfX = write_RfX;
/* [MS-XLSB] 2.5.155 UncheckedSqRfX */ //function parse_UncheckedSqRfX(data) {
//	var cnt = data.read_shift(4);
//	var out = [];
//	for(var i = 0; i < cnt; ++i) {
//		var rng = parse_UncheckedRfX(data);
//		out.push(encode_range(rng));
//	}
//	return out.join(",");
//}
//function write_UncheckedSqRfX(sqrfx/*:string*/) {
//	var parts = sqrfx.split(/\s*,\s*/);
//	var o = new_buf(4); o.write_shift(4, parts.length);
//	var out = [o];
//	parts.forEach(function(rng) {
//		out.push(write_UncheckedRfX(safe_decode_range(rng)));
//	});
//	return bconcat(out);
//}
/* [MS-XLS] 2.5.342 ; [MS-XLSB] 2.5.171 */ /* TODO: error checking, NaN and Infinity values are not valid Xnum */ function parse_Xnum(data /*::, length*/ ) {
    if (data.length - data.l < 8) throw "XLS Xnum Buffer underflow";
    return data.read_shift(8, "f");
}
function write_Xnum(data, o) {
    return (o || new_buf(8)).write_shift(8, data, "f");
}
/* [MS-XLSB] 2.4.324 BrtColor */ function parse_BrtColor(data /*::, length*/ ) {
    var out = {};
    var d = data.read_shift(1);
    //var fValidRGB = d & 1;
    var xColorType = d >>> 1;
    var index = data.read_shift(1);
    var nTS = data.read_shift(2, "i");
    var bR = data.read_shift(1);
    var bG = data.read_shift(1);
    var bB = data.read_shift(1);
    data.l++; //var bAlpha = data.read_shift(1);
    switch(xColorType){
        case 0:
            out.auto = 1;
            break;
        case 1:
            out.index = index;
            var icv = XLSIcv[index];
            /* automatic pseudo index 81 */ if (icv) out.rgb = rgb2Hex(icv);
            break;
        case 2:
            /* if(!fValidRGB) throw new Error("invalid"); */ out.rgb = rgb2Hex([
                bR,
                bG,
                bB
            ]);
            break;
        case 3:
            out.theme = index;
            break;
    }
    if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
    return out;
}
function write_BrtColor(color, o) {
    if (!o) o = new_buf(8);
    if (!color || color.auto) {
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        return o;
    }
    if (color.index != null) {
        o.write_shift(1, 0x02);
        o.write_shift(1, color.index);
    } else if (color.theme != null) {
        o.write_shift(1, 0x06);
        o.write_shift(1, color.theme);
    } else {
        o.write_shift(1, 0x05);
        o.write_shift(1, 0);
    }
    var nTS = color.tint || 0;
    if (nTS > 0) nTS *= 32767;
    else if (nTS < 0) nTS *= 32768;
    o.write_shift(2, nTS);
    if (!color.rgb || color.theme != null) {
        o.write_shift(2, 0);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
    } else {
        var rgb = color.rgb || "FFFFFF";
        if (typeof rgb == "number") rgb = ("000000" + rgb.toString(16)).slice(-6);
        o.write_shift(1, parseInt(rgb.slice(0, 2), 16));
        o.write_shift(1, parseInt(rgb.slice(2, 4), 16));
        o.write_shift(1, parseInt(rgb.slice(4, 6), 16));
        o.write_shift(1, 0xFF);
    }
    return o;
}
/* [MS-XLSB] 2.5.52 */ function parse_FontFlags(data /*::, length, opts*/ ) {
    var d = data.read_shift(1);
    data.l++;
    var out = {
        fBold: d & 0x01,
        fItalic: d & 0x02,
        fUnderline: d & 0x04,
        fStrikeout: d & 0x08,
        fOutline: d & 0x10,
        fShadow: d & 0x20,
        fCondense: d & 0x40,
        fExtend: d & 0x80
    };
    return out;
}
function write_FontFlags(font, o) {
    if (!o) o = new_buf(2);
    var grbit = (font.italic ? 0x02 : 0) | (font.strike ? 0x08 : 0) | (font.outline ? 0x10 : 0) | (font.shadow ? 0x20 : 0) | (font.condense ? 0x40 : 0) | (font.extend ? 0x80 : 0);
    o.write_shift(1, grbit);
    o.write_shift(1, 0);
    return o;
}
/* [MS-OLEDS] 2.3.1 and 2.3.2 */ function parse_ClipboardFormatOrString(o, w /*:number*/ ) /*:string*/ {
    // $FlowIgnore
    var ClipFmt = {
        2: "BITMAP",
        3: "METAFILEPICT",
        8: "DIB",
        14: "ENHMETAFILE"
    };
    var m /*:number*/  = o.read_shift(4);
    switch(m){
        case 0x00000000:
            return "";
        case 0xffffffff:
        case 0xfffffffe:
            return ClipFmt[o.read_shift(4)] || "";
    }
    if (m > 0x190) throw new Error("Unsupported Clipboard: " + m.toString(16));
    o.l -= 4;
    return o.read_shift(0, w == 1 ? "lpstr" : "lpwstr");
}
function parse_ClipboardFormatOrAnsiString(o) {
    return parse_ClipboardFormatOrString(o, 1);
}
function parse_ClipboardFormatOrUnicodeString(o) {
    return parse_ClipboardFormatOrString(o, 2);
}
/* [MS-OLEPS] 2.2 PropertyType */ // Note: some tree shakers cannot handle VT_VECTOR | $CONST, hence extra vars
//var VT_EMPTY    = 0x0000;
//var VT_NULL     = 0x0001;
var VT_I2 = 0x0002;
var VT_I4 = 0x0003;
//var VT_R4       = 0x0004;
//var VT_R8       = 0x0005;
//var VT_CY       = 0x0006;
//var VT_DATE     = 0x0007;
//var VT_BSTR     = 0x0008;
//var VT_ERROR    = 0x000A;
var VT_BOOL = 0x000B;
var VT_VARIANT = 0x000C;
//var VT_DECIMAL  = 0x000E;
//var VT_I1       = 0x0010;
//var VT_UI1      = 0x0011;
//var VT_UI2      = 0x0012;
var VT_UI4 = 0x0013;
//var VT_I8       = 0x0014;
//var VT_UI8      = 0x0015;
//var VT_INT      = 0x0016;
//var VT_UINT     = 0x0017;
var VT_LPSTR = 0x001E;
//var VT_LPWSTR   = 0x001F;
var VT_FILETIME = 0x0040;
var VT_BLOB = 0x0041;
//var VT_STREAM   = 0x0042;
//var VT_STORAGE  = 0x0043;
//var VT_STREAMED_Object  = 0x0044;
//var VT_STORED_Object    = 0x0045;
//var VT_BLOB_Object      = 0x0046;
var VT_CF = 0x0047;
//var VT_CLSID    = 0x0048;
//var VT_VERSIONED_STREAM = 0x0049;
var VT_VECTOR = 0x1000;
var VT_VECTOR_VARIANT = 0x100C;
var VT_VECTOR_LPSTR = 0x101E;
//var VT_ARRAY    = 0x2000;
var VT_STRING = 0x0050; // 2.3.3.1.11 VtString
var VT_USTR = 0x0051; // 2.3.3.1.12 VtUnalignedString
var VT_CUSTOM = [
    VT_STRING,
    VT_USTR
];
/* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */ var DocSummaryPIDDSI = {
    /*::[*/ 0x01: {
        n: "CodePage",
        t: VT_I2
    },
    /*::[*/ 0x02: {
        n: "Category",
        t: VT_STRING
    },
    /*::[*/ 0x03: {
        n: "PresentationFormat",
        t: VT_STRING
    },
    /*::[*/ 0x04: {
        n: "ByteCount",
        t: VT_I4
    },
    /*::[*/ 0x05: {
        n: "LineCount",
        t: VT_I4
    },
    /*::[*/ 0x06: {
        n: "ParagraphCount",
        t: VT_I4
    },
    /*::[*/ 0x07: {
        n: "SlideCount",
        t: VT_I4
    },
    /*::[*/ 0x08: {
        n: "NoteCount",
        t: VT_I4
    },
    /*::[*/ 0x09: {
        n: "HiddenCount",
        t: VT_I4
    },
    /*::[*/ 0x0a: {
        n: "MultimediaClipCount",
        t: VT_I4
    },
    /*::[*/ 0x0b: {
        n: "ScaleCrop",
        t: VT_BOOL
    },
    /*::[*/ 0x0c: {
        n: "HeadingPairs",
        t: VT_VECTOR_VARIANT /* VT_VECTOR | VT_VARIANT */ 
    },
    /*::[*/ 0x0d: {
        n: "TitlesOfParts",
        t: VT_VECTOR_LPSTR /* VT_VECTOR | VT_LPSTR */ 
    },
    /*::[*/ 0x0e: {
        n: "Manager",
        t: VT_STRING
    },
    /*::[*/ 0x0f: {
        n: "Company",
        t: VT_STRING
    },
    /*::[*/ 0x10: {
        n: "LinksUpToDate",
        t: VT_BOOL
    },
    /*::[*/ 0x11: {
        n: "CharacterCount",
        t: VT_I4
    },
    /*::[*/ 0x13: {
        n: "SharedDoc",
        t: VT_BOOL
    },
    /*::[*/ 0x16: {
        n: "HyperlinksChanged",
        t: VT_BOOL
    },
    /*::[*/ 0x17: {
        n: "AppVersion",
        t: VT_I4,
        p: "version"
    },
    /*::[*/ 0x18: {
        n: "DigSig",
        t: VT_BLOB
    },
    /*::[*/ 0x1A: {
        n: "ContentType",
        t: VT_STRING
    },
    /*::[*/ 0x1B: {
        n: "ContentStatus",
        t: VT_STRING
    },
    /*::[*/ 0x1C: {
        n: "Language",
        t: VT_STRING
    },
    /*::[*/ 0x1D: {
        n: "Version",
        t: VT_STRING
    },
    /*::[*/ 0xFF: {},
    /* [MS-OLEPS] 2.18 */ /*::[*/ 0x80000000: {
        n: "Locale",
        t: VT_UI4
    },
    /*::[*/ 0x80000003: {
        n: "Behavior",
        t: VT_UI4
    },
    /*::[*/ 0x72627262: {}
};
/* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */ var SummaryPIDSI = {
    /*::[*/ 0x01: {
        n: "CodePage",
        t: VT_I2
    },
    /*::[*/ 0x02: {
        n: "Title",
        t: VT_STRING
    },
    /*::[*/ 0x03: {
        n: "Subject",
        t: VT_STRING
    },
    /*::[*/ 0x04: {
        n: "Author",
        t: VT_STRING
    },
    /*::[*/ 0x05: {
        n: "Keywords",
        t: VT_STRING
    },
    /*::[*/ 0x06: {
        n: "Comments",
        t: VT_STRING
    },
    /*::[*/ 0x07: {
        n: "Template",
        t: VT_STRING
    },
    /*::[*/ 0x08: {
        n: "LastAuthor",
        t: VT_STRING
    },
    /*::[*/ 0x09: {
        n: "RevNumber",
        t: VT_STRING
    },
    /*::[*/ 0x0A: {
        n: "EditTime",
        t: VT_FILETIME
    },
    /*::[*/ 0x0B: {
        n: "LastPrinted",
        t: VT_FILETIME
    },
    /*::[*/ 0x0C: {
        n: "CreatedDate",
        t: VT_FILETIME
    },
    /*::[*/ 0x0D: {
        n: "ModifiedDate",
        t: VT_FILETIME
    },
    /*::[*/ 0x0E: {
        n: "PageCount",
        t: VT_I4
    },
    /*::[*/ 0x0F: {
        n: "WordCount",
        t: VT_I4
    },
    /*::[*/ 0x10: {
        n: "CharCount",
        t: VT_I4
    },
    /*::[*/ 0x11: {
        n: "Thumbnail",
        t: VT_CF
    },
    /*::[*/ 0x12: {
        n: "Application",
        t: VT_STRING
    },
    /*::[*/ 0x13: {
        n: "DocSecurity",
        t: VT_I4
    },
    /*::[*/ 0xFF: {},
    /* [MS-OLEPS] 2.18 */ /*::[*/ 0x80000000: {
        n: "Locale",
        t: VT_UI4
    },
    /*::[*/ 0x80000003: {
        n: "Behavior",
        t: VT_UI4
    },
    /*::[*/ 0x72627262: {}
};
/* [MS-XLS] 2.4.63 Country/Region codes */ var CountryEnum = {
    /*::[*/ 0x0001: "US",
    /*::[*/ 0x0002: "CA",
    /*::[*/ 0x0003: "",
    /*::[*/ 0x0007: "RU",
    /*::[*/ 0x0014: "EG",
    /*::[*/ 0x001E: "GR",
    /*::[*/ 0x001F: "NL",
    /*::[*/ 0x0020: "BE",
    /*::[*/ 0x0021: "FR",
    /*::[*/ 0x0022: "ES",
    /*::[*/ 0x0024: "HU",
    /*::[*/ 0x0027: "IT",
    /*::[*/ 0x0029: "CH",
    /*::[*/ 0x002B: "AT",
    /*::[*/ 0x002C: "GB",
    /*::[*/ 0x002D: "DK",
    /*::[*/ 0x002E: "SE",
    /*::[*/ 0x002F: "NO",
    /*::[*/ 0x0030: "PL",
    /*::[*/ 0x0031: "DE",
    /*::[*/ 0x0034: "MX",
    /*::[*/ 0x0037: "BR",
    /*::[*/ 0x003d: "AU",
    /*::[*/ 0x0040: "NZ",
    /*::[*/ 0x0042: "TH",
    /*::[*/ 0x0051: "JP",
    /*::[*/ 0x0052: "KR",
    /*::[*/ 0x0054: "VN",
    /*::[*/ 0x0056: "CN",
    /*::[*/ 0x005A: "TR",
    /*::[*/ 0x0069: "JS",
    /*::[*/ 0x00D5: "DZ",
    /*::[*/ 0x00D8: "MA",
    /*::[*/ 0x00DA: "LY",
    /*::[*/ 0x015F: "PT",
    /*::[*/ 0x0162: "IS",
    /*::[*/ 0x0166: "FI",
    /*::[*/ 0x01A4: "CZ",
    /*::[*/ 0x0376: "TW",
    /*::[*/ 0x03C1: "LB",
    /*::[*/ 0x03C2: "JO",
    /*::[*/ 0x03C3: "SY",
    /*::[*/ 0x03C4: "IQ",
    /*::[*/ 0x03C5: "KW",
    /*::[*/ 0x03C6: "SA",
    /*::[*/ 0x03CB: "AE",
    /*::[*/ 0x03CC: "IL",
    /*::[*/ 0x03CE: "QA",
    /*::[*/ 0x03D5: "IR",
    /*::[*/ 0xFFFF: "US" // United States
};
/* [MS-XLS] 2.5.127 */ var XLSFillPattern = [
    null,
    "solid",
    "mediumGray",
    "darkGray",
    "lightGray",
    "darkHorizontal",
    "darkVertical",
    "darkDown",
    "darkUp",
    "darkGrid",
    "darkTrellis",
    "lightHorizontal",
    "lightVertical",
    "lightDown",
    "lightUp",
    "lightGrid",
    "lightTrellis",
    "gray125",
    "gray0625"
];
function rgbify(arr /*:Array<number>*/ ) /*:Array<[number, number, number]>*/ {
    return arr.map(function(x) {
        return [
            x >> 16 & 255,
            x >> 8 & 255,
            x & 255
        ];
    });
}
/* [MS-XLS] 2.5.161 */ /* [MS-XLSB] 2.5.75 Icv */ var _XLSIcv = /*#__PURE__*/ rgbify([
    /* Color Constants */ 0x000000,
    0xFFFFFF,
    0xFF0000,
    0x00FF00,
    0x0000FF,
    0xFFFF00,
    0xFF00FF,
    0x00FFFF,
    /* Overridable Defaults */ 0x000000,
    0xFFFFFF,
    0xFF0000,
    0x00FF00,
    0x0000FF,
    0xFFFF00,
    0xFF00FF,
    0x00FFFF,
    0x800000,
    0x008000,
    0x000080,
    0x808000,
    0x800080,
    0x008080,
    0xC0C0C0,
    0x808080,
    0x9999FF,
    0x993366,
    0xFFFFCC,
    0xCCFFFF,
    0x660066,
    0xFF8080,
    0x0066CC,
    0xCCCCFF,
    0x000080,
    0xFF00FF,
    0xFFFF00,
    0x00FFFF,
    0x800080,
    0x800000,
    0x008080,
    0x0000FF,
    0x00CCFF,
    0xCCFFFF,
    0xCCFFCC,
    0xFFFF99,
    0x99CCFF,
    0xFF99CC,
    0xCC99FF,
    0xFFCC99,
    0x3366FF,
    0x33CCCC,
    0x99CC00,
    0xFFCC00,
    0xFF9900,
    0xFF6600,
    0x666699,
    0x969696,
    0x003366,
    0x339966,
    0x003300,
    0x333300,
    0x993300,
    0x993366,
    0x333399,
    0x333333,
    /* Other entries to appease BIFF8/12 */ 0xFFFFFF,
    /* 0x40 icvForeground ?? */ 0x000000,
    /* 0x41 icvBackground ?? */ 0x000000,
    /* 0x42 icvFrame ?? */ 0x000000,
    /* 0x43 icv3D ?? */ 0x000000,
    /* 0x44 icv3DText ?? */ 0x000000,
    /* 0x45 icv3DHilite ?? */ 0x000000,
    /* 0x46 icv3DShadow ?? */ 0x000000,
    /* 0x47 icvHilite ?? */ 0x000000,
    /* 0x48 icvCtlText ?? */ 0x000000,
    /* 0x49 icvCtlScrl ?? */ 0x000000,
    /* 0x4A icvCtlInv ?? */ 0x000000,
    /* 0x4B icvCtlBody ?? */ 0x000000,
    /* 0x4C icvCtlFrame ?? */ 0x000000,
    /* 0x4D icvCtlFore ?? */ 0x000000,
    /* 0x4E icvCtlBack ?? */ 0x000000,
    /* 0x4F icvCtlNeutral */ 0x000000,
    /* 0x50 icvInfoBk ?? */ 0x000000 /* 0x51 icvInfoText ?? */ 
]);
var XLSIcv = /*#__PURE__*/ dup(_XLSIcv);
/* [MS-XLSB] 2.5.97.2 */ var BErr = {
    /*::[*/ 0x00: "#NULL!",
    /*::[*/ 0x07: "#DIV/0!",
    /*::[*/ 0x0F: "#VALUE!",
    /*::[*/ 0x17: "#REF!",
    /*::[*/ 0x1D: "#NAME?",
    /*::[*/ 0x24: "#NUM!",
    /*::[*/ 0x2A: "#N/A",
    /*::[*/ 0x2B: "#GETTING_DATA",
    /*::[*/ 0xFF: "#WTF?"
};
//var RBErr = evert_num(BErr);
var RBErr = {
    "#NULL!": 0x00,
    "#DIV/0!": 0x07,
    "#VALUE!": 0x0F,
    "#REF!": 0x17,
    "#NAME?": 0x1D,
    "#NUM!": 0x24,
    "#N/A": 0x2A,
    "#GETTING_DATA": 0x2B,
    "#WTF?": 0xFF
};
/* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */ /* 12.3 Part Summary <SpreadsheetML> */ /* 14.2 Part Summary <DrawingML> */ /* [MS-XLSX] 2.1 Part Enumerations ; [MS-XLSB] 2.1.7 Part Enumeration */ var ct2type /*{[string]:string}*/  = {
    /* Workbook */ "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
    "application/vnd.ms-excel.sheet.macroEnabled.main+xml": "workbooks",
    "application/vnd.ms-excel.sheet.binary.macroEnabled.main": "workbooks",
    "application/vnd.ms-excel.addin.macroEnabled.main+xml": "workbooks",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": "workbooks",
    /* Worksheet */ "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": "sheets",
    "application/vnd.ms-excel.worksheet": "sheets",
    "application/vnd.ms-excel.binIndexWs": "TODO",
    /* Binary Index */ /* Chartsheet */ "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "charts",
    "application/vnd.ms-excel.chartsheet": "charts",
    /* Macrosheet */ "application/vnd.ms-excel.macrosheet+xml": "macros",
    "application/vnd.ms-excel.macrosheet": "macros",
    "application/vnd.ms-excel.intlmacrosheet": "TODO",
    "application/vnd.ms-excel.binIndexMs": "TODO",
    /* Binary Index */ /* Dialogsheet */ "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "dialogs",
    "application/vnd.ms-excel.dialogsheet": "dialogs",
    /* Shared Strings */ "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml": "strs",
    "application/vnd.ms-excel.sharedStrings": "strs",
    /* Styles */ "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": "styles",
    "application/vnd.ms-excel.styles": "styles",
    /* File Properties */ "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",
    /* Custom Data Properties */ "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",
    /* Comments */ "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
    "application/vnd.ms-excel.comments": "comments",
    "application/vnd.ms-excel.threadedcomments+xml": "threadedcomments",
    "application/vnd.ms-excel.person+xml": "people",
    /* Metadata (Stock/Geography and Dynamic Array) */ "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "metadata",
    "application/vnd.ms-excel.sheetMetadata": "metadata",
    /* PivotTable */ "application/vnd.ms-excel.pivotTable": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",
    /* Chart Objects */ "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
    /* Chart Colors */ "application/vnd.ms-office.chartcolorstyle+xml": "TODO",
    /* Chart Style */ "application/vnd.ms-office.chartstyle+xml": "TODO",
    /* Chart Advanced */ "application/vnd.ms-office.chartex+xml": "TODO",
    /* Calculation Chain */ "application/vnd.ms-excel.calcChain": "calcchains",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",
    /* Printer Settings */ "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",
    /* ActiveX */ "application/vnd.ms-office.activeX": "TODO",
    "application/vnd.ms-office.activeX+xml": "TODO",
    /* Custom Toolbars */ "application/vnd.ms-excel.attachedToolbars": "TODO",
    /* External Data Connections */ "application/vnd.ms-excel.connections": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",
    /* External Links */ "application/vnd.ms-excel.externalLink": "links",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",
    /* PivotCache */ "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
    "application/vnd.ms-excel.pivotCacheRecords": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",
    /* Query Table */ "application/vnd.ms-excel.queryTable": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",
    /* Shared Workbook */ "application/vnd.ms-excel.userNames": "TODO",
    "application/vnd.ms-excel.revisionHeaders": "TODO",
    "application/vnd.ms-excel.revisionLog": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",
    /* Single Cell Table */ "application/vnd.ms-excel.tableSingleCells": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",
    /* Slicer */ "application/vnd.ms-excel.slicer": "TODO",
    "application/vnd.ms-excel.slicerCache": "TODO",
    "application/vnd.ms-excel.slicer+xml": "TODO",
    "application/vnd.ms-excel.slicerCache+xml": "TODO",
    /* Sort Map */ "application/vnd.ms-excel.wsSortMap": "TODO",
    /* Table */ "application/vnd.ms-excel.table": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",
    /* Themes */ "application/vnd.openxmlformats-officedocument.theme+xml": "themes",
    /* Theme Override */ "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",
    /* Timeline */ "application/vnd.ms-excel.Timeline+xml": "TODO",
    /* verify */ "application/vnd.ms-excel.TimelineCache+xml": "TODO",
    /* verify */ /* VBA */ "application/vnd.ms-office.vbaProject": "vba",
    "application/vnd.ms-office.vbaProjectSignature": "TODO",
    /* Volatile Dependencies */ "application/vnd.ms-office.volatileDependencies": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",
    /* Control Properties */ "application/vnd.ms-excel.controlproperties+xml": "TODO",
    /* Data Model */ "application/vnd.openxmlformats-officedocument.model+data": "TODO",
    /* Survey */ "application/vnd.ms-excel.Survey+xml": "TODO",
    /* Drawing */ "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",
    /* VML */ "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
    "application/vnd.openxmlformats-package.relationships+xml": "rels",
    "application/vnd.openxmlformats-officedocument.oleObject": "TODO",
    /* Image */ "image/png": "TODO",
    "sheet": "js"
} /*:any*/ ;
var CT_LIST = {
    workbooks: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
        xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
        xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
        xlam: "application/vnd.ms-excel.addin.macroEnabled.main+xml",
        xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
    },
    strs: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
        xlsb: "application/vnd.ms-excel.sharedStrings"
    },
    comments: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",
        xlsb: "application/vnd.ms-excel.comments"
    },
    sheets: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
        xlsb: "application/vnd.ms-excel.worksheet"
    },
    charts: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",
        xlsb: "application/vnd.ms-excel.chartsheet"
    },
    dialogs: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",
        xlsb: "application/vnd.ms-excel.dialogsheet"
    },
    macros: {
        xlsx: "application/vnd.ms-excel.macrosheet+xml",
        xlsb: "application/vnd.ms-excel.macrosheet"
    },
    metadata: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml",
        xlsb: "application/vnd.ms-excel.sheetMetadata"
    },
    styles: {
        xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
        xlsb: "application/vnd.ms-excel.styles"
    }
};
function new_ct() /*:any*/ {
    return {
        workbooks: [],
        sheets: [],
        charts: [],
        dialogs: [],
        macros: [],
        rels: [],
        strs: [],
        comments: [],
        threadedcomments: [],
        links: [],
        coreprops: [],
        extprops: [],
        custprops: [],
        themes: [],
        styles: [],
        calcchains: [],
        vba: [],
        drawings: [],
        metadata: [],
        people: [],
        TODO: [],
        xmlns: ""
    } /*:any*/ ;
}
function parse_ct(data /*:?string*/ ) {
    var ct = new_ct();
    if (!data || !data.match) return ct;
    var ctext = {};
    (data.match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(y[0].replace(nsregex, "<")){
            case "<?xml":
                break;
            case "<Types":
                ct.xmlns = y["xmlns" + (y[0].match(/<(\w+):/) || [
                    "",
                    ""
                ])[1]];
                break;
            case "<Default":
                ctext[y.Extension] = y.ContentType;
                break;
            case "<Override":
                if (ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);
                break;
        }
    });
    if (ct.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct.xmlns);
    ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
    ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
    ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
    ct.defaults = ctext;
    delete ct.calcchains;
    return ct;
}
function write_ct(ct, opts) /*:string*/ {
    var type2ct /*{[string]:Array<string>}*/  = evert_arr(ct2type);
    var o /*:Array<string>*/  = [], v;
    o[o.length] = XML_HEADER;
    o[o.length] = writextag("Types", null, {
        "xmlns": XMLNS.CT,
        "xmlns:xsd": XMLNS.xsd,
        "xmlns:xsi": XMLNS.xsi
    });
    o = o.concat([
        [
            "xml",
            "application/xml"
        ],
        [
            "bin",
            "application/vnd.ms-excel.sheet.binary.macroEnabled.main"
        ],
        [
            "vml",
            "application/vnd.openxmlformats-officedocument.vmlDrawing"
        ],
        [
            "data",
            "application/vnd.openxmlformats-officedocument.model+data"
        ],
        /* from test files */ [
            "bmp",
            "image/bmp"
        ],
        [
            "png",
            "image/png"
        ],
        [
            "gif",
            "image/gif"
        ],
        [
            "emf",
            "image/x-emf"
        ],
        [
            "wmf",
            "image/x-wmf"
        ],
        [
            "jpg",
            "image/jpeg"
        ],
        [
            "jpeg",
            "image/jpeg"
        ],
        [
            "tif",
            "image/tiff"
        ],
        [
            "tiff",
            "image/tiff"
        ],
        [
            "pdf",
            "application/pdf"
        ],
        [
            "rels",
            "application/vnd.openxmlformats-package.relationships+xml"
        ]
    ].map(function(x) {
        return writextag("Default", null, {
            "Extension": x[0],
            "ContentType": x[1]
        });
    }));
    /* only write first instance */ var f1 = function(w) {
        if (ct[w] && ct[w].length > 0) {
            v = ct[w][0];
            o[o.length] = writextag("Override", null, {
                "PartName": (v[0] == "/" ? "" : "/") + v,
                "ContentType": CT_LIST[w][opts.bookType] || CT_LIST[w]["xlsx"]
            });
        }
    };
    /* book type-specific */ var f2 = function(w) {
        (ct[w] || []).forEach(function(v) {
            o[o.length] = writextag("Override", null, {
                "PartName": (v[0] == "/" ? "" : "/") + v,
                "ContentType": CT_LIST[w][opts.bookType] || CT_LIST[w]["xlsx"]
            });
        });
    };
    /* standard type */ var f3 = function(t) {
        (ct[t] || []).forEach(function(v) {
            o[o.length] = writextag("Override", null, {
                "PartName": (v[0] == "/" ? "" : "/") + v,
                "ContentType": type2ct[t][0]
            });
        });
    };
    f1("workbooks");
    f2("sheets");
    f2("charts");
    f3("themes");
    [
        "strs",
        "styles"
    ].forEach(f1);
    [
        "coreprops",
        "extprops",
        "custprops"
    ].forEach(f3);
    f3("vba");
    f3("comments");
    f3("threadedcomments");
    f3("drawings");
    f2("metadata");
    f3("people");
    if (o.length > 2) {
        o[o.length] = "</Types>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* 9.3 Relationships */ var RELS = {
    WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
    VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
    XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
    XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
    XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
    CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
    CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
    CMNT: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",
    CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",
    EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties",
    CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties",
    SST: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",
    STY: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",
    THEME: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",
    CHART: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",
    CHARTEX: "http://schemas.microsoft.com/office/2014/relationships/chartEx",
    CS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",
    WS: [
        "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
        "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
    ],
    DS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",
    MS: "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",
    IMG: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",
    DRAW: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",
    XLMETA: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",
    TCMNT: "http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",
    PEOPLE: "http://schemas.microsoft.com/office/2017/10/relationships/person",
    VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
} /*:any*/ ;
/* 9.3.3 Representing Relationships */ function get_rels_path(file /*:string*/ ) /*:string*/ {
    var n = file.lastIndexOf("/");
    return file.slice(0, n + 1) + "_rels/" + file.slice(n + 1) + ".rels";
}
function parse_rels(data /*:?string*/ , currentFilePath /*:string*/ ) {
    var rels = {
        "!id": {}
    };
    if (!data) return rels;
    if (currentFilePath.charAt(0) !== "/") currentFilePath = "/" + currentFilePath;
    var hash = {};
    (data.match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        /* 9.3.2.2 OPC_Relationships */ if (y[0] === "<Relationship") {
            var rel = {};
            rel.Type = y.Type;
            rel.Target = y.Target;
            rel.Id = y.Id;
            if (y.TargetMode) rel.TargetMode = y.TargetMode;
            var canonictarget = y.TargetMode === "External" ? y.Target : resolve_path(y.Target, currentFilePath);
            rels[canonictarget] = rel;
            hash[y.Id] = rel;
        }
    });
    rels["!id"] = hash;
    return rels;
}
/* TODO */ function write_rels(rels) /*:string*/ {
    var o = [
        XML_HEADER,
        writextag("Relationships", null, {
            //'xmlns:ns0': XMLNS.RELS,
            "xmlns": XMLNS.RELS
        })
    ];
    keys(rels["!id"]).forEach(function(rid) {
        o[o.length] = writextag("Relationship", null, rels["!id"][rid]);
    });
    if (o.length > 2) {
        o[o.length] = "</Relationships>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
function add_rels(rels, rId /*:number*/ , f, type, relobj, targetmode /*:?string*/ ) /*:number*/ {
    if (!relobj) relobj = {};
    if (!rels["!id"]) rels["!id"] = {};
    if (!rels["!idx"]) rels["!idx"] = 1;
    if (rId < 0) for(rId = rels["!idx"]; rels["!id"]["rId" + rId]; ++rId);
    rels["!idx"] = rId + 1;
    relobj.Id = "rId" + rId;
    relobj.Type = type;
    relobj.Target = f;
    if (targetmode) relobj.TargetMode = targetmode;
    else if ([
        RELS.HLINK,
        RELS.XPATH,
        RELS.XMISS
    ].indexOf(relobj.Type) > -1) relobj.TargetMode = "External";
    if (rels["!id"][relobj.Id]) throw new Error("Cannot rewrite rId " + rId);
    rels["!id"][relobj.Id] = relobj;
    rels[("/" + relobj.Target).replace("//", "/")] = relobj;
    return rId;
}
/* Open Document Format for Office Applications (OpenDocument) Version 1.2 */ /* Part 3 Section 4 Manifest File */ var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
function parse_manifest(d, opts) {
    var str = xlml_normalize(d);
    var Rn;
    var FEtag;
    while(Rn = xlmlregex.exec(str))switch(Rn[3]){
        case "manifest":
            break; // 4.2 <manifest:manifest>
        case "file-entry":
            FEtag = parsexmltag(Rn[0], false);
            if (FEtag.path == "/" && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet");
            break;
        case "encryption-data":
        case "algorithm":
        case "start-key-generation":
        case "key-derivation":
            throw new Error("Unsupported ODS Encryption");
        default:
            if (opts && opts.WTF) throw Rn;
    }
}
function write_manifest(manifest /*:Array<Array<string> >*/ ) /*:string*/ {
    var o = [
        XML_HEADER
    ];
    o.push('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n');
    o.push('  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n');
    for(var i = 0; i < manifest.length; ++i)o.push('  <manifest:file-entry manifest:full-path="' + manifest[i][0] + '" manifest:media-type="' + manifest[i][1] + '"/>\n');
    o.push("</manifest:manifest>");
    return o.join("");
}
/* Part 3 Section 6 Metadata Manifest File */ function write_rdf_type(file /*:string*/ , res /*:string*/ , tag /*:?string*/ ) {
    return [
        '  <rdf:Description rdf:about="' + file + '">\n',
        '    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || "odf") + "#" + res + '"/>\n',
        "  </rdf:Description>\n"
    ].join("");
}
function write_rdf_has(base /*:string*/ , file /*:string*/ ) {
    return [
        '  <rdf:Description rdf:about="' + base + '">\n',
        '    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' + file + '"/>\n',
        "  </rdf:Description>\n"
    ].join("");
}
function write_rdf(rdf) {
    var o = [
        XML_HEADER
    ];
    o.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n');
    for(var i = 0; i != rdf.length; ++i){
        o.push(write_rdf_type(rdf[i][0], rdf[i][1]));
        o.push(write_rdf_has("", rdf[i][0]));
    }
    o.push(write_rdf_type("", "Document", "pkg"));
    o.push("</rdf:RDF>");
    return o.join("");
}
/* TODO: pull properties */ function write_meta_ods() /*:string*/ {
    return '<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>SheetJS ' + XLSX.version + "</meta:generator></office:meta></office:document-meta>";
}
/* ECMA-376 Part II 11.1 Core Properties Part */ /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */ var CORE_PROPS /*:Array<Array<string> >*/  = [
    [
        "cp:category",
        "Category"
    ],
    [
        "cp:contentStatus",
        "ContentStatus"
    ],
    [
        "cp:keywords",
        "Keywords"
    ],
    [
        "cp:lastModifiedBy",
        "LastAuthor"
    ],
    [
        "cp:lastPrinted",
        "LastPrinted"
    ],
    [
        "cp:revision",
        "RevNumber"
    ],
    [
        "cp:version",
        "Version"
    ],
    [
        "dc:creator",
        "Author"
    ],
    [
        "dc:description",
        "Comments"
    ],
    [
        "dc:identifier",
        "Identifier"
    ],
    [
        "dc:language",
        "Language"
    ],
    [
        "dc:subject",
        "Subject"
    ],
    [
        "dc:title",
        "Title"
    ],
    [
        "dcterms:created",
        "CreatedDate",
        "date"
    ],
    [
        "dcterms:modified",
        "ModifiedDate",
        "date"
    ]
];
var CORE_PROPS_REGEX /*:Array<RegExp>*/  = /*#__PURE__*/ function() {
    var r = new Array(CORE_PROPS.length);
    for(var i = 0; i < CORE_PROPS.length; ++i){
        var f = CORE_PROPS[i];
        var g = "(?:" + f[0].slice(0, f[0].indexOf(":")) + ":)" + f[0].slice(f[0].indexOf(":") + 1);
        r[i] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)</" + g + ">");
    }
    return r;
}();
function parse_core_props(data) {
    var p = {};
    data = utf8read(data);
    for(var i = 0; i < CORE_PROPS.length; ++i){
        var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);
        if (cur != null && cur.length > 0) p[f[1]] = unescapexml(cur[1]);
        if (f[2] === "date" && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);
    }
    return p;
}
function cp_doit(f, g, h, o, p) {
    if (p[f] != null || g == null || g === "") return;
    p[f] = g;
    g = escapexml(g);
    o[o.length] = h ? writextag(f, g, h) : writetag(f, g);
}
function write_core_props(cp, _opts) {
    var opts = _opts || {};
    var o = [
        XML_HEADER,
        writextag("cp:coreProperties", null, {
            //'xmlns': XMLNS.CORE_PROPS,
            "xmlns:cp": XMLNS.CORE_PROPS,
            "xmlns:dc": XMLNS.dc,
            "xmlns:dcterms": XMLNS.dcterms,
            "xmlns:dcmitype": XMLNS.dcmitype,
            "xmlns:xsi": XMLNS.xsi
        })
    ], p = {};
    if (!cp && !opts.Props) return o.join("");
    if (cp) {
        if (cp.CreatedDate != null) cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {
            "xsi:type": "dcterms:W3CDTF"
        }, o, p);
        if (cp.ModifiedDate != null) cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {
            "xsi:type": "dcterms:W3CDTF"
        }, o, p);
    }
    for(var i = 0; i != CORE_PROPS.length; ++i){
        var f = CORE_PROPS[i];
        var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;
        if (v === true) v = "1";
        else if (v === false) v = "0";
        else if (typeof v == "number") v = String(v);
        if (v != null) cp_doit(f[0], v, null, o, p);
    }
    if (o.length > 2) {
        o[o.length] = "</cp:coreProperties>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* 15.2.12.3 Extended File Properties Part */ /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */ var EXT_PROPS /*:Array<Array<string> >*/  = [
    [
        "Application",
        "Application",
        "string"
    ],
    [
        "AppVersion",
        "AppVersion",
        "string"
    ],
    [
        "Company",
        "Company",
        "string"
    ],
    [
        "DocSecurity",
        "DocSecurity",
        "string"
    ],
    [
        "Manager",
        "Manager",
        "string"
    ],
    [
        "HyperlinksChanged",
        "HyperlinksChanged",
        "bool"
    ],
    [
        "SharedDoc",
        "SharedDoc",
        "bool"
    ],
    [
        "LinksUpToDate",
        "LinksUpToDate",
        "bool"
    ],
    [
        "ScaleCrop",
        "ScaleCrop",
        "bool"
    ],
    [
        "HeadingPairs",
        "HeadingPairs",
        "raw"
    ],
    [
        "TitlesOfParts",
        "TitlesOfParts",
        "raw"
    ]
];
var PseudoPropsPairs = [
    "Worksheets",
    "SheetNames",
    "NamedRanges",
    "DefinedNames",
    "Chartsheets",
    "ChartNames"
];
function load_props_pairs(HP /*:string|Array<Array<any>>*/ , TOP, props, opts) {
    var v = [];
    if (typeof HP == "string") v = parseVector(HP, opts);
    else for(var j = 0; j < HP.length; ++j)v = v.concat(HP[j].map(function(hp) {
        return {
            v: hp
        };
    }));
    var parts = typeof TOP == "string" ? parseVector(TOP, opts).map(function(x) {
        return x.v;
    }) : TOP;
    var idx = 0, len = 0;
    if (parts.length > 0) for(var i = 0; i !== v.length; i += 2){
        len = +v[i + 1].v;
        switch(v[i].v){
            case "Worksheets":
            case "工作表":
            case "Листы":
            case "أوراق العمل":
            case "ワークシート":
            case "גליונות עבודה":
            case "Arbeitsbl\xe4tter":
            case "\xc7alışma Sayfaları":
            case "Feuilles de calcul":
            case "Fogli di lavoro":
            case "Folhas de c\xe1lculo":
            case "Planilhas":
            case "Regneark":
            case "Hojas de c\xe1lculo":
            case "Werkbladen":
                props.Worksheets = len;
                props.SheetNames = parts.slice(idx, idx + len);
                break;
            case "Named Ranges":
            case "Rangos con nombre":
            case "名前付き一覧":
            case "Benannte Bereiche":
            case "Navngivne omr\xe5der":
                props.NamedRanges = len;
                props.DefinedNames = parts.slice(idx, idx + len);
                break;
            case "Charts":
            case "Diagramme":
                props.Chartsheets = len;
                props.ChartNames = parts.slice(idx, idx + len);
                break;
        }
        idx += len;
    }
}
function parse_ext_props(data, p, opts) {
    var q = {};
    if (!p) p = {};
    data = utf8read(data);
    EXT_PROPS.forEach(function(f) {
        var xml = (data.match(matchtag(f[0])) || [])[1];
        switch(f[2]){
            case "string":
                if (xml) p[f[1]] = unescapexml(xml);
                break;
            case "bool":
                p[f[1]] = xml === "true";
                break;
            case "raw":
                var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)</" + f[0] + ">"));
                if (cur && cur.length > 0) q[f[1]] = cur[1];
                break;
        }
    });
    if (q.HeadingPairs && q.TitlesOfParts) load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);
    return p;
}
function write_ext_props(cp /*::, opts*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [], W = writextag;
    if (!cp) cp = {};
    cp.Application = "SheetJS";
    o[o.length] = XML_HEADER;
    o[o.length] = writextag("Properties", null, {
        "xmlns": XMLNS.EXT_PROPS,
        "xmlns:vt": XMLNS.vt
    });
    EXT_PROPS.forEach(function(f) {
        if (cp[f[1]] === undefined) return;
        var v;
        switch(f[2]){
            case "string":
                v = escapexml(String(cp[f[1]]));
                break;
            case "bool":
                v = cp[f[1]] ? "true" : "false";
                break;
        }
        if (v !== undefined) o[o.length] = W(f[0], v);
    });
    /* TODO: HeadingPairs, TitlesOfParts */ o[o.length] = W("HeadingPairs", W("vt:vector", W("vt:variant", "<vt:lpstr>Worksheets</vt:lpstr>") + W("vt:variant", W("vt:i4", String(cp.Worksheets))), {
        size: 2,
        baseType: "variant"
    }));
    o[o.length] = W("TitlesOfParts", W("vt:vector", cp.SheetNames.map(function(s) {
        return "<vt:lpstr>" + escapexml(s) + "</vt:lpstr>";
    }).join(""), {
        size: cp.Worksheets,
        baseType: "lpstr"
    }));
    if (o.length > 2) {
        o[o.length] = "</Properties>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* 15.2.12.2 Custom File Properties Part */ var custregex = /<[^>]+>[^<]*/g;
function parse_cust_props(data /*:string*/ , opts) {
    var p = {}, name = "";
    var m = data.match(custregex);
    if (m) for(var i = 0; i != m.length; ++i){
        var x = m[i], y = parsexmltag(x);
        switch(y[0]){
            case "<?xml":
                break;
            case "<Properties":
                break;
            case "<property":
                name = unescapexml(y.name);
                break;
            case "</property>":
                name = null;
                break;
            default:
                if (x.indexOf("<vt:") === 0) {
                    var toks = x.split(">");
                    var type = toks[0].slice(4), text = toks[1];
                    /* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */ switch(type){
                        case "lpstr":
                        case "bstr":
                        case "lpwstr":
                            p[name] = unescapexml(text);
                            break;
                        case "bool":
                            p[name] = parsexmlbool(text);
                            break;
                        case "i1":
                        case "i2":
                        case "i4":
                        case "i8":
                        case "int":
                        case "uint":
                            p[name] = parseInt(text, 10);
                            break;
                        case "r4":
                        case "r8":
                        case "decimal":
                            p[name] = parseFloat(text);
                            break;
                        case "filetime":
                        case "date":
                            p[name] = parseDate(text);
                            break;
                        case "cy":
                        case "error":
                            p[name] = unescapexml(text);
                            break;
                        default:
                            if (type.slice(-1) == "/") break;
                            if (opts.WTF && typeof console !== "undefined") console.warn("Unexpected", x, type, toks);
                    }
                } else if (x.slice(0, 2) === "</") ;
                else if (opts.WTF) throw new Error(x);
        }
    }
    return p;
}
function write_cust_props(cp /*::, opts*/ ) /*:string*/ {
    var o = [
        XML_HEADER,
        writextag("Properties", null, {
            "xmlns": XMLNS.CUST_PROPS,
            "xmlns:vt": XMLNS.vt
        })
    ];
    if (!cp) return o.join("");
    var pid = 1;
    keys(cp).forEach(function custprop(k) {
        ++pid;
        o[o.length] = writextag("property", write_vt(cp[k], true), {
            "fmtid": "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",
            "pid": pid,
            "name": escapexml(k)
        });
    });
    if (o.length > 2) {
        o[o.length] = "</Properties>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* Common Name -> XLML Name */ var XLMLDocPropsMap = {
    Title: "Title",
    Subject: "Subject",
    Author: "Author",
    Keywords: "Keywords",
    Comments: "Description",
    LastAuthor: "LastAuthor",
    RevNumber: "Revision",
    Application: "AppName",
    /* TotalTime: 'TotalTime', */ LastPrinted: "LastPrinted",
    CreatedDate: "Created",
    ModifiedDate: "LastSaved",
    /* Pages */ /* Words */ /* Characters */ Category: "Category",
    /* PresentationFormat */ Manager: "Manager",
    Company: "Company",
    /* Guid */ /* HyperlinkBase */ /* Bytes */ /* Lines */ /* Paragraphs */ /* CharactersWithSpaces */ AppVersion: "Version",
    ContentStatus: "ContentStatus",
    /* NOTE: missing from schema */ Identifier: "Identifier",
    /* NOTE: missing from schema */ Language: "Language" /* NOTE: missing from schema */ 
};
var evert_XLMLDPM;
function xlml_set_prop(Props, tag /*:string*/ , val) {
    if (!evert_XLMLDPM) evert_XLMLDPM = evert(XLMLDocPropsMap);
    tag = evert_XLMLDPM[tag] || tag;
    Props[tag] = val;
}
function xlml_write_docprops(Props, opts) {
    var o /*:Array<string>*/  = [];
    keys(XLMLDocPropsMap).map(function(m) {
        for(var i = 0; i < CORE_PROPS.length; ++i)if (CORE_PROPS[i][1] == m) return CORE_PROPS[i];
        for(i = 0; i < EXT_PROPS.length; ++i)if (EXT_PROPS[i][1] == m) return EXT_PROPS[i];
        throw m;
    }).forEach(function(p) {
        if (Props[p[1]] == null) return;
        var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];
        switch(p[2]){
            case "date":
                m = new Date(m).toISOString().replace(/\.\d*Z/, "Z");
                break;
        }
        if (typeof m == "number") m = String(m);
        else if (m === true || m === false) m = m ? "1" : "0";
        else if (m instanceof Date) m = new Date(m).toISOString().replace(/\.\d*Z/, "");
        o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));
    });
    return writextag("DocumentProperties", o.join(""), {
        xmlns: XLMLNS.o
    });
}
function xlml_write_custprops(Props, Custprops /*::, opts*/ ) {
    var BLACKLIST = [
        "Worksheets",
        "SheetNames"
    ];
    var T = "CustomDocumentProperties";
    var o /*:Array<string>*/  = [];
    if (Props) keys(Props).forEach(function(k) {
        /*:: if(!Props) return; */ if (!Object.prototype.hasOwnProperty.call(Props, k)) return;
        for(var i = 0; i < CORE_PROPS.length; ++i)if (k == CORE_PROPS[i][1]) return;
        for(i = 0; i < EXT_PROPS.length; ++i)if (k == EXT_PROPS[i][1]) return;
        for(i = 0; i < BLACKLIST.length; ++i)if (k == BLACKLIST[i]) return;
        var m = Props[k];
        var t = "string";
        if (typeof m == "number") {
            t = "float";
            m = String(m);
        } else if (m === true || m === false) {
            t = "boolean";
            m = m ? "1" : "0";
        } else m = String(m);
        o.push(writextag(escapexmltag(k), m, {
            "dt:dt": t
        }));
    });
    if (Custprops) keys(Custprops).forEach(function(k) {
        /*:: if(!Custprops) return; */ if (!Object.prototype.hasOwnProperty.call(Custprops, k)) return;
        if (Props && Object.prototype.hasOwnProperty.call(Props, k)) return;
        var m = Custprops[k];
        var t = "string";
        if (typeof m == "number") {
            t = "float";
            m = String(m);
        } else if (m === true || m === false) {
            t = "boolean";
            m = m ? "1" : "0";
        } else if (m instanceof Date) {
            t = "dateTime.tz";
            m = m.toISOString();
        } else m = String(m);
        o.push(writextag(escapexmltag(k), m, {
            "dt:dt": t
        }));
    });
    return "<" + T + ' xmlns="' + XLMLNS.o + '">' + o.join("") + "</" + T + ">";
}
/* [MS-DTYP] 2.3.3 FILETIME */ /* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */ /* [MS-OLEPS] 2.8 FILETIME (Packet Version) */ function parse_FILETIME(blob) {
    var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
    return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1000).toISOString().replace(/\.000/, "");
}
function write_FILETIME(time /*:string|Date*/ ) {
    var date = typeof time == "string" ? new Date(Date.parse(time)) : time;
    var t = date.getTime() / 1000 + 11644473600;
    var l = t % Math.pow(2, 32), h = (t - l) / Math.pow(2, 32);
    l *= 1e7;
    h *= 1e7;
    var w = l / Math.pow(2, 32) | 0;
    if (w > 0) {
        l = l % Math.pow(2, 32);
        h += w;
    }
    var o = new_buf(8);
    o.write_shift(4, l);
    o.write_shift(4, h);
    return o;
}
/* [MS-OSHARED] 2.3.3.1.4 Lpstr */ function parse_lpstr(blob, type, pad /*:?number*/ ) {
    var start = blob.l;
    var str = blob.read_shift(0, "lpstr-cp");
    if (pad) while(blob.l - start & 3)++blob.l;
    return str;
}
/* [MS-OSHARED] 2.3.3.1.6 Lpwstr */ function parse_lpwstr(blob, type, pad) {
    var str = blob.read_shift(0, "lpwstr");
    if (pad) blob.l += 4 - (str.length + 1 & 3) & 3;
    return str;
}
/* [MS-OSHARED] 2.3.3.1.11 VtString */ /* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */ function parse_VtStringBase(blob, stringType, pad) {
    if (stringType === 0x1F /*VT_LPWSTR*/ ) return parse_lpwstr(blob);
    return parse_lpstr(blob, stringType, pad);
}
function parse_VtString(blob, t /*:number*/ , pad /*:?boolean*/ ) {
    return parse_VtStringBase(blob, t, pad === false ? 0 : 4);
}
function parse_VtUnalignedString(blob, t /*:number*/ ) {
    if (!t) throw new Error("VtUnalignedString must have positive length");
    return parse_VtStringBase(blob, t, 0);
}
/* [MS-OSHARED] 2.3.3.1.7 VtVecLpwstrValue */ function parse_VtVecLpwstrValue(blob) /*:Array<string>*/ {
    var length = blob.read_shift(4);
    var ret /*:Array<string>*/  = [];
    for(var i = 0; i != length; ++i){
        var start = blob.l;
        ret[i] = blob.read_shift(0, "lpwstr").replace(chr0, "");
        if (blob.l - start & 0x02) blob.l += 2;
    }
    return ret;
}
/* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */ function parse_VtVecUnalignedLpstrValue(blob) /*:Array<string>*/ {
    var length = blob.read_shift(4);
    var ret /*:Array<string>*/  = [];
    for(var i = 0; i != length; ++i)ret[i] = blob.read_shift(0, "lpstr-cp").replace(chr0, "");
    return ret;
}
/* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */ function parse_VtHeadingPair(blob) {
    var start = blob.l;
    var headingString = parse_TypedPropertyValue(blob, VT_USTR);
    if (blob[blob.l] == 0x00 && blob[blob.l + 1] == 0x00 && blob.l - start & 0x02) blob.l += 2;
    var headerParts = parse_TypedPropertyValue(blob, VT_I4);
    return [
        headingString,
        headerParts
    ];
}
/* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */ function parse_VtVecHeadingPairValue(blob) {
    var cElements = blob.read_shift(4);
    var out = [];
    for(var i = 0; i < cElements / 2; ++i)out.push(parse_VtHeadingPair(blob));
    return out;
}
/* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */ function parse_dictionary(blob, CodePage) {
    var cnt = blob.read_shift(4);
    var dict /*:{[number]:string}*/  = {} /*:any*/ ;
    for(var j = 0; j != cnt; ++j){
        var pid = blob.read_shift(4);
        var len = blob.read_shift(4);
        dict[pid] = blob.read_shift(len, CodePage === 0x4B0 ? "utf16le" : "utf8").replace(chr0, "").replace(chr1, "!");
        if (CodePage === 0x4B0 && len % 2) blob.l += 2;
    }
    if (blob.l & 3) blob.l = blob.l >> 3 << 2;
    return dict;
}
/* [MS-OLEPS] 2.9 BLOB */ function parse_BLOB(blob) {
    var size = blob.read_shift(4);
    var bytes = blob.slice(blob.l, blob.l + size);
    blob.l += size;
    if ((size & 3) > 0) blob.l += 4 - (size & 3) & 3;
    return bytes;
}
/* [MS-OLEPS] 2.11 ClipboardData */ function parse_ClipboardData(blob) {
    // TODO
    var o = {};
    o.Size = blob.read_shift(4);
    //o.Format = blob.read_shift(4);
    blob.l += o.Size + 3 - (o.Size - 1) % 4;
    return o;
}
/* [MS-OLEPS] 2.15 TypedPropertyValue */ function parse_TypedPropertyValue(blob, type /*:number*/ , _opts) /*:any*/ {
    var t = blob.read_shift(2), ret, opts = _opts || {};
    blob.l += 2;
    if (type !== VT_VARIANT) {
        if (t !== type && VT_CUSTOM.indexOf(type) === -1 && !((type & 0xFFFE) == 0x101E && (t & 0xFFFE) == 0x101E)) throw new Error("Expected type " + type + " saw " + t);
    }
    switch(type === VT_VARIANT ? t : type){
        case 0x02 /*VT_I2*/ :
            ret = blob.read_shift(2, "i");
            if (!opts.raw) blob.l += 2;
            return ret;
        case 0x03 /*VT_I4*/ :
            ret = blob.read_shift(4, "i");
            return ret;
        case 0x0B /*VT_BOOL*/ :
            return blob.read_shift(4) !== 0x0;
        case 0x13 /*VT_UI4*/ :
            ret = blob.read_shift(4);
            return ret;
        case 0x1E /*VT_LPSTR*/ :
            return parse_lpstr(blob, t, 4).replace(chr0, "");
        case 0x1F /*VT_LPWSTR*/ :
            return parse_lpwstr(blob);
        case 0x40 /*VT_FILETIME*/ :
            return parse_FILETIME(blob);
        case 0x41 /*VT_BLOB*/ :
            return parse_BLOB(blob);
        case 0x47 /*VT_CF*/ :
            return parse_ClipboardData(blob);
        case 0x50 /*VT_STRING*/ :
            return parse_VtString(blob, t, !opts.raw).replace(chr0, "");
        case 0x51 /*VT_USTR*/ :
            return parse_VtUnalignedString(blob, t /*, 4*/ ).replace(chr0, "");
        case 0x100C /*VT_VECTOR|VT_VARIANT*/ :
            return parse_VtVecHeadingPairValue(blob);
        case 0x101E /*VT_VECTOR|VT_LPSTR*/ :
        case 0x101F /*VT_VECTOR|VT_LPWSTR*/ :
            return t == 0x101F ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);
        default:
            throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
    }
}
function write_TypedPropertyValue(type /*:number*/ , value) {
    var o = new_buf(4), p = new_buf(4);
    o.write_shift(4, type == 0x50 ? 0x1F : type);
    switch(type){
        case 0x03 /*VT_I4*/ :
            p.write_shift(-4, value);
            break;
        case 0x05 /*VT_I4*/ :
            p = new_buf(8);
            p.write_shift(8, value, "f");
            break;
        case 0x0B /*VT_BOOL*/ :
            p.write_shift(4, value ? 0x01 : 0x00);
            break;
        case 0x40 /*VT_FILETIME*/ :
            /*:: if(typeof value !== "string" && !(value instanceof Date)) throw "unreachable"; */ p = write_FILETIME(value);
            break;
        case 0x1F /*VT_LPWSTR*/ :
        case 0x50 /*VT_STRING*/ :
            /*:: if(typeof value !== "string") throw "unreachable"; */ p = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
            p.write_shift(4, value.length + 1);
            p.write_shift(0, value, "dbcs");
            while(p.l != p.length)p.write_shift(1, 0);
            break;
        default:
            throw new Error("TypedPropertyValue unrecognized type " + type + " " + value);
    }
    return bconcat([
        o,
        p
    ]);
}
/* [MS-OLEPS] 2.20 PropertySet */ function parse_PropertySet(blob, PIDSI) {
    var start_addr = blob.l;
    var size = blob.read_shift(4);
    var NumProps = blob.read_shift(4);
    var Props = [], i = 0;
    var CodePage = 0;
    var Dictionary = -1, DictObj /*:{[number]:string}*/  = {} /*:any*/ ;
    for(i = 0; i != NumProps; ++i){
        var PropID = blob.read_shift(4);
        var Offset = blob.read_shift(4);
        Props[i] = [
            PropID,
            Offset + start_addr
        ];
    }
    Props.sort(function(x, y) {
        return x[1] - y[1];
    });
    var PropH = {};
    for(i = 0; i != NumProps; ++i){
        if (blob.l !== Props[i][1]) {
            var fail = true;
            if (i > 0 && PIDSI) switch(PIDSI[Props[i - 1][0]].t){
                case 0x02 /*VT_I2*/ :
                    if (blob.l + 2 === Props[i][1]) {
                        blob.l += 2;
                        fail = false;
                    }
                    break;
                case 0x50 /*VT_STRING*/ :
                    if (blob.l <= Props[i][1]) {
                        blob.l = Props[i][1];
                        fail = false;
                    }
                    break;
                case 0x100C /*VT_VECTOR|VT_VARIANT*/ :
                    if (blob.l <= Props[i][1]) {
                        blob.l = Props[i][1];
                        fail = false;
                    }
                    break;
            }
            if ((!PIDSI || i == 0) && blob.l <= Props[i][1]) {
                fail = false;
                blob.l = Props[i][1];
            }
            if (fail) throw new Error("Read Error: Expected address " + Props[i][1] + " at " + blob.l + " :" + i);
        }
        if (PIDSI) {
            var piddsi = PIDSI[Props[i][0]];
            PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {
                raw: true
            });
            if (piddsi.p === "version") PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 0xFFFF)).slice(-4);
            if (piddsi.n == "CodePage") switch(PropH[piddsi.n]){
                case 0:
                    PropH[piddsi.n] = 1252;
                /* falls through */ case 874:
                case 932:
                case 936:
                case 949:
                case 950:
                case 1250:
                case 1251:
                case 1253:
                case 1254:
                case 1255:
                case 1256:
                case 1257:
                case 1258:
                case 10000:
                case 1200:
                case 1201:
                case 1252:
                case 65000:
                case -536:
                case 65001:
                case -535:
                    set_cp(CodePage = PropH[piddsi.n] >>> 0 & 0xFFFF);
                    break;
                default:
                    throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
            }
        } else {
            if (Props[i][0] === 0x1) {
                CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
                set_cp(CodePage);
                if (Dictionary !== -1) {
                    var oldpos = blob.l;
                    blob.l = Props[Dictionary][1];
                    DictObj = parse_dictionary(blob, CodePage);
                    blob.l = oldpos;
                }
            } else if (Props[i][0] === 0) {
                if (CodePage === 0) {
                    Dictionary = i;
                    blob.l = Props[i + 1][1];
                    continue;
                }
                DictObj = parse_dictionary(blob, CodePage);
            } else {
                var name = DictObj[Props[i][0]];
                var val;
                /* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */ switch(blob[blob.l]){
                    case 0x41 /*VT_BLOB*/ :
                        blob.l += 4;
                        val = parse_BLOB(blob);
                        break;
                    case 0x1E /*VT_LPSTR*/ :
                        blob.l += 4;
                        val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
                        break;
                    case 0x1F /*VT_LPWSTR*/ :
                        blob.l += 4;
                        val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
                        break;
                    case 0x03 /*VT_I4*/ :
                        blob.l += 4;
                        val = blob.read_shift(4, "i");
                        break;
                    case 0x13 /*VT_UI4*/ :
                        blob.l += 4;
                        val = blob.read_shift(4);
                        break;
                    case 0x05 /*VT_R8*/ :
                        blob.l += 4;
                        val = blob.read_shift(8, "f");
                        break;
                    case 0x0B /*VT_BOOL*/ :
                        blob.l += 4;
                        val = parsebool(blob, 4);
                        break;
                    case 0x40 /*VT_FILETIME*/ :
                        blob.l += 4;
                        val = parseDate(parse_FILETIME(blob));
                        break;
                    default:
                        throw new Error("unparsed value: " + blob[blob.l]);
                }
                PropH[name] = val;
            }
        }
    }
    blob.l = start_addr + size; /* step ahead to skip padding */ 
    return PropH;
}
var XLSPSSkip = [
    "CodePage",
    "Thumbnail",
    "_PID_LINKBASE",
    "_PID_HLINKS",
    "SystemIdentifier",
    "FMTID"
]; //.concat(PseudoPropsPairs);
function guess_property_type(val /*:any*/ ) /*:number*/ {
    switch(typeof val){
        case "boolean":
            return 0x0B;
        case "number":
            return (val | 0) == val ? 0x03 : 0x05;
        case "string":
            return 0x1F;
        case "object":
            if (val instanceof Date) return 0x40;
            break;
    }
    return -1;
}
function write_PropertySet(entries, RE, PIDSI) {
    var hdr = new_buf(8), piao = [], prop = [];
    var sz = 8, i = 0;
    var pr = new_buf(8), pio = new_buf(8);
    pr.write_shift(4, 0x0002);
    pr.write_shift(4, 0x04B0);
    pio.write_shift(4, 0x0001);
    prop.push(pr);
    piao.push(pio);
    sz += 8 + pr.length;
    if (!RE) {
        pio = new_buf(8);
        pio.write_shift(4, 0);
        piao.unshift(pio);
        var bufs = [
            new_buf(4)
        ];
        bufs[0].write_shift(4, entries.length);
        for(i = 0; i < entries.length; ++i){
            var value = entries[i][0];
            pr = new_buf(8 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
            pr.write_shift(4, i + 2);
            pr.write_shift(4, value.length + 1);
            pr.write_shift(0, value, "dbcs");
            while(pr.l != pr.length)pr.write_shift(1, 0);
            bufs.push(pr);
        }
        pr = bconcat(bufs);
        prop.unshift(pr);
        sz += 8 + pr.length;
    }
    for(i = 0; i < entries.length; ++i){
        if (RE && !RE[entries[i][0]]) continue;
        if (XLSPSSkip.indexOf(entries[i][0]) > -1 || PseudoPropsPairs.indexOf(entries[i][0]) > -1) continue;
        if (entries[i][1] == null) continue;
        var val = entries[i][1], idx = 0;
        if (RE) {
            idx = +RE[entries[i][0]];
            var pinfo = PIDSI /*:: || {}*/ [idx] /*:: || {} */ ;
            if (pinfo.p == "version" && typeof val == "string") {
                /*:: if(typeof val !== "string") throw "unreachable"; */ var arr = val.split(".");
                val = (+arr[0] << 16) + (+arr[1] || 0);
            }
            pr = write_TypedPropertyValue(pinfo.t, val);
        } else {
            var T = guess_property_type(val);
            if (T == -1) {
                T = 0x1F;
                val = String(val);
            }
            pr = write_TypedPropertyValue(T, val);
        }
        prop.push(pr);
        pio = new_buf(8);
        pio.write_shift(4, !RE ? 2 + i : idx);
        piao.push(pio);
        sz += 8 + pr.length;
    }
    var w = 8 * (prop.length + 1);
    for(i = 0; i < prop.length; ++i){
        piao[i].write_shift(4, w);
        w += prop[i].length;
    }
    hdr.write_shift(4, sz);
    hdr.write_shift(4, prop.length);
    return bconcat([
        hdr
    ].concat(piao).concat(prop));
}
/* [MS-OLEPS] 2.21 PropertySetStream */ function parse_PropertySetStream(file, PIDSI, clsid) {
    var blob = file.content;
    if (!blob) return {} /*:any*/ ;
    prep_blob(blob, 0);
    var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
    blob.chk("feff", "Byte Order: ");
    /*var vers = */ blob.read_shift(2); // TODO: check version
    var SystemIdentifier = blob.read_shift(4);
    var CLSID = blob.read_shift(16);
    if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error("Bad PropertySet CLSID " + CLSID);
    NumSets = blob.read_shift(4);
    if (NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets);
    FMTID0 = blob.read_shift(16);
    Offset0 = blob.read_shift(4);
    if (NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
    else if (NumSets === 2) {
        FMTID1 = blob.read_shift(16);
        Offset1 = blob.read_shift(4);
    }
    var PSet0 = parse_PropertySet(blob, PIDSI);
    var rval = {
        SystemIdentifier: SystemIdentifier
    } /*:any*/ ;
    for(var y in PSet0)rval[y] = PSet0[y];
    //rval.blob = blob;
    rval.FMTID = FMTID0;
    //rval.PSet0 = PSet0;
    if (NumSets === 1) return rval;
    if (Offset1 - blob.l == 2) blob.l += 2;
    if (blob.l !== Offset1) throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
    var PSet1;
    try {
        PSet1 = parse_PropertySet(blob, null);
    } catch (e) {}
    for(y in PSet1)rval[y] = PSet1[y];
    rval.FMTID = [
        FMTID0,
        FMTID1
    ]; // TODO: verify FMTID0/1
    return rval;
}
function write_PropertySetStream(entries, clsid, RE, PIDSI /*:{[key:string|number]:any}*/ , entries2 /*:?any*/ , clsid2 /*:?any*/ ) {
    var hdr = new_buf(entries2 ? 68 : 48);
    var bufs = [
        hdr
    ];
    hdr.write_shift(2, 0xFFFE);
    hdr.write_shift(2, 0x0000); /* TODO: type 1 props */ 
    hdr.write_shift(4, 0x32363237);
    hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, "hex");
    hdr.write_shift(4, entries2 ? 2 : 1);
    hdr.write_shift(16, clsid, "hex");
    hdr.write_shift(4, entries2 ? 68 : 48);
    var ps0 = write_PropertySet(entries, RE, PIDSI);
    bufs.push(ps0);
    if (entries2) {
        var ps1 = write_PropertySet(entries2, null, null);
        hdr.write_shift(16, clsid2, "hex");
        hdr.write_shift(4, 68 + ps0.length);
        bufs.push(ps1);
    }
    return bconcat(bufs);
}
function parsenoop2(blob, length) {
    blob.read_shift(length);
    return null;
}
function writezeroes(n, o) {
    if (!o) o = new_buf(n);
    for(var j = 0; j < n; ++j)o.write_shift(1, 0);
    return o;
}
function parslurp(blob, length, cb) {
    var arr = [], target = blob.l + length;
    while(blob.l < target)arr.push(cb(blob, target - blob.l));
    if (target !== blob.l) throw new Error("Slurp error");
    return arr;
}
function parsebool(blob, length /*:number*/ ) {
    return blob.read_shift(length) === 0x1;
}
function writebool(v /*:any*/ , o) {
    if (!o) o = new_buf(2);
    o.write_shift(2, +!!v);
    return o;
}
function parseuint16(blob /*::, length:?number, opts:?any*/ ) {
    return blob.read_shift(2, "u");
}
function writeuint16(v /*:number*/ , o) {
    if (!o) o = new_buf(2);
    o.write_shift(2, v);
    return o;
}
function parseuint16a(blob, length /*:: :?number, opts:?any*/ ) {
    return parslurp(blob, length, parseuint16);
}
/* --- 2.5 Structures --- */ /* [MS-XLS] 2.5.10 Bes (boolean or error) */ function parse_Bes(blob /*::, length*/ ) {
    var v = blob.read_shift(1), t = blob.read_shift(1);
    return t === 0x01 ? v : v === 0x01;
}
function write_Bes(v, t /*:string*/ , o) {
    if (!o) o = new_buf(2);
    o.write_shift(1, t == "e" ? +v : +!!v);
    o.write_shift(1, t == "e" ? 1 : 0);
    return o;
}
/* [MS-XLS] 2.5.240 ShortXLUnicodeString */ function parse_ShortXLUnicodeString(blob, length, opts) {
    var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
    var encoding = "sbcs-cont";
    var cp = current_codepage;
    if (opts && opts.biff >= 8) current_codepage = 1200;
    if (!opts || opts.biff == 8) {
        var fHighByte = blob.read_shift(1);
        if (fHighByte) encoding = "dbcs-cont";
    } else if (opts.biff == 12) encoding = "wstr";
    if (opts.biff >= 2 && opts.biff <= 5) encoding = "cpstr";
    var o = cch ? blob.read_shift(cch, encoding) : "";
    current_codepage = cp;
    return o;
}
/* 2.5.293 XLUnicodeRichExtendedString */ function parse_XLUnicodeRichExtendedString(blob) {
    var cp = current_codepage;
    current_codepage = 1200;
    var cch = blob.read_shift(2), flags = blob.read_shift(1);
    var /*fHighByte = flags & 0x1,*/ fExtSt = flags & 0x4, fRichSt = flags & 0x8;
    var width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs
    var cRun = 0, cbExtRst;
    var z = {};
    if (fRichSt) cRun = blob.read_shift(2);
    if (fExtSt) cbExtRst = blob.read_shift(4);
    var encoding = width == 2 ? "dbcs-cont" : "sbcs-cont";
    var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
    if (fRichSt) blob.l += 4 * cRun; //TODO: parse this
    if (fExtSt) blob.l += cbExtRst; //TODO: parse this
    z.t = msg;
    if (!fRichSt) {
        z.raw = "<t>" + z.t + "</t>";
        z.r = z.t;
    }
    current_codepage = cp;
    return z;
}
function write_XLUnicodeRichExtendedString(xlstr /*:: :XLString, opts*/ ) {
    var str = xlstr.t || "", nfmts = 1;
    var hdr = new_buf(3 + (nfmts > 1 ? 2 : 0));
    hdr.write_shift(2, str.length);
    hdr.write_shift(1, (nfmts > 1 ? 0x08 : 0x00) | 0x01);
    if (nfmts > 1) hdr.write_shift(2, nfmts);
    var otext = new_buf(2 * str.length);
    otext.write_shift(2 * str.length, str, "utf16le");
    var out = [
        hdr,
        otext
    ];
    return bconcat(out);
}
/* 2.5.296 XLUnicodeStringNoCch */ function parse_XLUnicodeStringNoCch(blob, cch, opts) {
    var retval;
    if (opts) {
        if (opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, "cpstr");
        if (opts.biff >= 12) return blob.read_shift(cch, "dbcs-cont");
    }
    var fHighByte = blob.read_shift(1);
    if (fHighByte === 0) retval = blob.read_shift(cch, "sbcs-cont");
    else retval = blob.read_shift(cch, "dbcs-cont");
    return retval;
}
/* 2.5.294 XLUnicodeString */ function parse_XLUnicodeString(blob, length, opts) {
    var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    if (cch === 0) {
        blob.l++;
        return "";
    }
    return parse_XLUnicodeStringNoCch(blob, cch, opts);
}
/* BIFF5 override */ function parse_XLUnicodeString2(blob, length, opts) {
    if (opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);
    var cch = blob.read_shift(1);
    if (cch === 0) {
        blob.l++;
        return "";
    }
    return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? "cpstr" : "sbcs-cont");
}
/* TODO: BIFF5 and lower, codepage awareness */ function write_XLUnicodeString(str, opts, o) {
    if (!o) o = new_buf(3 + 2 * str.length);
    o.write_shift(2, str.length);
    o.write_shift(1, 1);
    o.write_shift(31, str, "utf16le");
    return o;
}
/* [MS-XLS] 2.5.61 ControlInfo */ function parse_ControlInfo(blob /*::, length, opts*/ ) {
    var flags = blob.read_shift(1);
    blob.l++;
    var accel = blob.read_shift(2);
    blob.l += 2;
    return [
        flags,
        accel
    ];
}
/* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */ function parse_URLMoniker(blob /*::, length, opts*/ ) {
    var len = blob.read_shift(4), start = blob.l;
    var extra = false;
    if (len > 24) {
        /* look ahead */ blob.l += len - 24;
        if (blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true;
        blob.l = start;
    }
    var url = blob.read_shift((extra ? len - 24 : len) >> 1, "utf16le").replace(chr0, "");
    if (extra) blob.l += 24;
    return url;
}
/* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */ function parse_FileMoniker(blob /*::, length*/ ) {
    var cAnti = blob.read_shift(2);
    var preamble = "";
    while(cAnti-- > 0)preamble += "../";
    var ansiPath = blob.read_shift(0, "lpstr-ansi");
    blob.l += 2; //var endServer = blob.read_shift(2);
    if (blob.read_shift(2) != 0xDEAD) throw new Error("Bad FileMoniker");
    var sz = blob.read_shift(4);
    if (sz === 0) return preamble + ansiPath.replace(/\\/g, "/");
    var bytes = blob.read_shift(4);
    if (blob.read_shift(2) != 3) throw new Error("Bad FileMoniker");
    var unicodePath = blob.read_shift(bytes >> 1, "utf16le").replace(chr0, "");
    return preamble + unicodePath;
}
/* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */ function parse_HyperlinkMoniker(blob, length) {
    var clsid = blob.read_shift(16);
    length -= 16;
    switch(clsid){
        case "e0c9ea79f9bace118c8200aa004ba90b":
            return parse_URLMoniker(blob, length);
        case "0303000000000000c000000000000046":
            return parse_FileMoniker(blob, length);
        default:
            throw new Error("Unsupported Moniker " + clsid);
    }
}
/* [MS-OSHARED] 2.3.7.9 HyperlinkString */ function parse_HyperlinkString(blob /*::, length*/ ) {
    var len = blob.read_shift(4);
    var o = len > 0 ? blob.read_shift(len, "utf16le").replace(chr0, "") : "";
    return o;
}
function write_HyperlinkString(str /*:string*/ , o) {
    if (!o) o = new_buf(6 + str.length * 2);
    o.write_shift(4, 1 + str.length);
    for(var i = 0; i < str.length; ++i)o.write_shift(2, str.charCodeAt(i));
    o.write_shift(2, 0);
    return o;
}
/* [MS-OSHARED] 2.3.7.1 Hyperlink Object */ function parse_Hyperlink(blob, length) /*:Hyperlink*/ {
    var end = blob.l + length;
    var sVer = blob.read_shift(4);
    if (sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer);
    var flags = blob.read_shift(2);
    blob.l += 2;
    var displayName, targetFrameName, moniker, oleMoniker, Loc = "", guid, fileTime;
    if (flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);
    if (flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);
    if ((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);
    if ((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
    if (flags & 0x0008) Loc = parse_HyperlinkString(blob, end - blob.l);
    if (flags & 0x0020) guid = blob.read_shift(16);
    if (flags & 0x0040) fileTime = parse_FILETIME(blob /*, 8*/ );
    blob.l = end;
    var target = targetFrameName || moniker || oleMoniker || "";
    if (target && Loc) target += "#" + Loc;
    if (!target) target = "#" + Loc;
    if (flags & 0x0002 && target.charAt(0) == "/" && target.charAt(1) != "/") target = "file://" + target;
    var out = {
        Target: target
    } /*:any*/ ;
    if (guid) out.guid = guid;
    if (fileTime) out.time = fileTime;
    if (displayName) out.Tooltip = displayName;
    return out;
}
function write_Hyperlink(hl) {
    var out = new_buf(512), i = 0;
    var Target = hl.Target;
    if (Target.slice(0, 7) == "file://") Target = Target.slice(7);
    var hashidx = Target.indexOf("#");
    var F = hashidx > -1 ? 0x1f : 0x17;
    switch(Target.charAt(0)){
        case "#":
            F = 0x1c;
            break;
        case ".":
            F &= -3;
            break;
    }
    out.write_shift(4, 2);
    out.write_shift(4, F);
    var data = [
        8,
        6815827,
        6619237,
        4849780,
        83
    ];
    for(i = 0; i < data.length; ++i)out.write_shift(4, data[i]);
    if (F == 0x1C) {
        Target = Target.slice(1);
        write_HyperlinkString(Target, out);
    } else if (F & 0x02) {
        data = "e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
        for(i = 0; i < data.length; ++i)out.write_shift(1, parseInt(data[i], 16));
        var Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;
        out.write_shift(4, 2 * (Pretarget.length + 1));
        for(i = 0; i < Pretarget.length; ++i)out.write_shift(2, Pretarget.charCodeAt(i));
        out.write_shift(2, 0);
        if (F & 0x08) write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx + 1) : "", out);
    } else {
        data = "03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46".split(" ");
        for(i = 0; i < data.length; ++i)out.write_shift(1, parseInt(data[i], 16));
        var P = 0;
        while(Target.slice(P * 3, P * 3 + 3) == "../" || Target.slice(P * 3, P * 3 + 3) == "..\\")++P;
        out.write_shift(2, P);
        out.write_shift(4, Target.length - 3 * P + 1);
        for(i = 0; i < Target.length - 3 * P; ++i)out.write_shift(1, Target.charCodeAt(i + 3 * P) & 0xFF);
        out.write_shift(1, 0);
        out.write_shift(2, 0xFFFF);
        out.write_shift(2, 0xDEAD);
        for(i = 0; i < 6; ++i)out.write_shift(4, 0);
    }
    return out.slice(0, out.l);
}
/* 2.5.178 LongRGBA */ function parse_LongRGBA(blob /*::, length*/ ) {
    var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1);
    return [
        r,
        g,
        b,
        a
    ];
}
/* 2.5.177 LongRGB */ function parse_LongRGB(blob, length) {
    var x = parse_LongRGBA(blob, length);
    x[3] = 0;
    return x;
}
/* [MS-XLS] 2.5.19 */ function parse_XLSCell(blob /*::, length*/ ) /*:Cell*/ {
    var rw = blob.read_shift(2); // 0-indexed
    var col = blob.read_shift(2);
    var ixfe = blob.read_shift(2);
    return {
        r: rw,
        c: col,
        ixfe: ixfe
    } /*:any*/ ;
}
function write_XLSCell(R /*:number*/ , C /*:number*/ , ixfe /*:?number*/ , o) {
    if (!o) o = new_buf(6);
    o.write_shift(2, R);
    o.write_shift(2, C);
    o.write_shift(2, ixfe || 0);
    return o;
}
/* [MS-XLS] 2.5.134 */ function parse_frtHeader(blob) {
    var rt = blob.read_shift(2);
    var flags = blob.read_shift(2); // TODO: parse these flags
    blob.l += 8;
    return {
        type: rt,
        flags: flags
    };
}
function parse_OptXLUnicodeString(blob, length, opts) {
    return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts);
}
/* [MS-XLS] 2.5.344 */ function parse_XTI(blob, length, opts) {
    var w = opts.biff > 8 ? 4 : 2;
    var iSupBook = blob.read_shift(w), itabFirst = blob.read_shift(w, "i"), itabLast = blob.read_shift(w, "i");
    return [
        iSupBook,
        itabFirst,
        itabLast
    ];
}
/* [MS-XLS] 2.5.218 */ function parse_RkRec(blob) {
    var ixfe = blob.read_shift(2);
    var RK = parse_RkNumber(blob);
    return [
        ixfe,
        RK
    ];
}
/* [MS-XLS] 2.5.1 */ function parse_AddinUdf(blob, length, opts) {
    blob.l += 4;
    length -= 4;
    var l = blob.l + length;
    var udfName = parse_ShortXLUnicodeString(blob, length, opts);
    var cb = blob.read_shift(2);
    l -= blob.l;
    if (cb !== l) throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
    blob.l += cb;
    return udfName;
}
/* [MS-XLS] 2.5.209 TODO: Check sizes */ function parse_Ref8U(blob /*::, length*/ ) {
    var rwFirst = blob.read_shift(2);
    var rwLast = blob.read_shift(2);
    var colFirst = blob.read_shift(2);
    var colLast = blob.read_shift(2);
    return {
        s: {
            c: colFirst,
            r: rwFirst
        },
        e: {
            c: colLast,
            r: rwLast
        }
    };
}
function write_Ref8U(r /*:Range*/ , o) {
    if (!o) o = new_buf(8);
    o.write_shift(2, r.s.r);
    o.write_shift(2, r.e.r);
    o.write_shift(2, r.s.c);
    o.write_shift(2, r.e.c);
    return o;
}
/* [MS-XLS] 2.5.211 */ function parse_RefU(blob /*::, length*/ ) {
    var rwFirst = blob.read_shift(2);
    var rwLast = blob.read_shift(2);
    var colFirst = blob.read_shift(1);
    var colLast = blob.read_shift(1);
    return {
        s: {
            c: colFirst,
            r: rwFirst
        },
        e: {
            c: colLast,
            r: rwLast
        }
    };
}
/* [MS-XLS] 2.5.207 */ var parse_Ref = parse_RefU;
/* [MS-XLS] 2.5.143 */ function parse_FtCmo(blob /*::, length*/ ) {
    blob.l += 4;
    var ot = blob.read_shift(2);
    var id = blob.read_shift(2);
    var flags = blob.read_shift(2);
    blob.l += 12;
    return [
        id,
        ot,
        flags
    ];
}
/* [MS-XLS] 2.5.149 */ function parse_FtNts(blob) {
    var out = {};
    blob.l += 4;
    blob.l += 16; // GUID TODO
    out.fSharedNote = blob.read_shift(2);
    blob.l += 4;
    return out;
}
/* [MS-XLS] 2.5.142 */ function parse_FtCf(blob) {
    var out = {};
    blob.l += 4;
    blob.cf = blob.read_shift(2);
    return out;
}
/* [MS-XLS] 2.5.140 - 2.5.154 and friends */ function parse_FtSkip(blob) {
    blob.l += 2;
    blob.l += blob.read_shift(2);
}
var FtTab = {
    /*::[*/ 0x00: parse_FtSkip,
    /* FtEnd */ /*::[*/ 0x04: parse_FtSkip,
    /* FtMacro */ /*::[*/ 0x05: parse_FtSkip,
    /* FtButton */ /*::[*/ 0x06: parse_FtSkip,
    /* FtGmo */ /*::[*/ 0x07: parse_FtCf,
    /* FtCf */ /*::[*/ 0x08: parse_FtSkip,
    /* FtPioGrbit */ /*::[*/ 0x09: parse_FtSkip,
    /* FtPictFmla */ /*::[*/ 0x0A: parse_FtSkip,
    /* FtCbls */ /*::[*/ 0x0B: parse_FtSkip,
    /* FtRbo */ /*::[*/ 0x0C: parse_FtSkip,
    /* FtSbs */ /*::[*/ 0x0D: parse_FtNts,
    /* FtNts */ /*::[*/ 0x0E: parse_FtSkip,
    /* FtSbsFmla */ /*::[*/ 0x0F: parse_FtSkip,
    /* FtGboData */ /*::[*/ 0x10: parse_FtSkip,
    /* FtEdoData */ /*::[*/ 0x11: parse_FtSkip,
    /* FtRboData */ /*::[*/ 0x12: parse_FtSkip,
    /* FtCblsData */ /*::[*/ 0x13: parse_FtSkip,
    /* FtLbsData */ /*::[*/ 0x14: parse_FtSkip,
    /* FtCblsFmla */ /*::[*/ 0x15: parse_FtCmo
};
function parse_FtArray(blob, length /*::, ot*/ ) {
    var tgt = blob.l + length;
    var fts = [];
    while(blob.l < tgt){
        var ft = blob.read_shift(2);
        blob.l -= 2;
        try {
            fts.push(FtTab[ft](blob, tgt - blob.l));
        } catch (e) {
            blob.l = tgt;
            return fts;
        }
    }
    if (blob.l != tgt) blob.l = tgt; //throw new Error("bad Object Ft-sequence");
    return fts;
}
/* --- 2.4 Records --- */ /* [MS-XLS] 2.4.21 */ function parse_BOF(blob, length) {
    var o = {
        BIFFVer: 0,
        dt: 0
    };
    o.BIFFVer = blob.read_shift(2);
    length -= 2;
    if (length >= 2) {
        o.dt = blob.read_shift(2);
        blob.l -= 2;
    }
    switch(o.BIFFVer){
        case 0x0600:
        /* BIFF8 */ case 0x0500:
        /* BIFF5 */ case 0x0400:
        /* BIFF4 */ case 0x0300:
        /* BIFF3 */ case 0x0200:
        /* BIFF2 */ case 0x0002:
        case 0x0007:
            break;
        default:
            if (length > 6) throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
    }
    blob.read_shift(length);
    return o;
}
function write_BOF(wb /*:Workbook*/ , t /*:number*/ , o) {
    var h = 0x0600, w = 16;
    switch(o.bookType){
        case "biff8":
            break;
        case "biff5":
            h = 0x0500;
            w = 8;
            break;
        case "biff4":
            h = 0x0004;
            w = 6;
            break;
        case "biff3":
            h = 0x0003;
            w = 6;
            break;
        case "biff2":
            h = 0x0002;
            w = 4;
            break;
        case "xla":
            break;
        default:
            throw new Error("unsupported BIFF version");
    }
    var out = new_buf(w);
    out.write_shift(2, h);
    out.write_shift(2, t);
    if (w > 4) out.write_shift(2, 0x7262);
    if (w > 6) out.write_shift(2, 0x07CD);
    if (w > 8) {
        out.write_shift(2, 0xC009);
        out.write_shift(2, 0x0001);
        out.write_shift(2, 0x0706);
        out.write_shift(2, 0x0000);
    }
    return out;
}
/* [MS-XLS] 2.4.146 */ function parse_InterfaceHdr(blob, length) {
    if (length === 0) return 0x04b0;
    blob.read_shift(2);
    return 0x04b0;
}
/* [MS-XLS] 2.4.349 */ function parse_WriteAccess(blob, length, opts) {
    if (opts.enc) {
        blob.l += length;
        return "";
    }
    var l = blob.l;
    // TODO: make sure XLUnicodeString doesnt overrun
    var UserName = parse_XLUnicodeString2(blob, 0, opts);
    blob.read_shift(length + l - blob.l);
    return UserName;
}
function write_WriteAccess(s /*:string*/ , opts) {
    var b8 = !opts || opts.biff == 8;
    var o = new_buf(b8 ? 112 : 54);
    o.write_shift(opts.biff == 8 ? 2 : 1, 7);
    if (b8) o.write_shift(1, 0);
    o.write_shift(4, 0x33336853);
    o.write_shift(4, 0x00534A74 | (b8 ? 0 : 0x20000000));
    while(o.l < o.length)o.write_shift(1, b8 ? 0 : 32);
    return o;
}
/* [MS-XLS] 2.4.351 */ function parse_WsBool(blob, length, opts) {
    var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
    return {
        fDialog: flags & 0x10,
        fBelow: flags & 0x40,
        fRight: flags & 0x80
    };
}
/* [MS-XLS] 2.4.28 */ function parse_BoundSheet8(blob, length, opts) {
    var pos = blob.read_shift(4);
    var hidden = blob.read_shift(1) & 0x03;
    var dt = blob.read_shift(1);
    switch(dt){
        case 0:
            dt = "Worksheet";
            break;
        case 1:
            dt = "Macrosheet";
            break;
        case 2:
            dt = "Chartsheet";
            break;
        case 6:
            dt = "VBAModule";
            break;
    }
    var name = parse_ShortXLUnicodeString(blob, 0, opts);
    if (name.length === 0) name = "Sheet1";
    return {
        pos: pos,
        hs: hidden,
        dt: dt,
        name: name
    };
}
function write_BoundSheet8(data, opts) {
    var w = !opts || opts.biff >= 8 ? 2 : 1;
    var o = new_buf(8 + w * data.name.length);
    o.write_shift(4, data.pos);
    o.write_shift(1, data.hs || 0);
    o.write_shift(1, data.dt);
    o.write_shift(1, data.name.length);
    if (opts.biff >= 8) o.write_shift(1, 1);
    o.write_shift(w * data.name.length, data.name, opts.biff < 8 ? "sbcs" : "utf16le");
    var out = o.slice(0, o.l);
    out.l = o.l;
    return out;
}
/* [MS-XLS] 2.4.265 TODO */ function parse_SST(blob, length) /*:SST*/ {
    var end = blob.l + length;
    var cnt = blob.read_shift(4);
    var ucnt = blob.read_shift(4);
    var strs /*:SST*/  = [];
    for(var i = 0; i != ucnt && blob.l < end; ++i)strs.push(parse_XLUnicodeRichExtendedString(blob));
    strs.Count = cnt;
    strs.Unique = ucnt;
    return strs;
}
function write_SST(sst, opts) {
    var header = new_buf(8);
    header.write_shift(4, sst.Count);
    header.write_shift(4, sst.Unique);
    var strs = [];
    for(var j = 0; j < sst.length; ++j)strs[j] = write_XLUnicodeRichExtendedString(sst[j], opts);
    var o = bconcat([
        header
    ].concat(strs));
    /*::(*/ o /*:: :any)*/ .parts = [
        header.length
    ].concat(strs.map(function(str) {
        return str.length;
    }));
    return o;
}
/* [MS-XLS] 2.4.107 */ function parse_ExtSST(blob, length) {
    var extsst = {};
    extsst.dsst = blob.read_shift(2);
    blob.l += length - 2;
    return extsst;
}
/* [MS-XLS] 2.4.221 TODO: check BIFF2-4 */ function parse_Row(blob) {
    var z = {} /*:any*/ ;
    z.r = blob.read_shift(2);
    z.c = blob.read_shift(2);
    z.cnt = blob.read_shift(2) - z.c;
    var miyRw = blob.read_shift(2);
    blob.l += 4; // reserved(2), unused(2)
    var flags = blob.read_shift(1); // various flags
    blob.l += 3; // reserved(8), ixfe(12), flags(4)
    if (flags & 0x07) z.level = flags & 0x07;
    // collapsed: flags & 0x10
    if (flags & 0x20) z.hidden = true;
    if (flags & 0x40) z.hpt = miyRw / 20;
    return z;
}
/* [MS-XLS] 2.4.125 */ function parse_ForceFullCalculation(blob) {
    var header = parse_frtHeader(blob);
    if (header.type != 0x08A3) throw new Error("Invalid Future Record " + header.type);
    var fullcalc = blob.read_shift(4);
    return fullcalc !== 0x0;
}
/* [MS-XLS] 2.4.215 rt */ function parse_RecalcId(blob) {
    blob.read_shift(2);
    return blob.read_shift(4);
}
/* [MS-XLS] 2.4.87 */ function parse_DefaultRowHeight(blob, length, opts) {
    var f = 0;
    if (!(opts && opts.biff == 2)) f = blob.read_shift(2);
    var miyRw = blob.read_shift(2);
    if (opts && opts.biff == 2) {
        f = 1 - (miyRw >> 15);
        miyRw &= 0x7fff;
    }
    var fl = {
        Unsynced: f & 1,
        DyZero: (f & 2) >> 1,
        ExAsc: (f & 4) >> 2,
        ExDsc: (f & 8) >> 3
    };
    return [
        fl,
        miyRw
    ];
}
/* [MS-XLS] 2.4.345 TODO */ function parse_Window1(blob) {
    var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
    var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
    var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
    return {
        Pos: [
            xWn,
            yWn
        ],
        Dim: [
            dxWn,
            dyWn
        ],
        Flags: flags,
        CurTab: iTabCur,
        FirstTab: iTabFirst,
        Selected: ctabSel,
        TabRatio: wTabRatio
    };
}
function write_Window1() {
    var o = new_buf(18);
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 0x7260);
    o.write_shift(2, 0x44c0);
    o.write_shift(2, 0x38);
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 1);
    o.write_shift(2, 0x01f4);
    return o;
}
/* [MS-XLS] 2.4.346 TODO */ function parse_Window2(blob, length, opts) {
    if (opts && opts.biff >= 2 && opts.biff < 5) return {};
    var f = blob.read_shift(2);
    return {
        RTL: f & 0x40
    };
}
function write_Window2(view) {
    var o = new_buf(18), f = 0x6b6;
    if (view && view.RTL) f |= 0x40;
    o.write_shift(2, f);
    o.write_shift(4, 0);
    o.write_shift(4, 64);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    return o;
}
/* [MS-XLS] 2.4.189 TODO */ function parse_Pane() {}
/* [MS-XLS] 2.4.122 TODO */ function parse_Font(blob, length, opts) {
    var o /*:any*/  = {
        dyHeight: blob.read_shift(2),
        fl: blob.read_shift(2)
    };
    switch(opts && opts.biff || 8){
        case 2:
            break;
        case 3:
        case 4:
            blob.l += 2;
            break;
        default:
            blob.l += 10;
            break;
    }
    o.name = parse_ShortXLUnicodeString(blob, 0, opts);
    return o;
}
function write_Font(data, opts) {
    var name = data.name || "Arial";
    var b5 = opts && opts.biff == 5, w = b5 ? 15 + name.length : 16 + 2 * name.length;
    var o = new_buf(w);
    o.write_shift(2, (data.sz || 12) * 20);
    o.write_shift(4, 0);
    o.write_shift(2, 400);
    o.write_shift(4, 0);
    o.write_shift(2, 0);
    o.write_shift(1, name.length);
    if (!b5) o.write_shift(1, 1);
    o.write_shift((b5 ? 1 : 2) * name.length, name, b5 ? "sbcs" : "utf16le");
    return o;
}
/* [MS-XLS] 2.4.149 */ function parse_LabelSst(blob) {
    var cell = parse_XLSCell(blob);
    cell.isst = blob.read_shift(4);
    return cell;
}
function write_LabelSst(R /*:number*/ , C /*:number*/ , v /*:number*/ , os /*:number*/  /*::, opts*/ ) {
    var o = new_buf(10);
    write_XLSCell(R, C, os, o);
    o.write_shift(4, v);
    return o;
}
/* [MS-XLS] 2.4.148 */ function parse_Label(blob, length, opts) {
    if (opts.biffguess && opts.biff == 2) opts.biff = 5;
    var target = blob.l + length;
    var cell = parse_XLSCell(blob, 6);
    if (opts.biff == 2) blob.l++;
    var str = parse_XLUnicodeString(blob, target - blob.l, opts);
    cell.val = str;
    return cell;
}
function write_Label(R /*:number*/ , C /*:number*/ , v /*:string*/ , os /*:number*/ , opts) {
    var b8 = !opts || opts.biff == 8;
    var o = new_buf(8 + +b8 + (1 + b8) * v.length);
    write_XLSCell(R, C, os, o);
    o.write_shift(2, v.length);
    if (b8) o.write_shift(1, 1);
    o.write_shift((1 + b8) * v.length, v, b8 ? "utf16le" : "sbcs");
    return o;
}
/* [MS-XLS] 2.4.126 Number Formats */ function parse_Format(blob, length, opts) {
    var numFmtId = blob.read_shift(2);
    var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
    return [
        numFmtId,
        fmtstr
    ];
}
function write_Format(i /*:number*/ , f /*:string*/ , opts, o) {
    var b5 = opts && opts.biff == 5;
    if (!o) o = new_buf(b5 ? 3 + f.length : 5 + 2 * f.length);
    o.write_shift(2, i);
    o.write_shift(b5 ? 1 : 2, f.length);
    if (!b5) o.write_shift(1, 1);
    o.write_shift((b5 ? 1 : 2) * f.length, f, b5 ? "sbcs" : "utf16le");
    var out = o.length > o.l ? o.slice(0, o.l) : o;
    if (out.l == null) out.l = out.length;
    return out;
}
var parse_BIFF2Format = parse_XLUnicodeString2;
/* [MS-XLS] 2.4.90 */ function parse_Dimensions(blob, length, opts) {
    var end = blob.l + length;
    var w = opts.biff == 8 || !opts.biff ? 4 : 2;
    var r = blob.read_shift(w), R = blob.read_shift(w);
    var c = blob.read_shift(2), C = blob.read_shift(2);
    blob.l = end;
    return {
        s: {
            r: r,
            c: c
        },
        e: {
            r: R,
            c: C
        }
    };
}
function write_Dimensions(range, opts) {
    var w = opts.biff == 8 || !opts.biff ? 4 : 2;
    var o = new_buf(2 * w + 6);
    o.write_shift(w, range.s.r);
    o.write_shift(w, range.e.r + 1);
    o.write_shift(2, range.s.c);
    o.write_shift(2, range.e.c + 1);
    o.write_shift(2, 0);
    return o;
}
/* [MS-XLS] 2.4.220 */ function parse_RK(blob) {
    var rw = blob.read_shift(2), col = blob.read_shift(2);
    var rkrec = parse_RkRec(blob);
    return {
        r: rw,
        c: col,
        ixfe: rkrec[0],
        rknum: rkrec[1]
    };
}
/* [MS-XLS] 2.4.175 */ function parse_MulRk(blob, length) {
    var target = blob.l + length - 2;
    var rw = blob.read_shift(2), col = blob.read_shift(2);
    var rkrecs = [];
    while(blob.l < target)rkrecs.push(parse_RkRec(blob));
    if (blob.l !== target) throw new Error("MulRK read error");
    var lastcol = blob.read_shift(2);
    if (rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch");
    return {
        r: rw,
        c: col,
        C: lastcol,
        rkrec: rkrecs
    };
}
/* [MS-XLS] 2.4.174 */ function parse_MulBlank(blob, length) {
    var target = blob.l + length - 2;
    var rw = blob.read_shift(2), col = blob.read_shift(2);
    var ixfes = [];
    while(blob.l < target)ixfes.push(blob.read_shift(2));
    if (blob.l !== target) throw new Error("MulBlank read error");
    var lastcol = blob.read_shift(2);
    if (ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch");
    return {
        r: rw,
        c: col,
        C: lastcol,
        ixfe: ixfes
    };
}
/* [MS-XLS] 2.5.20 2.5.249 TODO: interpret values here */ function parse_CellStyleXF(blob, length, style, opts) {
    var o = {};
    var a = blob.read_shift(4), b = blob.read_shift(4);
    var c = blob.read_shift(4), d = blob.read_shift(2);
    o.patternType = XLSFillPattern[c >> 26];
    if (!opts.cellStyles) return o;
    o.alc = a & 0x07;
    o.fWrap = a >> 3 & 0x01;
    o.alcV = a >> 4 & 0x07;
    o.fJustLast = a >> 7 & 0x01;
    o.trot = a >> 8 & 0xFF;
    o.cIndent = a >> 16 & 0x0F;
    o.fShrinkToFit = a >> 20 & 0x01;
    o.iReadOrder = a >> 22 & 0x02;
    o.fAtrNum = a >> 26 & 0x01;
    o.fAtrFnt = a >> 27 & 0x01;
    o.fAtrAlc = a >> 28 & 0x01;
    o.fAtrBdr = a >> 29 & 0x01;
    o.fAtrPat = a >> 30 & 0x01;
    o.fAtrProt = a >> 31 & 0x01;
    o.dgLeft = b & 0x0F;
    o.dgRight = b >> 4 & 0x0F;
    o.dgTop = b >> 8 & 0x0F;
    o.dgBottom = b >> 12 & 0x0F;
    o.icvLeft = b >> 16 & 0x7F;
    o.icvRight = b >> 23 & 0x7F;
    o.grbitDiag = b >> 30 & 0x03;
    o.icvTop = c & 0x7F;
    o.icvBottom = c >> 7 & 0x7F;
    o.icvDiag = c >> 14 & 0x7F;
    o.dgDiag = c >> 21 & 0x0F;
    o.icvFore = d & 0x7F;
    o.icvBack = d >> 7 & 0x7F;
    o.fsxButton = d >> 14 & 0x01;
    return o;
}
//function parse_CellXF(blob, length, opts) {return parse_CellStyleXF(blob,length,0, opts);}
//function parse_StyleXF(blob, length, opts) {return parse_CellStyleXF(blob,length,1, opts);}
/* [MS-XLS] 2.4.353 TODO: actually do this right */ function parse_XF(blob, length, opts) {
    var o = {};
    o.ifnt = blob.read_shift(2);
    o.numFmtId = blob.read_shift(2);
    o.flags = blob.read_shift(2);
    o.fStyle = o.flags >> 2 & 0x01;
    length -= 6;
    o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
    return o;
}
function write_XF(data, ixfeP, opts, o) {
    var b5 = opts && opts.biff == 5;
    if (!o) o = new_buf(b5 ? 16 : 20);
    o.write_shift(2, 0);
    if (data.style) {
        o.write_shift(2, data.numFmtId || 0);
        o.write_shift(2, 0xFFF4);
    } else {
        o.write_shift(2, data.numFmtId || 0);
        o.write_shift(2, ixfeP << 4);
    }
    var f = 0;
    if (data.numFmtId > 0 && b5) f |= 0x0400;
    o.write_shift(4, f);
    o.write_shift(4, 0);
    if (!b5) o.write_shift(4, 0);
    o.write_shift(2, 0);
    return o;
}
/* [MS-XLS] 2.4.134 */ function parse_Guts(blob) {
    blob.l += 4;
    var out = [
        blob.read_shift(2),
        blob.read_shift(2)
    ];
    if (out[0] !== 0) out[0]--;
    if (out[1] !== 0) out[1]--;
    if (out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|"));
    return out;
}
function write_Guts(guts /*:Array<number>*/ ) {
    var o = new_buf(8);
    o.write_shift(4, 0);
    o.write_shift(2, guts[0] ? guts[0] + 1 : 0);
    o.write_shift(2, guts[1] ? guts[1] + 1 : 0);
    return o;
}
/* [MS-XLS] 2.4.24 */ function parse_BoolErr(blob, length, opts) {
    var cell = parse_XLSCell(blob, 6);
    if (opts.biff == 2 || length == 9) ++blob.l;
    var val = parse_Bes(blob, 2);
    cell.val = val;
    cell.t = val === true || val === false ? "b" : "e";
    return cell;
}
function write_BoolErr(R /*:number*/ , C /*:number*/ , v, os /*:number*/ , opts, t /*:string*/ ) {
    var o = new_buf(8);
    write_XLSCell(R, C, os, o);
    write_Bes(v, t, o);
    return o;
}
/* [MS-XLS] 2.4.180 Number */ function parse_Number(blob, length, opts) {
    if (opts.biffguess && opts.biff == 2) opts.biff = 5;
    var cell = parse_XLSCell(blob, 6);
    var xnum = parse_Xnum(blob, 8);
    cell.val = xnum;
    return cell;
}
function write_Number(R /*:number*/ , C /*:number*/ , v, os /*:: :number, opts*/ ) {
    var o = new_buf(14);
    write_XLSCell(R, C, os, o);
    write_Xnum(v, o);
    return o;
}
var parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136
/* [MS-XLS] 2.4.271 */ function parse_SupBook(blob, length, opts) {
    var end = blob.l + length;
    var ctab = blob.read_shift(2);
    var cch = blob.read_shift(2);
    opts.sbcch = cch;
    if (cch == 0x0401 || cch == 0x3A01) return [
        cch,
        ctab
    ];
    if (cch < 0x01 || cch > 0xff) throw new Error("Unexpected SupBook type: " + cch);
    var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
    /* TODO: 2.5.277 Virtual Path */ var rgst = [];
    while(end > blob.l)rgst.push(parse_XLUnicodeString(blob));
    return [
        cch,
        ctab,
        virtPath,
        rgst
    ];
}
/* [MS-XLS] 2.4.105 TODO */ function parse_ExternName(blob, length, opts) {
    var flags = blob.read_shift(2);
    var body;
    var o = {
        fBuiltIn: flags & 0x01,
        fWantAdvise: flags >>> 1 & 0x01,
        fWantPict: flags >>> 2 & 0x01,
        fOle: flags >>> 3 & 0x01,
        fOleLink: flags >>> 4 & 0x01,
        cf: flags >>> 5 & 0x3FF,
        fIcon: flags >>> 15 & 0x01
    } /*:any*/ ;
    if (opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length - 2, opts);
    //else throw new Error("unsupported SupBook cch: " + opts.sbcch);
    o.body = body || blob.read_shift(length - 2);
    if (typeof body === "string") o.Name = body;
    return o;
}
/* [MS-XLS] 2.4.150 TODO */ var XLSLblBuiltIn = [
    "_xlnm.Consolidate_Area",
    "_xlnm.Auto_Open",
    "_xlnm.Auto_Close",
    "_xlnm.Extract",
    "_xlnm.Database",
    "_xlnm.Criteria",
    "_xlnm.Print_Area",
    "_xlnm.Print_Titles",
    "_xlnm.Recorder",
    "_xlnm.Data_Form",
    "_xlnm.Auto_Activate",
    "_xlnm.Auto_Deactivate",
    "_xlnm.Sheet_Title",
    "_xlnm._FilterDatabase"
];
function parse_Lbl(blob, length, opts) {
    var target = blob.l + length;
    var flags = blob.read_shift(2);
    var chKey = blob.read_shift(1);
    var cch = blob.read_shift(1);
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    var itab = 0;
    if (!opts || opts.biff >= 5) {
        if (opts.biff != 5) blob.l += 2;
        itab = blob.read_shift(2);
        if (opts.biff == 5) blob.l += 2;
        blob.l += 4;
    }
    var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
    if (flags & 0x20) name = XLSLblBuiltIn[name.charCodeAt(0)];
    var npflen = target - blob.l;
    if (opts && opts.biff == 2) --npflen;
    /*jshint -W018 */ var rgce = target == blob.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
    /*jshint +W018 */ return {
        chKey: chKey,
        Name: name,
        itab: itab,
        rgce: rgce
    };
}
/* [MS-XLS] 2.4.106 TODO: verify filename encoding */ function parse_ExternSheet(blob, length, opts) {
    if (opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);
    var o = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
    while(len-- !== 0)o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
    // [iSupBook, itabFirst, itabLast];
    if (blob.l != target) throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
    return o;
}
function parse_BIFF5ExternSheet(blob, length, opts) {
    if (blob[blob.l + 1] == 0x03) blob[blob.l]++;
    var o = parse_ShortXLUnicodeString(blob, length, opts);
    return o.charCodeAt(0) == 0x03 ? o.slice(1) : o;
}
/* [MS-XLS] 2.4.176 TODO: check older biff */ function parse_NameCmt(blob, length, opts) {
    if (opts.biff < 8) {
        blob.l += length;
        return;
    }
    var cchName = blob.read_shift(2);
    var cchComment = blob.read_shift(2);
    var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
    var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
    return [
        name,
        comment
    ];
}
/* [MS-XLS] 2.4.260 */ function parse_ShrFmla(blob, length, opts) {
    var ref = parse_RefU(blob, 6);
    blob.l++;
    var cUse = blob.read_shift(1);
    length -= 8;
    return [
        parse_SharedParsedFormula(blob, length, opts),
        cUse,
        ref
    ];
}
/* [MS-XLS] 2.4.4 TODO */ function parse_Array(blob, length, opts) {
    var ref = parse_Ref(blob, 6);
    /* TODO: fAlwaysCalc */ switch(opts.biff){
        case 2:
            blob.l++;
            length -= 7;
            break;
        case 3:
        case 4:
            blob.l += 2;
            length -= 8;
            break;
        default:
            blob.l += 6;
            length -= 12;
    }
    return [
        ref,
        parse_ArrayParsedFormula(blob, length, opts, ref)
    ];
}
/* [MS-XLS] 2.4.173 */ function parse_MTRSettings(blob) {
    var fMTREnabled = blob.read_shift(4) !== 0x00;
    var fUserSetThreadCount = blob.read_shift(4) !== 0x00;
    var cUserThreadCount = blob.read_shift(4);
    return [
        fMTREnabled,
        fUserSetThreadCount,
        cUserThreadCount
    ];
}
/* [MS-XLS] 2.5.186 TODO: BIFF5 */ function parse_NoteSh(blob, length, opts) {
    if (opts.biff < 8) return;
    var row = blob.read_shift(2), col = blob.read_shift(2);
    var flags = blob.read_shift(2), idObj = blob.read_shift(2);
    var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
    if (opts.biff < 8) blob.read_shift(1);
    return [
        {
            r: row,
            c: col
        },
        stAuthor,
        idObj,
        flags
    ];
}
/* [MS-XLS] 2.4.179 */ function parse_Note(blob, length, opts) {
    /* TODO: Support revisions */ return parse_NoteSh(blob, length, opts);
}
/* [MS-XLS] 2.4.168 */ function parse_MergeCells(blob, length) /*:Array<Range>*/ {
    var merges /*:Array<Range>*/  = [];
    var cmcs = blob.read_shift(2);
    while(cmcs--)merges.push(parse_Ref8U(blob, length));
    return merges;
}
function write_MergeCells(merges /*:Array<Range>*/ ) {
    var o = new_buf(2 + merges.length * 8);
    o.write_shift(2, merges.length);
    for(var i = 0; i < merges.length; ++i)write_Ref8U(merges[i], o);
    return o;
}
/* [MS-XLS] 2.4.181 TODO: parse all the things! */ function parse_Obj(blob, length, opts) {
    if (opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);
    var cmo = parse_FtCmo(blob, 22); // id, ot, flags
    var fts = parse_FtArray(blob, length - 22, cmo[1]);
    return {
        cmo: cmo,
        ft: fts
    };
}
/* from older spec */ var parse_BIFF5OT = {
    0x08: function(blob, length) {
        var tgt = blob.l + length;
        blob.l += 10; // todo
        var cf = blob.read_shift(2);
        blob.l += 4;
        blob.l += 2; //var cbPictFmla = blob.read_shift(2);
        blob.l += 2;
        blob.l += 2; //var grbit = blob.read_shift(2);
        blob.l += 4;
        var cchName = blob.read_shift(1);
        blob.l += cchName; // TODO: stName
        blob.l = tgt; // TODO: fmla
        return {
            fmt: cf
        };
    }
};
function parse_BIFF5Obj(blob, length, opts) {
    blob.l += 4; //var cnt = blob.read_shift(4);
    var ot = blob.read_shift(2);
    var id = blob.read_shift(2);
    var grbit = blob.read_shift(2);
    blob.l += 2; //var colL = blob.read_shift(2);
    blob.l += 2; //var dxL = blob.read_shift(2);
    blob.l += 2; //var rwT = blob.read_shift(2);
    blob.l += 2; //var dyT = blob.read_shift(2);
    blob.l += 2; //var colR = blob.read_shift(2);
    blob.l += 2; //var dxR = blob.read_shift(2);
    blob.l += 2; //var rwB = blob.read_shift(2);
    blob.l += 2; //var dyB = blob.read_shift(2);
    blob.l += 2; //var cbMacro = blob.read_shift(2);
    blob.l += 6;
    length -= 36;
    var fts = [];
    fts.push((parse_BIFF5OT[ot] || parsenoop)(blob, length, opts));
    return {
        cmo: [
            id,
            ot,
            grbit
        ],
        ft: fts
    };
}
/* [MS-XLS] 2.4.329 TODO: parse properly */ function parse_TxO(blob, length, opts) {
    var s = blob.l;
    var texts = "";
    try {
        blob.l += 4;
        var ot = (opts.lastobj || {
            cmo: [
                0,
                0
            ]
        }).cmo[1];
        var controlInfo; // eslint-disable-line no-unused-vars
        if ([
            0,
            5,
            7,
            11,
            12,
            14
        ].indexOf(ot) == -1) blob.l += 6;
        else controlInfo = parse_ControlInfo(blob, 6, opts); // eslint-disable-line no-unused-vars
        var cchText = blob.read_shift(2);
        /*var cbRuns = */ blob.read_shift(2);
        /*var ifntEmpty = */ parseuint16(blob, 2);
        var len = blob.read_shift(2);
        blob.l += len;
        //var fmla = parse_ObjFmla(blob, s + length - blob.l);
        for(var i = 1; i < blob.lens.length - 1; ++i){
            if (blob.l - s != blob.lens[i]) throw new Error("TxO: bad continue record");
            var hdr = blob[blob.l];
            var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i + 1] - blob.lens[i] - 1);
            texts += t;
            if (texts.length >= (hdr ? cchText : 2 * cchText)) break;
        }
        if (texts.length !== cchText && texts.length !== cchText * 2) throw new Error("cchText: " + cchText + " != " + texts.length);
        blob.l = s + length;
        /* [MS-XLS] 2.5.272 TxORuns */ //	var rgTxoRuns = [];
        //	for(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;
        //	var cchText2 = blob.read_shift(2);
        //	if(cchText2 !== cchText) throw new Error("TxOLastRun mismatch: " + cchText2 + " " + cchText);
        //	blob.l += 6;
        //	if(s + length != blob.l) throw new Error("TxO " + (s + length) + ", at " + blob.l);
        return {
            t: texts
        };
    } catch (e) {
        blob.l = s + length;
        return {
            t: texts
        };
    }
}
/* [MS-XLS] 2.4.140 */ function parse_HLink(blob, length) {
    var ref = parse_Ref8U(blob, 8);
    blob.l += 16; /* CLSID */ 
    var hlink = parse_Hyperlink(blob, length - 24);
    return [
        ref,
        hlink
    ];
}
function write_HLink(hl) {
    var O = new_buf(24);
    var ref = decode_cell(hl[0]);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.c);
    O.write_shift(2, ref.c);
    var clsid = "d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
    for(var i = 0; i < 16; ++i)O.write_shift(1, parseInt(clsid[i], 16));
    return bconcat([
        O,
        write_Hyperlink(hl[1])
    ]);
}
/* [MS-XLS] 2.4.141 */ function parse_HLinkTooltip(blob, length) {
    blob.read_shift(2);
    var ref = parse_Ref8U(blob, 8);
    var wzTooltip = blob.read_shift((length - 10) / 2, "dbcs-cont");
    wzTooltip = wzTooltip.replace(chr0, "");
    return [
        ref,
        wzTooltip
    ];
}
function write_HLinkTooltip(hl) {
    var TT = hl[1].Tooltip;
    var O = new_buf(10 + 2 * (TT.length + 1));
    O.write_shift(2, 0x0800);
    var ref = decode_cell(hl[0]);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.r);
    O.write_shift(2, ref.c);
    O.write_shift(2, ref.c);
    for(var i = 0; i < TT.length; ++i)O.write_shift(2, TT.charCodeAt(i));
    O.write_shift(2, 0);
    return O;
}
/* [MS-XLS] 2.4.63 */ function parse_Country(blob) /*:[string|number, string|number]*/ {
    var o = [
        0,
        0
    ], d;
    d = blob.read_shift(2);
    o[0] = CountryEnum[d] || d;
    d = blob.read_shift(2);
    o[1] = CountryEnum[d] || d;
    return o;
}
function write_Country(o) {
    if (!o) o = new_buf(4);
    o.write_shift(2, 0x01);
    o.write_shift(2, 0x01);
    return o;
}
/* [MS-XLS] 2.4.50 ClrtClient */ function parse_ClrtClient(blob) {
    var ccv = blob.read_shift(2);
    var o = [];
    while(ccv-- > 0)o.push(parse_LongRGB(blob, 8));
    return o;
}
/* [MS-XLS] 2.4.188 */ function parse_Palette(blob) {
    var ccv = blob.read_shift(2);
    var o = [];
    while(ccv-- > 0)o.push(parse_LongRGB(blob, 8));
    return o;
}
/* [MS-XLS] 2.4.354 */ function parse_XFCRC(blob) {
    blob.l += 2;
    var o = {
        cxfs: 0,
        crc: 0
    };
    o.cxfs = blob.read_shift(2);
    o.crc = blob.read_shift(4);
    return o;
}
/* [MS-XLS] 2.4.53 TODO: parse flags */ /* [MS-XLSB] 2.4.323 TODO: parse flags */ function parse_ColInfo(blob, length, opts) {
    if (!opts.cellStyles) return parsenoop(blob, length);
    var w = opts && opts.biff >= 12 ? 4 : 2;
    var colFirst = blob.read_shift(w);
    var colLast = blob.read_shift(w);
    var coldx = blob.read_shift(w);
    var ixfe = blob.read_shift(w);
    var flags = blob.read_shift(2);
    if (w == 2) blob.l += 2;
    var o = {
        s: colFirst,
        e: colLast,
        w: coldx,
        ixfe: ixfe,
        flags: flags
    } /*:any*/ ;
    if (opts.biff >= 5 || !opts.biff) o.level = flags >> 8 & 0x7;
    return o;
}
function write_ColInfo(col, idx) {
    var o = new_buf(12);
    o.write_shift(2, idx);
    o.write_shift(2, idx);
    o.write_shift(2, col.width * 256);
    o.write_shift(2, 0);
    var f = 0;
    if (col.hidden) f |= 1;
    o.write_shift(1, f);
    f = col.level || 0;
    o.write_shift(1, f);
    o.write_shift(2, 0);
    return o;
}
/* [MS-XLS] 2.4.257 */ function parse_Setup(blob, length) {
    var o = {};
    if (length < 32) return o;
    blob.l += 16;
    o.header = parse_Xnum(blob, 8);
    o.footer = parse_Xnum(blob, 8);
    blob.l += 2;
    return o;
}
/* [MS-XLS] 2.4.261 */ function parse_ShtProps(blob, length, opts) {
    var def = {
        area: false
    };
    if (opts.biff != 5) {
        blob.l += length;
        return def;
    }
    var d = blob.read_shift(1);
    blob.l += 3;
    if (d & 0x10) def.area = true;
    return def;
}
/* [MS-XLS] 2.4.241 */ function write_RRTabId(n /*:number*/ ) {
    var out = new_buf(2 * n);
    for(var i = 0; i < n; ++i)out.write_shift(2, i + 1);
    return out;
}
var parse_Blank = parse_XLSCell; /* [MS-XLS] 2.4.20 Just the cell */ 
var parse_Scl = parseuint16a; /* [MS-XLS] 2.4.247 num, den */ 
var parse_String = parse_XLUnicodeString; /* [MS-XLS] 2.4.268 */ 
/* --- Specific to versions before BIFF8 --- */ function parse_ImData(blob) {
    var cf = blob.read_shift(2);
    var env = blob.read_shift(2);
    var lcb = blob.read_shift(4);
    var o = {
        fmt: cf,
        env: env,
        len: lcb,
        data: blob.slice(blob.l, blob.l + lcb)
    };
    blob.l += lcb;
    return o;
}
/* BIFF2_??? where ??? is the name from [XLS] */ function parse_BIFF2STR(blob, length, opts) {
    if (opts.biffguess && opts.biff == 5) opts.biff = 2;
    var cell = parse_XLSCell(blob, 6);
    ++blob.l;
    var str = parse_XLUnicodeString2(blob, length - 7, opts);
    cell.t = "str";
    cell.val = str;
    return cell;
}
function parse_BIFF2NUM(blob /*::, length*/ ) {
    var cell = parse_XLSCell(blob, 6);
    ++blob.l;
    var num = parse_Xnum(blob, 8);
    cell.t = "n";
    cell.val = num;
    return cell;
}
function write_BIFF2NUM(r /*:number*/ , c /*:number*/ , val /*:number*/ ) {
    var out = new_buf(15);
    write_BIFF2Cell(out, r, c);
    out.write_shift(8, val, "f");
    return out;
}
function parse_BIFF2INT(blob) {
    var cell = parse_XLSCell(blob, 6);
    ++blob.l;
    var num = blob.read_shift(2);
    cell.t = "n";
    cell.val = num;
    return cell;
}
function write_BIFF2INT(r /*:number*/ , c /*:number*/ , val /*:number*/ ) {
    var out = new_buf(9);
    write_BIFF2Cell(out, r, c);
    out.write_shift(2, val);
    return out;
}
function parse_BIFF2STRING(blob) {
    var cch = blob.read_shift(1);
    if (cch === 0) {
        blob.l++;
        return "";
    }
    return blob.read_shift(cch, "sbcs-cont");
}
/* TODO: convert to BIFF8 font struct */ function parse_BIFF2FONTXTRA(blob, length) {
    blob.l += 6; // unknown
    blob.l += 2; // font weight "bls"
    blob.l += 1; // charset
    blob.l += 3; // unknown
    blob.l += 1; // font family
    blob.l += length - 13;
}
/* TODO: parse rich text runs */ function parse_RString(blob, length, opts) {
    var end = blob.l + length;
    var cell = parse_XLSCell(blob, 6);
    var cch = blob.read_shift(2);
    var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
    blob.l = end;
    cell.t = "str";
    cell.val = str;
    return cell;
}
/* from js-harb (C) 2014-present  SheetJS */ var DBF_SUPPORTED_VERSIONS = [
    0x02,
    0x03,
    0x30,
    0x31,
    0x83,
    0x8B,
    0x8C,
    0xF5
];
var DBF = /*#__PURE__*/ function() {
    var dbf_codepage_map = {
        /* Code Pages Supported by Visual FoxPro */ /*::[*/ 0x01: 437,
        /*::[*/ 0x02: 850,
        /*::[*/ 0x03: 1252,
        /*::[*/ 0x04: 10000,
        /*::[*/ 0x64: 852,
        /*::[*/ 0x65: 866,
        /*::[*/ 0x66: 865,
        /*::[*/ 0x67: 861,
        /*::[*/ 0x68: 895,
        /*::[*/ 0x69: 620,
        /*::[*/ 0x6A: 737,
        /*::[*/ 0x6B: 857,
        /*::[*/ 0x78: 950,
        /*::[*/ 0x79: 949,
        /*::[*/ 0x7A: 936,
        /*::[*/ 0x7B: 932,
        /*::[*/ 0x7C: 874,
        /*::[*/ 0x7D: 1255,
        /*::[*/ 0x7E: 1256,
        /*::[*/ 0x96: 10007,
        /*::[*/ 0x97: 10029,
        /*::[*/ 0x98: 10006,
        /*::[*/ 0xC8: 1250,
        /*::[*/ 0xC9: 1251,
        /*::[*/ 0xCA: 1254,
        /*::[*/ 0xCB: 1253,
        /* shapefile DBF extension */ /*::[*/ 0x00: 20127,
        /*::[*/ 0x08: 865,
        /*::[*/ 0x09: 437,
        /*::[*/ 0x0A: 850,
        /*::[*/ 0x0B: 437,
        /*::[*/ 0x0D: 437,
        /*::[*/ 0x0E: 850,
        /*::[*/ 0x0F: 437,
        /*::[*/ 0x10: 850,
        /*::[*/ 0x11: 437,
        /*::[*/ 0x12: 850,
        /*::[*/ 0x13: 932,
        /*::[*/ 0x14: 850,
        /*::[*/ 0x15: 437,
        /*::[*/ 0x16: 850,
        /*::[*/ 0x17: 865,
        /*::[*/ 0x18: 437,
        /*::[*/ 0x19: 437,
        /*::[*/ 0x1A: 850,
        /*::[*/ 0x1B: 437,
        /*::[*/ 0x1C: 863,
        /*::[*/ 0x1D: 850,
        /*::[*/ 0x1F: 852,
        /*::[*/ 0x22: 852,
        /*::[*/ 0x23: 852,
        /*::[*/ 0x24: 860,
        /*::[*/ 0x25: 850,
        /*::[*/ 0x26: 866,
        /*::[*/ 0x37: 850,
        /*::[*/ 0x40: 852,
        /*::[*/ 0x4D: 936,
        /*::[*/ 0x4E: 949,
        /*::[*/ 0x4F: 950,
        /*::[*/ 0x50: 874,
        /*::[*/ 0x57: 1252,
        /*::[*/ 0x58: 1252,
        /*::[*/ 0x59: 1252,
        /*::[*/ 0x6C: 863,
        /*::[*/ 0x86: 737,
        /*::[*/ 0x87: 852,
        /*::[*/ 0x88: 857,
        /*::[*/ 0xCC: 1257,
        /*::[*/ 0xFF: 16969
    };
    var dbf_reverse_map = evert({
        /*::[*/ 0x01: 437,
        /*::[*/ 0x02: 850,
        /*::[*/ 0x03: 1252,
        /*::[*/ 0x04: 10000,
        /*::[*/ 0x64: 852,
        /*::[*/ 0x65: 866,
        /*::[*/ 0x66: 865,
        /*::[*/ 0x67: 861,
        /*::[*/ 0x68: 895,
        /*::[*/ 0x69: 620,
        /*::[*/ 0x6A: 737,
        /*::[*/ 0x6B: 857,
        /*::[*/ 0x78: 950,
        /*::[*/ 0x79: 949,
        /*::[*/ 0x7A: 936,
        /*::[*/ 0x7B: 932,
        /*::[*/ 0x7C: 874,
        /*::[*/ 0x7D: 1255,
        /*::[*/ 0x7E: 1256,
        /*::[*/ 0x96: 10007,
        /*::[*/ 0x97: 10029,
        /*::[*/ 0x98: 10006,
        /*::[*/ 0xC8: 1250,
        /*::[*/ 0xC9: 1251,
        /*::[*/ 0xCA: 1254,
        /*::[*/ 0xCB: 1253,
        /*::[*/ 0x00: 20127
    });
    /* TODO: find an actual specification */ function dbf_to_aoa(buf, opts) /*:AOA*/ {
        var out /*:AOA*/  = [];
        var d /*:Block*/  = new_raw_buf(1);
        switch(opts.type){
            case "base64":
                d = s2a(Base64_decode(buf));
                break;
            case "binary":
                d = s2a(buf);
                break;
            case "buffer":
            case "array":
                d = buf;
                break;
        }
        prep_blob(d, 0);
        /* header */ var ft = d.read_shift(1);
        var memo = !!(ft & 0x88);
        var vfp = false, l7 = false;
        switch(ft){
            case 0x02:
                break; // dBASE II
            case 0x03:
                break; // dBASE III
            case 0x30:
                vfp = true;
                memo = true;
                break; // VFP
            case 0x31:
                vfp = true;
                memo = true;
                break; // VFP with autoincrement
            // 0x43 dBASE IV SQL table files
            // 0x63 dBASE IV SQL system files
            case 0x83:
                break; // dBASE III with memo
            case 0x8B:
                break; // dBASE IV with memo
            case 0x8C:
                l7 = true;
                break; // dBASE Level 7 with memo
            // case 0xCB dBASE IV SQL table files with memo
            case 0xF5:
                break; // FoxPro 2.x with memo
            // case 0xFB FoxBASE
            default:
                throw new Error("DBF Unsupported Version: " + ft.toString(16));
        }
        var nrow = 0, fpos = 0x0209;
        if (ft == 0x02) nrow = d.read_shift(2);
        d.l += 3; // dBASE II stores DDMMYY date, others use YYMMDD
        if (ft != 0x02) nrow = d.read_shift(4);
        if (nrow > 1048576) nrow = 1e6;
        if (ft != 0x02) fpos = d.read_shift(2); // header length
        var rlen = d.read_shift(2); // record length
        var /*flags = 0,*/ current_cp = opts.codepage || 1252;
        if (ft != 0x02) {
            d.l += 16;
            /*flags = */ d.read_shift(1);
            //if(memo && ((flags & 0x02) === 0)) throw new Error("DBF Flags " + flags.toString(16) + " ft " + ft.toString(16));
            /* codepage present in FoxPro and dBASE Level 7 */ if (d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];
            d.l += 1;
            d.l += 2;
        }
        if (l7) d.l += 36; // Level 7: 32 byte "Language driver name", 4 byte reserved
        /*:: type DBFField = { name:string; len:number; type:string; } */ var fields /*:Array<DBFField>*/  = [], field /*:DBFField*/  = {} /*:any*/ ;
        var hend = Math.min(d.length, ft == 0x02 ? 0x209 : fpos - 10 - (vfp ? 264 : 0));
        var ww = l7 ? 32 : 11;
        while(d.l < hend && d[d.l] != 0x0d){
            field = {} /*:any*/ ;
            field.name = $cptable.utils.decode(current_cp, d.slice(d.l, d.l + ww)).replace(/[\u0000\r\n].*$/g, "");
            d.l += ww;
            field.type = String.fromCharCode(d.read_shift(1));
            if (ft != 0x02 && !l7) field.offset = d.read_shift(4);
            field.len = d.read_shift(1);
            if (ft == 0x02) field.offset = d.read_shift(2);
            field.dec = d.read_shift(1);
            if (field.name.length) fields.push(field);
            if (ft != 0x02) d.l += l7 ? 13 : 14;
            switch(field.type){
                case "B":
                    if ((!vfp || field.len != 8) && opts.WTF) console.log("Skipping " + field.name + ":" + field.type);
                    break;
                case "G":
                case "P":
                    if (opts.WTF) console.log("Skipping " + field.name + ":" + field.type);
                    break;
                case "+":
                case "0":
                case "@":
                case "C":
                case "D":
                case "F":
                case "I":
                case "L":
                case "M":
                case "N":
                case "O":
                case "T":
                case "Y":
                    break;
                default:
                    throw new Error("Unknown Field Type: " + field.type);
            }
        }
        if (d[d.l] !== 0x0D) d.l = fpos - 1;
        if (d.read_shift(1) !== 0x0D) throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
        d.l = fpos;
        /* data */ var R = 0, C = 0;
        out[0] = [];
        for(C = 0; C != fields.length; ++C)out[0][C] = fields[C].name;
        while(nrow-- > 0){
            if (d[d.l] === 0x2A) {
                // TODO: record marked as deleted -- create a hidden row?
                d.l += rlen;
                continue;
            }
            ++d.l;
            out[++R] = [];
            C = 0;
            for(C = 0; C != fields.length; ++C){
                var dd = d.slice(d.l, d.l + fields[C].len);
                d.l += fields[C].len;
                prep_blob(dd, 0);
                var s = $cptable.utils.decode(current_cp, dd);
                switch(fields[C].type){
                    case "C":
                        // NOTE: it is conventional to write '  /  /  ' for empty dates
                        if (s.trim().length) out[R][C] = s.replace(/\s+$/, "");
                        break;
                    case "D":
                        if (s.length === 8) out[R][C] = new Date(+s.slice(0, 4), +s.slice(4, 6) - 1, +s.slice(6, 8));
                        else out[R][C] = s;
                        break;
                    case "F":
                        out[R][C] = parseFloat(s.trim());
                        break;
                    case "+":
                    case "I":
                        out[R][C] = l7 ? dd.read_shift(-4, "i") ^ 0x80000000 : dd.read_shift(4, "i");
                        break;
                    case "L":
                        switch(s.trim().toUpperCase()){
                            case "Y":
                            case "T":
                                out[R][C] = true;
                                break;
                            case "N":
                            case "F":
                                out[R][C] = false;
                                break;
                            case "":
                            case "?":
                                break;
                            default:
                                throw new Error("DBF Unrecognized L:|" + s + "|");
                        }
                        break;
                    case "M":
                        /* TODO: handle memo files */ if (!memo) throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
                        out[R][C] = "##MEMO##" + (l7 ? parseInt(s.trim(), 10) : dd.read_shift(4));
                        break;
                    case "N":
                        s = s.replace(/\u0000/g, "").trim();
                        // NOTE: dBASE II interprets "  .  " as 0
                        if (s && s != ".") out[R][C] = +s || 0;
                        break;
                    case "@":
                        // NOTE: dBASE specs appear to be incorrect
                        out[R][C] = new Date(dd.read_shift(-8, "f") - 0x388317533400);
                        break;
                    case "T":
                        out[R][C] = new Date((dd.read_shift(4) - 0x253D8C) * 0x5265C00 + dd.read_shift(4));
                        break;
                    case "Y":
                        out[R][C] = dd.read_shift(4, "i") / 1e4 + dd.read_shift(4, "i") / 1e4 * Math.pow(2, 32);
                        break;
                    case "O":
                        out[R][C] = -dd.read_shift(-8, "f");
                        break;
                    case "B":
                        if (vfp && fields[C].len == 8) {
                            out[R][C] = dd.read_shift(8, "f");
                            break;
                        }
                    /* falls through */ case "G":
                    case "P":
                        dd.l += fields[C].len;
                        break;
                    case "0":
                        if (fields[C].name === "_NullFlags") break;
                    /* falls through */ default:
                        throw new Error("DBF Unsupported data type " + fields[C].type);
                }
            }
        }
        if (ft != 0x02) {
            if (d.l < d.length && d[d.l++] != 0x1A) throw new Error("DBF EOF Marker missing " + (d.l - 1) + " of " + d.length + " " + d[d.l - 1].toString(16));
        }
        if (opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);
        opts.DBF = fields;
        return out;
    }
    function dbf_to_sheet(buf, opts) /*:Worksheet*/ {
        var o = opts || {};
        if (!o.dateNF) o.dateNF = "yyyymmdd";
        var ws = aoa_to_sheet(dbf_to_aoa(buf, o), o);
        ws["!cols"] = o.DBF.map(function(field) {
            return {
                wch: field.len,
                DBF: field
            };
        });
        delete o.DBF;
        return ws;
    }
    function dbf_to_workbook(buf, opts) /*:Workbook*/ {
        try {
            return sheet_to_workbook(dbf_to_sheet(buf, opts), opts);
        } catch (e) {
            if (opts && opts.WTF) throw e;
        }
        return {
            SheetNames: [],
            Sheets: {}
        };
    }
    var _RLEN = {
        "B": 8,
        "C": 250,
        "L": 1,
        "D": 8,
        "?": 0,
        "": 0
    };
    function sheet_to_dbf(ws /*:Worksheet*/ , opts /*:WriteOpts*/ ) {
        var o = opts || {};
        if (+o.codepage >= 0) set_cp(+o.codepage);
        if (o.type == "string") throw new Error("Cannot write DBF to JS string");
        var ba = buf_array();
        var aoa /*:AOA*/  = sheet_to_json(ws, {
            header: 1,
            raw: true,
            cellDates: true
        });
        var headers = aoa[0], data = aoa.slice(1), cols = ws["!cols"] || [];
        var i = 0, j = 0, hcnt = 0, rlen = 1;
        for(i = 0; i < headers.length; ++i){
            if (((cols[i] || {}).DBF || {}).name) {
                headers[i] = cols[i].DBF.name;
                ++hcnt;
                continue;
            }
            if (headers[i] == null) continue;
            ++hcnt;
            if (typeof headers[i] === "number") headers[i] = headers[i].toString(10);
            if (typeof headers[i] !== "string") throw new Error("DBF Invalid column name " + headers[i] + " |" + typeof headers[i] + "|");
            if (headers.indexOf(headers[i]) !== i) {
                for(j = 0; j < 1024; ++j)if (headers.indexOf(headers[i] + "_" + j) == -1) {
                    headers[i] += "_" + j;
                    break;
                }
            }
        }
        var range = safe_decode_range(ws["!ref"]);
        var coltypes /*:Array<string>*/  = [];
        var colwidths /*:Array<number>*/  = [];
        var coldecimals /*:Array<number>*/  = [];
        for(i = 0; i <= range.e.c - range.s.c; ++i){
            var guess = "", _guess = "", maxlen = 0;
            var col /*:Array<any>*/  = [];
            for(j = 0; j < data.length; ++j)if (data[j][i] != null) col.push(data[j][i]);
            if (col.length == 0 || headers[i] == null) {
                coltypes[i] = "?";
                continue;
            }
            for(j = 0; j < col.length; ++j){
                switch(typeof col[j]){
                    /* TODO: check if L2 compat is desired */ case "number":
                        _guess = "B";
                        break;
                    case "string":
                        _guess = "C";
                        break;
                    case "boolean":
                        _guess = "L";
                        break;
                    case "object":
                        _guess = col[j] instanceof Date ? "D" : "C";
                        break;
                    default:
                        _guess = "C";
                }
                maxlen = Math.max(maxlen, String(col[j]).length);
                guess = guess && guess != _guess ? "C" : _guess;
            //if(guess == 'C') break;
            }
            if (maxlen > 250) maxlen = 250;
            _guess = ((cols[i] || {}).DBF || {}).type;
            /* TODO: more fine grained control over DBF type resolution */ if (_guess == "C") {
                if (cols[i].DBF.len > maxlen) maxlen = cols[i].DBF.len;
            }
            if (guess == "B" && _guess == "N") {
                guess = "N";
                coldecimals[i] = cols[i].DBF.dec;
                maxlen = cols[i].DBF.len;
            }
            colwidths[i] = guess == "C" || _guess == "N" ? maxlen : _RLEN[guess] || 0;
            rlen += colwidths[i];
            coltypes[i] = guess;
        }
        var h = ba.next(32);
        h.write_shift(4, 0x13021130);
        h.write_shift(4, data.length);
        h.write_shift(2, 296 + 32 * hcnt);
        h.write_shift(2, rlen);
        for(i = 0; i < 4; ++i)h.write_shift(4, 0);
        h.write_shift(4, 0x00000000 | (+dbf_reverse_map[/*::String(*/ current_ansi /*::)*/ ] || 0x03) << 8);
        for(i = 0, j = 0; i < headers.length; ++i){
            if (headers[i] == null) continue;
            var hf = ba.next(32);
            var _f = (headers[i].slice(-10) + "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00").slice(0, 11);
            hf.write_shift(1, _f, "sbcs");
            hf.write_shift(1, coltypes[i] == "?" ? "C" : coltypes[i], "sbcs");
            hf.write_shift(4, j);
            hf.write_shift(1, colwidths[i] || _RLEN[coltypes[i]] || 0);
            hf.write_shift(1, coldecimals[i] || 0);
            hf.write_shift(1, 0x02);
            hf.write_shift(4, 0);
            hf.write_shift(1, 0);
            hf.write_shift(4, 0);
            hf.write_shift(4, 0);
            j += colwidths[i] || _RLEN[coltypes[i]] || 0;
        }
        var hb = ba.next(264);
        hb.write_shift(4, 0x0000000D);
        for(i = 0; i < 65; ++i)hb.write_shift(4, 0x00000000);
        for(i = 0; i < data.length; ++i){
            var rout = ba.next(rlen);
            rout.write_shift(1, 0);
            for(j = 0; j < headers.length; ++j){
                if (headers[j] == null) continue;
                switch(coltypes[j]){
                    case "L":
                        rout.write_shift(1, data[i][j] == null ? 0x3F : data[i][j] ? 0x54 : 0x46);
                        break;
                    case "B":
                        rout.write_shift(8, data[i][j] || 0, "f");
                        break;
                    case "N":
                        var _n = "0";
                        if (typeof data[i][j] == "number") _n = data[i][j].toFixed(coldecimals[j] || 0);
                        for(hcnt = 0; hcnt < colwidths[j] - _n.length; ++hcnt)rout.write_shift(1, 0x20);
                        rout.write_shift(1, _n, "sbcs");
                        break;
                    case "D":
                        if (!data[i][j]) rout.write_shift(8, "00000000", "sbcs");
                        else {
                            rout.write_shift(4, ("0000" + data[i][j].getFullYear()).slice(-4), "sbcs");
                            rout.write_shift(2, ("00" + (data[i][j].getMonth() + 1)).slice(-2), "sbcs");
                            rout.write_shift(2, ("00" + data[i][j].getDate()).slice(-2), "sbcs");
                        }
                        break;
                    case "C":
                        var _s = String(data[i][j] != null ? data[i][j] : "").slice(0, colwidths[j]);
                        rout.write_shift(1, _s, "sbcs");
                        for(hcnt = 0; hcnt < colwidths[j] - _s.length; ++hcnt)rout.write_shift(1, 0x20);
                        break;
                }
            }
        // data
        }
        ba.next(1).write_shift(1, 0x1A);
        return ba.end();
    }
    return {
        to_workbook: dbf_to_workbook,
        to_sheet: dbf_to_sheet,
        from_sheet: sheet_to_dbf
    };
}();
var SYLK = /*#__PURE__*/ function() {
    /* TODO: stress test sequences */ var sylk_escapes = {
        AA: "\xc0",
        BA: "\xc1",
        CA: "\xc2",
        DA: 195,
        HA: "\xc4",
        JA: 197,
        AE: "\xc8",
        BE: "\xc9",
        CE: "\xca",
        HE: "\xcb",
        AI: "\xcc",
        BI: "\xcd",
        CI: "\xce",
        HI: "\xcf",
        AO: "\xd2",
        BO: "\xd3",
        CO: "\xd4",
        DO: 213,
        HO: "\xd6",
        AU: "\xd9",
        BU: "\xda",
        CU: "\xdb",
        HU: "\xdc",
        Aa: "\xe0",
        Ba: "\xe1",
        Ca: "\xe2",
        Da: 227,
        Ha: "\xe4",
        Ja: 229,
        Ae: "\xe8",
        Be: "\xe9",
        Ce: "\xea",
        He: "\xeb",
        Ai: "\xec",
        Bi: "\xed",
        Ci: "\xee",
        Hi: "\xef",
        Ao: "\xf2",
        Bo: "\xf3",
        Co: "\xf4",
        Do: 245,
        Ho: "\xf6",
        Au: "\xf9",
        Bu: "\xfa",
        Cu: "\xfb",
        Hu: "\xfc",
        KC: "\xc7",
        Kc: "\xe7",
        q: "\xe6",
        z: "œ",
        a: "\xc6",
        j: "Œ",
        DN: 209,
        Dn: 241,
        Hy: 255,
        S: 169,
        c: 170,
        R: 174,
        "B ": 180,
        /*::[*/ 0: 176,
        /*::[*/ 1: 177,
        /*::[*/ 2: 178,
        /*::[*/ 3: 179,
        /*::[*/ 5: 181,
        /*::[*/ 6: 182,
        /*::[*/ 7: 183,
        Q: 185,
        k: 186,
        b: 208,
        i: 216,
        l: 222,
        s: 240,
        y: 248,
        "!": 161,
        '"': 162,
        "#": 163,
        "(": 164,
        "%": 165,
        "'": 167,
        "H ": 168,
        "+": 171,
        ";": 187,
        "<": 188,
        "=": 189,
        ">": 190,
        "?": 191,
        "{": 223
    } /*:any*/ ;
    var sylk_char_regex = new RegExp("\x1bN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g, "\\$1") + "|\\|)", "gm");
    var sylk_char_fn = function(_, $1) {
        var o = sylk_escapes[$1];
        return typeof o == "number" ? _getansi(o) : o;
    };
    var decode_sylk_char = function($$, $1, $2) {
        var newcc = $1.charCodeAt(0) - 0x20 << 4 | $2.charCodeAt(0) - 0x30;
        return newcc == 59 ? $$ : _getansi(newcc);
    };
    sylk_escapes["|"] = 254;
    /* TODO: find an actual specification */ function sylk_to_aoa(d /*:RawData*/ , opts) /*:[AOA, Worksheet]*/ {
        switch(opts.type){
            case "base64":
                return sylk_to_aoa_str(Base64_decode(d), opts);
            case "binary":
                return sylk_to_aoa_str(d, opts);
            case "buffer":
                return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
                return sylk_to_aoa_str(cc2str(d), opts);
        }
        throw new Error("Unrecognized type " + opts.type);
    }
    function sylk_to_aoa_str(str /*:string*/ , opts) /*:[AOA, Worksheet]*/ {
        var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr /*:AOA*/  = [];
        var formats /*:Array<string>*/  = [];
        var next_cell_format /*:string|null*/  = null;
        var sht = {}, rowinfo /*:Array<RowInfo>*/  = [], colinfo /*:Array<ColInfo>*/  = [], cw /*:Array<string>*/  = [];
        var Mval = 0, j;
        if (+opts.codepage >= 0) set_cp(+opts.codepage);
        for(; ri !== records.length; ++ri){
            Mval = 0;
            var rstr = records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
            var record = rstr.replace(/;;/g, "\x00").split(";").map(function(x) {
                return x.replace(/\u0000/g, ";");
            });
            var RT = record[0], val;
            if (rstr.length > 0) switch(RT){
                case "ID":
                    break; /* header */ 
                case "E":
                    break; /* EOF */ 
                case "B":
                    break; /* dimensions */ 
                case "O":
                    break; /* options? */ 
                case "W":
                    break; /* window? */ 
                case "P":
                    if (record[1].charAt(0) == "P") formats.push(rstr.slice(3).replace(/;;/g, ";"));
                    break;
                case "C":
                    var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1;
                    for(rj = 1; rj < record.length; ++rj)switch(record[rj].charAt(0)){
                        case "A":
                            break; // TODO: comment
                        case "X":
                            C = parseInt(record[rj].slice(1)) - 1;
                            C_seen_X = true;
                            break;
                        case "Y":
                            R = parseInt(record[rj].slice(1)) - 1;
                            if (!C_seen_X) C = 0;
                            for(j = arr.length; j <= R; ++j)arr[j] = [];
                            break;
                        case "K":
                            val = record[rj].slice(1);
                            if (val.charAt(0) === '"') val = val.slice(1, val.length - 1);
                            else if (val === "TRUE") val = true;
                            else if (val === "FALSE") val = false;
                            else if (!isNaN(fuzzynum(val))) {
                                val = fuzzynum(val);
                                if (next_cell_format !== null && fmt_is_date(next_cell_format)) val = numdate(val);
                            } else if (!isNaN(fuzzydate(val).getDate())) val = parseDate(val);
                            if (typeof $cptable !== "undefined" && typeof val == "string" && (opts || {}).type != "string" && (opts || {}).codepage) val = $cptable.utils.decode(opts.codepage, val);
                            C_seen_K = true;
                            break;
                        case "E":
                            C_seen_E = true;
                            var formula = rc_to_a1(record[rj].slice(1), {
                                r: R,
                                c: C
                            });
                            arr[R][C] = [
                                arr[R][C],
                                formula
                            ];
                            break;
                        case "S":
                            C_seen_S = true;
                            arr[R][C] = [
                                arr[R][C],
                                "S5S"
                            ];
                            break;
                        case "G":
                            break; // unknown
                        case "R":
                            _R = parseInt(record[rj].slice(1)) - 1;
                            break;
                        case "C":
                            _C = parseInt(record[rj].slice(1)) - 1;
                            break;
                        default:
                            if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
                    }
                    if (C_seen_K) {
                        if (arr[R][C] && arr[R][C].length == 2) arr[R][C][0] = val;
                        else arr[R][C] = val;
                        next_cell_format = null;
                    }
                    if (C_seen_S) {
                        if (C_seen_E) throw new Error("SYLK shared formula cannot have own formula");
                        var shrbase = _R > -1 && arr[_R][_C];
                        if (!shrbase || !shrbase[1]) throw new Error("SYLK shared formula cannot find base");
                        arr[R][C][1] = shift_formula_str(shrbase[1], {
                            r: R - _R,
                            c: C - _C
                        });
                    }
                    break;
                case "F":
                    var F_seen = 0;
                    for(rj = 1; rj < record.length; ++rj)switch(record[rj].charAt(0)){
                        case "X":
                            C = parseInt(record[rj].slice(1)) - 1;
                            ++F_seen;
                            break;
                        case "Y":
                            R = parseInt(record[rj].slice(1)) - 1; /*C = 0;*/ 
                            for(j = arr.length; j <= R; ++j)arr[j] = [];
                            break;
                        case "M":
                            Mval = parseInt(record[rj].slice(1)) / 20;
                            break;
                        case "F":
                            break; /* ??? */ 
                        case "G":
                            break; /* hide grid */ 
                        case "P":
                            next_cell_format = formats[parseInt(record[rj].slice(1))];
                            break;
                        case "S":
                            break; /* cell style */ 
                        case "D":
                            break; /* column */ 
                        case "N":
                            break; /* font */ 
                        case "W":
                            cw = record[rj].slice(1).split(" ");
                            for(j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j){
                                Mval = parseInt(cw[2], 10);
                                colinfo[j - 1] = Mval === 0 ? {
                                    hidden: true
                                } : {
                                    wch: Mval
                                };
                                process_col(colinfo[j - 1]);
                            }
                            break;
                        case "C":
                            /* default column format */ C = parseInt(record[rj].slice(1)) - 1;
                            if (!colinfo[C]) colinfo[C] = {};
                            break;
                        case "R":
                            /* row properties */ R = parseInt(record[rj].slice(1)) - 1;
                            if (!rowinfo[R]) rowinfo[R] = {};
                            if (Mval > 0) {
                                rowinfo[R].hpt = Mval;
                                rowinfo[R].hpx = pt2px(Mval);
                            } else if (Mval === 0) rowinfo[R].hidden = true;
                            break;
                        default:
                            if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
                    }
                    if (F_seen < 1) next_cell_format = null;
                    break;
                default:
                    if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
            }
        }
        if (rowinfo.length > 0) sht["!rows"] = rowinfo;
        if (colinfo.length > 0) sht["!cols"] = colinfo;
        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
        return [
            arr,
            sht
        ];
    }
    function sylk_to_sheet(d /*:RawData*/ , opts) /*:Worksheet*/ {
        var aoasht = sylk_to_aoa(d, opts);
        var aoa = aoasht[0], ws = aoasht[1];
        var o = aoa_to_sheet(aoa, opts);
        keys(ws).forEach(function(k) {
            o[k] = ws[k];
        });
        return o;
    }
    function sylk_to_workbook(d /*:RawData*/ , opts) /*:Workbook*/ {
        return sheet_to_workbook(sylk_to_sheet(d, opts), opts);
    }
    function write_ws_cell_sylk(cell /*:Cell*/ , ws /*:Worksheet*/ , R /*:number*/ , C /*:number*/  /*::, opts*/ ) /*:string*/ {
        var o = "C;Y" + (R + 1) + ";X" + (C + 1) + ";K";
        switch(cell.t){
            case "n":
                o += cell.v || 0;
                if (cell.f && !cell.F) o += ";E" + a1_to_rc(cell.f, {
                    r: R,
                    c: C
                });
                break;
            case "b":
                o += cell.v ? "TRUE" : "FALSE";
                break;
            case "e":
                o += cell.w || cell.v;
                break;
            case "d":
                o += '"' + (cell.w || cell.v) + '"';
                break;
            case "s":
                o += '"' + cell.v.replace(/"/g, "").replace(/;/g, ";;") + '"';
                break;
        }
        return o;
    }
    function write_ws_cols_sylk(out, cols) {
        cols.forEach(function(col, i) {
            var rec = "F;W" + (i + 1) + " " + (i + 1) + " ";
            if (col.hidden) rec += "0";
            else {
                if (typeof col.width == "number" && !col.wpx) col.wpx = width2px(col.width);
                if (typeof col.wpx == "number" && !col.wch) col.wch = px2char(col.wpx);
                if (typeof col.wch == "number") rec += Math.round(col.wch);
            }
            if (rec.charAt(rec.length - 1) != " ") out.push(rec);
        });
    }
    function write_ws_rows_sylk(out /*:Array<string>*/ , rows /*:Array<RowInfo>*/ ) {
        rows.forEach(function(row, i) {
            var rec = "F;";
            if (row.hidden) rec += "M0;";
            else if (row.hpt) rec += "M" + 20 * row.hpt + ";";
            else if (row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";";
            if (rec.length > 2) out.push(rec + "R" + (i + 1));
        });
    }
    function sheet_to_sylk(ws /*:Worksheet*/ , opts /*:?any*/ ) /*:string*/ {
        var preamble /*:Array<string>*/  = [
            "ID;PWXL;N;E"
        ], o /*:Array<string>*/  = [];
        var r = safe_decode_range(ws["!ref"]), cell /*:Cell*/ ;
        var dense = Array.isArray(ws);
        var RS = "\r\n";
        preamble.push("P;PGeneral");
        preamble.push("F;P0;DG0G8;M255");
        if (ws["!cols"]) write_ws_cols_sylk(preamble, ws["!cols"]);
        if (ws["!rows"]) write_ws_rows_sylk(preamble, ws["!rows"]);
        preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [
            r.s.c,
            r.s.r,
            r.e.c,
            r.e.r
        ].join(" "));
        for(var R = r.s.r; R <= r.e.r; ++R)for(var C = r.s.c; C <= r.e.c; ++C){
            var coord = encode_cell({
                r: R,
                c: C
            });
            cell = dense ? (ws[R] || [])[C] : ws[coord];
            if (!cell || cell.v == null && (!cell.f || cell.F)) continue;
            o.push(write_ws_cell_sylk(cell, ws, R, C, opts));
        }
        return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
    }
    return {
        to_workbook: sylk_to_workbook,
        to_sheet: sylk_to_sheet,
        from_sheet: sheet_to_sylk
    };
}();
var DIF = /*#__PURE__*/ function() {
    function dif_to_aoa(d /*:RawData*/ , opts) /*:AOA*/ {
        switch(opts.type){
            case "base64":
                return dif_to_aoa_str(Base64_decode(d), opts);
            case "binary":
                return dif_to_aoa_str(d, opts);
            case "buffer":
                return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
                return dif_to_aoa_str(cc2str(d), opts);
        }
        throw new Error("Unrecognized type " + opts.type);
    }
    function dif_to_aoa_str(str /*:string*/ , opts) /*:AOA*/ {
        var records = str.split("\n"), R = -1, C = -1, ri = 0, arr /*:AOA*/  = [];
        for(; ri !== records.length; ++ri){
            if (records[ri].trim() === "BOT") {
                arr[++R] = [];
                C = 0;
                continue;
            }
            if (R < 0) continue;
            var metadata = records[ri].trim().split(",");
            var type = metadata[0], value = metadata[1];
            ++ri;
            var data = records[ri] || "";
            while((data.match(/["]/g) || []).length & 1 && ri < records.length - 1)data += "\n" + records[++ri];
            data = data.trim();
            switch(+type){
                case -1:
                    if (data === "BOT") {
                        arr[++R] = [];
                        C = 0;
                        continue;
                    } else if (data !== "EOD") throw new Error("Unrecognized DIF special command " + data);
                    break;
                case 0:
                    if (data === "TRUE") arr[R][C] = true;
                    else if (data === "FALSE") arr[R][C] = false;
                    else if (!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);
                    else if (!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);
                    else arr[R][C] = value;
                    ++C;
                    break;
                case 1:
                    data = data.slice(1, data.length - 1);
                    data = data.replace(/""/g, '"');
                    if (DIF_XL && data && data.match(/^=".*"$/)) data = data.slice(2, -1);
                    arr[R][C++] = data !== "" ? data : null;
                    break;
            }
            if (data === "EOD") break;
        }
        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
        return arr;
    }
    function dif_to_sheet(str /*:string*/ , opts) /*:Worksheet*/ {
        return aoa_to_sheet(dif_to_aoa(str, opts), opts);
    }
    function dif_to_workbook(str /*:string*/ , opts) /*:Workbook*/ {
        return sheet_to_workbook(dif_to_sheet(str, opts), opts);
    }
    var sheet_to_dif = /*#__PURE__*/ function() {
        var push_field = function pf(o /*:Array<string>*/ , topic /*:string*/ , v /*:number*/ , n /*:number*/ , s /*:string*/ ) {
            o.push(topic);
            o.push(v + "," + n);
            o.push('"' + s.replace(/"/g, '""') + '"');
        };
        var push_value = function po(o /*:Array<string>*/ , type /*:number*/ , v /*:any*/ , s /*:string*/ ) {
            o.push(type + "," + v);
            o.push(type == 1 ? '"' + s.replace(/"/g, '""') + '"' : s);
        };
        return function sheet_to_dif(ws /*:Worksheet*/  /*::, opts:?any*/ ) /*:string*/ {
            var o /*:Array<string>*/  = [];
            var r = safe_decode_range(ws["!ref"]), cell /*:Cell*/ ;
            var dense = Array.isArray(ws);
            push_field(o, "TABLE", 0, 1, "sheetjs");
            push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1, "");
            push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1, "");
            push_field(o, "DATA", 0, 0, "");
            for(var R = r.s.r; R <= r.e.r; ++R){
                push_value(o, -1, 0, "BOT");
                for(var C = r.s.c; C <= r.e.c; ++C){
                    var coord = encode_cell({
                        r: R,
                        c: C
                    });
                    cell = dense ? (ws[R] || [])[C] : ws[coord];
                    if (!cell) {
                        push_value(o, 1, 0, "");
                        continue;
                    }
                    switch(cell.t){
                        case "n":
                            var val = DIF_XL ? cell.w : cell.v;
                            if (!val && cell.v != null) val = cell.v;
                            if (val == null) {
                                if (DIF_XL && cell.f && !cell.F) push_value(o, 1, 0, "=" + cell.f);
                                else push_value(o, 1, 0, "");
                            } else push_value(o, 0, val, "V");
                            break;
                        case "b":
                            push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
                            break;
                        case "s":
                            push_value(o, 1, 0, !DIF_XL || isNaN(cell.v) ? cell.v : '="' + cell.v + '"');
                            break;
                        case "d":
                            if (!cell.w) cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));
                            if (DIF_XL) push_value(o, 0, cell.w, "V");
                            else push_value(o, 1, 0, cell.w);
                            break;
                        default:
                            push_value(o, 1, 0, "");
                    }
                }
            }
            push_value(o, -1, 0, "EOD");
            var RS = "\r\n";
            var oo = o.join(RS);
            //while((oo.length & 0x7F) != 0) oo += "\0";
            return oo;
        };
    }();
    return {
        to_workbook: dif_to_workbook,
        to_sheet: dif_to_sheet,
        from_sheet: sheet_to_dif
    };
}();
var ETH = /*#__PURE__*/ function() {
    function decode(s /*:string*/ ) /*:string*/ {
        return s.replace(/\\b/g, "\\").replace(/\\c/g, ":").replace(/\\n/g, "\n");
    }
    function encode(s /*:string*/ ) /*:string*/ {
        return s.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g, "\\n");
    }
    function eth_to_aoa(str /*:string*/ , opts) /*:AOA*/ {
        var records = str.split("\n"), R = -1, C = -1, ri = 0, arr /*:AOA*/  = [];
        for(; ri !== records.length; ++ri){
            var record = records[ri].trim().split(":");
            if (record[0] !== "cell") continue;
            var addr = decode_cell(record[1]);
            if (arr.length <= addr.r) {
                for(R = arr.length; R <= addr.r; ++R)if (!arr[R]) arr[R] = [];
            }
            R = addr.r;
            C = addr.c;
            switch(record[2]){
                case "t":
                    arr[R][C] = decode(record[3]);
                    break;
                case "v":
                    arr[R][C] = +record[3];
                    break;
                case "vtf":
                    var _f = record[record.length - 1];
                /* falls through */ case "vtc":
                    switch(record[3]){
                        case "nl":
                            arr[R][C] = +record[4] ? true : false;
                            break;
                        default:
                            arr[R][C] = +record[4];
                            break;
                    }
                    if (record[2] == "vtf") arr[R][C] = [
                        arr[R][C],
                        _f
                    ];
            }
        }
        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
        return arr;
    }
    function eth_to_sheet(d /*:string*/ , opts) /*:Worksheet*/ {
        return aoa_to_sheet(eth_to_aoa(d, opts), opts);
    }
    function eth_to_workbook(d /*:string*/ , opts) /*:Workbook*/ {
        return sheet_to_workbook(eth_to_sheet(d, opts), opts);
    }
    var header = [
        "socialcalc:version:1.5",
        "MIME-Version: 1.0",
        "Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
    ].join("\n");
    var sep = [
        "--SocialCalcSpreadsheetControlSave",
        "Content-type: text/plain; charset=UTF-8"
    ].join("\n") + "\n";
    /* TODO: the other parts */ var meta = [
        "# SocialCalc Spreadsheet Control Save",
        "part:sheet"
    ].join("\n");
    var end = "--SocialCalcSpreadsheetControlSave--";
    function sheet_to_eth_data(ws /*:Worksheet*/ ) /*:string*/ {
        if (!ws || !ws["!ref"]) return "";
        var o /*:Array<string>*/  = [], oo /*:Array<string>*/  = [], cell, coord = "";
        var r = decode_range(ws["!ref"]);
        var dense = Array.isArray(ws);
        for(var R = r.s.r; R <= r.e.r; ++R)for(var C = r.s.c; C <= r.e.c; ++C){
            coord = encode_cell({
                r: R,
                c: C
            });
            cell = dense ? (ws[R] || [])[C] : ws[coord];
            if (!cell || cell.v == null || cell.t === "z") continue;
            oo = [
                "cell",
                coord,
                "t"
            ];
            switch(cell.t){
                case "s":
                case "str":
                    oo.push(encode(cell.v));
                    break;
                case "n":
                    if (!cell.f) {
                        oo[2] = "v";
                        oo[3] = cell.v;
                    } else {
                        oo[2] = "vtf";
                        oo[3] = "n";
                        oo[4] = cell.v;
                        oo[5] = encode(cell.f);
                    }
                    break;
                case "b":
                    oo[2] = "vt" + (cell.f ? "f" : "c");
                    oo[3] = "nl";
                    oo[4] = cell.v ? "1" : "0";
                    oo[5] = encode(cell.f || (cell.v ? "TRUE" : "FALSE"));
                    break;
                case "d":
                    var t = datenum(parseDate(cell.v));
                    oo[2] = "vtc";
                    oo[3] = "nd";
                    oo[4] = "" + t;
                    oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t);
                    break;
                case "e":
                    continue;
            }
            o.push(oo.join(":"));
        }
        o.push("sheet:c:" + (r.e.c - r.s.c + 1) + ":r:" + (r.e.r - r.s.r + 1) + ":tvf:1");
        o.push("valueformat:1:text-wiki");
        //o.push("copiedfrom:" + ws['!ref']); // clipboard only
        return o.join("\n");
    }
    function sheet_to_eth(ws /*:Worksheet*/  /*::, opts:?any*/ ) /*:string*/ {
        return [
            header,
            sep,
            meta,
            sep,
            sheet_to_eth_data(ws),
            end
        ].join("\n");
    // return ["version:1.5", sheet_to_eth_data(ws)].join("\n"); // clipboard form
    }
    return {
        to_workbook: eth_to_workbook,
        to_sheet: eth_to_sheet,
        from_sheet: sheet_to_eth
    };
}();
var PRN = /*#__PURE__*/ function() {
    function set_text_arr(data /*:string*/ , arr /*:AOA*/ , R /*:number*/ , C /*:number*/ , o /*:any*/ ) {
        if (o.raw) arr[R][C] = data;
        else if (data === "") ;
        else if (data === "TRUE") arr[R][C] = true;
        else if (data === "FALSE") arr[R][C] = false;
        else if (!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data);
        else if (!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data);
        else arr[R][C] = data;
    }
    function prn_to_aoa_str(f /*:string*/ , opts) /*:AOA*/ {
        var o = opts || {};
        var arr /*:AOA*/  = [];
        if (!f || f.length === 0) return arr;
        var lines = f.split(/[\r\n]/);
        var L = lines.length - 1;
        while(L >= 0 && lines[L].length === 0)--L;
        var start = 10, idx = 0;
        var R = 0;
        for(; R <= L; ++R){
            idx = lines[R].indexOf(" ");
            if (idx == -1) idx = lines[R].length;
            else idx++;
            start = Math.max(start, idx);
        }
        for(R = 0; R <= L; ++R){
            arr[R] = [];
            /* TODO: confirm that widths are always 10 */ var C = 0;
            set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);
            for(C = 1; C <= (lines[R].length - start) / 10 + 1; ++C)set_text_arr(lines[R].slice(start + (C - 1) * 10, start + C * 10).trim(), arr, R, C, o);
        }
        if (o.sheetRows) arr = arr.slice(0, o.sheetRows);
        return arr;
    }
    // List of accepted CSV separators
    var guess_seps = {
        /*::[*/ 0x2C: ",",
        /*::[*/ 0x09: "	",
        /*::[*/ 0x3B: ";",
        /*::[*/ 0x7C: "|"
    };
    // CSV separator weights to be used in case of equal numbers
    var guess_sep_weights = {
        /*::[*/ 0x2C: 3,
        /*::[*/ 0x09: 2,
        /*::[*/ 0x3B: 1,
        /*::[*/ 0x7C: 0
    };
    function guess_sep(str) {
        var cnt = {}, instr = false, end = 0, cc = 0;
        for(; end < str.length; ++end){
            if ((cc = str.charCodeAt(end)) == 0x22) instr = !instr;
            else if (!instr && cc in guess_seps) cnt[cc] = (cnt[cc] || 0) + 1;
        }
        cc = [];
        for(end in cnt)if (Object.prototype.hasOwnProperty.call(cnt, end)) cc.push([
            cnt[end],
            end
        ]);
        if (!cc.length) {
            cnt = guess_sep_weights;
            for(end in cnt)if (Object.prototype.hasOwnProperty.call(cnt, end)) cc.push([
                cnt[end],
                end
            ]);
        }
        cc.sort(function(a, b) {
            return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]];
        });
        return guess_seps[cc.pop()[1]] || 0x2C;
    }
    function dsv_to_sheet_str(str /*:string*/ , opts) /*:Worksheet*/ {
        var o = opts || {};
        var sep = "";
        if (DENSE != null && o.dense == null) o.dense = DENSE;
        var ws /*:Worksheet*/  = o.dense ? [] : {} /*:any*/ ;
        var range /*:Range*/  = {
            s: {
                c: 0,
                r: 0
            },
            e: {
                c: 0,
                r: 0
            }
        } /*:any*/ ;
        if (str.slice(0, 4) == "sep=") {
            // If the line ends in \r\n
            if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {
                sep = str.charAt(4);
                str = str.slice(7);
            } else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {
                sep = str.charAt(4);
                str = str.slice(6);
            } else sep = guess_sep(str.slice(0, 1024));
        } else if (o && o.FS) sep = o.FS;
        else sep = guess_sep(str.slice(0, 1024));
        var R = 0, C = 0, v = 0;
        var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc = 0, startcc = str.charCodeAt(0);
        str = str.replace(/\r\n/mg, "\n");
        var _re /*:?RegExp*/  = o.dateNF != null ? dateNF_regex(o.dateNF) : null;
        function finish_cell() {
            var s = str.slice(start, end);
            var cell = {} /*:any*/ ;
            if (s.charAt(0) == '"' && s.charAt(s.length - 1) == '"') s = s.slice(1, -1).replace(/""/g, '"');
            if (s.length === 0) cell.t = "z";
            else if (o.raw) {
                cell.t = "s";
                cell.v = s;
            } else if (s.trim().length === 0) {
                cell.t = "s";
                cell.v = s;
            } else if (s.charCodeAt(0) == 0x3D) {
                if (s.charCodeAt(1) == 0x22 && s.charCodeAt(s.length - 1) == 0x22) {
                    cell.t = "s";
                    cell.v = s.slice(2, -1).replace(/""/g, '"');
                } else if (fuzzyfmla(s)) {
                    cell.t = "n";
                    cell.f = s.slice(1);
                } else {
                    cell.t = "s";
                    cell.v = s;
                }
            } else if (s == "TRUE") {
                cell.t = "b";
                cell.v = true;
            } else if (s == "FALSE") {
                cell.t = "b";
                cell.v = false;
            } else if (!isNaN(v = fuzzynum(s))) {
                cell.t = "n";
                if (o.cellText !== false) cell.w = s;
                cell.v = v;
            } else if (!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {
                cell.z = o.dateNF || table_fmt[14];
                var k = 0;
                if (_re && s.match(_re)) {
                    s = dateNF_fix(s, o.dateNF, s.match(_re) || []);
                    k = 1;
                }
                if (o.cellDates) {
                    cell.t = "d";
                    cell.v = parseDate(s, k);
                } else {
                    cell.t = "n";
                    cell.v = datenum(parseDate(s, k));
                }
                if (o.cellText !== false) cell.w = SSF_format(cell.z, cell.v instanceof Date ? datenum(cell.v) : cell.v);
                if (!o.cellNF) delete cell.z;
            } else {
                cell.t = "s";
                cell.v = s;
            }
            if (cell.t == "z") ;
            else if (o.dense) {
                if (!ws[R]) ws[R] = [];
                ws[R][C] = cell;
            } else ws[encode_cell({
                c: C,
                r: R
            })] = cell;
            start = end + 1;
            startcc = str.charCodeAt(start);
            if (range.e.c < C) range.e.c = C;
            if (range.e.r < R) range.e.r = R;
            if (cc == sepcc) ++C;
            else {
                C = 0;
                ++R;
                if (o.sheetRows && o.sheetRows <= R) return true;
            }
        }
        outer: for(; end < str.length; ++end)switch(cc = str.charCodeAt(end)){
            case 0x22:
                if (startcc === 0x22) instr = !instr;
                break;
            case sepcc:
            case 0x0a:
            case 0x0d:
                if (!instr && finish_cell()) break outer;
                break;
            default:
                break;
        }
        if (end - start > 0) finish_cell();
        ws["!ref"] = encode_range(range);
        return ws;
    }
    function prn_to_sheet_str(str /*:string*/ , opts) /*:Worksheet*/ {
        if (!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);
        if (opts.FS) return dsv_to_sheet_str(str, opts);
        if (str.slice(0, 4) == "sep=") return dsv_to_sheet_str(str, opts);
        if (str.indexOf("	") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0) return dsv_to_sheet_str(str, opts);
        return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
    }
    function prn_to_sheet(d /*:RawData*/ , opts) /*:Worksheet*/ {
        var str = "", bytes = opts.type == "string" ? [
            0,
            0,
            0,
            0
        ] : firstbyte(d, opts);
        switch(opts.type){
            case "base64":
                str = Base64_decode(d);
                break;
            case "binary":
                str = d;
                break;
            case "buffer":
                if (opts.codepage == 65001) str = d.toString("utf8"); // TODO: test if buf
                else if (opts.codepage && typeof $cptable !== "undefined") str = $cptable.utils.decode(opts.codepage, d);
                else str = has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d);
                break;
            case "array":
                str = cc2str(d);
                break;
            case "string":
                str = d;
                break;
            default:
                throw new Error("Unrecognized type " + opts.type);
        }
        if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str.slice(3));
        else if (opts.type != "string" && opts.type != "buffer" && opts.codepage == 65001) str = utf8read(str);
        else if (opts.type == "binary" && typeof $cptable !== "undefined" && opts.codepage) str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591, str));
        if (str.slice(0, 19) == "socialcalc:version:") return ETH.to_sheet(opts.type == "string" ? str : utf8read(str), opts);
        return prn_to_sheet_str(str, opts);
    }
    function prn_to_workbook(d /*:RawData*/ , opts) /*:Workbook*/ {
        return sheet_to_workbook(prn_to_sheet(d, opts), opts);
    }
    function sheet_to_prn(ws /*:Worksheet*/  /*::, opts:?any*/ ) /*:string*/ {
        var o /*:Array<string>*/  = [];
        var r = safe_decode_range(ws["!ref"]), cell /*:Cell*/ ;
        var dense = Array.isArray(ws);
        for(var R = r.s.r; R <= r.e.r; ++R){
            var oo /*:Array<string>*/  = [];
            for(var C = r.s.c; C <= r.e.c; ++C){
                var coord = encode_cell({
                    r: R,
                    c: C
                });
                cell = dense ? (ws[R] || [])[C] : ws[coord];
                if (!cell || cell.v == null) {
                    oo.push("          ");
                    continue;
                }
                var w = (cell.w || (format_cell(cell), cell.w) || "").slice(0, 10);
                while(w.length < 10)w += " ";
                oo.push(w + (C === 0 ? " " : ""));
            }
            o.push(oo.join(""));
        }
        return o.join("\n");
    }
    return {
        to_workbook: prn_to_workbook,
        to_sheet: prn_to_sheet,
        from_sheet: sheet_to_prn
    };
}();
/* Excel defaults to SYLK but warns if data is not valid */ function read_wb_ID(d, opts) {
    var o = opts || {}, OLD_WTF = !!o.WTF;
    o.WTF = true;
    try {
        var out = SYLK.to_workbook(d, o);
        o.WTF = OLD_WTF;
        return out;
    } catch (e) {
        o.WTF = OLD_WTF;
        if (!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;
        return PRN.to_workbook(d, opts);
    }
}
var WK_ = /*#__PURE__*/ function() {
    function lotushopper(data, cb /*:RecordHopperCB*/ , opts /*:any*/ ) {
        if (!data) return;
        prep_blob(data, data.l || 0);
        var Enum = opts.Enum || WK1Enum;
        while(data.l < data.length){
            var RT = data.read_shift(2);
            var R = Enum[RT] || Enum[0xFFFF];
            var length = data.read_shift(2);
            var tgt = data.l + length;
            var d = R.f && R.f(data, length, opts);
            data.l = tgt;
            if (cb(d, R, RT)) return;
        }
    }
    function lotus_to_workbook(d /*:RawData*/ , opts) {
        switch(opts.type){
            case "base64":
                return lotus_to_workbook_buf(s2a(Base64_decode(d)), opts);
            case "binary":
                return lotus_to_workbook_buf(s2a(d), opts);
            case "buffer":
            case "array":
                return lotus_to_workbook_buf(d, opts);
        }
        throw "Unsupported type " + opts.type;
    }
    function lotus_to_workbook_buf(d, opts) /*:Workbook*/ {
        if (!d) return d;
        var o = opts || {};
        if (DENSE != null && o.dense == null) o.dense = DENSE;
        var s /*:Worksheet*/  = o.dense ? [] : {}, n = "Sheet1", next_n = "", sidx = 0;
        var sheets = {}, snames = [], realnames = [];
        var refguess = {
            s: {
                r: 0,
                c: 0
            },
            e: {
                r: 0,
                c: 0
            }
        };
        var sheetRows = o.sheetRows || 0;
        if (d[2] == 0x00) {
            if (d[3] == 0x08 || d[3] == 0x09) {
                if (d.length >= 16 && d[14] == 0x05 && d[15] === 0x6c) throw new Error("Unsupported Works 3 for Mac file");
            }
        }
        if (d[2] == 0x02) {
            o.Enum = WK1Enum;
            lotushopper(d, function(val, R, RT) {
                switch(RT){
                    case 0x00:
                        /* BOF */ o.vers = val;
                        if (val >= 0x1000) o.qpro = true;
                        break;
                    case 0x06:
                        refguess = val;
                        break; /* RANGE */ 
                    case 0xCC:
                        if (val) next_n = val;
                        break; /* SHEETNAMECS */ 
                    case 0xDE:
                        next_n = val;
                        break; /* SHEETNAMELP */ 
                    case 0x0F:
                    /* LABEL */ case 0x33:
                        /* STRING */ if (!o.qpro) val[1].v = val[1].v.slice(1);
                    /* falls through */ case 0x0D:
                    /* INTEGER */ case 0x0E:
                    /* NUMBER */ case 0x10:
                        /* FORMULA */ /* TODO: actual translation of the format code */ if (RT == 0x0E && (val[2] & 0x70) == 0x70 && (val[2] & 0x0F) > 1 && (val[2] & 0x0F) < 15) {
                            val[1].z = o.dateNF || table_fmt[14];
                            if (o.cellDates) {
                                val[1].t = "d";
                                val[1].v = numdate(val[1].v);
                            }
                        }
                        if (o.qpro) {
                            if (val[3] > sidx) {
                                s["!ref"] = encode_range(refguess);
                                sheets[n] = s;
                                snames.push(n);
                                s = o.dense ? [] : {};
                                refguess = {
                                    s: {
                                        r: 0,
                                        c: 0
                                    },
                                    e: {
                                        r: 0,
                                        c: 0
                                    }
                                };
                                sidx = val[3];
                                n = next_n || "Sheet" + (sidx + 1);
                                next_n = "";
                            }
                        }
                        var tmpcell = o.dense ? (s[val[0].r] || [])[val[0].c] : s[encode_cell(val[0])];
                        if (tmpcell) {
                            tmpcell.t = val[1].t;
                            tmpcell.v = val[1].v;
                            if (val[1].z != null) tmpcell.z = val[1].z;
                            if (val[1].f != null) tmpcell.f = val[1].f;
                            break;
                        }
                        if (o.dense) {
                            if (!s[val[0].r]) s[val[0].r] = [];
                            s[val[0].r][val[0].c] = val[1];
                        } else s[encode_cell(val[0])] = val[1];
                        break;
                    default:
                }
            }, o);
        } else if (d[2] == 0x1A || d[2] == 0x0E) {
            o.Enum = WK3Enum;
            if (d[2] == 0x0E) {
                o.qpro = true;
                d.l = 0;
            }
            lotushopper(d, function(val, R, RT) {
                switch(RT){
                    case 0xCC:
                        n = val;
                        break; /* SHEETNAMECS */ 
                    case 0x16:
                        /* LABEL16 */ val[1].v = val[1].v.slice(1);
                    /* falls through */ case 0x17:
                    /* NUMBER17 */ case 0x18:
                    /* NUMBER18 */ case 0x19:
                    /* FORMULA19 */ case 0x25:
                    /* NUMBER25 */ case 0x27:
                    /* NUMBER27 */ case 0x28:
                        /* FORMULA28 */ if (val[3] > sidx) {
                            s["!ref"] = encode_range(refguess);
                            sheets[n] = s;
                            snames.push(n);
                            s = o.dense ? [] : {};
                            refguess = {
                                s: {
                                    r: 0,
                                    c: 0
                                },
                                e: {
                                    r: 0,
                                    c: 0
                                }
                            };
                            sidx = val[3];
                            n = "Sheet" + (sidx + 1);
                        }
                        if (sheetRows > 0 && val[0].r >= sheetRows) break;
                        if (o.dense) {
                            if (!s[val[0].r]) s[val[0].r] = [];
                            s[val[0].r][val[0].c] = val[1];
                        } else s[encode_cell(val[0])] = val[1];
                        if (refguess.e.c < val[0].c) refguess.e.c = val[0].c;
                        if (refguess.e.r < val[0].r) refguess.e.r = val[0].r;
                        break;
                    case 0x1B:
                        /* XFORMAT */ if (val[0x36b0]) realnames[val[0x36b0][0]] = val[0x36b0][1];
                        break;
                    case 0x0601:
                        /* SHEETINFOQP */ realnames[val[0]] = val[1];
                        if (val[0] == sidx) n = val[1];
                        break;
                    default:
                        break;
                }
            }, o);
        } else throw new Error("Unrecognized LOTUS BOF " + d[2]);
        s["!ref"] = encode_range(refguess);
        sheets[next_n || n] = s;
        snames.push(next_n || n);
        if (!realnames.length) return {
            SheetNames: snames,
            Sheets: sheets
        };
        var osheets = {}, rnames = [];
        /* TODO: verify no collisions */ for(var i = 0; i < realnames.length; ++i)if (sheets[snames[i]]) {
            rnames.push(realnames[i] || snames[i]);
            osheets[realnames[i]] = sheets[realnames[i]] || sheets[snames[i]];
        } else {
            rnames.push(realnames[i]);
            osheets[realnames[i]] = {
                "!ref": "A1"
            };
        }
        return {
            SheetNames: rnames,
            Sheets: osheets
        };
    }
    function sheet_to_wk1(ws /*:Worksheet*/ , opts /*:WriteOpts*/ ) {
        var o = opts || {};
        if (+o.codepage >= 0) set_cp(+o.codepage);
        if (o.type == "string") throw new Error("Cannot write WK1 to JS string");
        var ba = buf_array();
        var range = safe_decode_range(ws["!ref"]);
        var dense = Array.isArray(ws);
        var cols = [];
        write_biff_rec(ba, 0x00, write_BOF_WK1(0x0406));
        write_biff_rec(ba, 0x06, write_RANGE(range));
        var max_R = Math.min(range.e.r, 8191);
        for(var R = range.s.r; R <= max_R; ++R){
            var rr = encode_row(R);
            for(var C = range.s.c; C <= range.e.c; ++C){
                if (R === range.s.r) cols[C] = encode_col(C);
                var ref = cols[C] + rr;
                var cell = dense ? (ws[R] || [])[C] : ws[ref];
                if (!cell || cell.t == "z") continue;
                /* TODO: formula records */ if (cell.t == "n") {
                    if ((cell.v | 0) == cell.v && cell.v >= -32768 && cell.v <= 32767) write_biff_rec(ba, 0x0d, write_INTEGER(R, C, cell.v));
                    else write_biff_rec(ba, 0x0e, write_NUMBER(R, C, cell.v));
                } else {
                    var str = format_cell(cell);
                    write_biff_rec(ba, 0x0F, write_LABEL(R, C, str.slice(0, 239)));
                }
            }
        }
        write_biff_rec(ba, 0x01);
        return ba.end();
    }
    function book_to_wk3(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {
        var o = opts || {};
        if (+o.codepage >= 0) set_cp(+o.codepage);
        if (o.type == "string") throw new Error("Cannot write WK3 to JS string");
        var ba = buf_array();
        write_biff_rec(ba, 0x00, write_BOF_WK3(wb));
        for(var i = 0, cnt = 0; i < wb.SheetNames.length; ++i)if ((wb.Sheets[wb.SheetNames[i]] || {})["!ref"]) write_biff_rec(ba, 0x1b, write_XFORMAT_SHEETNAME(wb.SheetNames[i], cnt++));
        var wsidx = 0;
        for(i = 0; i < wb.SheetNames.length; ++i){
            var ws = wb.Sheets[wb.SheetNames[i]];
            if (!ws || !ws["!ref"]) continue;
            var range = safe_decode_range(ws["!ref"]);
            var dense = Array.isArray(ws);
            var cols = [];
            var max_R = Math.min(range.e.r, 8191);
            for(var R = range.s.r; R <= max_R; ++R){
                var rr = encode_row(R);
                for(var C = range.s.c; C <= range.e.c; ++C){
                    if (R === range.s.r) cols[C] = encode_col(C);
                    var ref = cols[C] + rr;
                    var cell = dense ? (ws[R] || [])[C] : ws[ref];
                    if (!cell || cell.t == "z") continue;
                    /* TODO: FORMULA19 NUMBER18 records */ if (cell.t == "n") write_biff_rec(ba, 0x17, write_NUMBER_17(R, C, wsidx, cell.v));
                    else {
                        var str = format_cell(cell);
                        /* TODO: max len? */ write_biff_rec(ba, 0x16, write_LABEL_16(R, C, wsidx, str.slice(0, 239)));
                    }
                }
            }
            ++wsidx;
        }
        write_biff_rec(ba, 0x01);
        return ba.end();
    }
    function write_BOF_WK1(v /*:number*/ ) {
        var out = new_buf(2);
        out.write_shift(2, v);
        return out;
    }
    function write_BOF_WK3(wb /*:Workbook*/ ) {
        var out = new_buf(26);
        out.write_shift(2, 0x1000);
        out.write_shift(2, 0x0004);
        out.write_shift(4, 0x0000);
        var rows = 0, cols = 0, wscnt = 0;
        for(var i = 0; i < wb.SheetNames.length; ++i){
            var name = wb.SheetNames[i];
            var ws = wb.Sheets[name];
            if (!ws || !ws["!ref"]) continue;
            ++wscnt;
            var range = decode_range(ws["!ref"]);
            if (rows < range.e.r) rows = range.e.r;
            if (cols < range.e.c) cols = range.e.c;
        }
        if (rows > 8191) rows = 8191;
        out.write_shift(2, rows);
        out.write_shift(1, wscnt);
        out.write_shift(1, cols);
        out.write_shift(2, 0x00);
        out.write_shift(2, 0x00);
        out.write_shift(1, 0x01);
        out.write_shift(1, 0x02);
        out.write_shift(4, 0);
        out.write_shift(4, 0);
        return out;
    }
    function parse_RANGE(blob, length, opts) {
        var o = {
            s: {
                c: 0,
                r: 0
            },
            e: {
                c: 0,
                r: 0
            }
        };
        if (length == 8 && opts.qpro) {
            o.s.c = blob.read_shift(1);
            blob.l++;
            o.s.r = blob.read_shift(2);
            o.e.c = blob.read_shift(1);
            blob.l++;
            o.e.r = blob.read_shift(2);
            return o;
        }
        o.s.c = blob.read_shift(2);
        o.s.r = blob.read_shift(2);
        if (length == 12 && opts.qpro) blob.l += 2;
        o.e.c = blob.read_shift(2);
        o.e.r = blob.read_shift(2);
        if (length == 12 && opts.qpro) blob.l += 2;
        if (o.s.c == 0xFFFF) o.s.c = o.e.c = o.s.r = o.e.r = 0;
        return o;
    }
    function write_RANGE(range) {
        var out = new_buf(8);
        out.write_shift(2, range.s.c);
        out.write_shift(2, range.s.r);
        out.write_shift(2, range.e.c);
        out.write_shift(2, range.e.r);
        return out;
    }
    function parse_cell(blob, length, opts) {
        var o = [
            {
                c: 0,
                r: 0
            },
            {
                t: "n",
                v: 0
            },
            0,
            0
        ];
        if (opts.qpro && opts.vers != 0x5120) {
            o[0].c = blob.read_shift(1);
            o[3] = blob.read_shift(1);
            o[0].r = blob.read_shift(2);
            blob.l += 2;
        } else {
            o[2] = blob.read_shift(1);
            o[0].c = blob.read_shift(2);
            o[0].r = blob.read_shift(2);
        }
        return o;
    }
    function parse_LABEL(blob, length, opts) {
        var tgt = blob.l + length;
        var o = parse_cell(blob, length, opts);
        o[1].t = "s";
        if (opts.vers == 0x5120) {
            blob.l++;
            var len = blob.read_shift(1);
            o[1].v = blob.read_shift(len, "utf8");
            return o;
        }
        if (opts.qpro) blob.l++;
        o[1].v = blob.read_shift(tgt - blob.l, "cstr");
        return o;
    }
    function write_LABEL(R, C, s) {
        /* TODO: encoding */ var o = new_buf(7 + s.length);
        o.write_shift(1, 0xFF);
        o.write_shift(2, C);
        o.write_shift(2, R);
        o.write_shift(1, 0x27); // ??
        for(var i = 0; i < o.length; ++i){
            var cc = s.charCodeAt(i);
            o.write_shift(1, cc >= 0x80 ? 0x5F : cc);
        }
        o.write_shift(1, 0);
        return o;
    }
    function parse_INTEGER(blob, length, opts) {
        var o = parse_cell(blob, length, opts);
        o[1].v = blob.read_shift(2, "i");
        return o;
    }
    function write_INTEGER(R, C, v) {
        var o = new_buf(7);
        o.write_shift(1, 0xFF);
        o.write_shift(2, C);
        o.write_shift(2, R);
        o.write_shift(2, v, "i");
        return o;
    }
    function parse_NUMBER(blob, length, opts) {
        var o = parse_cell(blob, length, opts);
        o[1].v = blob.read_shift(8, "f");
        return o;
    }
    function write_NUMBER(R, C, v) {
        var o = new_buf(13);
        o.write_shift(1, 0xFF);
        o.write_shift(2, C);
        o.write_shift(2, R);
        o.write_shift(8, v, "f");
        return o;
    }
    function parse_FORMULA(blob, length, opts) {
        var tgt = blob.l + length;
        var o = parse_cell(blob, length, opts);
        /* TODO: formula */ o[1].v = blob.read_shift(8, "f");
        if (opts.qpro) blob.l = tgt;
        else {
            var flen = blob.read_shift(2);
            wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o);
            blob.l += flen;
        }
        return o;
    }
    function wk1_parse_rc(B, V, col) {
        var rel = V & 0x8000;
        V &= -32769;
        V = (rel ? B : 0) + (V >= 0x2000 ? V - 0x4000 : V);
        return (rel ? "" : "$") + (col ? encode_col(V) : encode_row(V));
    }
    /* var oprec = [
		8, 8, 8, 8, 8, 8, 8, 8, 6, 4, 4, 5, 5, 7, 3, 3,
		3, 3, 3, 3, 1, 1, 2, 6, 8, 8, 8, 8, 8, 8, 8, 8
	]; */ /* TODO: flesh out */ var FuncTab = {
        0x33: [
            "FALSE",
            0
        ],
        0x34: [
            "TRUE",
            0
        ],
        0x46: [
            "LEN",
            1
        ],
        0x50: [
            "SUM",
            69
        ],
        0x51: [
            "AVERAGEA",
            69
        ],
        0x52: [
            "COUNTA",
            69
        ],
        0x53: [
            "MINA",
            69
        ],
        0x54: [
            "MAXA",
            69
        ],
        0x6F: [
            "T",
            1
        ]
    };
    var BinOpTab = [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "+",
        "-",
        "*",
        "/",
        "^",
        "=",
        "<>",
        "<=",
        ">=",
        "<",
        ">",
        "",
        "",
        "",
        "",
        "&",
        "",
        "",
        "",
        "",
        "",
        "",
        "" // eslint-disable-line no-mixed-spaces-and-tabs
    ];
    function wk1_fmla_to_csf(blob, o) {
        prep_blob(blob, 0);
        var out = [], argc = 0, R = "", C = "", argL = "", argR = "";
        while(blob.l < blob.length){
            var cc = blob[blob.l++];
            switch(cc){
                case 0x00:
                    out.push(blob.read_shift(8, "f"));
                    break;
                case 0x01:
                    C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                    R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                    out.push(C + R);
                    break;
                case 0x02:
                    var c = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                    var r = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                    C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                    R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                    out.push(c + r + ":" + C + R);
                    break;
                case 0x03:
                    if (blob.l < blob.length) {
                        console.error("WK1 premature formula end");
                        return;
                    }
                    break;
                case 0x04:
                    out.push("(" + out.pop() + ")");
                    break;
                case 0x05:
                    out.push(blob.read_shift(2));
                    break;
                case 0x06:
                    /* TODO: text encoding */ var Z = "";
                    while(cc = blob[blob.l++])Z += String.fromCharCode(cc);
                    out.push('"' + Z.replace(/"/g, '""') + '"');
                    break;
                case 0x08:
                    out.push("-" + out.pop());
                    break;
                case 0x17:
                    out.push("+" + out.pop());
                    break;
                case 0x16:
                    out.push("NOT(" + out.pop() + ")");
                    break;
                case 0x14:
                case 0x15:
                    argR = out.pop();
                    argL = out.pop();
                    out.push([
                        "AND",
                        "OR"
                    ][cc - 0x14] + "(" + argL + "," + argR + ")");
                    break;
                default:
                    if (cc < 0x20 && BinOpTab[cc]) {
                        argR = out.pop();
                        argL = out.pop();
                        out.push(argL + BinOpTab[cc] + argR);
                    } else if (FuncTab[cc]) {
                        argc = FuncTab[cc][1];
                        if (argc == 69) argc = blob[blob.l++];
                        if (argc > out.length) {
                            console.error("WK1 bad formula parse 0x" + cc.toString(16) + ":|" + out.join("|") + "|");
                            return;
                        }
                        var args = out.slice(-argc);
                        out.length -= argc;
                        out.push(FuncTab[cc][0] + "(" + args.join(",") + ")");
                    } else if (cc <= 0x07) return console.error("WK1 invalid opcode " + cc.toString(16));
                    else if (cc <= 0x18) return console.error("WK1 unsupported op " + cc.toString(16));
                    else if (cc <= 0x1E) return console.error("WK1 invalid opcode " + cc.toString(16));
                    else if (cc <= 0x73) return console.error("WK1 unsupported function opcode " + cc.toString(16));
                    else return console.error("WK1 unrecognized opcode " + cc.toString(16));
            }
        }
        if (out.length == 1) o[1].f = "" + out[0];
        else console.error("WK1 bad formula parse |" + out.join("|") + "|");
    }
    function parse_cell_3(blob /*::, length*/ ) {
        var o = [
            {
                c: 0,
                r: 0
            },
            {
                t: "n",
                v: 0
            },
            0
        ];
        o[0].r = blob.read_shift(2);
        o[3] = blob[blob.l++];
        o[0].c = blob[blob.l++];
        return o;
    }
    function parse_LABEL_16(blob, length) {
        var o = parse_cell_3(blob, length);
        o[1].t = "s";
        o[1].v = blob.read_shift(length - 4, "cstr");
        return o;
    }
    function write_LABEL_16(R, C, wsidx, s) {
        /* TODO: encoding */ var o = new_buf(6 + s.length);
        o.write_shift(2, R);
        o.write_shift(1, wsidx);
        o.write_shift(1, C);
        o.write_shift(1, 0x27);
        for(var i = 0; i < s.length; ++i){
            var cc = s.charCodeAt(i);
            o.write_shift(1, cc >= 0x80 ? 0x5F : cc);
        }
        o.write_shift(1, 0);
        return o;
    }
    function parse_NUMBER_18(blob, length) {
        var o = parse_cell_3(blob, length);
        o[1].v = blob.read_shift(2);
        var v = o[1].v >> 1;
        if (o[1].v & 0x1) switch(v & 0x07){
            case 0:
                v = (v >> 3) * 5000;
                break;
            case 1:
                v = (v >> 3) * 500;
                break;
            case 2:
                v = (v >> 3) / 20;
                break;
            case 3:
                v = (v >> 3) / 200;
                break;
            case 4:
                v = (v >> 3) / 2000;
                break;
            case 5:
                v = (v >> 3) / 20000;
                break;
            case 6:
                v = (v >> 3) / 16;
                break;
            case 7:
                v = (v >> 3) / 64;
                break;
        }
        o[1].v = v;
        return o;
    }
    function parse_NUMBER_17(blob, length) {
        var o = parse_cell_3(blob, length);
        var v1 = blob.read_shift(4);
        var v2 = blob.read_shift(4);
        var e = blob.read_shift(2);
        if (e == 0xFFFF) {
            if (v1 === 0 && v2 === 0xC0000000) {
                o[1].t = "e";
                o[1].v = 0x0F;
            } else if (v1 === 0 && v2 === 0xD0000000) {
                o[1].t = "e";
                o[1].v = 0x2A;
            } else o[1].v = 0;
            return o;
        }
        var s = e & 0x8000;
        e = (e & 0x7FFF) - 16446;
        o[1].v = (1 - s * 2) * (v2 * Math.pow(2, e + 32) + v1 * Math.pow(2, e));
        return o;
    }
    function write_NUMBER_17(R, C, wsidx, v) {
        var o = new_buf(14);
        o.write_shift(2, R);
        o.write_shift(1, wsidx);
        o.write_shift(1, C);
        if (v == 0) {
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(2, 0xFFFF);
            return o;
        }
        var s = 0, e = 0, v1 = 0, v2 = 0;
        if (v < 0) {
            s = 1;
            v = -v;
        }
        e = Math.log2(v) | 0;
        v /= Math.pow(2, e - 31);
        v2 = v >>> 0;
        if ((v2 & 0x80000000) == 0) {
            v /= 2;
            ++e;
            v2 = v >>> 0;
        }
        v -= v2;
        v2 |= 0x80000000;
        v2 >>>= 0;
        v *= Math.pow(2, 32);
        v1 = v >>> 0;
        o.write_shift(4, v1);
        o.write_shift(4, v2);
        e += 0x3FFF + (s ? 0x8000 : 0);
        o.write_shift(2, e);
        return o;
    }
    function parse_FORMULA_19(blob, length) {
        var o = parse_NUMBER_17(blob, 14);
        blob.l += length - 14; /* TODO: WK3 formula */ 
        return o;
    }
    function parse_NUMBER_25(blob, length) {
        var o = parse_cell_3(blob, length);
        var v1 = blob.read_shift(4);
        o[1].v = v1 >> 6;
        return o;
    }
    function parse_NUMBER_27(blob, length) {
        var o = parse_cell_3(blob, length);
        var v1 = blob.read_shift(8, "f");
        o[1].v = v1;
        return o;
    }
    function parse_FORMULA_28(blob, length) {
        var o = parse_NUMBER_27(blob, 14);
        blob.l += length - 10; /* TODO: formula */ 
        return o;
    }
    function parse_SHEETNAMECS(blob, length) {
        return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, "cstr") : "";
    }
    function parse_SHEETNAMELP(blob, length) {
        var len = blob[blob.l++];
        if (len > length - 1) len = length - 1;
        var o = "";
        while(o.length < len)o += String.fromCharCode(blob[blob.l++]);
        return o;
    }
    function parse_SHEETINFOQP(blob, length, opts) {
        if (!opts.qpro || length < 21) return;
        var id = blob.read_shift(1);
        blob.l += 17;
        blob.l += 1; //var len = blob.read_shift(1);
        blob.l += 2;
        var nm = blob.read_shift(length - 21, "cstr");
        return [
            id,
            nm
        ];
    }
    function parse_XFORMAT(blob, length) {
        var o = {}, tgt = blob.l + length;
        while(blob.l < tgt){
            var dt = blob.read_shift(2);
            if (dt == 0x36b0) {
                o[dt] = [
                    0,
                    ""
                ];
                o[dt][0] = blob.read_shift(2);
                while(blob[blob.l]){
                    o[dt][1] += String.fromCharCode(blob[blob.l]);
                    blob.l++;
                }
                blob.l++;
            }
        // TODO: 0x3a99 ??
        }
        return o;
    }
    function write_XFORMAT_SHEETNAME(name, wsidx) {
        var out = new_buf(5 + name.length);
        out.write_shift(2, 0x36b0);
        out.write_shift(2, wsidx);
        for(var i = 0; i < name.length; ++i){
            var cc = name.charCodeAt(i);
            out[out.l++] = cc > 0x7F ? 0x5F : cc;
        }
        out[out.l++] = 0;
        return out;
    }
    var WK1Enum = {
        /*::[*/ 0x0000: {
            n: "BOF",
            f: parseuint16
        },
        /*::[*/ 0x0001: {
            n: "EOF"
        },
        /*::[*/ 0x0002: {
            n: "CALCMODE"
        },
        /*::[*/ 0x0003: {
            n: "CALCORDER"
        },
        /*::[*/ 0x0004: {
            n: "SPLIT"
        },
        /*::[*/ 0x0005: {
            n: "SYNC"
        },
        /*::[*/ 0x0006: {
            n: "RANGE",
            f: parse_RANGE
        },
        /*::[*/ 0x0007: {
            n: "WINDOW1"
        },
        /*::[*/ 0x0008: {
            n: "COLW1"
        },
        /*::[*/ 0x0009: {
            n: "WINTWO"
        },
        /*::[*/ 0x000A: {
            n: "COLW2"
        },
        /*::[*/ 0x000B: {
            n: "NAME"
        },
        /*::[*/ 0x000C: {
            n: "BLANK"
        },
        /*::[*/ 0x000D: {
            n: "INTEGER",
            f: parse_INTEGER
        },
        /*::[*/ 0x000E: {
            n: "NUMBER",
            f: parse_NUMBER
        },
        /*::[*/ 0x000F: {
            n: "LABEL",
            f: parse_LABEL
        },
        /*::[*/ 0x0010: {
            n: "FORMULA",
            f: parse_FORMULA
        },
        /*::[*/ 0x0018: {
            n: "TABLE"
        },
        /*::[*/ 0x0019: {
            n: "ORANGE"
        },
        /*::[*/ 0x001A: {
            n: "PRANGE"
        },
        /*::[*/ 0x001B: {
            n: "SRANGE"
        },
        /*::[*/ 0x001C: {
            n: "FRANGE"
        },
        /*::[*/ 0x001D: {
            n: "KRANGE1"
        },
        /*::[*/ 0x0020: {
            n: "HRANGE"
        },
        /*::[*/ 0x0023: {
            n: "KRANGE2"
        },
        /*::[*/ 0x0024: {
            n: "PROTEC"
        },
        /*::[*/ 0x0025: {
            n: "FOOTER"
        },
        /*::[*/ 0x0026: {
            n: "HEADER"
        },
        /*::[*/ 0x0027: {
            n: "SETUP"
        },
        /*::[*/ 0x0028: {
            n: "MARGINS"
        },
        /*::[*/ 0x0029: {
            n: "LABELFMT"
        },
        /*::[*/ 0x002A: {
            n: "TITLES"
        },
        /*::[*/ 0x002B: {
            n: "SHEETJS"
        },
        /*::[*/ 0x002D: {
            n: "GRAPH"
        },
        /*::[*/ 0x002E: {
            n: "NGRAPH"
        },
        /*::[*/ 0x002F: {
            n: "CALCCOUNT"
        },
        /*::[*/ 0x0030: {
            n: "UNFORMATTED"
        },
        /*::[*/ 0x0031: {
            n: "CURSORW12"
        },
        /*::[*/ 0x0032: {
            n: "WINDOW"
        },
        /*::[*/ 0x0033: {
            n: "STRING",
            f: parse_LABEL
        },
        /*::[*/ 0x0037: {
            n: "PASSWORD"
        },
        /*::[*/ 0x0038: {
            n: "LOCKED"
        },
        /*::[*/ 0x003C: {
            n: "QUERY"
        },
        /*::[*/ 0x003D: {
            n: "QUERYNAME"
        },
        /*::[*/ 0x003E: {
            n: "PRINT"
        },
        /*::[*/ 0x003F: {
            n: "PRINTNAME"
        },
        /*::[*/ 0x0040: {
            n: "GRAPH2"
        },
        /*::[*/ 0x0041: {
            n: "GRAPHNAME"
        },
        /*::[*/ 0x0042: {
            n: "ZOOM"
        },
        /*::[*/ 0x0043: {
            n: "SYMSPLIT"
        },
        /*::[*/ 0x0044: {
            n: "NSROWS"
        },
        /*::[*/ 0x0045: {
            n: "NSCOLS"
        },
        /*::[*/ 0x0046: {
            n: "RULER"
        },
        /*::[*/ 0x0047: {
            n: "NNAME"
        },
        /*::[*/ 0x0048: {
            n: "ACOMM"
        },
        /*::[*/ 0x0049: {
            n: "AMACRO"
        },
        /*::[*/ 0x004A: {
            n: "PARSE"
        },
        /*::[*/ 0x0066: {
            n: "PRANGES??"
        },
        /*::[*/ 0x0067: {
            n: "RRANGES??"
        },
        /*::[*/ 0x0068: {
            n: "FNAME??"
        },
        /*::[*/ 0x0069: {
            n: "MRANGES??"
        },
        /*::[*/ 0x00CC: {
            n: "SHEETNAMECS",
            f: parse_SHEETNAMECS
        },
        /*::[*/ 0x00DE: {
            n: "SHEETNAMELP",
            f: parse_SHEETNAMELP
        },
        /*::[*/ 0xFFFF: {
            n: ""
        }
    };
    var WK3Enum = {
        /*::[*/ 0x0000: {
            n: "BOF"
        },
        /*::[*/ 0x0001: {
            n: "EOF"
        },
        /*::[*/ 0x0002: {
            n: "PASSWORD"
        },
        /*::[*/ 0x0003: {
            n: "CALCSET"
        },
        /*::[*/ 0x0004: {
            n: "WINDOWSET"
        },
        /*::[*/ 0x0005: {
            n: "SHEETCELLPTR"
        },
        /*::[*/ 0x0006: {
            n: "SHEETLAYOUT"
        },
        /*::[*/ 0x0007: {
            n: "COLUMNWIDTH"
        },
        /*::[*/ 0x0008: {
            n: "HIDDENCOLUMN"
        },
        /*::[*/ 0x0009: {
            n: "USERRANGE"
        },
        /*::[*/ 0x000A: {
            n: "SYSTEMRANGE"
        },
        /*::[*/ 0x000B: {
            n: "ZEROFORCE"
        },
        /*::[*/ 0x000C: {
            n: "SORTKEYDIR"
        },
        /*::[*/ 0x000D: {
            n: "FILESEAL"
        },
        /*::[*/ 0x000E: {
            n: "DATAFILLNUMS"
        },
        /*::[*/ 0x000F: {
            n: "PRINTMAIN"
        },
        /*::[*/ 0x0010: {
            n: "PRINTSTRING"
        },
        /*::[*/ 0x0011: {
            n: "GRAPHMAIN"
        },
        /*::[*/ 0x0012: {
            n: "GRAPHSTRING"
        },
        /*::[*/ 0x0013: {
            n: "??"
        },
        /*::[*/ 0x0014: {
            n: "ERRCELL"
        },
        /*::[*/ 0x0015: {
            n: "NACELL"
        },
        /*::[*/ 0x0016: {
            n: "LABEL16",
            f: parse_LABEL_16
        },
        /*::[*/ 0x0017: {
            n: "NUMBER17",
            f: parse_NUMBER_17
        },
        /*::[*/ 0x0018: {
            n: "NUMBER18",
            f: parse_NUMBER_18
        },
        /*::[*/ 0x0019: {
            n: "FORMULA19",
            f: parse_FORMULA_19
        },
        /*::[*/ 0x001A: {
            n: "FORMULA1A"
        },
        /*::[*/ 0x001B: {
            n: "XFORMAT",
            f: parse_XFORMAT
        },
        /*::[*/ 0x001C: {
            n: "DTLABELMISC"
        },
        /*::[*/ 0x001D: {
            n: "DTLABELCELL"
        },
        /*::[*/ 0x001E: {
            n: "GRAPHWINDOW"
        },
        /*::[*/ 0x001F: {
            n: "CPA"
        },
        /*::[*/ 0x0020: {
            n: "LPLAUTO"
        },
        /*::[*/ 0x0021: {
            n: "QUERY"
        },
        /*::[*/ 0x0022: {
            n: "HIDDENSHEET"
        },
        /*::[*/ 0x0023: {
            n: "??"
        },
        /*::[*/ 0x0025: {
            n: "NUMBER25",
            f: parse_NUMBER_25
        },
        /*::[*/ 0x0026: {
            n: "??"
        },
        /*::[*/ 0x0027: {
            n: "NUMBER27",
            f: parse_NUMBER_27
        },
        /*::[*/ 0x0028: {
            n: "FORMULA28",
            f: parse_FORMULA_28
        },
        /*::[*/ 0x008E: {
            n: "??"
        },
        /*::[*/ 0x0093: {
            n: "??"
        },
        /*::[*/ 0x0096: {
            n: "??"
        },
        /*::[*/ 0x0097: {
            n: "??"
        },
        /*::[*/ 0x0098: {
            n: "??"
        },
        /*::[*/ 0x0099: {
            n: "??"
        },
        /*::[*/ 0x009A: {
            n: "??"
        },
        /*::[*/ 0x009B: {
            n: "??"
        },
        /*::[*/ 0x009C: {
            n: "??"
        },
        /*::[*/ 0x00A3: {
            n: "??"
        },
        /*::[*/ 0x00AE: {
            n: "??"
        },
        /*::[*/ 0x00AF: {
            n: "??"
        },
        /*::[*/ 0x00B0: {
            n: "??"
        },
        /*::[*/ 0x00B1: {
            n: "??"
        },
        /*::[*/ 0x00B8: {
            n: "??"
        },
        /*::[*/ 0x00B9: {
            n: "??"
        },
        /*::[*/ 0x00BA: {
            n: "??"
        },
        /*::[*/ 0x00BB: {
            n: "??"
        },
        /*::[*/ 0x00BC: {
            n: "??"
        },
        /*::[*/ 0x00C3: {
            n: "??"
        },
        /*::[*/ 0x00C9: {
            n: "??"
        },
        /*::[*/ 0x00CC: {
            n: "SHEETNAMECS",
            f: parse_SHEETNAMECS
        },
        /*::[*/ 0x00CD: {
            n: "??"
        },
        /*::[*/ 0x00CE: {
            n: "??"
        },
        /*::[*/ 0x00CF: {
            n: "??"
        },
        /*::[*/ 0x00D0: {
            n: "??"
        },
        /*::[*/ 0x0100: {
            n: "??"
        },
        /*::[*/ 0x0103: {
            n: "??"
        },
        /*::[*/ 0x0104: {
            n: "??"
        },
        /*::[*/ 0x0105: {
            n: "??"
        },
        /*::[*/ 0x0106: {
            n: "??"
        },
        /*::[*/ 0x0107: {
            n: "??"
        },
        /*::[*/ 0x0109: {
            n: "??"
        },
        /*::[*/ 0x010A: {
            n: "??"
        },
        /*::[*/ 0x010B: {
            n: "??"
        },
        /*::[*/ 0x010C: {
            n: "??"
        },
        /*::[*/ 0x010E: {
            n: "??"
        },
        /*::[*/ 0x010F: {
            n: "??"
        },
        /*::[*/ 0x0180: {
            n: "??"
        },
        /*::[*/ 0x0185: {
            n: "??"
        },
        /*::[*/ 0x0186: {
            n: "??"
        },
        /*::[*/ 0x0189: {
            n: "??"
        },
        /*::[*/ 0x018C: {
            n: "??"
        },
        /*::[*/ 0x0200: {
            n: "??"
        },
        /*::[*/ 0x0202: {
            n: "??"
        },
        /*::[*/ 0x0201: {
            n: "??"
        },
        /*::[*/ 0x0204: {
            n: "??"
        },
        /*::[*/ 0x0205: {
            n: "??"
        },
        /*::[*/ 0x0280: {
            n: "??"
        },
        /*::[*/ 0x0281: {
            n: "??"
        },
        /*::[*/ 0x0282: {
            n: "??"
        },
        /*::[*/ 0x0283: {
            n: "??"
        },
        /*::[*/ 0x0284: {
            n: "??"
        },
        /*::[*/ 0x0285: {
            n: "??"
        },
        /*::[*/ 0x0286: {
            n: "??"
        },
        /*::[*/ 0x0287: {
            n: "??"
        },
        /*::[*/ 0x0288: {
            n: "??"
        },
        /*::[*/ 0x0292: {
            n: "??"
        },
        /*::[*/ 0x0293: {
            n: "??"
        },
        /*::[*/ 0x0294: {
            n: "??"
        },
        /*::[*/ 0x0295: {
            n: "??"
        },
        /*::[*/ 0x0296: {
            n: "??"
        },
        /*::[*/ 0x0299: {
            n: "??"
        },
        /*::[*/ 0x029A: {
            n: "??"
        },
        /*::[*/ 0x0300: {
            n: "??"
        },
        /*::[*/ 0x0304: {
            n: "??"
        },
        /*::[*/ 0x0601: {
            n: "SHEETINFOQP",
            f: parse_SHEETINFOQP
        },
        /*::[*/ 0x0640: {
            n: "??"
        },
        /*::[*/ 0x0642: {
            n: "??"
        },
        /*::[*/ 0x0701: {
            n: "??"
        },
        /*::[*/ 0x0702: {
            n: "??"
        },
        /*::[*/ 0x0703: {
            n: "??"
        },
        /*::[*/ 0x0704: {
            n: "??"
        },
        /*::[*/ 0x0780: {
            n: "??"
        },
        /*::[*/ 0x0800: {
            n: "??"
        },
        /*::[*/ 0x0801: {
            n: "??"
        },
        /*::[*/ 0x0804: {
            n: "??"
        },
        /*::[*/ 0x0A80: {
            n: "??"
        },
        /*::[*/ 0x2AF6: {
            n: "??"
        },
        /*::[*/ 0x3231: {
            n: "??"
        },
        /*::[*/ 0x6E49: {
            n: "??"
        },
        /*::[*/ 0x6F44: {
            n: "??"
        },
        /*::[*/ 0xFFFF: {
            n: ""
        }
    };
    return {
        sheet_to_wk1: sheet_to_wk1,
        book_to_wk3: book_to_wk3,
        to_workbook: lotus_to_workbook
    };
}();
/* 18.4.7 rPr CT_RPrElt */ function parse_rpr(rpr) {
    var font = {}, m = rpr.match(tagregex), i = 0;
    var pass = false;
    if (m) for(; i != m.length; ++i){
        var y = parsexmltag(m[i]);
        switch(y[0].replace(/\w*:/g, "")){
            /* 18.8.12 condense CT_BooleanProperty */ /* ** not required . */ case "<condense":
                break;
            /* 18.8.17 extend CT_BooleanProperty */ /* ** not required . */ case "<extend":
                break;
            /* 18.8.36 shadow CT_BooleanProperty */ /* ** not required . */ case "<shadow":
                if (!y.val) break;
            /* falls through */ case "<shadow>":
            case "<shadow/>":
                font.shadow = 1;
                break;
            case "</shadow>":
                break;
            /* 18.4.1 charset CT_IntProperty TODO */ case "<charset":
                if (y.val == "1") break;
                font.cp = CS2CP[parseInt(y.val, 10)];
                break;
            /* 18.4.2 outline CT_BooleanProperty TODO */ case "<outline":
                if (!y.val) break;
            /* falls through */ case "<outline>":
            case "<outline/>":
                font.outline = 1;
                break;
            case "</outline>":
                break;
            /* 18.4.5 rFont CT_FontName */ case "<rFont":
                font.name = y.val;
                break;
            /* 18.4.11 sz CT_FontSize */ case "<sz":
                font.sz = y.val;
                break;
            /* 18.4.10 strike CT_BooleanProperty */ case "<strike":
                if (!y.val) break;
            /* falls through */ case "<strike>":
            case "<strike/>":
                font.strike = 1;
                break;
            case "</strike>":
                break;
            /* 18.4.13 u CT_UnderlineProperty */ case "<u":
                if (!y.val) break;
                switch(y.val){
                    case "double":
                        font.uval = "double";
                        break;
                    case "singleAccounting":
                        font.uval = "single-accounting";
                        break;
                    case "doubleAccounting":
                        font.uval = "double-accounting";
                        break;
                }
            /* falls through */ case "<u>":
            case "<u/>":
                font.u = 1;
                break;
            case "</u>":
                break;
            /* 18.8.2 b */ case "<b":
                if (y.val == "0") break;
            /* falls through */ case "<b>":
            case "<b/>":
                font.b = 1;
                break;
            case "</b>":
                break;
            /* 18.8.26 i */ case "<i":
                if (y.val == "0") break;
            /* falls through */ case "<i>":
            case "<i/>":
                font.i = 1;
                break;
            case "</i>":
                break;
            /* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */ case "<color":
                if (y.rgb) font.color = y.rgb.slice(2, 8);
                break;
            case "<color>":
            case "<color/>":
            case "</color>":
                break;
            /* 18.8.18 family ST_FontFamily */ case "<family":
                font.family = y.val;
                break;
            case "<family>":
            case "<family/>":
            case "</family>":
                break;
            /* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */ case "<vertAlign":
                font.valign = y.val;
                break;
            case "<vertAlign>":
            case "<vertAlign/>":
            case "</vertAlign>":
                break;
            /* 18.8.35 scheme CT_FontScheme TODO */ case "<scheme":
                break;
            case "<scheme>":
            case "<scheme/>":
            case "</scheme>":
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (y[0].charCodeAt(1) !== 47 && !pass) throw new Error("Unrecognized rich format " + y[0]);
        }
    }
    return font;
}
var parse_rs = /*#__PURE__*/ function() {
    var tregex = matchtag("t"), rpregex = matchtag("rPr");
    /* 18.4.4 r CT_RElt */ function parse_r(r) {
        /* 18.4.12 t ST_Xstring */ var t = r.match(tregex) /*, cp = 65001*/ ;
        if (!t) return {
            t: "s",
            v: ""
        };
        var o /*:Cell*/  = {
            t: "s",
            v: unescapexml(t[1])
        } /*:any*/ ;
        var rpr = r.match(rpregex);
        if (rpr) o.s = parse_rpr(rpr[1]);
        return o;
    }
    var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
    return function parse_rs(rs) {
        return rs.replace(rregex, "").split(rend).map(parse_r).filter(function(r) {
            return r.v;
        });
    };
}();
/* Parse a list of <r> tags */ var rs_to_html = /*#__PURE__*/ function parse_rs_factory() {
    var nlregex = /(\r\n|\n)/g;
    function parse_rpr2(font, intro, outro) {
        var style /*:Array<string>*/  = [];
        if (font.u) style.push("text-decoration: underline;");
        if (font.uval) style.push("text-underline-style:" + font.uval + ";");
        if (font.sz) style.push("font-size:" + font.sz + "pt;");
        if (font.outline) style.push("text-effect: outline;");
        if (font.shadow) style.push("text-shadow: auto;");
        intro.push('<span style="' + style.join("") + '">');
        if (font.b) {
            intro.push("<b>");
            outro.push("</b>");
        }
        if (font.i) {
            intro.push("<i>");
            outro.push("</i>");
        }
        if (font.strike) {
            intro.push("<s>");
            outro.push("</s>");
        }
        var align = font.valign || "";
        if (align == "superscript" || align == "super") align = "sup";
        else if (align == "subscript") align = "sub";
        if (align != "") {
            intro.push("<" + align + ">");
            outro.push("</" + align + ">");
        }
        outro.push("</span>");
        return font;
    }
    /* 18.4.4 r CT_RElt */ function r_to_html(r) {
        var terms /*:[Array<string>, string, Array<string>]*/  = [
            [],
            r.v,
            []
        ];
        if (!r.v) return "";
        if (r.s) parse_rpr2(r.s, terms[0], terms[2]);
        return terms[0].join("") + terms[1].replace(nlregex, "<br/>") + terms[2].join("");
    }
    return function parse_rs(rs) {
        return rs.map(r_to_html).join("");
    };
}();
/* 18.4.8 si CT_Rst */ var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/;
var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
function parse_si(x, opts) {
    var html = opts ? opts.cellHTML : true;
    var z = {};
    if (!x) return {
        t: ""
    };
    //var y;
    /* 18.4.12 t ST_Xstring (Plaintext String) */ // TODO: is whitespace actually valid here?
    if (x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
        z.t = unescapexml(utf8read(x.slice(x.indexOf(">") + 1).split(/<\/(?:\w+:)?t>/)[0] || ""));
        z.r = utf8read(x);
        if (html) z.h = escapehtml(z.t);
    } else if (/*y = */ x.match(sirregex)) {
        z.r = utf8read(x);
        z.t = unescapexml(utf8read((x.replace(sirphregex, "").match(sitregex) || []).join("").replace(tagregex, "")));
        if (html) z.h = rs_to_html(parse_rs(z.r));
    }
    /* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */ /* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */ return z;
}
/* 18.4 Shared String Table */ var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
function parse_sst_xml(data /*:string*/ , opts) /*:SST*/ {
    var s /*:SST*/  = [], ss = "";
    if (!data) return s;
    /* 18.4.9 sst CT_Sst */ var sst = data.match(sstr0);
    if (sst) {
        ss = sst[2].replace(sstr1, "").split(sstr2);
        for(var i = 0; i != ss.length; ++i){
            var o = parse_si(ss[i].trim(), opts);
            if (o != null) s[s.length] = o;
        }
        sst = parsexmltag(sst[1]);
        s.Count = sst.count;
        s.Unique = sst.uniqueCount;
    }
    return s;
}
var straywsregex = /^\s|\s$|[\t\n\r]/;
function write_sst_xml(sst /*:SST*/ , opts) /*:string*/ {
    if (!opts.bookSST) return "";
    var o = [
        XML_HEADER
    ];
    o[o.length] = writextag("sst", null, {
        xmlns: XMLNS_main[0],
        count: sst.Count,
        uniqueCount: sst.Unique
    });
    for(var i = 0; i != sst.length; ++i){
        if (sst[i] == null) continue;
        var s /*:XLString*/  = sst[i];
        var sitag = "<si>";
        if (s.r) sitag += s.r;
        else {
            sitag += "<t";
            if (!s.t) s.t = "";
            if (s.t.match(straywsregex)) sitag += ' xml:space="preserve"';
            sitag += ">" + escapexml(s.t) + "</t>";
        }
        sitag += "</si>";
        o[o.length] = sitag;
    }
    if (o.length > 2) {
        o[o.length] = "</sst>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSB] 2.4.221 BrtBeginSst */ function parse_BrtBeginSst(data) {
    return [
        data.read_shift(4),
        data.read_shift(4)
    ];
}
/* [MS-XLSB] 2.1.7.45 Shared Strings */ function parse_sst_bin(data, opts) /*:SST*/ {
    var s /*:SST*/  = [];
    var pass = false;
    recordhopper(data, function hopper_sst(val, R, RT) {
        switch(RT){
            case 0x009F:
                /* BrtBeginSst */ s.Count = val[0];
                s.Unique = val[1];
                break;
            case 0x0013:
                /* BrtSSTItem */ s.push(val);
                break;
            case 0x00A0:
                /* BrtEndSst */ return true;
            case 0x0023:
                /* BrtFRTBegin */ pass = true;
                break;
            case 0x0024:
                /* BrtFRTEnd */ pass = false;
                break;
            default:
                R.T;
                if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    });
    return s;
}
function write_BrtBeginSst(sst, o) {
    if (!o) o = new_buf(8);
    o.write_shift(4, sst.Count);
    o.write_shift(4, sst.Unique);
    return o;
}
var write_BrtSSTItem = write_RichStr;
function write_sst_bin(sst /*::, opts*/ ) {
    var ba = buf_array();
    write_record(ba, 0x009F /* BrtBeginSst */ , write_BrtBeginSst(sst));
    for(var i = 0; i < sst.length; ++i)write_record(ba, 0x0013 /* BrtSSTItem */ , write_BrtSSTItem(sst[i]));
    /* FRTSST */ write_record(ba, 0x00A0 /* BrtEndSst */ );
    return ba.end();
}
function _JS2ANSI(str /*:string*/ ) /*:Array<number>*/ {
    if (typeof $cptable !== "undefined") return $cptable.utils.encode(current_ansi, str);
    var o /*:Array<number>*/  = [], oo = str.split("");
    for(var i = 0; i < oo.length; ++i)o[i] = oo[i].charCodeAt(0);
    return o;
}
/* [MS-OFFCRYPTO] 2.1.4 Version */ function parse_CRYPTOVersion(blob, length /*:?number*/ ) {
    var o /*:any*/  = {};
    o.Major = blob.read_shift(2);
    o.Minor = blob.read_shift(2);
    /*:: if(length == null) return o; */ if (length >= 4) blob.l += length - 4;
    return o;
}
/* [MS-OFFCRYPTO] 2.1.5 DataSpaceVersionInfo */ function parse_DataSpaceVersionInfo(blob) {
    var o = {};
    o.id = blob.read_shift(0, "lpp4");
    o.R = parse_CRYPTOVersion(blob, 4);
    o.U = parse_CRYPTOVersion(blob, 4);
    o.W = parse_CRYPTOVersion(blob, 4);
    return o;
}
/* [MS-OFFCRYPTO] 2.1.6.1 DataSpaceMapEntry Structure */ function parse_DataSpaceMapEntry(blob) {
    var len = blob.read_shift(4);
    var end = blob.l + len - 4;
    var o = {};
    var cnt = blob.read_shift(4);
    var comps /*:Array<{t:number, v:string}>*/  = [];
    /* [MS-OFFCRYPTO] 2.1.6.2 DataSpaceReferenceComponent Structure */ while(cnt-- > 0)comps.push({
        t: blob.read_shift(4),
        v: blob.read_shift(0, "lpp4")
    });
    o.name = blob.read_shift(0, "lpp4");
    o.comps = comps;
    if (blob.l != end) throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
    return o;
}
/* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap */ function parse_DataSpaceMap(blob) {
    var o = [];
    blob.l += 4; // must be 0x8
    var cnt = blob.read_shift(4);
    while(cnt-- > 0)o.push(parse_DataSpaceMapEntry(blob));
    return o;
}
/* [MS-OFFCRYPTO] 2.1.7 DataSpaceDefinition */ function parse_DataSpaceDefinition(blob) /*:Array<string>*/ {
    var o /*:Array<string>*/  = [];
    blob.l += 4; // must be 0x8
    var cnt = blob.read_shift(4);
    while(cnt-- > 0)o.push(blob.read_shift(0, "lpp4"));
    return o;
}
/* [MS-OFFCRYPTO] 2.1.8 DataSpaceDefinition */ function parse_TransformInfoHeader(blob) {
    var o = {};
    /*var len = */ blob.read_shift(4);
    blob.l += 4; // must be 0x1
    o.id = blob.read_shift(0, "lpp4");
    o.name = blob.read_shift(0, "lpp4");
    o.R = parse_CRYPTOVersion(blob, 4);
    o.U = parse_CRYPTOVersion(blob, 4);
    o.W = parse_CRYPTOVersion(blob, 4);
    return o;
}
function parse_Primary(blob) {
    /* [MS-OFFCRYPTO] 2.2.6 IRMDSTransformInfo */ var hdr = parse_TransformInfoHeader(blob);
    /* [MS-OFFCRYPTO] 2.1.9 EncryptionTransformInfo */ hdr.ename = blob.read_shift(0, "8lpp4");
    hdr.blksz = blob.read_shift(4);
    hdr.cmode = blob.read_shift(4);
    if (blob.read_shift(4) != 0x04) throw new Error("Bad !Primary record");
    return hdr;
}
/* [MS-OFFCRYPTO] 2.3.2 Encryption Header */ function parse_EncryptionHeader(blob, length /*:number*/ ) {
    var tgt = blob.l + length;
    var o = {};
    o.Flags = blob.read_shift(4) & 0x3F;
    blob.l += 4;
    o.AlgID = blob.read_shift(4);
    var valid = false;
    switch(o.AlgID){
        case 0x660E:
        case 0x660F:
        case 0x6610:
            valid = o.Flags == 0x24;
            break;
        case 0x6801:
            valid = o.Flags == 0x04;
            break;
        case 0:
            valid = o.Flags == 0x10 || o.Flags == 0x04 || o.Flags == 0x24;
            break;
        default:
            throw "Unrecognized encryption algorithm: " + o.AlgID;
    }
    if (!valid) throw new Error("Encryption Flags/AlgID mismatch");
    o.AlgIDHash = blob.read_shift(4);
    o.KeySize = blob.read_shift(4);
    o.ProviderType = blob.read_shift(4);
    blob.l += 8;
    o.CSPName = blob.read_shift(tgt - blob.l >> 1, "utf16le");
    blob.l = tgt;
    return o;
}
/* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */ function parse_EncryptionVerifier(blob, length /*:number*/ ) {
    var o = {}, tgt = blob.l + length;
    blob.l += 4; // SaltSize must be 0x10
    o.Salt = blob.slice(blob.l, blob.l + 16);
    blob.l += 16;
    o.Verifier = blob.slice(blob.l, blob.l + 16);
    blob.l += 16;
    /*var sz = */ blob.read_shift(4);
    o.VerifierHash = blob.slice(blob.l, tgt);
    blob.l = tgt;
    return o;
}
/* [MS-OFFCRYPTO] 2.3.4.* EncryptionInfo Stream */ function parse_EncryptionInfo(blob) {
    var vers = parse_CRYPTOVersion(blob);
    switch(vers.Minor){
        case 0x02:
            return [
                vers.Minor,
                parse_EncInfoStd(blob, vers)
            ];
        case 0x03:
            return [
                vers.Minor,
                parse_EncInfoExt(blob, vers)
            ];
        case 0x04:
            return [
                vers.Minor,
                parse_EncInfoAgl(blob, vers)
            ];
    }
    throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
}
/* [MS-OFFCRYPTO] 2.3.4.5  EncryptionInfo Stream (Standard Encryption) */ function parse_EncInfoStd(blob /*::, vers*/ ) {
    var flags = blob.read_shift(4);
    if ((flags & 0x3F) != 0x24) throw new Error("EncryptionInfo mismatch");
    var sz = blob.read_shift(4);
    //var tgt = blob.l + sz;
    var hdr = parse_EncryptionHeader(blob, sz);
    var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
    return {
        t: "Std",
        h: hdr,
        v: verifier
    };
}
/* [MS-OFFCRYPTO] 2.3.4.6  EncryptionInfo Stream (Extensible Encryption) */ function parse_EncInfoExt() {
    throw new Error("File is password-protected: ECMA-376 Extensible");
}
/* [MS-OFFCRYPTO] 2.3.4.10 EncryptionInfo Stream (Agile Encryption) */ function parse_EncInfoAgl(blob /*::, vers*/ ) {
    var KeyData = [
        "saltSize",
        "blockSize",
        "keyBits",
        "hashSize",
        "cipherAlgorithm",
        "cipherChaining",
        "hashAlgorithm",
        "saltValue"
    ];
    blob.l += 4;
    var xml = blob.read_shift(blob.length - blob.l, "utf8");
    var o = {};
    xml.replace(tagregex, function xml_agile(x) {
        var y /*:any*/  = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<?xml":
                break;
            case "<encryption":
            case "</encryption>":
                break;
            case "<keyData":
                KeyData.forEach(function(k) {
                    o[k] = y[k];
                });
                break;
            case "<dataIntegrity":
                o.encryptedHmacKey = y.encryptedHmacKey;
                o.encryptedHmacValue = y.encryptedHmacValue;
                break;
            case "<keyEncryptors>":
            case "<keyEncryptors":
                o.encs = [];
                break;
            case "</keyEncryptors>":
                break;
            case "<keyEncryptor":
                o.uri = y.uri;
                break;
            case "</keyEncryptor>":
                break;
            case "<encryptedKey":
                o.encs.push(y);
                break;
            default:
                throw y[0];
        }
    });
    return o;
}
/* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */ function parse_RC4CryptoHeader(blob, length /*:number*/ ) {
    var o = {};
    var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
    length -= 4;
    if (vers.Minor != 2) throw new Error("unrecognized minor version code: " + vers.Minor);
    if (vers.Major > 4 || vers.Major < 2) throw new Error("unrecognized major version code: " + vers.Major);
    o.Flags = blob.read_shift(4);
    length -= 4;
    var sz = blob.read_shift(4);
    length -= 4;
    o.EncryptionHeader = parse_EncryptionHeader(blob, sz);
    length -= sz;
    o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
    return o;
}
/* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */ function parse_RC4Header(blob /*::, length*/ ) {
    var o = {};
    var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
    if (vers.Major != 1 || vers.Minor != 1) throw "unrecognized version code " + vers.Major + " : " + vers.Minor;
    o.Salt = blob.read_shift(16);
    o.EncryptedVerifier = blob.read_shift(16);
    o.EncryptedVerifierHash = blob.read_shift(16);
    return o;
}
/* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */ function crypto_CreatePasswordVerifier_Method1(Password /*:string*/ ) {
    var Verifier = 0x0000, PasswordArray;
    var PasswordDecoded = _JS2ANSI(Password);
    var len = PasswordDecoded.length + 1, i, PasswordByte;
    var Intermediate1, Intermediate2, Intermediate3;
    PasswordArray = new_raw_buf(len);
    PasswordArray[0] = PasswordDecoded.length;
    for(i = 1; i != len; ++i)PasswordArray[i] = PasswordDecoded[i - 1];
    for(i = len - 1; i >= 0; --i){
        PasswordByte = PasswordArray[i];
        Intermediate1 = (Verifier & 0x4000) === 0x0000 ? 0 : 1;
        Intermediate2 = Verifier << 1 & 0x7FFF;
        Intermediate3 = Intermediate1 | Intermediate2;
        Verifier = Intermediate3 ^ PasswordByte;
    }
    return Verifier ^ 0xCE4B;
}
/* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */ var crypto_CreateXorArray_Method1 = /*#__PURE__*/ function() {
    var PadArray = [
        0xBB,
        0xFF,
        0xFF,
        0xBA,
        0xFF,
        0xFF,
        0xB9,
        0x80,
        0x00,
        0xBE,
        0x0F,
        0x00,
        0xBF,
        0x0F,
        0x00
    ];
    var InitialCode = [
        0xE1F0,
        0x1D0F,
        0xCC9C,
        0x84C0,
        0x110C,
        0x0E10,
        0xF1CE,
        0x313E,
        0x1872,
        0xE139,
        0xD40F,
        0x84F9,
        0x280C,
        0xA96A,
        0x4EC3
    ];
    var XorMatrix = [
        0xAEFC,
        0x4DD9,
        0x9BB2,
        0x2745,
        0x4E8A,
        0x9D14,
        0x2A09,
        0x7B61,
        0xF6C2,
        0xFDA5,
        0xEB6B,
        0xC6F7,
        0x9DCF,
        0x2BBF,
        0x4563,
        0x8AC6,
        0x05AD,
        0x0B5A,
        0x16B4,
        0x2D68,
        0x5AD0,
        0x0375,
        0x06EA,
        0x0DD4,
        0x1BA8,
        0x3750,
        0x6EA0,
        0xDD40,
        0xD849,
        0xA0B3,
        0x5147,
        0xA28E,
        0x553D,
        0xAA7A,
        0x44D5,
        0x6F45,
        0xDE8A,
        0xAD35,
        0x4A4B,
        0x9496,
        0x390D,
        0x721A,
        0xEB23,
        0xC667,
        0x9CEF,
        0x29FF,
        0x53FE,
        0xA7FC,
        0x5FD9,
        0x47D3,
        0x8FA6,
        0x0F6D,
        0x1EDA,
        0x3DB4,
        0x7B68,
        0xF6D0,
        0xB861,
        0x60E3,
        0xC1C6,
        0x93AD,
        0x377B,
        0x6EF6,
        0xDDEC,
        0x45A0,
        0x8B40,
        0x06A1,
        0x0D42,
        0x1A84,
        0x3508,
        0x6A10,
        0xAA51,
        0x4483,
        0x8906,
        0x022D,
        0x045A,
        0x08B4,
        0x1168,
        0x76B4,
        0xED68,
        0xCAF1,
        0x85C3,
        0x1BA7,
        0x374E,
        0x6E9C,
        0x3730,
        0x6E60,
        0xDCC0,
        0xA9A1,
        0x4363,
        0x86C6,
        0x1DAD,
        0x3331,
        0x6662,
        0xCCC4,
        0x89A9,
        0x0373,
        0x06E6,
        0x0DCC,
        0x1021,
        0x2042,
        0x4084,
        0x8108,
        0x1231,
        0x2462,
        0x48C4
    ];
    var Ror = function(Byte) {
        return (Byte / 2 | Byte * 128) & 0xFF;
    };
    var XorRor = function(byte1, byte2) {
        return Ror(byte1 ^ byte2);
    };
    var CreateXorKey_Method1 = function(Password) {
        var XorKey = InitialCode[Password.length - 1];
        var CurrentElement = 0x68;
        for(var i = Password.length - 1; i >= 0; --i){
            var Char = Password[i];
            for(var j = 0; j != 7; ++j){
                if (Char & 0x40) XorKey ^= XorMatrix[CurrentElement];
                Char *= 2;
                --CurrentElement;
            }
        }
        return XorKey;
    };
    return function(password /*:string*/ ) {
        var Password = _JS2ANSI(password);
        var XorKey = CreateXorKey_Method1(Password);
        var Index = Password.length;
        var ObfuscationArray = new_raw_buf(16);
        for(var i = 0; i != 16; ++i)ObfuscationArray[i] = 0x00;
        var Temp, PasswordLastChar, PadIndex;
        if ((Index & 1) === 1) {
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
            --Index;
            Temp = XorKey & 0xFF;
            PasswordLastChar = Password[Password.length - 1];
            ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
        }
        while(Index > 0){
            --Index;
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            --Index;
            Temp = XorKey & 0xFF;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
        }
        Index = 15;
        PadIndex = 15 - Password.length;
        while(PadIndex > 0){
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
            --Index;
            --PadIndex;
            Temp = XorKey & 0xFF;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            --Index;
            --PadIndex;
        }
        return ObfuscationArray;
    };
}();
/* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */ var crypto_DecryptData_Method1 = function(password /*:string*/ , Data, XorArrayIndex, XorArray, O) {
    /* If XorArray is set, use it; if O is not set, make changes in-place */ if (!O) O = Data;
    if (!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
    var Index, Value;
    for(Index = 0; Index != Data.length; ++Index){
        Value = Data[Index];
        Value ^= XorArray[XorArrayIndex];
        Value = (Value >> 5 | Value << 3) & 0xFF;
        O[Index] = Value;
        ++XorArrayIndex;
    }
    return [
        O,
        XorArrayIndex,
        XorArray
    ];
};
var crypto_MakeXorDecryptor = function(password /*:string*/ ) {
    var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
    return function(Data) {
        var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
        XorArrayIndex = O[1];
        return O[0];
    };
};
/* 2.5.343 */ function parse_XORObfuscation(blob, length, opts, out) {
    var o = {
        key: parseuint16(blob),
        verificationBytes: parseuint16(blob)
    } /*:any*/ ;
    if (opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
    out.valid = o.verificationBytes === o.verifier;
    if (out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);
    return o;
}
/* 2.4.117 */ function parse_FilePassHeader(blob, length /*:number*/ , oo) {
    var o = oo || {};
    o.Info = blob.read_shift(2);
    blob.l -= 2;
    if (o.Info === 1) o.Data = parse_RC4Header(blob, length);
    else o.Data = parse_RC4CryptoHeader(blob, length);
    return o;
}
function parse_FilePass(blob, length /*:number*/ , opts) {
    var o = {
        Type: opts.biff >= 8 ? blob.read_shift(2) : 0
    } /*:any*/ ; /* wEncryptionType */ 
    if (o.Type) parse_FilePassHeader(blob, length - 2, o);
    else parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);
    return o;
}
var RTF = /*#__PURE__*/ function() {
    function rtf_to_sheet(d /*:RawData*/ , opts) /*:Worksheet*/ {
        switch(opts.type){
            case "base64":
                return rtf_to_sheet_str(Base64_decode(d), opts);
            case "binary":
                return rtf_to_sheet_str(d, opts);
            case "buffer":
                return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
                return rtf_to_sheet_str(cc2str(d), opts);
        }
        throw new Error("Unrecognized type " + opts.type);
    }
    /* TODO: this is a stub */ function rtf_to_sheet_str(str /*:string*/ , opts) /*:Worksheet*/ {
        var o = opts || {};
        var ws /*:Worksheet*/  = o.dense ? [] : {} /*:any*/ ;
        var rows = str.match(/\\trowd.*?\\row\b/g);
        if (!rows.length) throw new Error("RTF missing table");
        var range /*:Range*/  = {
            s: {
                c: 0,
                r: 0
            },
            e: {
                c: 0,
                r: rows.length - 1
            }
        } /*:any*/ ;
        rows.forEach(function(rowtf, R) {
            if (Array.isArray(ws)) ws[R] = [];
            var rtfre = /\\\w+\b/g;
            var last_index = 0;
            var res;
            var C = -1;
            while(res = rtfre.exec(rowtf)){
                switch(res[0]){
                    case "\\cell":
                        var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
                        if (data[0] == " ") data = data.slice(1);
                        ++C;
                        if (data.length) {
                            // TODO: value parsing, including codepage adjustments
                            var cell = {
                                v: data,
                                t: "s"
                            };
                            if (Array.isArray(ws)) ws[R][C] = cell;
                            else ws[encode_cell({
                                r: R,
                                c: C
                            })] = cell;
                        }
                        break;
                }
                last_index = rtfre.lastIndex;
            }
            if (C > range.e.c) range.e.c = C;
        });
        ws["!ref"] = encode_range(range);
        return ws;
    }
    function rtf_to_workbook(d /*:RawData*/ , opts) /*:Workbook*/ {
        return sheet_to_workbook(rtf_to_sheet(d, opts), opts);
    }
    /* TODO: this is a stub */ function sheet_to_rtf(ws /*:Worksheet*/  /*::, opts*/ ) /*:string*/ {
        var o = [
            "{\\rtf1\\ansi"
        ];
        var r = safe_decode_range(ws["!ref"]), cell /*:Cell*/ ;
        var dense = Array.isArray(ws);
        for(var R = r.s.r; R <= r.e.r; ++R){
            o.push("\\trowd\\trautofit1");
            for(var C = r.s.c; C <= r.e.c; ++C)o.push("\\cellx" + (C + 1));
            o.push("\\pard\\intbl");
            for(C = r.s.c; C <= r.e.c; ++C){
                var coord = encode_cell({
                    r: R,
                    c: C
                });
                cell = dense ? (ws[R] || [])[C] : ws[coord];
                if (!cell || cell.v == null && (!cell.f || cell.F)) continue;
                o.push(" " + (cell.w || (format_cell(cell), cell.w)));
                o.push("\\cell");
            }
            o.push("\\pard\\intbl\\row");
        }
        return o.join("") + "}";
    }
    return {
        to_workbook: rtf_to_workbook,
        to_sheet: rtf_to_sheet,
        from_sheet: sheet_to_rtf
    };
}();
function hex2RGB(h) {
    var o = h.slice(h[0] === "#" ? 1 : 0).slice(0, 6);
    return [
        parseInt(o.slice(0, 2), 16),
        parseInt(o.slice(2, 4), 16),
        parseInt(o.slice(4, 6), 16)
    ];
}
function rgb2Hex(rgb) {
    for(var i = 0, o = 1; i != 3; ++i)o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]);
    return o.toString(16).toUpperCase().slice(1);
}
function rgb2HSL(rgb) {
    var R = rgb[0] / 255, G = rgb[1] / 255, B = rgb[2] / 255;
    var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;
    if (C === 0) return [
        0,
        0,
        R
    ];
    var H6 = 0, S = 0, L2 = M + m;
    S = C / (L2 > 1 ? 2 - L2 : L2);
    switch(M){
        case R:
            H6 = ((G - B) / C + 6) % 6;
            break;
        case G:
            H6 = (B - R) / C + 2;
            break;
        case B:
            H6 = (R - G) / C + 4;
            break;
    }
    return [
        H6 / 6,
        S,
        L2 / 2
    ];
}
function hsl2RGB(hsl) {
    var H = hsl[0], S = hsl[1], L = hsl[2];
    var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C / 2;
    var rgb = [
        m,
        m,
        m
    ], h6 = 6 * H;
    var X;
    if (S !== 0) switch(h6 | 0){
        case 0:
        case 6:
            X = C * h6;
            rgb[0] += C;
            rgb[1] += X;
            break;
        case 1:
            X = C * (2 - h6);
            rgb[0] += X;
            rgb[1] += C;
            break;
        case 2:
            X = C * (h6 - 2);
            rgb[1] += C;
            rgb[2] += X;
            break;
        case 3:
            X = C * (4 - h6);
            rgb[1] += X;
            rgb[2] += C;
            break;
        case 4:
            X = C * (h6 - 4);
            rgb[2] += C;
            rgb[0] += X;
            break;
        case 5:
            X = C * (6 - h6);
            rgb[2] += X;
            rgb[0] += C;
            break;
    }
    for(var i = 0; i != 3; ++i)rgb[i] = Math.round(rgb[i] * 255);
    return rgb;
}
/* 18.8.3 bgColor tint algorithm */ function rgb_tint(hex, tint) {
    if (tint === 0) return hex;
    var hsl = rgb2HSL(hex2RGB(hex));
    if (tint < 0) hsl[2] = hsl[2] * (1 + tint);
    else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
    return rgb2Hex(hsl2RGB(hsl));
}
/* 18.3.1.13 width calculations */ /* [MS-OI29500] 2.1.595 Column Width & Formatting */ var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
function width2px(width) {
    return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);
}
function px2char(px) {
    return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;
}
function char2width(chr) {
    return Math.round((chr * MDW + 5) / MDW * 256) / 256;
}
//function px2char_(px) { return (((px - 5)/MDW * 100 + 0.5))/100; }
//function char2width_(chr) { return (((chr * MDW + 5)/MDW*256))/256; }
function cycle_width(collw) {
    return char2width(px2char(width2px(collw)));
}
/* XLSX/XLSB/XLS specify width in units of MDW */ function find_mdw_colw(collw) {
    var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
    if (delta > 0.005) {
        for(MDW = MIN_MDW; MDW < MAX_MDW; ++MDW)if (Math.abs(collw - cycle_width(collw)) <= delta) {
            delta = Math.abs(collw - cycle_width(collw));
            _MDW = MDW;
        }
    }
    MDW = _MDW;
}
/* XLML specifies width in terms of pixels */ /*function find_mdw_wpx(wpx) {
	var delta = Infinity, guess = 0, _MDW = MIN_MDW;
	for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) {
		guess = char2width_(px2char_(wpx))*256;
		guess = (guess) % 1;
		if(guess > 0.5) guess--;
		if(Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW; }
	}
	MDW = _MDW;
}*/ function process_col(coll /*:ColInfo*/ ) {
    if (coll.width) {
        coll.wpx = width2px(coll.width);
        coll.wch = px2char(coll.wpx);
        coll.MDW = MDW;
    } else if (coll.wpx) {
        coll.wch = px2char(coll.wpx);
        coll.width = char2width(coll.wch);
        coll.MDW = MDW;
    } else if (typeof coll.wch == "number") {
        coll.width = char2width(coll.wch);
        coll.wpx = width2px(coll.width);
        coll.MDW = MDW;
    }
    if (coll.customWidth) delete coll.customWidth;
}
var DEF_PPI = 96, PPI = DEF_PPI;
function px2pt(px) {
    return px * 96 / PPI;
}
function pt2px(pt) {
    return pt * PPI / 96;
}
/* [MS-EXSPXML3] 2.4.54 ST_enmPattern */ var XLMLPatternTypeMap = {
    "None": "none",
    "Solid": "solid",
    "Gray50": "mediumGray",
    "Gray75": "darkGray",
    "Gray25": "lightGray",
    "HorzStripe": "darkHorizontal",
    "VertStripe": "darkVertical",
    "ReverseDiagStripe": "darkDown",
    "DiagStripe": "darkUp",
    "DiagCross": "darkGrid",
    "ThickDiagCross": "darkTrellis",
    "ThinHorzStripe": "lightHorizontal",
    "ThinVertStripe": "lightVertical",
    "ThinReverseDiagStripe": "lightDown",
    "ThinHorzCross": "lightGrid"
};
/* 18.8.5 borders CT_Borders */ function parse_borders(t, styles, themes, opts) {
    styles.Borders = [];
    var border = {};
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<borders":
            case "<borders>":
            case "</borders>":
                break;
            /* 18.8.4 border CT_Border */ case "<border":
            case "<border>":
            case "<border/>":
                border = /*::(*/ {} /*:: :any)*/ ;
                if (y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);
                if (y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);
                styles.Borders.push(border);
                break;
            case "</border>":
                break;
            /* note: not in spec, appears to be CT_BorderPr */ case "<left/>":
                break;
            case "<left":
            case "<left>":
                break;
            case "</left>":
                break;
            /* note: not in spec, appears to be CT_BorderPr */ case "<right/>":
                break;
            case "<right":
            case "<right>":
                break;
            case "</right>":
                break;
            /* 18.8.43 top CT_BorderPr */ case "<top/>":
                break;
            case "<top":
            case "<top>":
                break;
            case "</top>":
                break;
            /* 18.8.6 bottom CT_BorderPr */ case "<bottom/>":
                break;
            case "<bottom":
            case "<bottom>":
                break;
            case "</bottom>":
                break;
            /* 18.8.13 diagonal CT_BorderPr */ case "<diagonal":
            case "<diagonal>":
            case "<diagonal/>":
                break;
            case "</diagonal>":
                break;
            /* 18.8.25 horizontal CT_BorderPr */ case "<horizontal":
            case "<horizontal>":
            case "<horizontal/>":
                break;
            case "</horizontal>":
                break;
            /* 18.8.44 vertical CT_BorderPr */ case "<vertical":
            case "<vertical>":
            case "<vertical/>":
                break;
            case "</vertical>":
                break;
            /* 18.8.37 start CT_BorderPr */ case "<start":
            case "<start>":
            case "<start/>":
                break;
            case "</start>":
                break;
            /* 18.8.16 end CT_BorderPr */ case "<end":
            case "<end>":
            case "<end/>":
                break;
            case "</end>":
                break;
            /* 18.8.? color CT_Color */ case "<color":
            case "<color>":
                break;
            case "<color/>":
            case "</color>":
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (opts && opts.WTF) {
                    if (!pass) throw new Error("unrecognized " + y[0] + " in borders");
                }
        }
    });
}
/* 18.8.21 fills CT_Fills */ function parse_fills(t, styles, themes, opts) {
    styles.Fills = [];
    var fill = {};
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<fills":
            case "<fills>":
            case "</fills>":
                break;
            /* 18.8.20 fill CT_Fill */ case "<fill>":
            case "<fill":
            case "<fill/>":
                fill = {};
                styles.Fills.push(fill);
                break;
            case "</fill>":
                break;
            /* 18.8.24 gradientFill CT_GradientFill */ case "<gradientFill>":
                break;
            case "<gradientFill":
            case "</gradientFill>":
                styles.Fills.push(fill);
                fill = {};
                break;
            /* 18.8.32 patternFill CT_PatternFill */ case "<patternFill":
            case "<patternFill>":
                if (y.patternType) fill.patternType = y.patternType;
                break;
            case "<patternFill/>":
            case "</patternFill>":
                break;
            /* 18.8.3 bgColor CT_Color */ case "<bgColor":
                if (!fill.bgColor) fill.bgColor = {};
                if (y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);
                if (y.theme) fill.bgColor.theme = parseInt(y.theme, 10);
                if (y.tint) fill.bgColor.tint = parseFloat(y.tint);
                /* Excel uses ARGB strings */ if (y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);
                break;
            case "<bgColor/>":
            case "</bgColor>":
                break;
            /* 18.8.19 fgColor CT_Color */ case "<fgColor":
                if (!fill.fgColor) fill.fgColor = {};
                if (y.theme) fill.fgColor.theme = parseInt(y.theme, 10);
                if (y.tint) fill.fgColor.tint = parseFloat(y.tint);
                /* Excel uses ARGB strings */ if (y.rgb != null) fill.fgColor.rgb = y.rgb.slice(-6);
                break;
            case "<fgColor/>":
            case "</fgColor>":
                break;
            /* 18.8.38 stop CT_GradientStop */ case "<stop":
            case "<stop/>":
                break;
            case "</stop>":
                break;
            /* 18.8.? color CT_Color */ case "<color":
            case "<color/>":
                break;
            case "</color>":
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (opts && opts.WTF) {
                    if (!pass) throw new Error("unrecognized " + y[0] + " in fills");
                }
        }
    });
}
/* 18.8.23 fonts CT_Fonts */ function parse_fonts(t, styles, themes, opts) {
    styles.Fonts = [];
    var font = {};
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<fonts":
            case "<fonts>":
            case "</fonts>":
                break;
            /* 18.8.22 font CT_Font */ case "<font":
            case "<font>":
                break;
            case "</font>":
            case "<font/>":
                styles.Fonts.push(font);
                font = {};
                break;
            /* 18.8.29 name CT_FontName */ case "<name":
                if (y.val) font.name = utf8read(y.val);
                break;
            case "<name/>":
            case "</name>":
                break;
            /* 18.8.2  b CT_BooleanProperty */ case "<b":
                font.bold = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<b/>":
                font.bold = 1;
                break;
            /* 18.8.26 i CT_BooleanProperty */ case "<i":
                font.italic = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<i/>":
                font.italic = 1;
                break;
            /* 18.4.13 u CT_UnderlineProperty */ case "<u":
                switch(y.val){
                    case "none":
                        font.underline = 0x00;
                        break;
                    case "single":
                        font.underline = 0x01;
                        break;
                    case "double":
                        font.underline = 0x02;
                        break;
                    case "singleAccounting":
                        font.underline = 0x21;
                        break;
                    case "doubleAccounting":
                        font.underline = 0x22;
                        break;
                }
                break;
            case "<u/>":
                font.underline = 1;
                break;
            /* 18.4.10 strike CT_BooleanProperty */ case "<strike":
                font.strike = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<strike/>":
                font.strike = 1;
                break;
            /* 18.4.2  outline CT_BooleanProperty */ case "<outline":
                font.outline = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<outline/>":
                font.outline = 1;
                break;
            /* 18.8.36 shadow CT_BooleanProperty */ case "<shadow":
                font.shadow = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<shadow/>":
                font.shadow = 1;
                break;
            /* 18.8.12 condense CT_BooleanProperty */ case "<condense":
                font.condense = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<condense/>":
                font.condense = 1;
                break;
            /* 18.8.17 extend CT_BooleanProperty */ case "<extend":
                font.extend = y.val ? parsexmlbool(y.val) : 1;
                break;
            case "<extend/>":
                font.extend = 1;
                break;
            /* 18.4.11 sz CT_FontSize */ case "<sz":
                if (y.val) font.sz = +y.val;
                break;
            case "<sz/>":
            case "</sz>":
                break;
            /* 18.4.14 vertAlign CT_VerticalAlignFontProperty */ case "<vertAlign":
                if (y.val) font.vertAlign = y.val;
                break;
            case "<vertAlign/>":
            case "</vertAlign>":
                break;
            /* 18.8.18 family CT_FontFamily */ case "<family":
                if (y.val) font.family = parseInt(y.val, 10);
                break;
            case "<family/>":
            case "</family>":
                break;
            /* 18.8.35 scheme CT_FontScheme */ case "<scheme":
                if (y.val) font.scheme = y.val;
                break;
            case "<scheme/>":
            case "</scheme>":
                break;
            /* 18.4.1 charset CT_IntProperty */ case "<charset":
                if (y.val == "1") break;
                y.codepage = CS2CP[parseInt(y.val, 10)];
                break;
            /* 18.?.? color CT_Color */ case "<color":
                if (!font.color) font.color = {};
                if (y.auto) font.color.auto = parsexmlbool(y.auto);
                if (y.rgb) font.color.rgb = y.rgb.slice(-6);
                else if (y.indexed) {
                    font.color.index = parseInt(y.indexed, 10);
                    var icv = XLSIcv[font.color.index];
                    if (font.color.index == 81) icv = XLSIcv[1];
                    if (!icv) icv = XLSIcv[1]; //throw new Error(x); // note: 206 is valid
                    font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
                } else if (y.theme) {
                    font.color.theme = parseInt(y.theme, 10);
                    if (y.tint) font.color.tint = parseFloat(y.tint);
                    if (y.theme && themes.themeElements && themes.themeElements.clrScheme) font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
                }
                break;
            case "<color/>":
            case "</color>":
                break;
            /* note: sometimes mc:AlternateContent appears bare */ case "<AlternateContent":
                pass = true;
                break;
            case "</AlternateContent>":
                pass = false;
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (opts && opts.WTF) {
                    if (!pass) throw new Error("unrecognized " + y[0] + " in fonts");
                }
        }
    });
}
/* 18.8.31 numFmts CT_NumFmts */ function parse_numFmts(t, styles, opts) {
    styles.NumberFmt = [];
    var k /*Array<number>*/  = keys(table_fmt);
    for(var i = 0; i < k.length; ++i)styles.NumberFmt[k[i]] = table_fmt[k[i]];
    var m = t[0].match(tagregex);
    if (!m) return;
    for(i = 0; i < m.length; ++i){
        var y = parsexmltag(m[i]);
        switch(strip_ns(y[0])){
            case "<numFmts":
            case "</numFmts>":
            case "<numFmts/>":
            case "<numFmts>":
                break;
            case "<numFmt":
                var f = unescapexml(utf8read(y.formatCode)), j = parseInt(y.numFmtId, 10);
                styles.NumberFmt[j] = f;
                if (j > 0) {
                    if (j > 0x188) {
                        for(j = 0x188; j > 0x3c; --j)if (styles.NumberFmt[j] == null) break;
                        styles.NumberFmt[j] = f;
                    }
                    SSF_load(f, j);
                }
                break;
            case "</numFmt>":
                break;
            default:
                if (opts.WTF) throw new Error("unrecognized " + y[0] + " in numFmts");
        }
    }
}
function write_numFmts(NF /*:{[n:number|string]:string}*/  /*::, opts*/ ) {
    var o = [
        "<numFmts>"
    ];
    [
        [
            5,
            8
        ],
        [
            23,
            26
        ],
        [
            41,
            44
        ],
        [
            /*63*/ 50,
            /*66],[164,*/ 392
        ]
    ].forEach(function(r) {
        for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) o[o.length] = writextag("numFmt", null, {
            numFmtId: i,
            formatCode: escapexml(NF[i])
        });
    });
    if (o.length === 1) return "";
    o[o.length] = "</numFmts>";
    o[0] = writextag("numFmts", null, {
        count: o.length - 2
    }).replace("/>", ">");
    return o.join("");
}
/* 18.8.10 cellXfs CT_CellXfs */ var cellXF_uint = [
    "numFmtId",
    "fillId",
    "fontId",
    "borderId",
    "xfId"
];
var cellXF_bool = [
    "applyAlignment",
    "applyBorder",
    "applyFill",
    "applyFont",
    "applyNumberFormat",
    "applyProtection",
    "pivotButton",
    "quotePrefix"
];
function parse_cellXfs(t, styles, opts) {
    styles.CellXf = [];
    var xf;
    var pass = false;
    (t[0].match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x), i = 0;
        switch(strip_ns(y[0])){
            case "<cellXfs":
            case "<cellXfs>":
            case "<cellXfs/>":
            case "</cellXfs>":
                break;
            /* 18.8.45 xf CT_Xf */ case "<xf":
            case "<xf/>":
                xf = y;
                delete xf[0];
                for(i = 0; i < cellXF_uint.length; ++i)if (xf[cellXF_uint[i]]) xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);
                for(i = 0; i < cellXF_bool.length; ++i)if (xf[cellXF_bool[i]]) xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);
                if (styles.NumberFmt && xf.numFmtId > 0x188) {
                    for(i = 0x188; i > 0x3c; --i)if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) {
                        xf.numFmtId = i;
                        break;
                    }
                }
                styles.CellXf.push(xf);
                break;
            case "</xf>":
                break;
            /* 18.8.1 alignment CT_CellAlignment */ case "<alignment":
            case "<alignment/>":
                var alignment = {};
                if (y.vertical) alignment.vertical = y.vertical;
                if (y.horizontal) alignment.horizontal = y.horizontal;
                if (y.textRotation != null) alignment.textRotation = y.textRotation;
                if (y.indent) alignment.indent = y.indent;
                if (y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);
                xf.alignment = alignment;
                break;
            case "</alignment>":
                break;
            /* 18.8.33 protection CT_CellProtection */ case "<protection":
                break;
            case "</protection>":
            case "<protection/>":
                break;
            /* note: sometimes mc:AlternateContent appears bare */ case "<AlternateContent":
                pass = true;
                break;
            case "</AlternateContent>":
                pass = false;
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (opts && opts.WTF) {
                    if (!pass) throw new Error("unrecognized " + y[0] + " in cellXfs");
                }
        }
    });
}
function write_cellXfs(cellXfs) /*:string*/ {
    var o /*:Array<string>*/  = [];
    o[o.length] = writextag("cellXfs", null);
    cellXfs.forEach(function(c) {
        o[o.length] = writextag("xf", null, c);
    });
    o[o.length] = "</cellXfs>";
    if (o.length === 2) return "";
    o[0] = writextag("cellXfs", null, {
        count: o.length - 2
    }).replace("/>", ">");
    return o.join("");
}
/* 18.8 Styles CT_Stylesheet*/ var parse_sty_xml = /*#__PURE__*/ function make_pstyx() {
    var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
    var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
    var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
    var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
    var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;
    return function parse_sty_xml(data, themes, opts) {
        var styles = {};
        if (!data) return styles;
        data = data.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
        /* 18.8.39 styleSheet CT_Stylesheet */ var t;
        /* 18.8.31 numFmts CT_NumFmts ? */ if (t = data.match(numFmtRegex)) parse_numFmts(t, styles, opts);
        /* 18.8.23 fonts CT_Fonts ? */ if (t = data.match(fontsRegex)) parse_fonts(t, styles, themes, opts);
        /* 18.8.21 fills CT_Fills ? */ if (t = data.match(fillsRegex)) parse_fills(t, styles, themes, opts);
        /* 18.8.5  borders CT_Borders ? */ if (t = data.match(bordersRegex)) parse_borders(t, styles, themes, opts);
        /* 18.8.9  cellStyleXfs CT_CellStyleXfs ? */ /* 18.8.8  cellStyles CT_CellStyles ? */ /* 18.8.10 cellXfs CT_CellXfs ? */ if (t = data.match(cellXfRegex)) parse_cellXfs(t, styles, opts);
        /* 18.8.15 dxfs CT_Dxfs ? */ /* 18.8.42 tableStyles CT_TableStyles ? */ /* 18.8.11 colors CT_Colors ? */ /* 18.2.10 extLst CT_ExtensionList ? */ return styles;
    };
}();
function write_sty_xml(wb /*:Workbook*/ , opts) /*:string*/ {
    var o = [
        XML_HEADER,
        writextag("styleSheet", null, {
            "xmlns": XMLNS_main[0],
            "xmlns:vt": XMLNS.vt
        })
    ], w;
    if (wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w;
    o[o.length] = '<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>';
    o[o.length] = '<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>';
    o[o.length] = '<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>';
    o[o.length] = '<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>';
    if (w = write_cellXfs(opts.cellXfs)) o[o.length] = w;
    o[o.length] = '<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>';
    o[o.length] = '<dxfs count="0"/>';
    o[o.length] = '<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>';
    if (o.length > 2) {
        o[o.length] = "</styleSheet>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSB] 2.4.657 BrtFmt */ function parse_BrtFmt(data, length /*:number*/ ) {
    var numFmtId = data.read_shift(2);
    var stFmtCode = parse_XLWideString(data, length - 2);
    return [
        numFmtId,
        stFmtCode
    ];
}
function write_BrtFmt(i /*:number*/ , f /*:string*/ , o) {
    if (!o) o = new_buf(6 + 4 * f.length);
    o.write_shift(2, i);
    write_XLWideString(f, o);
    var out = o.length > o.l ? o.slice(0, o.l) : o;
    if (o.l == null) o.l = o.length;
    return out;
}
/* [MS-XLSB] 2.4.659 BrtFont TODO */ function parse_BrtFont(data, length /*:number*/ , opts) {
    var out = {} /*:any*/ ;
    out.sz = data.read_shift(2) / 20;
    var grbit = parse_FontFlags(data, 2, opts);
    if (grbit.fItalic) out.italic = 1;
    if (grbit.fCondense) out.condense = 1;
    if (grbit.fExtend) out.extend = 1;
    if (grbit.fShadow) out.shadow = 1;
    if (grbit.fOutline) out.outline = 1;
    if (grbit.fStrikeout) out.strike = 1;
    var bls = data.read_shift(2);
    if (bls === 0x02BC) out.bold = 1;
    switch(data.read_shift(2)){
        /* case 0: out.vertAlign = "baseline"; break; */ case 1:
            out.vertAlign = "superscript";
            break;
        case 2:
            out.vertAlign = "subscript";
            break;
    }
    var underline = data.read_shift(1);
    if (underline != 0) out.underline = underline;
    var family = data.read_shift(1);
    if (family > 0) out.family = family;
    var bCharSet = data.read_shift(1);
    if (bCharSet > 0) out.charset = bCharSet;
    data.l++;
    out.color = parse_BrtColor(data, 8);
    switch(data.read_shift(1)){
        /* case 0: out.scheme = "none": break; */ case 1:
            out.scheme = "major";
            break;
        case 2:
            out.scheme = "minor";
            break;
    }
    out.name = parse_XLWideString(data, length - 21);
    return out;
}
function write_BrtFont(font /*:any*/ , o) {
    if (!o) o = new_buf(153);
    o.write_shift(2, font.sz * 20);
    write_FontFlags(font, o);
    o.write_shift(2, font.bold ? 0x02BC : 0x0190);
    var sss = 0;
    if (font.vertAlign == "superscript") sss = 1;
    else if (font.vertAlign == "subscript") sss = 2;
    o.write_shift(2, sss);
    o.write_shift(1, font.underline || 0);
    o.write_shift(1, font.family || 0);
    o.write_shift(1, font.charset || 0);
    o.write_shift(1, 0);
    write_BrtColor(font.color, o);
    var scheme = 0;
    if (font.scheme == "major") scheme = 1;
    if (font.scheme == "minor") scheme = 2;
    o.write_shift(1, scheme);
    write_XLWideString(font.name, o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.650 BrtFill */ var XLSBFillPTNames = [
    "none",
    "solid",
    "mediumGray",
    "darkGray",
    "lightGray",
    "darkHorizontal",
    "darkVertical",
    "darkDown",
    "darkUp",
    "darkGrid",
    "darkTrellis",
    "lightHorizontal",
    "lightVertical",
    "lightDown",
    "lightUp",
    "lightGrid",
    "lightTrellis",
    "gray125",
    "gray0625"
];
var rev_XLSBFillPTNames /*:EvertNumType*/ ;
/* TODO: gradient fill representation */ var parse_BrtFill = parsenoop;
function write_BrtFill(fill, o) {
    if (!o) o = new_buf(84);
    if (!rev_XLSBFillPTNames) rev_XLSBFillPTNames = evert(XLSBFillPTNames);
    var fls /*:number*/  = rev_XLSBFillPTNames[fill.patternType];
    if (fls == null) fls = 0x28;
    o.write_shift(4, fls);
    var j = 0;
    if (fls != 0x28) {
        /* TODO: custom FG Color */ write_BrtColor({
            auto: 1
        }, o);
        /* TODO: custom BG Color */ write_BrtColor({
            auto: 1
        }, o);
        for(; j < 12; ++j)o.write_shift(4, 0);
    } else {
        for(; j < 4; ++j)o.write_shift(4, 0);
        for(; j < 12; ++j)o.write_shift(4, 0); /* TODO */ 
    /* iGradientType */ /* xnumDegree */ /* xnumFillToLeft */ /* xnumFillToRight */ /* xnumFillToTop */ /* xnumFillToBottom */ /* cNumStop */ /* xfillGradientStop */ }
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.824 BrtXF */ function parse_BrtXF(data, length /*:number*/ ) {
    var tgt = data.l + length;
    var ixfeParent = data.read_shift(2);
    var ifmt = data.read_shift(2);
    data.l = tgt;
    return {
        ixfe: ixfeParent,
        numFmtId: ifmt
    };
}
function write_BrtXF(data, ixfeP, o) {
    if (!o) o = new_buf(16);
    o.write_shift(2, ixfeP || 0);
    o.write_shift(2, data.numFmtId || 0);
    o.write_shift(2, 0); /* iFont */ 
    o.write_shift(2, 0); /* iFill */ 
    o.write_shift(2, 0); /* ixBorder */ 
    o.write_shift(1, 0); /* trot */ 
    o.write_shift(1, 0); /* indent */ 
    var flow = 0;
    o.write_shift(1, flow); /* flags */ 
    o.write_shift(1, 0); /* flags */ 
    o.write_shift(1, 0); /* xfGrbitAtr */ 
    o.write_shift(1, 0);
    return o;
}
/* [MS-XLSB] 2.5.4 Blxf TODO */ function write_Blxf(data, o) {
    if (!o) o = new_buf(10);
    o.write_shift(1, 0); /* dg */ 
    o.write_shift(1, 0);
    o.write_shift(4, 0); /* color */ 
    o.write_shift(4, 0); /* color */ 
    return o;
}
/* [MS-XLSB] 2.4.302 BrtBorder TODO */ var parse_BrtBorder = parsenoop;
function write_BrtBorder(border, o) {
    if (!o) o = new_buf(51);
    o.write_shift(1, 0); /* diagonal */ 
    write_Blxf(null, o); /* top */ 
    write_Blxf(null, o); /* bottom */ 
    write_Blxf(null, o); /* left */ 
    write_Blxf(null, o); /* right */ 
    write_Blxf(null, o); /* diag */ 
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.763 BrtStyle TODO */ function write_BrtStyle(style, o) {
    if (!o) o = new_buf(52);
    o.write_shift(4, style.xfId);
    o.write_shift(2, 1);
    o.write_shift(1, +style.builtinId);
    o.write_shift(1, 0); /* iLevel */ 
    write_XLNullableWideString(style.name || "", o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.272 BrtBeginTableStyles */ function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
    var o = new_buf(2052);
    o.write_shift(4, cnt);
    write_XLNullableWideString(defTableStyle, o);
    write_XLNullableWideString(defPivotStyle, o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.1.7.50 Styles */ function parse_sty_bin(data, themes, opts) {
    var styles = {};
    styles.NumberFmt = [];
    for(var y in table_fmt)styles.NumberFmt[y] = table_fmt[y];
    styles.CellXf = [];
    styles.Fonts = [];
    var state /*:Array<string>*/  = [];
    var pass = false;
    recordhopper(data, function hopper_sty(val, R, RT) {
        switch(RT){
            case 0x002C:
                /* BrtFmt */ styles.NumberFmt[val[0]] = val[1];
                SSF_load(val[1], val[0]);
                break;
            case 0x002B:
                /* BrtFont */ styles.Fonts.push(val);
                if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
                break;
            case 0x0401:
                break;
            case 0x002D:
                break;
            case 0x002E:
                break;
            case 0x002F:
                /* BrtXF */ if (state[state.length - 1] == 0x0269 /* BrtBeginCellXFs */ ) styles.CellXf.push(val);
                break;
            case 0x0030:
            /* BrtStyle */ case 0x01FB:
            /* BrtDXF */ case 0x023C:
            /* BrtMRUColor */ case 0x01DB:
                break;
            case 0x0493:
            /* BrtDXF14 */ case 0x0836:
            /* BrtDXF15 */ case 0x046A:
            /* BrtSlicerStyleElement */ case 0x0200:
            /* BrtTableStyleElement */ case 0x082F:
            /* BrtTimelineStyleElement */ case 0x0C00:
                break;
            case 0x0023:
                /* BrtFRTBegin */ pass = true;
                break;
            case 0x0024:
                /* BrtFRTEnd */ pass = false;
                break;
            case 0x0025:
                /* BrtACBegin */ state.push(RT);
                pass = true;
                break;
            case 0x0026:
                /* BrtACEnd */ state.pop();
                pass = false;
                break;
            default:
                if (R.T > 0) state.push(RT);
                else if (R.T < 0) state.pop();
                else if (!pass || opts.WTF && state[state.length - 1] != 0x0025 /* BrtACBegin */ ) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    });
    return styles;
}
function write_FMTS_bin(ba, NF /*:?SSFTable*/ ) {
    if (!NF) return;
    var cnt = 0;
    [
        [
            5,
            8
        ],
        [
            23,
            26
        ],
        [
            41,
            44
        ],
        [
            /*63*/ 50,
            /*66],[164,*/ 392
        ]
    ].forEach(function(r) {
        /*:: if(!NF) return; */ for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) ++cnt;
    });
    if (cnt == 0) return;
    write_record(ba, 0x0267 /* BrtBeginFmts */ , write_UInt32LE(cnt));
    [
        [
            5,
            8
        ],
        [
            23,
            26
        ],
        [
            41,
            44
        ],
        [
            /*63*/ 50,
            /*66],[164,*/ 392
        ]
    ].forEach(function(r) {
        /*:: if(!NF) return; */ for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) write_record(ba, 0x002C /* BrtFmt */ , write_BrtFmt(i, NF[i]));
    });
    write_record(ba, 0x0268 /* BrtEndFmts */ );
}
function write_FONTS_bin(ba /*::, data*/ ) {
    var cnt = 1;
    if (cnt == 0) return;
    write_record(ba, 0x0263 /* BrtBeginFonts */ , write_UInt32LE(cnt));
    write_record(ba, 0x002B /* BrtFont */ , write_BrtFont({
        sz: 12,
        color: {
            theme: 1
        },
        name: "Calibri",
        family: 2,
        scheme: "minor"
    }));
    /* 1*65491BrtFont [ACFONTS] */ write_record(ba, 0x0264 /* BrtEndFonts */ );
}
function write_FILLS_bin(ba /*::, data*/ ) {
    var cnt = 2;
    if (cnt == 0) return;
    write_record(ba, 0x025B /* BrtBeginFills */ , write_UInt32LE(cnt));
    write_record(ba, 0x002D /* BrtFill */ , write_BrtFill({
        patternType: "none"
    }));
    write_record(ba, 0x002D /* BrtFill */ , write_BrtFill({
        patternType: "gray125"
    }));
    /* 1*65431BrtFill */ write_record(ba, 0x025C /* BrtEndFills */ );
}
function write_BORDERS_bin(ba /*::, data*/ ) {
    var cnt = 1;
    if (cnt == 0) return;
    write_record(ba, 0x0265 /* BrtBeginBorders */ , write_UInt32LE(cnt));
    write_record(ba, 0x002E /* BrtBorder */ , write_BrtBorder({}));
    /* 1*65430BrtBorder */ write_record(ba, 0x0266 /* BrtEndBorders */ );
}
function write_CELLSTYLEXFS_bin(ba /*::, data*/ ) {
    var cnt = 1;
    write_record(ba, 0x0272 /* BrtBeginCellStyleXFs */ , write_UInt32LE(cnt));
    write_record(ba, 0x002F /* BrtXF */ , write_BrtXF({
        numFmtId: 0,
        fontId: 0,
        fillId: 0,
        borderId: 0
    }, 0xFFFF));
    /* 1*65430(BrtXF *FRT) */ write_record(ba, 0x0273 /* BrtEndCellStyleXFs */ );
}
function write_CELLXFS_bin(ba, data) {
    write_record(ba, 0x0269 /* BrtBeginCellXFs */ , write_UInt32LE(data.length));
    data.forEach(function(c) {
        write_record(ba, 0x002F /* BrtXF */ , write_BrtXF(c, 0));
    });
    /* 1*65430(BrtXF *FRT) */ write_record(ba, 0x026A /* BrtEndCellXFs */ );
}
function write_STYLES_bin(ba /*::, data*/ ) {
    var cnt = 1;
    write_record(ba, 0x026B /* BrtBeginStyles */ , write_UInt32LE(cnt));
    write_record(ba, 0x0030 /* BrtStyle */ , write_BrtStyle({
        xfId: 0,
        builtinId: 0,
        name: "Normal"
    }));
    /* 1*65430(BrtStyle *FRT) */ write_record(ba, 0x026C /* BrtEndStyles */ );
}
function write_DXFS_bin(ba /*::, data*/ ) {
    var cnt = 0;
    write_record(ba, 0x01F9 /* BrtBeginDXFs */ , write_UInt32LE(cnt));
    /* *2147483647(BrtDXF *FRT) */ write_record(ba, 0x01FA /* BrtEndDXFs */ );
}
function write_TABLESTYLES_bin(ba /*::, data*/ ) {
    var cnt = 0;
    write_record(ba, 0x01FC /* BrtBeginTableStyles */ , write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4"));
    /* *TABLESTYLE */ write_record(ba, 0x01FD /* BrtEndTableStyles */ );
}
function write_COLORPALETTE_bin() {
    return;
/* BrtBeginColorPalette [INDEXEDCOLORS] [MRUCOLORS] BrtEndColorPalette */ }
/* [MS-XLSB] 2.1.7.50 Styles */ function write_sty_bin(wb, opts) {
    var ba = buf_array();
    write_record(ba, 0x0116 /* BrtBeginStyleSheet */ );
    write_FMTS_bin(ba, wb.SSF);
    write_FONTS_bin(ba, wb);
    write_FILLS_bin(ba, wb);
    write_BORDERS_bin(ba, wb);
    write_CELLSTYLEXFS_bin(ba, wb);
    write_CELLXFS_bin(ba, opts.cellXfs);
    write_STYLES_bin(ba, wb);
    write_DXFS_bin(ba, wb);
    write_TABLESTYLES_bin(ba, wb);
    write_COLORPALETTE_bin(ba, wb);
    /* FRTSTYLESHEET*/ write_record(ba, 0x0117 /* BrtEndStyleSheet */ );
    return ba.end();
}
/* Even though theme layout is dk1 lt1 dk2 lt2, true order is lt1 dk1 lt2 dk2 */ var XLSXThemeClrScheme = [
    "</a:lt1>",
    "</a:dk1>",
    "</a:lt2>",
    "</a:dk2>",
    "</a:accent1>",
    "</a:accent2>",
    "</a:accent3>",
    "</a:accent4>",
    "</a:accent5>",
    "</a:accent6>",
    "</a:hlink>",
    "</a:folHlink>"
];
/* 20.1.6.2 clrScheme CT_ColorScheme */ function parse_clrScheme(t, themes, opts) {
    themes.themeElements.clrScheme = [];
    var color = {};
    (t[0].match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(y[0]){
            /* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */ case "<a:clrScheme":
            case "</a:clrScheme>":
                break;
            /* 20.1.2.3.32 srgbClr CT_SRgbColor */ case "<a:srgbClr":
                color.rgb = y.val;
                break;
            /* 20.1.2.3.33 sysClr CT_SystemColor */ case "<a:sysClr":
                color.rgb = y.lastClr;
                break;
            /* 20.1.4.1.1 accent1 (Accent 1) */ /* 20.1.4.1.2 accent2 (Accent 2) */ /* 20.1.4.1.3 accent3 (Accent 3) */ /* 20.1.4.1.4 accent4 (Accent 4) */ /* 20.1.4.1.5 accent5 (Accent 5) */ /* 20.1.4.1.6 accent6 (Accent 6) */ /* 20.1.4.1.9 dk1 (Dark 1) */ /* 20.1.4.1.10 dk2 (Dark 2) */ /* 20.1.4.1.15 folHlink (Followed Hyperlink) */ /* 20.1.4.1.19 hlink (Hyperlink) */ /* 20.1.4.1.22 lt1 (Light 1) */ /* 20.1.4.1.23 lt2 (Light 2) */ case "<a:dk1>":
            case "</a:dk1>":
            case "<a:lt1>":
            case "</a:lt1>":
            case "<a:dk2>":
            case "</a:dk2>":
            case "<a:lt2>":
            case "</a:lt2>":
            case "<a:accent1>":
            case "</a:accent1>":
            case "<a:accent2>":
            case "</a:accent2>":
            case "<a:accent3>":
            case "</a:accent3>":
            case "<a:accent4>":
            case "</a:accent4>":
            case "<a:accent5>":
            case "</a:accent5>":
            case "<a:accent6>":
            case "</a:accent6>":
            case "<a:hlink>":
            case "</a:hlink>":
            case "<a:folHlink>":
            case "</a:folHlink>":
                if (y[0].charAt(1) === "/") {
                    themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;
                    color = {};
                } else color.name = y[0].slice(3, y[0].length - 1);
                break;
            default:
                if (opts && opts.WTF) throw new Error("Unrecognized " + y[0] + " in clrScheme");
        }
    });
}
/* 20.1.4.1.18 fontScheme CT_FontScheme */ function parse_fontScheme() {}
/* 20.1.4.1.15 fmtScheme CT_StyleMatrix */ function parse_fmtScheme() {}
var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;
/* 20.1.6.10 themeElements CT_BaseStyles */ function parse_themeElements(data, themes, opts) {
    themes.themeElements = {};
    var t;
    [
        /* clrScheme CT_ColorScheme */ [
            "clrScheme",
            clrsregex,
            parse_clrScheme
        ],
        /* fontScheme CT_FontScheme */ [
            "fontScheme",
            fntsregex,
            parse_fontScheme
        ],
        /* fmtScheme CT_StyleMatrix */ [
            "fmtScheme",
            fmtsregex,
            parse_fmtScheme
        ]
    ].forEach(function(m) {
        if (!(t = data.match(m[1]))) throw new Error(m[0] + " not found in themeElements");
        m[2](t, themes, opts);
    });
}
var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;
/* 14.2.7 Theme Part */ function parse_theme_xml(data /*:string*/ , opts) {
    /* 20.1.6.9 theme CT_OfficeStyleSheet */ if (!data || data.length === 0) data = write_theme();
    var t;
    var themes = {};
    /* themeElements CT_BaseStyles */ if (!(t = data.match(themeltregex))) throw new Error("themeElements not found in theme");
    parse_themeElements(t[0], themes, opts);
    themes.raw = data;
    return themes;
}
function write_theme(Themes, opts) /*:string*/ {
    if (opts && opts.themeXLSX) return opts.themeXLSX;
    if (Themes && typeof Themes.raw == "string") return Themes.raw;
    var o = [
        XML_HEADER
    ];
    o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
    o[o.length] = "<a:themeElements>";
    o[o.length] = '<a:clrScheme name="Office">';
    o[o.length] = '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
    o[o.length] = '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
    o[o.length] = '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
    o[o.length] = '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
    o[o.length] = '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
    o[o.length] = '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
    o[o.length] = '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
    o[o.length] = '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
    o[o.length] = '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
    o[o.length] = '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
    o[o.length] = '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
    o[o.length] = '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
    o[o.length] = "</a:clrScheme>";
    o[o.length] = '<a:fontScheme name="Office">';
    o[o.length] = "<a:majorFont>";
    o[o.length] = '<a:latin typeface="Cambria"/>';
    o[o.length] = '<a:ea typeface=""/>';
    o[o.length] = '<a:cs typeface=""/>';
    o[o.length] = '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
    o[o.length] = '<a:font script="Hang" typeface="맑은 고딕"/>';
    o[o.length] = '<a:font script="Hans" typeface="宋体"/>';
    o[o.length] = '<a:font script="Hant" typeface="新細明體"/>';
    o[o.length] = '<a:font script="Arab" typeface="Times New Roman"/>';
    o[o.length] = '<a:font script="Hebr" typeface="Times New Roman"/>';
    o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
    o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
    o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
    o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
    o[o.length] = '<a:font script="Khmr" typeface="MoolBoran"/>';
    o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
    o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
    o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
    o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
    o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
    o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
    o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
    o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
    o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
    o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
    o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    o[o.length] = '<a:font script="Viet" typeface="Times New Roman"/>';
    o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
    o[o.length] = "</a:majorFont>";
    o[o.length] = "<a:minorFont>";
    o[o.length] = '<a:latin typeface="Calibri"/>';
    o[o.length] = '<a:ea typeface=""/>';
    o[o.length] = '<a:cs typeface=""/>';
    o[o.length] = '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
    o[o.length] = '<a:font script="Hang" typeface="맑은 고딕"/>';
    o[o.length] = '<a:font script="Hans" typeface="宋体"/>';
    o[o.length] = '<a:font script="Hant" typeface="新細明體"/>';
    o[o.length] = '<a:font script="Arab" typeface="Arial"/>';
    o[o.length] = '<a:font script="Hebr" typeface="Arial"/>';
    o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
    o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
    o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
    o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
    o[o.length] = '<a:font script="Khmr" typeface="DaunPenh"/>';
    o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
    o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
    o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
    o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
    o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
    o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
    o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
    o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
    o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
    o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
    o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    o[o.length] = '<a:font script="Viet" typeface="Arial"/>';
    o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
    o[o.length] = "</a:minorFont>";
    o[o.length] = "</a:fontScheme>";
    o[o.length] = '<a:fmtScheme name="Office">';
    o[o.length] = "<a:fillStyleLst>";
    o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = "<a:gsLst>";
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = "</a:gsLst>";
    o[o.length] = '<a:lin ang="16200000" scaled="1"/>';
    o[o.length] = "</a:gradFill>";
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = "<a:gsLst>";
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = "</a:gsLst>";
    o[o.length] = '<a:lin ang="16200000" scaled="0"/>';
    o[o.length] = "</a:gradFill>";
    o[o.length] = "</a:fillStyleLst>";
    o[o.length] = "<a:lnStyleLst>";
    o[o.length] = '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o[o.length] = '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o[o.length] = '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o[o.length] = "</a:lnStyleLst>";
    o[o.length] = "<a:effectStyleLst>";
    o[o.length] = "<a:effectStyle>";
    o[o.length] = "<a:effectLst>";
    o[o.length] = '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
    o[o.length] = "</a:effectLst>";
    o[o.length] = "</a:effectStyle>";
    o[o.length] = "<a:effectStyle>";
    o[o.length] = "<a:effectLst>";
    o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    o[o.length] = "</a:effectLst>";
    o[o.length] = "</a:effectStyle>";
    o[o.length] = "<a:effectStyle>";
    o[o.length] = "<a:effectLst>";
    o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    o[o.length] = "</a:effectLst>";
    o[o.length] = '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
    o[o.length] = '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
    o[o.length] = "</a:effectStyle>";
    o[o.length] = "</a:effectStyleLst>";
    o[o.length] = "<a:bgFillStyleLst>";
    o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = "<a:gsLst>";
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
    o[o.length] = "</a:gsLst>";
    o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
    o[o.length] = "</a:gradFill>";
    o[o.length] = '<a:gradFill rotWithShape="1">';
    o[o.length] = "<a:gsLst>";
    o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
    o[o.length] = "</a:gsLst>";
    o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
    o[o.length] = "</a:gradFill>";
    o[o.length] = "</a:bgFillStyleLst>";
    o[o.length] = "</a:fmtScheme>";
    o[o.length] = "</a:themeElements>";
    o[o.length] = "<a:objectDefaults>";
    o[o.length] = "<a:spDef>";
    o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
    o[o.length] = "</a:spDef>";
    o[o.length] = "<a:lnDef>";
    o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
    o[o.length] = "</a:lnDef>";
    o[o.length] = "</a:objectDefaults>";
    o[o.length] = "<a:extraClrSchemeLst/>";
    o[o.length] = "</a:theme>";
    return o.join("");
}
/* [MS-XLS] 2.4.326 TODO: payload is a zip file */ function parse_Theme(blob, length, opts) {
    var end = blob.l + length;
    var dwThemeVersion = blob.read_shift(4);
    if (dwThemeVersion === 124226) return;
    if (!opts.cellStyles) {
        blob.l = end;
        return;
    }
    var data = blob.slice(blob.l);
    blob.l = end;
    var zip;
    try {
        zip = zip_read(data, {
            type: "array"
        });
    } catch (e) {
        return;
    }
    var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
    if (!themeXML) return;
    return parse_theme_xml(themeXML, opts);
}
/* 2.5.49 */ function parse_ColorTheme(blob /*::, length*/ ) {
    return blob.read_shift(4);
}
/* 2.5.155 */ function parse_FullColorExt(blob /*::, length*/ ) {
    var o = {};
    o.xclrType = blob.read_shift(2);
    o.nTintShade = blob.read_shift(2);
    switch(o.xclrType){
        case 0:
            blob.l += 4;
            break;
        case 1:
            o.xclrValue = parse_IcvXF(blob, 4);
            break;
        case 2:
            o.xclrValue = parse_LongRGBA(blob, 4);
            break;
        case 3:
            o.xclrValue = parse_ColorTheme(blob, 4);
            break;
        case 4:
            blob.l += 4;
            break;
    }
    blob.l += 8;
    return o;
}
/* 2.5.164 TODO: read 7 bits*/ function parse_IcvXF(blob, length) {
    return parsenoop(blob, length);
}
/* 2.5.280 */ function parse_XFExtGradient(blob, length) {
    return parsenoop(blob, length);
}
/* [MS-XLS] 2.5.108 */ function parse_ExtProp(blob /*::, length*/ ) /*:Array<any>*/ {
    var extType = blob.read_shift(2);
    var cb = blob.read_shift(2) - 4;
    var o = [
        extType
    ];
    switch(extType){
        case 0x04:
        case 0x05:
        case 0x07:
        case 0x08:
        case 0x09:
        case 0x0A:
        case 0x0B:
        case 0x0D:
            o[1] = parse_FullColorExt(blob, cb);
            break;
        case 0x06:
            o[1] = parse_XFExtGradient(blob, cb);
            break;
        case 0x0E:
        case 0x0F:
            o[1] = blob.read_shift(cb === 1 ? 1 : 2);
            break;
        default:
            throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
    }
    return o;
}
/* 2.4.355 */ function parse_XFExt(blob, length) {
    var end = blob.l + length;
    blob.l += 2;
    var ixfe = blob.read_shift(2);
    blob.l += 2;
    var cexts = blob.read_shift(2);
    var ext /*:AOA*/  = [];
    while(cexts-- > 0)ext.push(parse_ExtProp(blob, end - blob.l));
    return {
        ixfe: ixfe,
        ext: ext
    };
}
/* xf is an XF, see parse_XFExt for xfext */ function update_xfext(xf, xfext) {
    xfext.forEach(function(xfe) {
        xfe[0];
    });
}
function parse_BrtMdtinfo(data, length) {
    return {
        flags: data.read_shift(4),
        version: data.read_shift(4),
        name: parse_XLWideString(data, length - 8)
    };
}
function write_BrtMdtinfo(data) {
    var o = new_buf(12 + 2 * data.name.length);
    o.write_shift(4, data.flags);
    o.write_shift(4, data.version);
    write_XLWideString(data.name, o);
    return o.slice(0, o.l);
}
function parse_BrtMdb(data) {
    var out = [];
    var cnt = data.read_shift(4);
    while(cnt-- > 0)out.push([
        data.read_shift(4),
        data.read_shift(4)
    ]);
    return out;
}
function write_BrtMdb(mdb) {
    var o = new_buf(4 + 8 * mdb.length);
    o.write_shift(4, mdb.length);
    for(var i = 0; i < mdb.length; ++i){
        o.write_shift(4, mdb[i][0]);
        o.write_shift(4, mdb[i][1]);
    }
    return o;
}
function write_BrtBeginEsfmd(cnt, name) {
    var o = new_buf(8 + 2 * name.length);
    o.write_shift(4, cnt);
    write_XLWideString(name, o);
    return o.slice(0, o.l);
}
function parse_BrtBeginEsmdb(data) {
    data.l += 4;
    return data.read_shift(4) != 0;
}
function write_BrtBeginEsmdb(cnt, cm) {
    var o = new_buf(8);
    o.write_shift(4, cnt);
    o.write_shift(4, cm ? 1 : 0);
    return o;
}
function parse_xlmeta_bin(data, name, _opts) {
    var out = {
        Types: [],
        Cell: [],
        Value: []
    };
    var opts = _opts || {};
    var state = [];
    var pass = false;
    var metatype = 2;
    recordhopper(data, function(val, R, RT) {
        switch(RT){
            case 335:
                out.Types.push({
                    name: val.name
                });
                break;
            case 51:
                val.forEach(function(r) {
                    if (metatype == 1) out.Cell.push({
                        type: out.Types[r[0] - 1].name,
                        index: r[1]
                    });
                    else if (metatype == 0) out.Value.push({
                        type: out.Types[r[0] - 1].name,
                        index: r[1]
                    });
                });
                break;
            case 337:
                metatype = val ? 1 : 0;
                break;
            case 338:
                metatype = 2;
                break;
            case 35:
                state.push(RT);
                pass = true;
                break;
            case 36:
                state.pop();
                pass = false;
                break;
            default:
                if (R.T) ;
                else if (!pass || opts.WTF && state[state.length - 1] != 35) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    });
    return out;
}
function write_xlmeta_bin() {
    var ba = buf_array();
    write_record(ba, 332);
    write_record(ba, 334, write_UInt32LE(1));
    write_record(ba, 335, write_BrtMdtinfo({
        name: "XLDAPR",
        version: 12e4,
        flags: 3496657072
    }));
    write_record(ba, 336);
    write_record(ba, 339, write_BrtBeginEsfmd(1, "XLDAPR"));
    write_record(ba, 52);
    write_record(ba, 35, write_UInt32LE(514));
    write_record(ba, 4096, write_UInt32LE(0));
    write_record(ba, 4097, writeuint16(1));
    write_record(ba, 36);
    write_record(ba, 53);
    write_record(ba, 340);
    write_record(ba, 337, write_BrtBeginEsmdb(1, true));
    write_record(ba, 51, write_BrtMdb([
        [
            1,
            0
        ]
    ]));
    write_record(ba, 338);
    write_record(ba, 333);
    return ba.end();
}
function parse_xlmeta_xml(data, name, opts) {
    var out = {
        Types: [],
        Cell: [],
        Value: []
    };
    if (!data) return out;
    var pass = false;
    var metatype = 2;
    var lastmeta;
    data.replace(tagregex, function(x) {
        var y = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<?xml":
                break;
            case "<metadata":
            case "</metadata>":
                break;
            case "<metadataTypes":
            case "</metadataTypes>":
                break;
            case "<metadataType":
                out.Types.push({
                    name: y.name
                });
                break;
            case "</metadataType>":
                break;
            case "<futureMetadata":
                for(var j = 0; j < out.Types.length; ++j)if (out.Types[j].name == y.name) lastmeta = out.Types[j];
                break;
            case "</futureMetadata>":
                break;
            case "<bk>":
                break;
            case "</bk>":
                break;
            case "<rc":
                if (metatype == 1) out.Cell.push({
                    type: out.Types[y.t - 1].name,
                    index: +y.v
                });
                else if (metatype == 0) out.Value.push({
                    type: out.Types[y.t - 1].name,
                    index: +y.v
                });
                break;
            case "</rc>":
                break;
            case "<cellMetadata":
                metatype = 1;
                break;
            case "</cellMetadata>":
                metatype = 2;
                break;
            case "<valueMetadata":
                metatype = 0;
                break;
            case "</valueMetadata>":
                metatype = 2;
                break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
                break;
            case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            case "<rvb":
                if (!lastmeta) break;
                if (!lastmeta.offsets) lastmeta.offsets = [];
                lastmeta.offsets.push(+y.i);
                break;
            default:
                if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in metadata");
        }
        return x;
    });
    return out;
}
function write_xlmeta_xml() {
    var o = [
        XML_HEADER
    ];
    o.push('<metadata xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:xlrd="http://schemas.microsoft.com/office/spreadsheetml/2017/richdata" xmlns:xda="http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray">\n  <metadataTypes count="1">\n    <metadataType name="XLDAPR" minSupportedVersion="120000" copy="1" pasteAll="1" pasteValues="1" merge="1" splitFirst="1" rowColShift="1" clearFormats="1" clearComments="1" assign="1" coerce="1" cellMeta="1"/>\n  </metadataTypes>\n  <futureMetadata name="XLDAPR" count="1">\n    <bk>\n      <extLst>\n        <ext uri="{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}">\n          <xda:dynamicArrayProperties fDynamic="1" fCollapsed="0"/>\n        </ext>\n      </extLst>\n    </bk>\n  </futureMetadata>\n  <cellMetadata count="1">\n    <bk>\n      <rc t="1" v="0"/>\n    </bk>\n  </cellMetadata>\n</metadata>');
    return o.join("");
}
/* 18.6 Calculation Chain */ function parse_cc_xml(data /*::, name, opts*/ ) /*:Array<any>*/ {
    var d = [];
    if (!data) return d;
    var i = 1;
    (data.match(tagregex) || []).forEach(function(x) {
        var y = parsexmltag(x);
        switch(y[0]){
            case "<?xml":
                break;
            /* 18.6.2  calcChain CT_CalcChain 1 */ case "<calcChain":
            case "<calcChain>":
            case "</calcChain>":
                break;
            /* 18.6.1  c CT_CalcCell 1 */ case "<c":
                delete y[0];
                if (y.i) i = y.i;
                else y.i = i;
                d.push(y);
                break;
        }
    });
    return d;
}
//function write_cc_xml(data, opts) { }
/* [MS-XLSB] 2.6.4.1 */ function parse_BrtCalcChainItem$(data) {
    var out = {};
    out.i = data.read_shift(4);
    var cell = {};
    cell.r = data.read_shift(4);
    cell.c = data.read_shift(4);
    out.r = encode_cell(cell);
    var flags = data.read_shift(1);
    if (flags & 0x2) out.l = "1";
    if (flags & 0x8) out.a = "1";
    return out;
}
/* 18.6 Calculation Chain */ function parse_cc_bin(data, name, opts) {
    var out = [];
    var pass = false;
    recordhopper(data, function hopper_cc(val, R, RT) {
        switch(RT){
            case 0x003F:
                /* 'BrtCalcChainItem$' */ out.push(val);
                break;
            default:
                if (R.T) ;
                else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    });
    return out;
}
//function write_cc_bin(data, opts) { }
/* 18.14 Supplementary Workbook Data */ function parse_xlink_xml() {
//var opts = _opts || {};
//if(opts.WTF) throw "XLSX External Link";
}
/* [MS-XLSB] 2.1.7.25 External Link */ function parse_xlink_bin(data, rel, name /*:string*/ , _opts) {
    if (!data) return data;
    var opts = _opts || {};
    var pass = false, end = false;
    recordhopper(data, function xlink_parse(val, R, RT) {
        if (end) return;
        switch(RT){
            case 0x0167:
            /* 'BrtSupTabs' */ case 0x016B:
            /* 'BrtExternTableStart' */ case 0x016C:
            /* 'BrtExternTableEnd' */ case 0x016E:
            /* 'BrtExternRowHdr' */ case 0x016F:
            /* 'BrtExternCellBlank' */ case 0x0170:
            /* 'BrtExternCellReal' */ case 0x0171:
            /* 'BrtExternCellBool' */ case 0x0172:
            /* 'BrtExternCellError' */ case 0x0173:
            /* 'BrtExternCellString' */ case 0x01D8:
            /* 'BrtExternValueMeta' */ case 0x0241:
            /* 'BrtSupNameStart' */ case 0x0242:
            /* 'BrtSupNameValueStart' */ case 0x0243:
            /* 'BrtSupNameValueEnd' */ case 0x0244:
            /* 'BrtSupNameNum' */ case 0x0245:
            /* 'BrtSupNameErr' */ case 0x0246:
            /* 'BrtSupNameSt' */ case 0x0247:
            /* 'BrtSupNameNil' */ case 0x0248:
            /* 'BrtSupNameBool' */ case 0x0249:
            /* 'BrtSupNameFmla' */ case 0x024A:
            /* 'BrtSupNameBits' */ case 0x024B:
                break;
            case 0x0023:
                /* 'BrtFRTBegin' */ pass = true;
                break;
            case 0x0024:
                /* 'BrtFRTEnd' */ pass = false;
                break;
            default:
                if (R.T) ;
                else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    }, opts);
}
/* 20.5 DrawingML - SpreadsheetML Drawing */ /* 20.5.2.35 wsDr CT_Drawing */ function parse_drawing(data, rels /*:any*/ ) {
    if (!data) return "??";
    /*
	  Chartsheet Drawing:
	   - 20.5.2.35 wsDr CT_Drawing
	    - 20.5.2.1  absoluteAnchor CT_AbsoluteAnchor
	     - 20.5.2.16 graphicFrame CT_GraphicalObjectFrame
	      - 20.1.2.2.16 graphic CT_GraphicalObject
	       - 20.1.2.2.17 graphicData CT_GraphicalObjectData
          - chart reference
	   the actual type is based on the URI of the graphicData
		TODO: handle embedded charts and other types of graphics
	*/ var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/) || [
        "",
        ""
    ])[1];
    return rels["!id"][id].Target;
}
/* L.5.5.2 SpreadsheetML Comments + VML Schema */ var _shapeid = 1024;
function write_comments_vml(rId /*:number*/ , comments) {
    var csize = [
        21600,
        21600
    ];
    /* L.5.2.1.2 Path Attribute */ var bbox = [
        "m0,0l0",
        csize[1],
        csize[0],
        csize[1],
        csize[0],
        "0xe"
    ].join(",");
    var o = [
        writextag("xml", null, {
            "xmlns:v": XLMLNS.v,
            "xmlns:o": XLMLNS.o,
            "xmlns:x": XLMLNS.x,
            "xmlns:mv": XLMLNS.mv
        }).replace(/\/>/, ">"),
        writextag("o:shapelayout", writextag("o:idmap", null, {
            "v:ext": "edit",
            "data": rId
        }), {
            "v:ext": "edit"
        }),
        writextag("v:shapetype", [
            writextag("v:stroke", null, {
                joinstyle: "miter"
            }),
            writextag("v:path", null, {
                gradientshapeok: "t",
                "o:connecttype": "rect"
            })
        ].join(""), {
            id: "_x0000_t202",
            "o:spt": 202,
            coordsize: csize.join(","),
            path: bbox
        })
    ];
    while(_shapeid < rId * 1000)_shapeid += 1000;
    comments.forEach(function(x) {
        var c = decode_cell(x[0]);
        var fillopts = /*::(*/ {
            "color2": "#BEFF82",
            "type": "gradient"
        } /*:: :any)*/ ;
        if (fillopts.type == "gradient") fillopts.angle = "-180";
        var fillparm = fillopts.type == "gradient" ? writextag("o:fill", null, {
            type: "gradientUnscaled",
            "v:ext": "view"
        }) : null;
        var fillxml = writextag("v:fill", fillparm, fillopts);
        var shadata = {
            on: "t",
            "obscured": "t"
        } /*:any*/ ;
        ++_shapeid;
        o = o.concat([
            "<v:shape" + wxt_helper({
                id: "_x0000_s" + _shapeid,
                type: "#_x0000_t202",
                style: "position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10" + (x[1].hidden ? ";visibility:hidden" : ""),
                fillcolor: "#ECFAD4",
                strokecolor: "#edeaa1"
            }) + ">",
            fillxml,
            writextag("v:shadow", null, shadata),
            writextag("v:path", null, {
                "o:connecttype": "none"
            }),
            '<v:textbox><div style="text-align:left"></div></v:textbox>',
            '<x:ClientData ObjectType="Note">',
            "<x:MoveWithCells/>",
            "<x:SizeWithCells/>",
            /* Part 4 19.4.2.3 Anchor (Anchor) */ writetag("x:Anchor", [
                c.c + 1,
                0,
                c.r + 1,
                0,
                c.c + 3,
                20,
                c.r + 5,
                20
            ].join(",")),
            writetag("x:AutoFill", "False"),
            writetag("x:Row", String(c.r)),
            writetag("x:Column", String(c.c)),
            x[1].hidden ? "" : "<x:Visible/>",
            "</x:ClientData>",
            "</v:shape>"
        ]);
    });
    o.push("</xml>");
    return o.join("");
}
function sheet_insert_comments(sheet, comments /*:Array<RawComment>*/ , threaded /*:boolean*/ , people /*:?Array<any>*/ ) {
    var dense = Array.isArray(sheet);
    var cell /*:Cell*/ ;
    comments.forEach(function(comment) {
        var r = decode_cell(comment.ref);
        if (dense) {
            if (!sheet[r.r]) sheet[r.r] = [];
            cell = sheet[r.r][r.c];
        } else cell = sheet[comment.ref];
        if (!cell) {
            cell = {
                t: "z"
            } /*:any*/ ;
            if (dense) sheet[r.r][r.c] = cell;
            else sheet[comment.ref] = cell;
            var range = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1");
            if (range.s.r > r.r) range.s.r = r.r;
            if (range.e.r < r.r) range.e.r = r.r;
            if (range.s.c > r.c) range.s.c = r.c;
            if (range.e.c < r.c) range.e.c = r.c;
            var encoded = encode_range(range);
            if (encoded !== sheet["!ref"]) sheet["!ref"] = encoded;
        }
        if (!cell.c) cell.c = [];
        var o /*:Comment*/  = {
            a: comment.author,
            t: comment.t,
            r: comment.r,
            T: threaded
        };
        if (comment.h) o.h = comment.h;
        /* threaded comments always override */ for(var i = cell.c.length - 1; i >= 0; --i){
            if (!threaded && cell.c[i].T) return;
            if (threaded && !cell.c[i].T) cell.c.splice(i, 1);
        }
        if (threaded && people) {
            for(i = 0; i < people.length; ++i)if (o.a == people[i].id) {
                o.a = people[i].name || o.a;
                break;
            }
        }
        cell.c.push(o);
    });
}
/* 18.7 Comments */ function parse_comments_xml(data /*:string*/ , opts) /*:Array<RawComment>*/ {
    /* 18.7.6 CT_Comments */ if (data.match(/<(?:\w+:)?comments *\/>/)) return [];
    var authors /*:Array<string>*/  = [];
    var commentList /*:Array<RawComment>*/  = [];
    var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
    if (authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function(x) {
        if (x === "" || x.trim() === "") return;
        var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
        if (a) authors.push(a[1]);
    });
    var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
    if (cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x) {
        if (x === "" || x.trim() === "") return;
        var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
        if (!cm) return;
        var y = parsexmltag(cm[0]);
        var comment /*:RawComment*/  = {
            author: y.authorId && authors[y.authorId] || "sheetjsghost",
            ref: y.ref,
            guid: y.guid
        } /*:any*/ ;
        var cell = decode_cell(y.ref);
        if (opts.sheetRows && opts.sheetRows <= cell.r) return;
        var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
        var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || {
            r: "",
            t: "",
            h: ""
        };
        comment.r = rt.r;
        if (rt.r == "<t></t>") rt.t = rt.h = "";
        comment.t = (rt.t || "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        if (opts.cellHTML) comment.h = rt.h;
        commentList.push(comment);
    });
    return commentList;
}
function write_comments_xml(data /*::, opts*/ ) {
    var o = [
        XML_HEADER,
        writextag("comments", null, {
            "xmlns": XMLNS_main[0]
        })
    ];
    var iauthor /*:Array<string>*/  = [];
    o.push("<authors>");
    data.forEach(function(x) {
        x[1].forEach(function(w) {
            var a = escapexml(w.a);
            if (iauthor.indexOf(a) == -1) {
                iauthor.push(a);
                o.push("<author>" + a + "</author>");
            }
            if (w.T && w.ID && iauthor.indexOf("tc=" + w.ID) == -1) {
                iauthor.push("tc=" + w.ID);
                o.push("<author>tc=" + w.ID + "</author>");
            }
        });
    });
    if (iauthor.length == 0) {
        iauthor.push("SheetJ5");
        o.push("<author>SheetJ5</author>");
    }
    o.push("</authors>");
    o.push("<commentList>");
    data.forEach(function(d) {
        /* 18.7.3 CT_Comment */ var lastauthor = 0, ts = [];
        if (d[1][0] && d[1][0].T && d[1][0].ID) lastauthor = iauthor.indexOf("tc=" + d[1][0].ID);
        else d[1].forEach(function(c) {
            if (c.a) lastauthor = iauthor.indexOf(escapexml(c.a));
            ts.push(c.t || "");
        });
        o.push('<comment ref="' + d[0] + '" authorId="' + lastauthor + '"><text>');
        if (ts.length <= 1) o.push(writetag("t", escapexml(ts[0] || "")));
        else {
            /* based on Threaded Comments -> Comments projection */ var t = "Comment:\n    " + ts[0] + "\n";
            for(var i = 1; i < ts.length; ++i)t += "Reply:\n    " + ts[i] + "\n";
            o.push(writetag("t", escapexml(t)));
        }
        o.push("</text></comment>");
    });
    o.push("</commentList>");
    if (o.length > 2) {
        o[o.length] = "</comments>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSX] 2.1.17 */ function parse_tcmnt_xml(data /*:string*/ , opts) /*:Array<RawComment>*/ {
    var out = [];
    var pass = false, comment = {}, tidx = 0;
    data.replace(tagregex, function xml_tcmnt(x, idx) {
        var y /*:any*/  = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<?xml":
                break;
            /* 2.6.207 ThreadedComments CT_ThreadedComments */ case "<ThreadedComments":
                break;
            case "</ThreadedComments>":
                break;
            /* 2.6.205 threadedComment CT_ThreadedComment */ case "<threadedComment":
                comment = {
                    author: y.personId,
                    guid: y.id,
                    ref: y.ref,
                    T: 1
                };
                break;
            case "</threadedComment>":
                if (comment.t != null) out.push(comment);
                break;
            case "<text>":
            case "<text":
                tidx = idx + x.length;
                break;
            case "</text>":
                comment.t = data.slice(tidx, idx).replace(/\r\n/g, "\n").replace(/\r/g, "\n");
                break;
            /* 2.6.206 mentions CT_ThreadedCommentMentions TODO */ case "<mentions":
            case "<mentions>":
                pass = true;
                break;
            case "</mentions>":
                pass = false;
                break;
            /* 2.6.202 mention CT_Mention TODO */ /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
                break;
            /* 18.2.7  ext CT_Extension + */ case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in threaded comments");
        }
        return x;
    });
    return out;
}
function write_tcmnt_xml(comments, people, opts) {
    var o = [
        XML_HEADER,
        writextag("ThreadedComments", null, {
            "xmlns": XMLNS.TCMNT
        }).replace(/[\/]>/, ">")
    ];
    comments.forEach(function(carr) {
        var rootid = "";
        (carr[1] || []).forEach(function(c, idx) {
            if (!c.T) {
                delete c.ID;
                return;
            }
            if (c.a && people.indexOf(c.a) == -1) people.push(c.a);
            var tcopts = {
                ref: carr[0],
                id: "{54EE7951-7262-4200-6969-" + ("000000000000" + opts.tcid++).slice(-12) + "}"
            };
            if (idx == 0) rootid = tcopts.id;
            else tcopts.parentId = rootid;
            c.ID = tcopts.id;
            if (c.a) tcopts.personId = "{54EE7950-7262-4200-6969-" + ("000000000000" + people.indexOf(c.a)).slice(-12) + "}";
            o.push(writextag("threadedComment", writetag("text", c.t || ""), tcopts));
        });
    });
    o.push("</ThreadedComments>");
    return o.join("");
}
/* [MS-XLSX] 2.1.18 */ function parse_people_xml(data /*:string*/ , opts) {
    var out = [];
    var pass = false;
    data.replace(tagregex, function xml_tcmnt(x) {
        var y /*:any*/  = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<?xml":
                break;
            /* 2.4.85 personList CT_PersonList */ case "<personList":
                break;
            case "</personList>":
                break;
            /* 2.6.203 person CT_Person TODO: providers */ case "<person":
                out.push({
                    name: y.displayname,
                    id: y.id
                });
                break;
            case "</person>":
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
                break;
            /* 18.2.7  ext CT_Extension + */ case "<ext":
                pass = true;
                break;
            case "</ext>":
                pass = false;
                break;
            default:
                if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in threaded comments");
        }
        return x;
    });
    return out;
}
function write_people_xml(people /*, opts*/ ) {
    var o = [
        XML_HEADER,
        writextag("personList", null, {
            "xmlns": XMLNS.TCMNT,
            "xmlns:x": XMLNS_main[0]
        }).replace(/[\/]>/, ">")
    ];
    people.forEach(function(person, idx) {
        o.push(writextag("person", null, {
            displayName: person,
            id: "{54EE7950-7262-4200-6969-" + ("000000000000" + idx).slice(-12) + "}",
            userId: person,
            providerId: "None"
        }));
    });
    o.push("</personList>");
    return o.join("");
}
/* [MS-XLSB] 2.4.28 BrtBeginComment */ function parse_BrtBeginComment(data) {
    var out = {};
    out.iauthor = data.read_shift(4);
    var rfx = parse_UncheckedRfX(data, 16);
    out.rfx = rfx.s;
    out.ref = encode_cell(rfx.s);
    data.l += 16; /*var guid = parse_GUID(data); */ 
    return out;
}
function write_BrtBeginComment(data, o) {
    if (o == null) o = new_buf(36);
    o.write_shift(4, data[1].iauthor);
    write_UncheckedRfX(data[0], o);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    return o;
}
/* [MS-XLSB] 2.4.327 BrtCommentAuthor */ var parse_BrtCommentAuthor = parse_XLWideString;
function write_BrtCommentAuthor(data) {
    return write_XLWideString(data.slice(0, 54));
}
/* [MS-XLSB] 2.1.7.8 Comments */ function parse_comments_bin(data, opts) /*:Array<RawComment>*/ {
    var out /*:Array<RawComment>*/  = [];
    var authors /*:Array<string>*/  = [];
    var c = {};
    var pass = false;
    recordhopper(data, function hopper_cmnt(val, R, RT) {
        switch(RT){
            case 0x0278:
                /* 'BrtCommentAuthor' */ authors.push(val);
                break;
            case 0x027B:
                /* 'BrtBeginComment' */ c = val;
                break;
            case 0x027D:
                /* 'BrtCommentText' */ c.t = val.t;
                c.h = val.h;
                c.r = val.r;
                break;
            case 0x027C:
                /* 'BrtEndComment' */ c.author = authors[c.iauthor];
                delete c /*:any*/ .iauthor;
                if (opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;
                if (!c.t) c.t = "";
                delete c.rfx;
                out.push(c);
                break;
            case 0x0C00:
                break;
            case 0x0023:
                /* 'BrtFRTBegin' */ pass = true;
                break;
            case 0x0024:
                /* 'BrtFRTEnd' */ pass = false;
                break;
            case 0x0025:
                break;
            case 0x0026:
                break;
            default:
                if (R.T) ;
                else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    });
    return out;
}
function write_comments_bin(data /*::, opts*/ ) {
    var ba = buf_array();
    var iauthor /*:Array<string>*/  = [];
    write_record(ba, 0x0274 /* BrtBeginComments */ );
    write_record(ba, 0x0276 /* BrtBeginCommentAuthors */ );
    data.forEach(function(comment) {
        comment[1].forEach(function(c) {
            if (iauthor.indexOf(c.a) > -1) return;
            iauthor.push(c.a.slice(0, 54));
            write_record(ba, 0x0278 /* BrtCommentAuthor */ , write_BrtCommentAuthor(c.a));
        });
    });
    write_record(ba, 0x0277 /* BrtEndCommentAuthors */ );
    write_record(ba, 0x0279 /* BrtBeginCommentList */ );
    data.forEach(function(comment) {
        comment[1].forEach(function(c) {
            c.iauthor = iauthor.indexOf(c.a);
            var range = {
                s: decode_cell(comment[0]),
                e: decode_cell(comment[0])
            };
            write_record(ba, 0x027B /* BrtBeginComment */ , write_BrtBeginComment([
                range,
                c
            ]));
            if (c.t && c.t.length > 0) write_record(ba, 0x027D /* BrtCommentText */ , write_BrtCommentText(c));
            write_record(ba, 0x027C /* BrtEndComment */ );
            delete c.iauthor;
        });
    });
    write_record(ba, 0x027A /* BrtEndCommentList */ );
    write_record(ba, 0x0275 /* BrtEndComments */ );
    return ba.end();
}
var CT_VBA = "application/vnd.ms-office.vbaProject";
function make_vba_xls(cfb) {
    var newcfb = CFB.utils.cfb_new({
        root: "R"
    });
    cfb.FullPaths.forEach(function(p, i) {
        if (p.slice(-1) === "/" || !p.match(/_VBA_PROJECT_CUR/)) return;
        var newpath = p.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
        CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);
    });
    return CFB.write(newcfb);
}
function fill_vba_xls(cfb, vba) {
    vba.FullPaths.forEach(function(p, i) {
        if (i == 0) return;
        var newpath = p.replace(/[^\/]*[\/]/, "/_VBA_PROJECT_CUR/");
        if (newpath.slice(-1) !== "/") CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i].content);
    });
}
var VBAFMTS = [
    "xlsb",
    "xlsm",
    "xlam",
    "biff8",
    "xla"
];
/* macro and dialog sheet stubs */ function parse_ds_bin() /*:Worksheet*/ {
    return {
        "!type": "dialog"
    };
}
function parse_ds_xml() /*:Worksheet*/ {
    return {
        "!type": "dialog"
    };
}
function parse_ms_bin() /*:Worksheet*/ {
    return {
        "!type": "macro"
    };
}
function parse_ms_xml() /*:Worksheet*/ {
    return {
        "!type": "macro"
    };
}
/* TODO: it will be useful to parse the function str */ var rc_to_a1 = /*#__PURE__*/ function() {
    var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
    var rcbase /*:Cell*/  = {
        r: 0,
        c: 0
    } /*:any*/ ;
    function rcfunc($$, $1, $2, $3) {
        var cRel = false, rRel = false;
        if ($2.length == 0) rRel = true;
        else if ($2.charAt(0) == "[") {
            rRel = true;
            $2 = $2.slice(1, -1);
        }
        if ($3.length == 0) cRel = true;
        else if ($3.charAt(0) == "[") {
            cRel = true;
            $3 = $3.slice(1, -1);
        }
        var R = $2.length > 0 ? parseInt($2, 10) | 0 : 0, C = $3.length > 0 ? parseInt($3, 10) | 0 : 0;
        if (cRel) C += rcbase.c;
        else --C;
        if (rRel) R += rcbase.r;
        else --R;
        return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
    }
    return function rc_to_a1(fstr /*:string*/ , base /*:Cell*/ ) /*:string*/ {
        rcbase = base;
        return fstr.replace(rcregex, rcfunc);
    };
}();
var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
var a1_to_rc = /*#__PURE__*/ function() {
    return function a1_to_rc(fstr /*:string*/ , base /*:CellAddress*/ ) {
        return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
            var c = decode_col($3) - ($2 ? 0 : base.c);
            var r = decode_row($5) - ($4 ? 0 : base.r);
            var R = r == 0 ? "" : !$4 ? "[" + r + "]" : r + 1;
            var C = c == 0 ? "" : !$2 ? "[" + c + "]" : c + 1;
            return $1 + "R" + R + "C" + C;
        });
    };
}();
/* no defined name can collide with a valid cell address A1:XFD1048576 ... except LOG10! */ function shift_formula_str(f /*:string*/ , delta /*:Cell*/ ) /*:string*/ {
    return f.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
        return $1 + ($2 == "$" ? $2 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == "$" ? $4 + $5 : encode_row(decode_row($5) + delta.r));
    });
}
function shift_formula_xlsx(f /*:string*/ , range /*:string*/ , cell /*:string*/ ) /*:string*/ {
    var r = decode_range(range), s = r.s, c = decode_cell(cell);
    var delta = {
        r: c.r - s.r,
        c: c.c - s.c
    };
    return shift_formula_str(f, delta);
}
/* TODO: parse formula */ function fuzzyfmla(f /*:string*/ ) /*:boolean*/ {
    if (f.length == 1) return false;
    return true;
}
function _xlfn(f /*:string*/ ) /*:string*/ {
    return f.replace(/_xlfn\./g, "");
}
function parseread1(blob) {
    blob.l += 1;
    return;
}
/* [MS-XLS] 2.5.51 */ function parse_ColRelU(blob, length) {
    var c = blob.read_shift(length == 1 ? 1 : 2);
    return [
        c & 0x3FFF,
        c >> 14 & 1,
        c >> 15 & 1
    ];
}
/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.89 */ function parse_RgceArea(blob, length, opts) {
    var w = 2;
    if (opts) {
        if (opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob, length, opts);
        else if (opts.biff == 12) w = 4;
    }
    var r = blob.read_shift(w), R = blob.read_shift(w);
    var c = parse_ColRelU(blob, 2);
    var C = parse_ColRelU(blob, 2);
    return {
        s: {
            r: r,
            c: c[0],
            cRel: c[1],
            rRel: c[2]
        },
        e: {
            r: R,
            c: C[0],
            cRel: C[1],
            rRel: C[2]
        }
    };
}
/* BIFF 2-5 encodes flags in the row field */ function parse_RgceArea_BIFF2(blob /*::, length, opts*/ ) {
    var r = parse_ColRelU(blob, 2), R = parse_ColRelU(blob, 2);
    var c = blob.read_shift(1);
    var C = blob.read_shift(1);
    return {
        s: {
            r: r[0],
            c: c,
            cRel: r[1],
            rRel: r[2]
        },
        e: {
            r: R[0],
            c: C,
            cRel: R[1],
            rRel: R[2]
        }
    };
}
/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.90 */ function parse_RgceAreaRel(blob, length, opts) {
    if (opts.biff < 8) return parse_RgceArea_BIFF2(blob, length, opts);
    var r = blob.read_shift(opts.biff == 12 ? 4 : 2), R = blob.read_shift(opts.biff == 12 ? 4 : 2);
    var c = parse_ColRelU(blob, 2);
    var C = parse_ColRelU(blob, 2);
    return {
        s: {
            r: r,
            c: c[0],
            cRel: c[1],
            rRel: c[2]
        },
        e: {
            r: R,
            c: C[0],
            cRel: C[1],
            rRel: C[2]
        }
    };
}
/* [MS-XLS] 2.5.198.109 ; [MS-XLSB] 2.5.97.91 */ function parse_RgceLoc(blob, length, opts) {
    if (opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob, length, opts);
    var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
    var c = parse_ColRelU(blob, 2);
    return {
        r: r,
        c: c[0],
        cRel: c[1],
        rRel: c[2]
    };
}
function parse_RgceLoc_BIFF2(blob /*::, length, opts*/ ) {
    var r = parse_ColRelU(blob, 2);
    var c = blob.read_shift(1);
    return {
        r: r[0],
        c: c,
        cRel: r[1],
        rRel: r[2]
    };
}
/* [MS-XLS] 2.5.198.107, 2.5.47 */ function parse_RgceElfLoc(blob /*::, length, opts*/ ) {
    var r = blob.read_shift(2);
    var c = blob.read_shift(2);
    return {
        r: r,
        c: c & 0xFF,
        fQuoted: !!(c & 0x4000),
        cRel: c >> 15,
        rRel: c >> 15
    };
}
/* [MS-XLS] 2.5.198.111 ; [MS-XLSB] 2.5.97.92 TODO */ function parse_RgceLocRel(blob, length, opts) {
    var biff = opts && opts.biff ? opts.biff : 8;
    if (biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob, length, opts);
    var r = blob.read_shift(biff >= 12 ? 4 : 2);
    var cl = blob.read_shift(2);
    var cRel = (cl & 0x4000) >> 14, rRel = (cl & 0x8000) >> 15;
    cl &= 0x3FFF;
    if (rRel == 1) while(r > 0x7FFFF)r -= 0x100000;
    if (cRel == 1) while(cl > 0x1FFF)cl = cl - 0x4000;
    return {
        r: r,
        c: cl,
        cRel: cRel,
        rRel: rRel
    };
}
function parse_RgceLocRel_BIFF2(blob /*::, length:number, opts*/ ) {
    var rl = blob.read_shift(2);
    var c = blob.read_shift(1);
    var rRel = (rl & 0x8000) >> 15, cRel = (rl & 0x4000) >> 14;
    rl &= 0x3FFF;
    if (rRel == 1 && rl >= 0x2000) rl = rl - 0x4000;
    if (cRel == 1 && c >= 0x80) c = c - 0x100;
    return {
        r: rl,
        c: c,
        cRel: cRel,
        rRel: rRel
    };
}
/* [MS-XLS] 2.5.198.27 ; [MS-XLSB] 2.5.97.18 */ function parse_PtgArea(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
    return [
        type,
        area
    ];
}
/* [MS-XLS] 2.5.198.28 ; [MS-XLSB] 2.5.97.19 */ function parse_PtgArea3d(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var ixti = blob.read_shift(2, "i");
    var w = 8;
    if (opts) switch(opts.biff){
        case 5:
            blob.l += 12;
            w = 6;
            break;
        case 12:
            w = 12;
            break;
    }
    var area = parse_RgceArea(blob, w, opts);
    return [
        type,
        ixti,
        area
    ];
}
/* [MS-XLS] 2.5.198.29 ; [MS-XLSB] 2.5.97.20 */ function parse_PtgAreaErr(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;
    return [
        type
    ];
}
/* [MS-XLS] 2.5.198.30 ; [MS-XLSB] 2.5.97.21 */ function parse_PtgAreaErr3d(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var ixti = blob.read_shift(2);
    var w = 8;
    if (opts) switch(opts.biff){
        case 5:
            blob.l += 12;
            w = 6;
            break;
        case 12:
            w = 12;
            break;
    }
    blob.l += w;
    return [
        type,
        ixti
    ];
}
/* [MS-XLS] 2.5.198.31 ; [MS-XLSB] 2.5.97.22 */ function parse_PtgAreaN(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var area = parse_RgceAreaRel(blob, length - 1, opts);
    return [
        type,
        area
    ];
}
/* [MS-XLS] 2.5.198.32 ; [MS-XLSB] 2.5.97.23 */ function parse_PtgArray(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
    return [
        type
    ];
}
/* [MS-XLS] 2.5.198.33 ; [MS-XLSB] 2.5.97.24 */ function parse_PtgAttrBaxcel(blob) {
    var bitSemi = blob[blob.l + 1] & 0x01; /* 1 = volatile */ 
    var bitBaxcel = 1;
    blob.l += 4;
    return [
        bitSemi,
        bitBaxcel
    ];
}
/* [MS-XLS] 2.5.198.34 ; [MS-XLSB] 2.5.97.25 */ function parse_PtgAttrChoose(blob, length, opts) /*:Array<number>*/ {
    blob.l += 2;
    var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    var o /*:Array<number>*/  = [];
    /* offset is 1 less than the number of elements */ for(var i = 0; i <= offset; ++i)o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
    return o;
}
/* [MS-XLS] 2.5.198.35 ; [MS-XLSB] 2.5.97.26 */ function parse_PtgAttrGoto(blob, length, opts) {
    var bitGoto = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += 2;
    return [
        bitGoto,
        blob.read_shift(opts && opts.biff == 2 ? 1 : 2)
    ];
}
/* [MS-XLS] 2.5.198.36 ; [MS-XLSB] 2.5.97.27 */ function parse_PtgAttrIf(blob, length, opts) {
    var bitIf = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += 2;
    return [
        bitIf,
        blob.read_shift(opts && opts.biff == 2 ? 1 : 2)
    ];
}
/* [MS-XLSB] 2.5.97.28 */ function parse_PtgAttrIfError(blob) {
    var bitIf = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += 2;
    return [
        bitIf,
        blob.read_shift(2)
    ];
}
/* [MS-XLS] 2.5.198.37 ; [MS-XLSB] 2.5.97.29 */ function parse_PtgAttrSemi(blob, length, opts) {
    var bitSemi = blob[blob.l + 1] & 0xFF ? 1 : 0;
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    return [
        bitSemi
    ];
}
/* [MS-XLS] 2.5.198.40 ; [MS-XLSB] 2.5.97.32 */ function parse_PtgAttrSpaceType(blob /*::, length*/ ) {
    var type = blob.read_shift(1), cch = blob.read_shift(1);
    return [
        type,
        cch
    ];
}
/* [MS-XLS] 2.5.198.38 ; [MS-XLSB] 2.5.97.30 */ function parse_PtgAttrSpace(blob) {
    blob.read_shift(2);
    return parse_PtgAttrSpaceType(blob, 2);
}
/* [MS-XLS] 2.5.198.39 ; [MS-XLSB] 2.5.97.31 */ function parse_PtgAttrSpaceSemi(blob) {
    blob.read_shift(2);
    return parse_PtgAttrSpaceType(blob, 2);
}
/* [MS-XLS] 2.5.198.84 ; [MS-XLSB] 2.5.97.68 TODO */ function parse_PtgRef(blob, length, opts) {
    //var ptg = blob[blob.l] & 0x1F;
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var loc = parse_RgceLoc(blob, 0, opts);
    return [
        type,
        loc
    ];
}
/* [MS-XLS] 2.5.198.88 ; [MS-XLSB] 2.5.97.72 TODO */ function parse_PtgRefN(blob, length, opts) {
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var loc = parse_RgceLocRel(blob, 0, opts);
    return [
        type,
        loc
    ];
}
/* [MS-XLS] 2.5.198.85 ; [MS-XLSB] 2.5.97.69 TODO */ function parse_PtgRef3d(blob, length, opts) {
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var ixti = blob.read_shift(2); // XtiIndex
    if (opts && opts.biff == 5) blob.l += 12;
    var loc = parse_RgceLoc(blob, 0, opts); // TODO: or RgceLocRel
    return [
        type,
        ixti,
        loc
    ];
}
/* [MS-XLS] 2.5.198.62 ; [MS-XLSB] 2.5.97.45 TODO */ function parse_PtgFunc(blob, length, opts) {
    //var ptg = blob[blob.l] & 0x1F;
    var type = (blob[blob.l] & 0x60) >> 5;
    blob.l += 1;
    var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
    return [
        FtabArgc[iftab],
        Ftab[iftab],
        type
    ];
}
/* [MS-XLS] 2.5.198.63 ; [MS-XLSB] 2.5.97.46 TODO */ function parse_PtgFuncVar(blob, length, opts) {
    var type = blob[blob.l++];
    var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [
        type == 0x58 ? -1 : 0,
        blob.read_shift(1)
    ] : parsetab(blob);
    return [
        cparams,
        (tab[0] === 0 ? Ftab : Cetab)[tab[1]]
    ];
}
function parsetab(blob) {
    return [
        blob[blob.l + 1] >> 7,
        blob.read_shift(2) & 0x7FFF
    ];
}
/* [MS-XLS] 2.5.198.41 ; [MS-XLSB] 2.5.97.33 */ function parse_PtgAttrSum(blob, length, opts) {
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    return;
}
/* [MS-XLS] 2.5.198.58 ; [MS-XLSB] 2.5.97.40 */ function parse_PtgExp(blob, length, opts) {
    blob.l++;
    if (opts && opts.biff == 12) return [
        blob.read_shift(4, "i"),
        0
    ];
    var row = blob.read_shift(2);
    var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [
        row,
        col
    ];
}
/* [MS-XLS] 2.5.198.57 ; [MS-XLSB] 2.5.97.39 */ function parse_PtgErr(blob) {
    blob.l++;
    return BErr[blob.read_shift(1)];
}
/* [MS-XLS] 2.5.198.66 ; [MS-XLSB] 2.5.97.49 */ function parse_PtgInt(blob) {
    blob.l++;
    return blob.read_shift(2);
}
/* [MS-XLS] 2.5.198.42 ; [MS-XLSB] 2.5.97.34 */ function parse_PtgBool(blob) {
    blob.l++;
    return blob.read_shift(1) !== 0;
}
/* [MS-XLS] 2.5.198.79 ; [MS-XLSB] 2.5.97.63 */ function parse_PtgNum(blob) {
    blob.l++;
    return parse_Xnum(blob, 8);
}
/* [MS-XLS] 2.5.198.89 ; [MS-XLSB] 2.5.97.74 */ function parse_PtgStr(blob, length, opts) {
    blob.l++;
    return parse_ShortXLUnicodeString(blob, length - 1, opts);
}
/* [MS-XLS] 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */ /* [MS-XLSB] 2.5.97.93 + 2.5.97.9{4,5,6,7} */ function parse_SerAr(blob, biff /*:number*/ ) {
    var val = [
        blob.read_shift(1)
    ];
    if (biff == 12) switch(val[0]){
        case 0x02:
            val[0] = 0x04;
            break; /* SerBool */ 
        case 0x04:
            val[0] = 0x10;
            break; /* SerErr */ 
        case 0x00:
            val[0] = 0x01;
            break; /* SerNum */ 
        case 0x01:
            val[0] = 0x02;
            break; /* SerStr */ 
    }
    switch(val[0]){
        case 0x04:
            /* SerBool -- boolean */ val[1] = parsebool(blob, 1) ? "TRUE" : "FALSE";
            if (biff != 12) blob.l += 7;
            break;
        case 0x25:
        /* appears to be an alias */ case 0x10:
            /* SerErr -- error */ val[1] = BErr[blob[blob.l]];
            blob.l += biff == 12 ? 4 : 8;
            break;
        case 0x00:
            /* SerNil -- honestly, I'm not sure how to reproduce this */ blob.l += 8;
            break;
        case 0x01:
            /* SerNum -- Xnum */ val[1] = parse_Xnum(blob, 8);
            break;
        case 0x02:
            /* SerStr -- XLUnicodeString (<256 chars) */ val[1] = parse_XLUnicodeString2(blob, 0, {
                biff: biff > 0 && biff < 8 ? 2 : biff
            });
            break;
        default:
            throw new Error("Bad SerAr: " + val[0]); /* Unreachable */ 
    }
    return val;
}
/* [MS-XLS] 2.5.198.61 ; [MS-XLSB] 2.5.97.44 */ function parse_PtgExtraMem(blob, cce, opts) {
    var count = blob.read_shift(opts.biff == 12 ? 4 : 2);
    var out /*:Array<Range>*/  = [];
    for(var i = 0; i != count; ++i)out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob, 8));
    return out;
}
/* [MS-XLS] 2.5.198.59 ; [MS-XLSB] 2.5.97.41 */ function parse_PtgExtraArray(blob, length, opts) {
    var rows = 0, cols = 0;
    if (opts.biff == 12) {
        rows = blob.read_shift(4); // DRw
        cols = blob.read_shift(4); // DCol
    } else {
        cols = 1 + blob.read_shift(1); //DColByteU
        rows = 1 + blob.read_shift(2); //DRw
    }
    if (opts.biff >= 2 && opts.biff < 8) {
        --rows;
        if (--cols == 0) cols = 0x100;
    }
    // $FlowIgnore
    for(var i = 0, o /*:Array<Array<any>>*/  = []; i != rows && (o[i] = []); ++i)for(var j = 0; j != cols; ++j)o[i][j] = parse_SerAr(blob, opts.biff);
    return o;
}
/* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 */ function parse_PtgName(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var w = !opts || opts.biff >= 8 ? 4 : 2;
    var nameindex = blob.read_shift(w);
    switch(opts.biff){
        case 2:
            blob.l += 5;
            break;
        case 3:
        case 4:
            blob.l += 8;
            break;
        case 5:
            blob.l += 12;
            break;
    }
    return [
        type,
        0,
        nameindex
    ];
}
/* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 */ function parse_PtgNameX(blob, length, opts) {
    if (opts.biff == 5) return parse_PtgNameX_BIFF5(blob, length, opts);
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var ixti = blob.read_shift(2); // XtiIndex
    var nameindex = blob.read_shift(4);
    return [
        type,
        ixti,
        nameindex
    ];
}
function parse_PtgNameX_BIFF5(blob /*::, length, opts*/ ) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var ixti = blob.read_shift(2, "i"); // XtiIndex
    blob.l += 8;
    var nameindex = blob.read_shift(2);
    blob.l += 12;
    return [
        type,
        ixti,
        nameindex
    ];
}
/* [MS-XLS] 2.5.198.70 ; [MS-XLSB] 2.5.97.54 */ function parse_PtgMemArea(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [
        type,
        cce
    ];
}
/* [MS-XLS] 2.5.198.72 ; [MS-XLSB] 2.5.97.56 */ function parse_PtgMemFunc(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [
        type,
        cce
    ];
}
/* [MS-XLS] 2.5.198.86 ; [MS-XLSB] 2.5.97.69 */ function parse_PtgRefErr(blob, length, opts) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    blob.l += 4;
    if (opts.biff < 8) blob.l--;
    if (opts.biff == 12) blob.l += 2;
    return [
        type
    ];
}
/* [MS-XLS] 2.5.198.87 ; [MS-XLSB] 2.5.97.71 */ function parse_PtgRefErr3d(blob, length, opts) {
    var type = (blob[blob.l++] & 0x60) >> 5;
    var ixti = blob.read_shift(2);
    var w = 4;
    if (opts) switch(opts.biff){
        case 5:
            w = 15;
            break;
        case 12:
            w = 6;
            break;
    }
    blob.l += w;
    return [
        type,
        ixti
    ];
}
/* [MS-XLS] 2.5.198.71 ; [MS-XLSB] 2.5.97.55 */ var parse_PtgMemErr = parsenoop;
/* [MS-XLS] 2.5.198.73  ; [MS-XLSB] 2.5.97.57 */ var parse_PtgMemNoMem = parsenoop;
/* [MS-XLS] 2.5.198.92 */ var parse_PtgTbl = parsenoop;
function parse_PtgElfLoc(blob, length, opts) {
    blob.l += 2;
    return [
        parse_RgceElfLoc(blob, 4, opts)
    ];
}
function parse_PtgElfNoop(blob /*::, length, opts*/ ) {
    blob.l += 6;
    return [];
}
/* [MS-XLS] 2.5.198.46 */ var parse_PtgElfCol = parse_PtgElfLoc;
/* [MS-XLS] 2.5.198.47 */ var parse_PtgElfColS = parse_PtgElfNoop;
/* [MS-XLS] 2.5.198.48 */ var parse_PtgElfColSV = parse_PtgElfNoop;
/* [MS-XLS] 2.5.198.49 */ var parse_PtgElfColV = parse_PtgElfLoc;
/* [MS-XLS] 2.5.198.50 */ function parse_PtgElfLel(blob /*::, length, opts*/ ) {
    blob.l += 2;
    return [
        parseuint16(blob),
        blob.read_shift(2) & 0x01
    ];
}
/* [MS-XLS] 2.5.198.51 */ var parse_PtgElfRadical = parse_PtgElfLoc;
/* [MS-XLS] 2.5.198.52 */ var parse_PtgElfRadicalLel = parse_PtgElfLel;
/* [MS-XLS] 2.5.198.53 */ var parse_PtgElfRadicalS = parse_PtgElfNoop;
/* [MS-XLS] 2.5.198.54 */ var parse_PtgElfRw = parse_PtgElfLoc;
/* [MS-XLS] 2.5.198.55 */ var parse_PtgElfRwV = parse_PtgElfLoc;
/* [MS-XLSB] 2.5.97.52 TODO */ var PtgListRT = [
    "Data",
    "All",
    "Headers",
    "??",
    "?Data2",
    "??",
    "?DataHeaders",
    "??",
    "Totals",
    "??",
    "??",
    "??",
    "?DataTotals",
    "??",
    "??",
    "??",
    "?Current"
];
function parse_PtgList(blob /*::, length, opts*/ ) {
    blob.l += 2;
    var ixti = blob.read_shift(2);
    var flags = blob.read_shift(2);
    var idx = blob.read_shift(4);
    var c = blob.read_shift(2);
    var C = blob.read_shift(2);
    var rt = PtgListRT[flags >> 2 & 0x1F];
    return {
        ixti: ixti,
        coltype: flags & 0x3,
        rt: rt,
        idx: idx,
        c: c,
        C: C
    };
}
/* [MS-XLS] 2.5.198.91 ; [MS-XLSB] 2.5.97.76 */ function parse_PtgSxName(blob /*::, length, opts*/ ) {
    blob.l += 2;
    return [
        blob.read_shift(4)
    ];
}
/* [XLS] old spec */ function parse_PtgSheet(blob, length, opts) {
    blob.l += 5;
    blob.l += 2;
    blob.l += opts.biff == 2 ? 1 : 4;
    return [
        "PTGSHEET"
    ];
}
function parse_PtgEndSheet(blob, length, opts) {
    blob.l += opts.biff == 2 ? 4 : 5;
    return [
        "PTGENDSHEET"
    ];
}
function parse_PtgMemAreaN(blob /*::, length, opts*/ ) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var cce = blob.read_shift(2);
    return [
        type,
        cce
    ];
}
function parse_PtgMemNoMemN(blob /*::, length, opts*/ ) {
    var type = blob.read_shift(1) >>> 5 & 0x03;
    var cce = blob.read_shift(2);
    return [
        type,
        cce
    ];
}
function parse_PtgAttrNoop(blob /*::, length, opts*/ ) {
    blob.l += 4;
    return [
        0,
        0
    ];
}
/* [MS-XLS] 2.5.198.25 ; [MS-XLSB] 2.5.97.16 */ var PtgTypes = {
    /*::[*/ 0x01: {
        n: "PtgExp",
        f: parse_PtgExp
    },
    /*::[*/ 0x02: {
        n: "PtgTbl",
        f: parse_PtgTbl
    },
    /*::[*/ 0x03: {
        n: "PtgAdd",
        f: parseread1
    },
    /*::[*/ 0x04: {
        n: "PtgSub",
        f: parseread1
    },
    /*::[*/ 0x05: {
        n: "PtgMul",
        f: parseread1
    },
    /*::[*/ 0x06: {
        n: "PtgDiv",
        f: parseread1
    },
    /*::[*/ 0x07: {
        n: "PtgPower",
        f: parseread1
    },
    /*::[*/ 0x08: {
        n: "PtgConcat",
        f: parseread1
    },
    /*::[*/ 0x09: {
        n: "PtgLt",
        f: parseread1
    },
    /*::[*/ 0x0A: {
        n: "PtgLe",
        f: parseread1
    },
    /*::[*/ 0x0B: {
        n: "PtgEq",
        f: parseread1
    },
    /*::[*/ 0x0C: {
        n: "PtgGe",
        f: parseread1
    },
    /*::[*/ 0x0D: {
        n: "PtgGt",
        f: parseread1
    },
    /*::[*/ 0x0E: {
        n: "PtgNe",
        f: parseread1
    },
    /*::[*/ 0x0F: {
        n: "PtgIsect",
        f: parseread1
    },
    /*::[*/ 0x10: {
        n: "PtgUnion",
        f: parseread1
    },
    /*::[*/ 0x11: {
        n: "PtgRange",
        f: parseread1
    },
    /*::[*/ 0x12: {
        n: "PtgUplus",
        f: parseread1
    },
    /*::[*/ 0x13: {
        n: "PtgUminus",
        f: parseread1
    },
    /*::[*/ 0x14: {
        n: "PtgPercent",
        f: parseread1
    },
    /*::[*/ 0x15: {
        n: "PtgParen",
        f: parseread1
    },
    /*::[*/ 0x16: {
        n: "PtgMissArg",
        f: parseread1
    },
    /*::[*/ 0x17: {
        n: "PtgStr",
        f: parse_PtgStr
    },
    /*::[*/ 0x1A: {
        n: "PtgSheet",
        f: parse_PtgSheet
    },
    /*::[*/ 0x1B: {
        n: "PtgEndSheet",
        f: parse_PtgEndSheet
    },
    /*::[*/ 0x1C: {
        n: "PtgErr",
        f: parse_PtgErr
    },
    /*::[*/ 0x1D: {
        n: "PtgBool",
        f: parse_PtgBool
    },
    /*::[*/ 0x1E: {
        n: "PtgInt",
        f: parse_PtgInt
    },
    /*::[*/ 0x1F: {
        n: "PtgNum",
        f: parse_PtgNum
    },
    /*::[*/ 0x20: {
        n: "PtgArray",
        f: parse_PtgArray
    },
    /*::[*/ 0x21: {
        n: "PtgFunc",
        f: parse_PtgFunc
    },
    /*::[*/ 0x22: {
        n: "PtgFuncVar",
        f: parse_PtgFuncVar
    },
    /*::[*/ 0x23: {
        n: "PtgName",
        f: parse_PtgName
    },
    /*::[*/ 0x24: {
        n: "PtgRef",
        f: parse_PtgRef
    },
    /*::[*/ 0x25: {
        n: "PtgArea",
        f: parse_PtgArea
    },
    /*::[*/ 0x26: {
        n: "PtgMemArea",
        f: parse_PtgMemArea
    },
    /*::[*/ 0x27: {
        n: "PtgMemErr",
        f: parse_PtgMemErr
    },
    /*::[*/ 0x28: {
        n: "PtgMemNoMem",
        f: parse_PtgMemNoMem
    },
    /*::[*/ 0x29: {
        n: "PtgMemFunc",
        f: parse_PtgMemFunc
    },
    /*::[*/ 0x2A: {
        n: "PtgRefErr",
        f: parse_PtgRefErr
    },
    /*::[*/ 0x2B: {
        n: "PtgAreaErr",
        f: parse_PtgAreaErr
    },
    /*::[*/ 0x2C: {
        n: "PtgRefN",
        f: parse_PtgRefN
    },
    /*::[*/ 0x2D: {
        n: "PtgAreaN",
        f: parse_PtgAreaN
    },
    /*::[*/ 0x2E: {
        n: "PtgMemAreaN",
        f: parse_PtgMemAreaN
    },
    /*::[*/ 0x2F: {
        n: "PtgMemNoMemN",
        f: parse_PtgMemNoMemN
    },
    /*::[*/ 0x39: {
        n: "PtgNameX",
        f: parse_PtgNameX
    },
    /*::[*/ 0x3A: {
        n: "PtgRef3d",
        f: parse_PtgRef3d
    },
    /*::[*/ 0x3B: {
        n: "PtgArea3d",
        f: parse_PtgArea3d
    },
    /*::[*/ 0x3C: {
        n: "PtgRefErr3d",
        f: parse_PtgRefErr3d
    },
    /*::[*/ 0x3D: {
        n: "PtgAreaErr3d",
        f: parse_PtgAreaErr3d
    },
    /*::[*/ 0xFF: {}
};
/* These are duplicated in the PtgTypes table */ var PtgDupes = {
    /*::[*/ 0x40: 0x20,
    /*::[*/ 0x60: 0x20,
    /*::[*/ 0x41: 0x21,
    /*::[*/ 0x61: 0x21,
    /*::[*/ 0x42: 0x22,
    /*::[*/ 0x62: 0x22,
    /*::[*/ 0x43: 0x23,
    /*::[*/ 0x63: 0x23,
    /*::[*/ 0x44: 0x24,
    /*::[*/ 0x64: 0x24,
    /*::[*/ 0x45: 0x25,
    /*::[*/ 0x65: 0x25,
    /*::[*/ 0x46: 0x26,
    /*::[*/ 0x66: 0x26,
    /*::[*/ 0x47: 0x27,
    /*::[*/ 0x67: 0x27,
    /*::[*/ 0x48: 0x28,
    /*::[*/ 0x68: 0x28,
    /*::[*/ 0x49: 0x29,
    /*::[*/ 0x69: 0x29,
    /*::[*/ 0x4A: 0x2A,
    /*::[*/ 0x6A: 0x2A,
    /*::[*/ 0x4B: 0x2B,
    /*::[*/ 0x6B: 0x2B,
    /*::[*/ 0x4C: 0x2C,
    /*::[*/ 0x6C: 0x2C,
    /*::[*/ 0x4D: 0x2D,
    /*::[*/ 0x6D: 0x2D,
    /*::[*/ 0x4E: 0x2E,
    /*::[*/ 0x6E: 0x2E,
    /*::[*/ 0x4F: 0x2F,
    /*::[*/ 0x6F: 0x2F,
    /*::[*/ 0x58: 0x22,
    /*::[*/ 0x78: 0x22,
    /*::[*/ 0x59: 0x39,
    /*::[*/ 0x79: 0x39,
    /*::[*/ 0x5A: 0x3A,
    /*::[*/ 0x7A: 0x3A,
    /*::[*/ 0x5B: 0x3B,
    /*::[*/ 0x7B: 0x3B,
    /*::[*/ 0x5C: 0x3C,
    /*::[*/ 0x7C: 0x3C,
    /*::[*/ 0x5D: 0x3D,
    /*::[*/ 0x7D: 0x3D
};
var Ptg18 = {
    /*::[*/ 0x01: {
        n: "PtgElfLel",
        f: parse_PtgElfLel
    },
    /*::[*/ 0x02: {
        n: "PtgElfRw",
        f: parse_PtgElfRw
    },
    /*::[*/ 0x03: {
        n: "PtgElfCol",
        f: parse_PtgElfCol
    },
    /*::[*/ 0x06: {
        n: "PtgElfRwV",
        f: parse_PtgElfRwV
    },
    /*::[*/ 0x07: {
        n: "PtgElfColV",
        f: parse_PtgElfColV
    },
    /*::[*/ 0x0A: {
        n: "PtgElfRadical",
        f: parse_PtgElfRadical
    },
    /*::[*/ 0x0B: {
        n: "PtgElfRadicalS",
        f: parse_PtgElfRadicalS
    },
    /*::[*/ 0x0D: {
        n: "PtgElfColS",
        f: parse_PtgElfColS
    },
    /*::[*/ 0x0F: {
        n: "PtgElfColSV",
        f: parse_PtgElfColSV
    },
    /*::[*/ 0x10: {
        n: "PtgElfRadicalLel",
        f: parse_PtgElfRadicalLel
    },
    /*::[*/ 0x19: {
        n: "PtgList",
        f: parse_PtgList
    },
    /*::[*/ 0x1D: {
        n: "PtgSxName",
        f: parse_PtgSxName
    },
    /*::[*/ 0xFF: {}
};
var Ptg19 = {
    /*::[*/ 0x00: {
        n: "PtgAttrNoop",
        f: parse_PtgAttrNoop
    },
    /*::[*/ 0x01: {
        n: "PtgAttrSemi",
        f: parse_PtgAttrSemi
    },
    /*::[*/ 0x02: {
        n: "PtgAttrIf",
        f: parse_PtgAttrIf
    },
    /*::[*/ 0x04: {
        n: "PtgAttrChoose",
        f: parse_PtgAttrChoose
    },
    /*::[*/ 0x08: {
        n: "PtgAttrGoto",
        f: parse_PtgAttrGoto
    },
    /*::[*/ 0x10: {
        n: "PtgAttrSum",
        f: parse_PtgAttrSum
    },
    /*::[*/ 0x20: {
        n: "PtgAttrBaxcel",
        f: parse_PtgAttrBaxcel
    },
    /*::[*/ 0x21: {
        n: "PtgAttrBaxcel",
        f: parse_PtgAttrBaxcel
    },
    /*::[*/ 0x40: {
        n: "PtgAttrSpace",
        f: parse_PtgAttrSpace
    },
    /*::[*/ 0x41: {
        n: "PtgAttrSpaceSemi",
        f: parse_PtgAttrSpaceSemi
    },
    /*::[*/ 0x80: {
        n: "PtgAttrIfError",
        f: parse_PtgAttrIfError
    },
    /*::[*/ 0xFF: {}
};
/* [MS-XLS] 2.5.198.103 ; [MS-XLSB] 2.5.97.87 */ function parse_RgbExtra(blob, length, rgce, opts) {
    if (opts.biff < 8) return parsenoop(blob, length);
    var target = blob.l + length;
    var o = [];
    for(var i = 0; i !== rgce.length; ++i)switch(rgce[i][0]){
        case "PtgArray":
            /* PtgArray -> PtgExtraArray */ rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);
            o.push(rgce[i][1]);
            break;
        case "PtgMemArea":
            /* PtgMemArea -> PtgExtraMem */ rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1], opts);
            o.push(rgce[i][2]);
            break;
        case "PtgExp":
            /* PtgExp -> PtgExtraCol */ if (opts && opts.biff == 12) {
                rgce[i][1][1] = blob.read_shift(4);
                o.push(rgce[i][1]);
            }
            break;
        case "PtgList":
        /* TODO: PtgList -> PtgExtraList */ case "PtgElfRadicalS":
        /* TODO: PtgElfRadicalS -> PtgExtraElf */ case "PtgElfColS":
        /* TODO: PtgElfColS -> PtgExtraElf */ case "PtgElfColSV":
            /* TODO: PtgElfColSV -> PtgExtraElf */ throw "Unsupported " + rgce[i][0];
        default:
            break;
    }
    length = target - blob.l;
    /* note: this is technically an error but Excel disregards */ //if(target !== blob.l && blob.l !== target - length) throw new Error(target + " != " + blob.l);
    if (length !== 0) o.push(parsenoop(blob, length));
    return o;
}
/* [MS-XLS] 2.5.198.104 ; [MS-XLSB] 2.5.97.88 */ function parse_Rgce(blob, length, opts) {
    var target = blob.l + length;
    var R, id, ptgs = [];
    while(target != blob.l){
        length = target - blob.l;
        id = blob[blob.l];
        R = PtgTypes[id] || PtgTypes[PtgDupes[id]];
        if (id === 0x18 || id === 0x19) R = (id === 0x18 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
        if (!R || !R.f) parsenoop(blob, length);
        else ptgs.push([
            R.n,
            R.f(blob, length, opts)
        ]);
    }
    return ptgs;
}
function stringify_array(f /*:Array<Array<string>>*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [];
    for(var i = 0; i < f.length; ++i){
        var x = f[i], r /*:Array<string>*/  = [];
        for(var j = 0; j < x.length; ++j){
            var y = x[j];
            if (y) switch(y[0]){
                // TODO: handle embedded quotes
                case 0x02:
                    /*:: if(typeof y[1] != 'string') throw "unreachable"; */ r.push('"' + y[1].replace(/"/g, '""') + '"');
                    break;
                default:
                    r.push(y[1]);
            }
            else r.push("");
        }
        o.push(r.join(","));
    }
    return o.join(";");
}
/* [MS-XLS] 2.2.2 ; [MS-XLSB] 2.2.2 TODO */ var PtgBinOp = {
    PtgAdd: "+",
    PtgConcat: "&",
    PtgDiv: "/",
    PtgEq: "=",
    PtgGe: ">=",
    PtgGt: ">",
    PtgLe: "<=",
    PtgLt: "<",
    PtgMul: "*",
    PtgNe: "<>",
    PtgPower: "^",
    PtgSub: "-"
};
// List of invalid characters needs to be tested further
function formula_quote_sheet_name(sname /*:string*/ , opts) /*:string*/ {
    if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error("empty sheet name");
    if (/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(sname)) return "'" + sname + "'";
    return sname;
}
function get_ixti_raw(supbooks, ixti /*:number*/ , opts) /*:string*/ {
    if (!supbooks) return "SH33TJSERR0";
    if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];
    if (!supbooks.XTI) return "SH33TJSERR6";
    var XTI = supbooks.XTI[ixti];
    if (opts.biff < 8) {
        if (ixti > 10000) ixti -= 65536;
        if (ixti < 0) ixti = -ixti;
        return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
    }
    if (!XTI) return "SH33TJSERR1";
    var o = "";
    if (opts.biff > 8) switch(supbooks[XTI[0]][0]){
        case 0x0165:
            /* 'BrtSupSelf' */ o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
            return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
        case 0x0166:
            /* 'BrtSupSame' */ if (opts.SID != null) return supbooks.SheetNames[opts.SID];
            return "SH33TJSSAME" + supbooks[XTI[0]][0];
        case 0x0163:
        /* 'BrtSupBookSrc' */ /* falls through */ default:
            return "SH33TJSSRC" + supbooks[XTI[0]][0];
    }
    switch(supbooks[XTI[0]][0][0]){
        case 0x0401:
            o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]] || "SH33TJSERR3";
            return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
        case 0x3A01:
            return supbooks[XTI[0]].slice(1).map(function(name) {
                return name.Name;
            }).join(";;"); //return "SH33TJSERR8";
        default:
            if (!supbooks[XTI[0]][0][3]) return "SH33TJSERR2";
            o = XTI[1] == -1 ? "#REF" : supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4";
            return XTI[1] == XTI[2] ? o : o + ":" + supbooks[XTI[0]][0][3][XTI[2]];
    }
}
function get_ixti(supbooks, ixti /*:number*/ , opts) /*:string*/ {
    var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
    return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
}
function stringify_formula(formula /*Array<any>*/ , range, cell /*:any*/ , supbooks, opts) /*:string*/ {
    var biff = opts && opts.biff || 8;
    var _range = /*range != null ? range :*/ {
        s: {
            c: 0,
            r: 0
        },
        e: {
            c: 0,
            r: 0
        }
    };
    var stack /*:Array<string>*/  = [], e1, e2, /*::type,*/ c /*:CellAddress*/ , ixti = 0, nameidx = 0, r, sname = "";
    if (!formula[0] || !formula[0][0]) return "";
    var last_sp = -1, sp = "";
    for(var ff = 0, fflen = formula[0].length; ff < fflen; ++ff){
        var f = formula[0][ff];
        switch(f[0]){
            case "PtgUminus":
                /* [MS-XLS] 2.5.198.93 */ stack.push("-" + stack.pop());
                break;
            case "PtgUplus":
                /* [MS-XLS] 2.5.198.95 */ stack.push("+" + stack.pop());
                break;
            case "PtgPercent":
                /* [MS-XLS] 2.5.198.81 */ stack.push(stack.pop() + "%");
                break;
            case "PtgAdd":
            /* [MS-XLS] 2.5.198.26 */ case "PtgConcat":
            /* [MS-XLS] 2.5.198.43 */ case "PtgDiv":
            /* [MS-XLS] 2.5.198.45 */ case "PtgEq":
            /* [MS-XLS] 2.5.198.56 */ case "PtgGe":
            /* [MS-XLS] 2.5.198.64 */ case "PtgGt":
            /* [MS-XLS] 2.5.198.65 */ case "PtgLe":
            /* [MS-XLS] 2.5.198.68 */ case "PtgLt":
            /* [MS-XLS] 2.5.198.69 */ case "PtgMul":
            /* [MS-XLS] 2.5.198.75 */ case "PtgNe":
            /* [MS-XLS] 2.5.198.78 */ case "PtgPower":
            /* [MS-XLS] 2.5.198.82 */ case "PtgSub":
                /* [MS-XLS] 2.5.198.90 */ e1 = stack.pop();
                e2 = stack.pop();
                if (last_sp >= 0) {
                    switch(formula[0][last_sp][1][0]){
                        case 0:
                            // $FlowIgnore
                            sp = fill(" ", formula[0][last_sp][1][1]);
                            break;
                        case 1:
                            // $FlowIgnore
                            sp = fill("\r", formula[0][last_sp][1][1]);
                            break;
                        default:
                            sp = "";
                            // $FlowIgnore
                            if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                    }
                    e2 = e2 + sp;
                    last_sp = -1;
                }
                stack.push(e2 + PtgBinOp[f[0]] + e1);
                break;
            case "PtgIsect":
                /* [MS-XLS] 2.5.198.67 */ e1 = stack.pop();
                e2 = stack.pop();
                stack.push(e2 + " " + e1);
                break;
            case "PtgUnion":
                /* [MS-XLS] 2.5.198.94 */ e1 = stack.pop();
                e2 = stack.pop();
                stack.push(e2 + "," + e1);
                break;
            case "PtgRange":
                /* [MS-XLS] 2.5.198.83 */ e1 = stack.pop();
                e2 = stack.pop();
                stack.push(e2 + ":" + e1);
                break;
            case "PtgAttrChoose":
                break;
            case "PtgAttrGoto":
                break;
            case "PtgAttrIf":
                break;
            case "PtgAttrIfError":
                break;
            case "PtgRef":
                /* [MS-XLS] 2.5.198.84 */ /*::type = f[1][0]; */ c = shift_cell_xls(f[1][1], _range, opts);
                stack.push(encode_cell_xls(c, biff));
                break;
            case "PtgRefN":
                /* [MS-XLS] 2.5.198.88 */ /*::type = f[1][0]; */ c = cell ? shift_cell_xls(f[1][1], cell, opts) : f[1][1];
                stack.push(encode_cell_xls(c, biff));
                break;
            case "PtgRef3d":
                /* [MS-XLS] 2.5.198.85 */ /*::type = f[1][0]; */ ixti = /*::Number(*/ f[1][1] /*::)*/ ;
                c = shift_cell_xls(f[1][2], _range, opts);
                sname = get_ixti(supbooks, ixti, opts);
                var w = sname; /* IE9 fails on defined names */  // eslint-disable-line no-unused-vars
                stack.push(sname + "!" + encode_cell_xls(c, biff));
                break;
            case "PtgFunc":
            /* [MS-XLS] 2.5.198.62 */ case "PtgFuncVar":
                /* [MS-XLS] 2.5.198.63 */ /* f[1] = [argc, func, type] */ var argc /*:number*/  = f[1][0], func /*:string*/  = f[1][1];
                if (!argc) argc = 0;
                argc &= 0x7F;
                var args = argc == 0 ? [] : stack.slice(-argc);
                stack.length -= argc;
                if (func === "User") func = args.shift();
                stack.push(func + "(" + args.join(",") + ")");
                break;
            case "PtgBool":
                /* [MS-XLS] 2.5.198.42 */ stack.push(f[1] ? "TRUE" : "FALSE");
                break;
            case "PtgInt":
                /* [MS-XLS] 2.5.198.66 */ stack.push(/*::String(*/ f[1]);
                break;
            case "PtgNum":
                /* [MS-XLS] 2.5.198.79 TODO: precision? */ stack.push(String(f[1]));
                break;
            case "PtgStr":
                /* [MS-XLS] 2.5.198.89 */ // $FlowIgnore
                stack.push('"' + f[1].replace(/"/g, '""') + '"');
                break;
            case "PtgErr":
                /* [MS-XLS] 2.5.198.57 */ stack.push(/*::String(*/ f[1]);
                break;
            case "PtgAreaN":
                /* [MS-XLS] 2.5.198.31 TODO */ /*::type = f[1][0]; */ r = shift_range_xls(f[1][1], cell ? {
                    s: cell
                } : _range, opts);
                stack.push(encode_range_xls(r /*:any*/ , opts));
                break;
            case "PtgArea":
                /* [MS-XLS] 2.5.198.27 TODO: fixed points */ /*::type = f[1][0]; */ r = shift_range_xls(f[1][1], _range, opts);
                stack.push(encode_range_xls(r /*:any*/ , opts));
                break;
            case "PtgArea3d":
                /* [MS-XLS] 2.5.198.28 TODO */ /*::type = f[1][0]; */ ixti = /*::Number(*/ f[1][1] /*::)*/ ;
                r = f[1][2];
                sname = get_ixti(supbooks, ixti, opts);
                stack.push(sname + "!" + encode_range_xls(r /*:any*/ , opts));
                break;
            case "PtgAttrSum":
                /* [MS-XLS] 2.5.198.41 */ stack.push("SUM(" + stack.pop() + ")");
                break;
            case "PtgAttrBaxcel":
            /* [MS-XLS] 2.5.198.33 */ case "PtgAttrSemi":
                break;
            case "PtgName":
                /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 TODO: revisions */ /* f[1] = type, 0, nameindex */ nameidx = f[1][2];
                var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];
                var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
                /* [MS-XLSB] 2.5.97.10 Ftab -- last verified 20220204 */ if (name && name.slice(0, 6) == "_xlfn." && !opts.xlfn) name = name.slice(6);
                stack.push(name);
                break;
            case "PtgNameX":
                /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 TODO: revisions */ /* f[1] = type, ixti, nameindex */ var bookidx /*:number*/  = f[1][1];
                nameidx = f[1][2];
                var externbook;
                /* TODO: Properly handle missing values -- this should be using get_ixti_raw primarily */ if (opts.biff <= 5) {
                    if (bookidx < 0) bookidx = -bookidx;
                    if (supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
                } else {
                    var o = "";
                    if (((supbooks[bookidx] || [])[0] || [])[0] == 0x3A01) ;
                    else if (((supbooks[bookidx] || [])[0] || [])[0] == 0x0401) {
                        if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + "!";
                    } else o = supbooks.SheetNames[nameidx - 1] + "!";
                    if (supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;
                    else if (supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;
                    else {
                        var ixtidata = (get_ixti_raw(supbooks, bookidx, opts) || "").split(";;");
                        if (ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1]; // TODO: confirm this is correct
                        else o += "SH33TJSERRX";
                    }
                    stack.push(o);
                    break;
                }
                if (!externbook) externbook = {
                    Name: "SH33TJSERRY"
                };
                stack.push(externbook.Name);
                break;
            case "PtgParen":
                /* [MS-XLS] 2.5.198.80 */ var lp = "(", rp = ")";
                if (last_sp >= 0) {
                    sp = "";
                    switch(formula[0][last_sp][1][0]){
                        // $FlowIgnore
                        case 2:
                            lp = fill(" ", formula[0][last_sp][1][1]) + lp;
                            break;
                        // $FlowIgnore
                        case 3:
                            lp = fill("\r", formula[0][last_sp][1][1]) + lp;
                            break;
                        // $FlowIgnore
                        case 4:
                            rp = fill(" ", formula[0][last_sp][1][1]) + rp;
                            break;
                        // $FlowIgnore
                        case 5:
                            rp = fill("\r", formula[0][last_sp][1][1]) + rp;
                            break;
                        default:
                            // $FlowIgnore
                            if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                    }
                    last_sp = -1;
                }
                stack.push(lp + stack.pop() + rp);
                break;
            case "PtgRefErr":
                /* [MS-XLS] 2.5.198.86 */ stack.push("#REF!");
                break;
            case "PtgRefErr3d":
                /* [MS-XLS] 2.5.198.87 */ stack.push("#REF!");
                break;
            case "PtgExp":
                /* [MS-XLS] 2.5.198.58 TODO */ c = {
                    c: f[1][1],
                    r: f[1][0]
                };
                var q = {
                    c: cell.c,
                    r: cell.r
                } /*:any*/ ;
                if (supbooks.sharedf[encode_cell(c)]) {
                    var parsedf = supbooks.sharedf[encode_cell(c)];
                    stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
                } else {
                    var fnd = false;
                    for(e1 = 0; e1 != supbooks.arrayf.length; ++e1){
                        /* TODO: should be something like range_has */ e2 = supbooks.arrayf[e1];
                        if (c.c < e2[0].s.c || c.c > e2[0].e.c) continue;
                        if (c.r < e2[0].s.r || c.r > e2[0].e.r) continue;
                        stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
                        fnd = true;
                        break;
                    }
                    if (!fnd) stack.push(/*::String(*/ f[1]);
                }
                break;
            case "PtgArray":
                /* [MS-XLS] 2.5.198.32 TODO */ stack.push("{" + stringify_array(/*::(*/ f[1]) + "}");
                break;
            case "PtgMemArea":
                break;
            case "PtgAttrSpace":
            /* [MS-XLS] 2.5.198.38 */ case "PtgAttrSpaceSemi":
                /* [MS-XLS] 2.5.198.39 */ last_sp = ff;
                break;
            case "PtgTbl":
                break;
            case "PtgMemErr":
                break;
            case "PtgMissArg":
                /* [MS-XLS] 2.5.198.74 */ stack.push("");
                break;
            case "PtgAreaErr":
                /* [MS-XLS] 2.5.198.29 */ stack.push("#REF!");
                break;
            case "PtgAreaErr3d":
                /* [MS-XLS] 2.5.198.30 */ stack.push("#REF!");
                break;
            case "PtgList":
                /* [MS-XLSB] 2.5.97.52 */ // $FlowIgnore
                stack.push("Table" + f[1].idx + "[#" + f[1].rt + "]");
                break;
            case "PtgMemAreaN":
            case "PtgMemNoMemN":
            case "PtgAttrNoop":
            case "PtgSheet":
            case "PtgEndSheet":
                break;
            case "PtgMemFunc":
                break;
            case "PtgMemNoMem":
                break;
            case "PtgElfCol":
            /* [MS-XLS] 2.5.198.46 */ case "PtgElfColS":
            /* [MS-XLS] 2.5.198.47 */ case "PtgElfColSV":
            /* [MS-XLS] 2.5.198.48 */ case "PtgElfColV":
            /* [MS-XLS] 2.5.198.49 */ case "PtgElfLel":
            /* [MS-XLS] 2.5.198.50 */ case "PtgElfRadical":
            /* [MS-XLS] 2.5.198.51 */ case "PtgElfRadicalLel":
            /* [MS-XLS] 2.5.198.52 */ case "PtgElfRadicalS":
            /* [MS-XLS] 2.5.198.53 */ case "PtgElfRw":
            /* [MS-XLS] 2.5.198.54 */ case "PtgElfRwV":
                /* [MS-XLS] 2.5.198.55 */ throw new Error("Unsupported ELFs");
            case "PtgSxName":
                /* [MS-XLS] 2.5.198.91 TODO -- find a test case */ throw new Error("Unrecognized Formula Token: " + String(f));
            default:
                throw new Error("Unrecognized Formula Token: " + String(f));
        }
        var PtgNonDisp = [
            "PtgAttrSpace",
            "PtgAttrSpaceSemi",
            "PtgAttrGoto"
        ];
        if (opts.biff != 3) {
            if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
                f = formula[0][last_sp];
                var _left = true;
                switch(f[1][0]){
                    /* note: some bad XLSB files omit the PtgParen */ case 4:
                        _left = false;
                    /* falls through */ case 0:
                        // $FlowIgnore
                        sp = fill(" ", f[1][1]);
                        break;
                    case 5:
                        _left = false;
                    /* falls through */ case 1:
                        // $FlowIgnore
                        sp = fill("\r", f[1][1]);
                        break;
                    default:
                        sp = "";
                        // $FlowIgnore
                        if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
                }
                stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
                last_sp = -1;
            }
        }
    }
    if (stack.length > 1 && opts.WTF) throw new Error("bad formula stack");
    return stack[0];
}
/* [MS-XLS] 2.5.198.1 TODO */ function parse_ArrayParsedFormula(blob, length, opts /*::, ref*/ ) {
    var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
    var rgcb, cce = blob.read_shift(len); // length of rgce
    if (cce == 0xFFFF) return [
        [],
        parsenoop(blob, length - 2)
    ];
    var rgce = parse_Rgce(blob, cce, opts);
    if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    blob.l = target;
    return [
        rgce,
        rgcb
    ];
}
/* [MS-XLS] 2.5.198.3 TODO */ function parse_XLSCellParsedFormula(blob, length, opts) {
    var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
    var rgcb, cce = blob.read_shift(len); // length of rgce
    if (cce == 0xFFFF) return [
        [],
        parsenoop(blob, length - 2)
    ];
    var rgce = parse_Rgce(blob, cce, opts);
    if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    blob.l = target;
    return [
        rgce,
        rgcb
    ];
}
/* [MS-XLS] 2.5.198.21 */ function parse_NameParsedFormula(blob, length, opts, cce) {
    var target = blob.l + length;
    var rgce = parse_Rgce(blob, cce, opts);
    var rgcb;
    if (target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
    return [
        rgce,
        rgcb
    ];
}
/* [MS-XLS] 2.5.198.118 TODO */ function parse_SharedParsedFormula(blob, length, opts) {
    var target = blob.l + length;
    var rgcb, cce = blob.read_shift(2); // length of rgce
    var rgce = parse_Rgce(blob, cce, opts);
    if (cce == 0xFFFF) return [
        [],
        parsenoop(blob, length - 2)
    ];
    if (length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
    return [
        rgce,
        rgcb
    ];
}
/* [MS-XLS] 2.5.133 TODO: how to emit empty strings? */ function parse_FormulaValue(blob /*::, length*/ ) {
    var b;
    if (__readUInt16LE(blob, blob.l + 6) !== 0xFFFF) return [
        parse_Xnum(blob),
        "n"
    ];
    switch(blob[blob.l]){
        case 0x00:
            blob.l += 8;
            return [
                "String",
                "s"
            ];
        case 0x01:
            b = blob[blob.l + 2] === 0x1;
            blob.l += 8;
            return [
                b,
                "b"
            ];
        case 0x02:
            b = blob[blob.l + 2];
            blob.l += 8;
            return [
                b,
                "e"
            ];
        case 0x03:
            blob.l += 8;
            return [
                "",
                "s"
            ];
    }
    return [];
}
function write_FormulaValue(value) {
    if (value == null) {
        // Blank String Value
        var o = new_buf(8);
        o.write_shift(1, 0x03);
        o.write_shift(1, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0xFFFF);
        return o;
    } else if (typeof value == "number") return write_Xnum(value);
    return write_Xnum(0);
}
/* [MS-XLS] 2.4.127 TODO */ function parse_Formula(blob, length, opts) {
    var end = blob.l + length;
    var cell = parse_XLSCell(blob, 6);
    if (opts.biff == 2) ++blob.l;
    var val = parse_FormulaValue(blob, 8);
    var flags = blob.read_shift(1);
    if (opts.biff != 2) {
        blob.read_shift(1);
        if (opts.biff >= 5) /*var chn = */ blob.read_shift(4);
    }
    var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
    return {
        cell: cell,
        val: val[0],
        formula: cbf,
        shared: flags >> 3 & 1,
        tt: val[1]
    };
}
function write_Formula(cell /*:Cell*/ , R /*:number*/ , C /*:number*/ , opts, os /*:number*/ ) {
    // Cell
    var o1 = write_XLSCell(R, C, os);
    // FormulaValue
    var o2 = write_FormulaValue(cell.v);
    // flags + cache
    var o3 = new_buf(6);
    var flags = 33;
    o3.write_shift(2, flags);
    o3.write_shift(4, 0);
    // CellParsedFormula
    var bf = new_buf(cell.bf.length);
    for(var i = 0; i < cell.bf.length; ++i)bf[i] = cell.bf[i];
    var out = bconcat([
        o1,
        o2,
        o3,
        bf
    ]);
    return out;
}
/* XLSB Parsed Formula records have the same shape */ function parse_XLSBParsedFormula(data, length, opts) {
    var cce = data.read_shift(4);
    var rgce = parse_Rgce(data, cce, opts);
    var cb = data.read_shift(4);
    var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
    return [
        rgce,
        rgcb
    ];
}
/* [MS-XLSB] 2.5.97.1 ArrayParsedFormula */ var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
/* [MS-XLSB] 2.5.97.4 CellParsedFormula */ var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
/* [MS-XLSB] 2.5.97.8 DVParsedFormula */ //var parse_XLSBDVParsedFormula = parse_XLSBParsedFormula;
/* [MS-XLSB] 2.5.97.9 FRTParsedFormula */ //var parse_XLSBFRTParsedFormula = parse_XLSBParsedFormula2;
/* [MS-XLSB] 2.5.97.12 NameParsedFormula */ var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
/* [MS-XLSB] 2.5.97.98 SharedParsedFormula */ var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
var Cetab = {
    0: "BEEP",
    1: "OPEN",
    2: "OPEN.LINKS",
    3: "CLOSE.ALL",
    4: "SAVE",
    5: "SAVE.AS",
    6: "FILE.DELETE",
    7: "PAGE.SETUP",
    8: "PRINT",
    9: "PRINTER.SETUP",
    10: "QUIT",
    11: "NEW.WINDOW",
    12: "ARRANGE.ALL",
    13: "WINDOW.SIZE",
    14: "WINDOW.MOVE",
    15: "FULL",
    16: "CLOSE",
    17: "RUN",
    22: "SET.PRINT.AREA",
    23: "SET.PRINT.TITLES",
    24: "SET.PAGE.BREAK",
    25: "REMOVE.PAGE.BREAK",
    26: "FONT",
    27: "DISPLAY",
    28: "PROTECT.DOCUMENT",
    29: "PRECISION",
    30: "A1.R1C1",
    31: "CALCULATE.NOW",
    32: "CALCULATION",
    34: "DATA.FIND",
    35: "EXTRACT",
    36: "DATA.DELETE",
    37: "SET.DATABASE",
    38: "SET.CRITERIA",
    39: "SORT",
    40: "DATA.SERIES",
    41: "TABLE",
    42: "FORMAT.NUMBER",
    43: "ALIGNMENT",
    44: "STYLE",
    45: "BORDER",
    46: "CELL.PROTECTION",
    47: "COLUMN.WIDTH",
    48: "UNDO",
    49: "CUT",
    50: "COPY",
    51: "PASTE",
    52: "CLEAR",
    53: "PASTE.SPECIAL",
    54: "EDIT.DELETE",
    55: "INSERT",
    56: "FILL.RIGHT",
    57: "FILL.DOWN",
    61: "DEFINE.NAME",
    62: "CREATE.NAMES",
    63: "FORMULA.GOTO",
    64: "FORMULA.FIND",
    65: "SELECT.LAST.CELL",
    66: "SHOW.ACTIVE.CELL",
    67: "GALLERY.AREA",
    68: "GALLERY.BAR",
    69: "GALLERY.COLUMN",
    70: "GALLERY.LINE",
    71: "GALLERY.PIE",
    72: "GALLERY.SCATTER",
    73: "COMBINATION",
    74: "PREFERRED",
    75: "ADD.OVERLAY",
    76: "GRIDLINES",
    77: "SET.PREFERRED",
    78: "AXES",
    79: "LEGEND",
    80: "ATTACH.TEXT",
    81: "ADD.ARROW",
    82: "SELECT.CHART",
    83: "SELECT.PLOT.AREA",
    84: "PATTERNS",
    85: "MAIN.CHART",
    86: "OVERLAY",
    87: "SCALE",
    88: "FORMAT.LEGEND",
    89: "FORMAT.TEXT",
    90: "EDIT.REPEAT",
    91: "PARSE",
    92: "JUSTIFY",
    93: "HIDE",
    94: "UNHIDE",
    95: "WORKSPACE",
    96: "FORMULA",
    97: "FORMULA.FILL",
    98: "FORMULA.ARRAY",
    99: "DATA.FIND.NEXT",
    100: "DATA.FIND.PREV",
    101: "FORMULA.FIND.NEXT",
    102: "FORMULA.FIND.PREV",
    103: "ACTIVATE",
    104: "ACTIVATE.NEXT",
    105: "ACTIVATE.PREV",
    106: "UNLOCKED.NEXT",
    107: "UNLOCKED.PREV",
    108: "COPY.PICTURE",
    109: "SELECT",
    110: "DELETE.NAME",
    111: "DELETE.FORMAT",
    112: "VLINE",
    113: "HLINE",
    114: "VPAGE",
    115: "HPAGE",
    116: "VSCROLL",
    117: "HSCROLL",
    118: "ALERT",
    119: "NEW",
    120: "CANCEL.COPY",
    121: "SHOW.CLIPBOARD",
    122: "MESSAGE",
    124: "PASTE.LINK",
    125: "APP.ACTIVATE",
    126: "DELETE.ARROW",
    127: "ROW.HEIGHT",
    128: "FORMAT.MOVE",
    129: "FORMAT.SIZE",
    130: "FORMULA.REPLACE",
    131: "SEND.KEYS",
    132: "SELECT.SPECIAL",
    133: "APPLY.NAMES",
    134: "REPLACE.FONT",
    135: "FREEZE.PANES",
    136: "SHOW.INFO",
    137: "SPLIT",
    138: "ON.WINDOW",
    139: "ON.DATA",
    140: "DISABLE.INPUT",
    142: "OUTLINE",
    143: "LIST.NAMES",
    144: "FILE.CLOSE",
    145: "SAVE.WORKBOOK",
    146: "DATA.FORM",
    147: "COPY.CHART",
    148: "ON.TIME",
    149: "WAIT",
    150: "FORMAT.FONT",
    151: "FILL.UP",
    152: "FILL.LEFT",
    153: "DELETE.OVERLAY",
    155: "SHORT.MENUS",
    159: "SET.UPDATE.STATUS",
    161: "COLOR.PALETTE",
    162: "DELETE.STYLE",
    163: "WINDOW.RESTORE",
    164: "WINDOW.MAXIMIZE",
    166: "CHANGE.LINK",
    167: "CALCULATE.DOCUMENT",
    168: "ON.KEY",
    169: "APP.RESTORE",
    170: "APP.MOVE",
    171: "APP.SIZE",
    172: "APP.MINIMIZE",
    173: "APP.MAXIMIZE",
    174: "BRING.TO.FRONT",
    175: "SEND.TO.BACK",
    185: "MAIN.CHART.TYPE",
    186: "OVERLAY.CHART.TYPE",
    187: "SELECT.END",
    188: "OPEN.MAIL",
    189: "SEND.MAIL",
    190: "STANDARD.FONT",
    191: "CONSOLIDATE",
    192: "SORT.SPECIAL",
    193: "GALLERY.3D.AREA",
    194: "GALLERY.3D.COLUMN",
    195: "GALLERY.3D.LINE",
    196: "GALLERY.3D.PIE",
    197: "VIEW.3D",
    198: "GOAL.SEEK",
    199: "WORKGROUP",
    200: "FILL.GROUP",
    201: "UPDATE.LINK",
    202: "PROMOTE",
    203: "DEMOTE",
    204: "SHOW.DETAIL",
    206: "UNGROUP",
    207: "OBJECT.PROPERTIES",
    208: "SAVE.NEW.OBJECT",
    209: "SHARE",
    210: "SHARE.NAME",
    211: "DUPLICATE",
    212: "APPLY.STYLE",
    213: "ASSIGN.TO.OBJECT",
    214: "OBJECT.PROTECTION",
    215: "HIDE.OBJECT",
    216: "SET.EXTRACT",
    217: "CREATE.PUBLISHER",
    218: "SUBSCRIBE.TO",
    219: "ATTRIBUTES",
    220: "SHOW.TOOLBAR",
    222: "PRINT.PREVIEW",
    223: "EDIT.COLOR",
    224: "SHOW.LEVELS",
    225: "FORMAT.MAIN",
    226: "FORMAT.OVERLAY",
    227: "ON.RECALC",
    228: "EDIT.SERIES",
    229: "DEFINE.STYLE",
    240: "LINE.PRINT",
    243: "ENTER.DATA",
    249: "GALLERY.RADAR",
    250: "MERGE.STYLES",
    251: "EDITION.OPTIONS",
    252: "PASTE.PICTURE",
    253: "PASTE.PICTURE.LINK",
    254: "SPELLING",
    256: "ZOOM",
    259: "INSERT.OBJECT",
    260: "WINDOW.MINIMIZE",
    265: "SOUND.NOTE",
    266: "SOUND.PLAY",
    267: "FORMAT.SHAPE",
    268: "EXTEND.POLYGON",
    269: "FORMAT.AUTO",
    272: "GALLERY.3D.BAR",
    273: "GALLERY.3D.SURFACE",
    274: "FILL.AUTO",
    276: "CUSTOMIZE.TOOLBAR",
    277: "ADD.TOOL",
    278: "EDIT.OBJECT",
    279: "ON.DOUBLECLICK",
    280: "ON.ENTRY",
    281: "WORKBOOK.ADD",
    282: "WORKBOOK.MOVE",
    283: "WORKBOOK.COPY",
    284: "WORKBOOK.OPTIONS",
    285: "SAVE.WORKSPACE",
    288: "CHART.WIZARD",
    289: "DELETE.TOOL",
    290: "MOVE.TOOL",
    291: "WORKBOOK.SELECT",
    292: "WORKBOOK.ACTIVATE",
    293: "ASSIGN.TO.TOOL",
    295: "COPY.TOOL",
    296: "RESET.TOOL",
    297: "CONSTRAIN.NUMERIC",
    298: "PASTE.TOOL",
    302: "WORKBOOK.NEW",
    305: "SCENARIO.CELLS",
    306: "SCENARIO.DELETE",
    307: "SCENARIO.ADD",
    308: "SCENARIO.EDIT",
    309: "SCENARIO.SHOW",
    310: "SCENARIO.SHOW.NEXT",
    311: "SCENARIO.SUMMARY",
    312: "PIVOT.TABLE.WIZARD",
    313: "PIVOT.FIELD.PROPERTIES",
    314: "PIVOT.FIELD",
    315: "PIVOT.ITEM",
    316: "PIVOT.ADD.FIELDS",
    318: "OPTIONS.CALCULATION",
    319: "OPTIONS.EDIT",
    320: "OPTIONS.VIEW",
    321: "ADDIN.MANAGER",
    322: "MENU.EDITOR",
    323: "ATTACH.TOOLBARS",
    324: "VBAActivate",
    325: "OPTIONS.CHART",
    328: "VBA.INSERT.FILE",
    330: "VBA.PROCEDURE.DEFINITION",
    336: "ROUTING.SLIP",
    338: "ROUTE.DOCUMENT",
    339: "MAIL.LOGON",
    342: "INSERT.PICTURE",
    343: "EDIT.TOOL",
    344: "GALLERY.DOUGHNUT",
    350: "CHART.TREND",
    352: "PIVOT.ITEM.PROPERTIES",
    354: "WORKBOOK.INSERT",
    355: "OPTIONS.TRANSITION",
    356: "OPTIONS.GENERAL",
    370: "FILTER.ADVANCED",
    373: "MAIL.ADD.MAILER",
    374: "MAIL.DELETE.MAILER",
    375: "MAIL.REPLY",
    376: "MAIL.REPLY.ALL",
    377: "MAIL.FORWARD",
    378: "MAIL.NEXT.LETTER",
    379: "DATA.LABEL",
    380: "INSERT.TITLE",
    381: "FONT.PROPERTIES",
    382: "MACRO.OPTIONS",
    383: "WORKBOOK.HIDE",
    384: "WORKBOOK.UNHIDE",
    385: "WORKBOOK.DELETE",
    386: "WORKBOOK.NAME",
    388: "GALLERY.CUSTOM",
    390: "ADD.CHART.AUTOFORMAT",
    391: "DELETE.CHART.AUTOFORMAT",
    392: "CHART.ADD.DATA",
    393: "AUTO.OUTLINE",
    394: "TAB.ORDER",
    395: "SHOW.DIALOG",
    396: "SELECT.ALL",
    397: "UNGROUP.SHEETS",
    398: "SUBTOTAL.CREATE",
    399: "SUBTOTAL.REMOVE",
    400: "RENAME.OBJECT",
    412: "WORKBOOK.SCROLL",
    413: "WORKBOOK.NEXT",
    414: "WORKBOOK.PREV",
    415: "WORKBOOK.TAB.SPLIT",
    416: "FULL.SCREEN",
    417: "WORKBOOK.PROTECT",
    420: "SCROLLBAR.PROPERTIES",
    421: "PIVOT.SHOW.PAGES",
    422: "TEXT.TO.COLUMNS",
    423: "FORMAT.CHARTTYPE",
    424: "LINK.FORMAT",
    425: "TRACER.DISPLAY",
    430: "TRACER.NAVIGATE",
    431: "TRACER.CLEAR",
    432: "TRACER.ERROR",
    433: "PIVOT.FIELD.GROUP",
    434: "PIVOT.FIELD.UNGROUP",
    435: "CHECKBOX.PROPERTIES",
    436: "LABEL.PROPERTIES",
    437: "LISTBOX.PROPERTIES",
    438: "EDITBOX.PROPERTIES",
    439: "PIVOT.REFRESH",
    440: "LINK.COMBO",
    441: "OPEN.TEXT",
    442: "HIDE.DIALOG",
    443: "SET.DIALOG.FOCUS",
    444: "ENABLE.OBJECT",
    445: "PUSHBUTTON.PROPERTIES",
    446: "SET.DIALOG.DEFAULT",
    447: "FILTER",
    448: "FILTER.SHOW.ALL",
    449: "CLEAR.OUTLINE",
    450: "FUNCTION.WIZARD",
    451: "ADD.LIST.ITEM",
    452: "SET.LIST.ITEM",
    453: "REMOVE.LIST.ITEM",
    454: "SELECT.LIST.ITEM",
    455: "SET.CONTROL.VALUE",
    456: "SAVE.COPY.AS",
    458: "OPTIONS.LISTS.ADD",
    459: "OPTIONS.LISTS.DELETE",
    460: "SERIES.AXES",
    461: "SERIES.X",
    462: "SERIES.Y",
    463: "ERRORBAR.X",
    464: "ERRORBAR.Y",
    465: "FORMAT.CHART",
    466: "SERIES.ORDER",
    467: "MAIL.LOGOFF",
    468: "CLEAR.ROUTING.SLIP",
    469: "APP.ACTIVATE.MICROSOFT",
    470: "MAIL.EDIT.MAILER",
    471: "ON.SHEET",
    472: "STANDARD.WIDTH",
    473: "SCENARIO.MERGE",
    474: "SUMMARY.INFO",
    475: "FIND.FILE",
    476: "ACTIVE.CELL.FONT",
    477: "ENABLE.TIPWIZARD",
    478: "VBA.MAKE.ADDIN",
    480: "INSERTDATATABLE",
    481: "WORKGROUP.OPTIONS",
    482: "MAIL.SEND.MAILER",
    485: "AUTOCORRECT",
    489: "POST.DOCUMENT",
    491: "PICKLIST",
    493: "VIEW.SHOW",
    494: "VIEW.DEFINE",
    495: "VIEW.DELETE",
    509: "SHEET.BACKGROUND",
    510: "INSERT.MAP.OBJECT",
    511: "OPTIONS.MENONO",
    517: "MSOCHECKS",
    518: "NORMAL",
    519: "LAYOUT",
    520: "RM.PRINT.AREA",
    521: "CLEAR.PRINT.AREA",
    522: "ADD.PRINT.AREA",
    523: "MOVE.BRK",
    545: "HIDECURR.NOTE",
    546: "HIDEALL.NOTES",
    547: "DELETE.NOTE",
    548: "TRAVERSE.NOTES",
    549: "ACTIVATE.NOTES",
    620: "PROTECT.REVISIONS",
    621: "UNPROTECT.REVISIONS",
    647: "OPTIONS.ME",
    653: "WEB.PUBLISH",
    667: "NEWWEBQUERY",
    673: "PIVOT.TABLE.CHART",
    753: "OPTIONS.SAVE",
    755: "OPTIONS.SPELL",
    808: "HIDEALL.INKANNOTS"
};
var Ftab = {
    0: "COUNT",
    1: "IF",
    2: "ISNA",
    3: "ISERROR",
    4: "SUM",
    5: "AVERAGE",
    6: "MIN",
    7: "MAX",
    8: "ROW",
    9: "COLUMN",
    10: "NA",
    11: "NPV",
    12: "STDEV",
    13: "DOLLAR",
    14: "FIXED",
    15: "SIN",
    16: "COS",
    17: "TAN",
    18: "ATAN",
    19: "PI",
    20: "SQRT",
    21: "EXP",
    22: "LN",
    23: "LOG10",
    24: "ABS",
    25: "INT",
    26: "SIGN",
    27: "ROUND",
    28: "LOOKUP",
    29: "INDEX",
    30: "REPT",
    31: "MID",
    32: "LEN",
    33: "VALUE",
    34: "TRUE",
    35: "FALSE",
    36: "AND",
    37: "OR",
    38: "NOT",
    39: "MOD",
    40: "DCOUNT",
    41: "DSUM",
    42: "DAVERAGE",
    43: "DMIN",
    44: "DMAX",
    45: "DSTDEV",
    46: "VAR",
    47: "DVAR",
    48: "TEXT",
    49: "LINEST",
    50: "TREND",
    51: "LOGEST",
    52: "GROWTH",
    53: "GOTO",
    54: "HALT",
    55: "RETURN",
    56: "PV",
    57: "FV",
    58: "NPER",
    59: "PMT",
    60: "RATE",
    61: "MIRR",
    62: "IRR",
    63: "RAND",
    64: "MATCH",
    65: "DATE",
    66: "TIME",
    67: "DAY",
    68: "MONTH",
    69: "YEAR",
    70: "WEEKDAY",
    71: "HOUR",
    72: "MINUTE",
    73: "SECOND",
    74: "NOW",
    75: "AREAS",
    76: "ROWS",
    77: "COLUMNS",
    78: "OFFSET",
    79: "ABSREF",
    80: "RELREF",
    81: "ARGUMENT",
    82: "SEARCH",
    83: "TRANSPOSE",
    84: "ERROR",
    85: "STEP",
    86: "TYPE",
    87: "ECHO",
    88: "SET.NAME",
    89: "CALLER",
    90: "DEREF",
    91: "WINDOWS",
    92: "SERIES",
    93: "DOCUMENTS",
    94: "ACTIVE.CELL",
    95: "SELECTION",
    96: "RESULT",
    97: "ATAN2",
    98: "ASIN",
    99: "ACOS",
    100: "CHOOSE",
    101: "HLOOKUP",
    102: "VLOOKUP",
    103: "LINKS",
    104: "INPUT",
    105: "ISREF",
    106: "GET.FORMULA",
    107: "GET.NAME",
    108: "SET.VALUE",
    109: "LOG",
    110: "EXEC",
    111: "CHAR",
    112: "LOWER",
    113: "UPPER",
    114: "PROPER",
    115: "LEFT",
    116: "RIGHT",
    117: "EXACT",
    118: "TRIM",
    119: "REPLACE",
    120: "SUBSTITUTE",
    121: "CODE",
    122: "NAMES",
    123: "DIRECTORY",
    124: "FIND",
    125: "CELL",
    126: "ISERR",
    127: "ISTEXT",
    128: "ISNUMBER",
    129: "ISBLANK",
    130: "T",
    131: "N",
    132: "FOPEN",
    133: "FCLOSE",
    134: "FSIZE",
    135: "FREADLN",
    136: "FREAD",
    137: "FWRITELN",
    138: "FWRITE",
    139: "FPOS",
    140: "DATEVALUE",
    141: "TIMEVALUE",
    142: "SLN",
    143: "SYD",
    144: "DDB",
    145: "GET.DEF",
    146: "REFTEXT",
    147: "TEXTREF",
    148: "INDIRECT",
    149: "REGISTER",
    150: "CALL",
    151: "ADD.BAR",
    152: "ADD.MENU",
    153: "ADD.COMMAND",
    154: "ENABLE.COMMAND",
    155: "CHECK.COMMAND",
    156: "RENAME.COMMAND",
    157: "SHOW.BAR",
    158: "DELETE.MENU",
    159: "DELETE.COMMAND",
    160: "GET.CHART.ITEM",
    161: "DIALOG.BOX",
    162: "CLEAN",
    163: "MDETERM",
    164: "MINVERSE",
    165: "MMULT",
    166: "FILES",
    167: "IPMT",
    168: "PPMT",
    169: "COUNTA",
    170: "CANCEL.KEY",
    171: "FOR",
    172: "WHILE",
    173: "BREAK",
    174: "NEXT",
    175: "INITIATE",
    176: "REQUEST",
    177: "POKE",
    178: "EXECUTE",
    179: "TERMINATE",
    180: "RESTART",
    181: "HELP",
    182: "GET.BAR",
    183: "PRODUCT",
    184: "FACT",
    185: "GET.CELL",
    186: "GET.WORKSPACE",
    187: "GET.WINDOW",
    188: "GET.DOCUMENT",
    189: "DPRODUCT",
    190: "ISNONTEXT",
    191: "GET.NOTE",
    192: "NOTE",
    193: "STDEVP",
    194: "VARP",
    195: "DSTDEVP",
    196: "DVARP",
    197: "TRUNC",
    198: "ISLOGICAL",
    199: "DCOUNTA",
    200: "DELETE.BAR",
    201: "UNREGISTER",
    204: "USDOLLAR",
    205: "FINDB",
    206: "SEARCHB",
    207: "REPLACEB",
    208: "LEFTB",
    209: "RIGHTB",
    210: "MIDB",
    211: "LENB",
    212: "ROUNDUP",
    213: "ROUNDDOWN",
    214: "ASC",
    215: "DBCS",
    216: "RANK",
    219: "ADDRESS",
    220: "DAYS360",
    221: "TODAY",
    222: "VDB",
    223: "ELSE",
    224: "ELSE.IF",
    225: "END.IF",
    226: "FOR.CELL",
    227: "MEDIAN",
    228: "SUMPRODUCT",
    229: "SINH",
    230: "COSH",
    231: "TANH",
    232: "ASINH",
    233: "ACOSH",
    234: "ATANH",
    235: "DGET",
    236: "CREATE.OBJECT",
    237: "VOLATILE",
    238: "LAST.ERROR",
    239: "CUSTOM.UNDO",
    240: "CUSTOM.REPEAT",
    241: "FORMULA.CONVERT",
    242: "GET.LINK.INFO",
    243: "TEXT.BOX",
    244: "INFO",
    245: "GROUP",
    246: "GET.OBJECT",
    247: "DB",
    248: "PAUSE",
    251: "RESUME",
    252: "FREQUENCY",
    253: "ADD.TOOLBAR",
    254: "DELETE.TOOLBAR",
    255: "User",
    256: "RESET.TOOLBAR",
    257: "EVALUATE",
    258: "GET.TOOLBAR",
    259: "GET.TOOL",
    260: "SPELLING.CHECK",
    261: "ERROR.TYPE",
    262: "APP.TITLE",
    263: "WINDOW.TITLE",
    264: "SAVE.TOOLBAR",
    265: "ENABLE.TOOL",
    266: "PRESS.TOOL",
    267: "REGISTER.ID",
    268: "GET.WORKBOOK",
    269: "AVEDEV",
    270: "BETADIST",
    271: "GAMMALN",
    272: "BETAINV",
    273: "BINOMDIST",
    274: "CHIDIST",
    275: "CHIINV",
    276: "COMBIN",
    277: "CONFIDENCE",
    278: "CRITBINOM",
    279: "EVEN",
    280: "EXPONDIST",
    281: "FDIST",
    282: "FINV",
    283: "FISHER",
    284: "FISHERINV",
    285: "FLOOR",
    286: "GAMMADIST",
    287: "GAMMAINV",
    288: "CEILING",
    289: "HYPGEOMDIST",
    290: "LOGNORMDIST",
    291: "LOGINV",
    292: "NEGBINOMDIST",
    293: "NORMDIST",
    294: "NORMSDIST",
    295: "NORMINV",
    296: "NORMSINV",
    297: "STANDARDIZE",
    298: "ODD",
    299: "PERMUT",
    300: "POISSON",
    301: "TDIST",
    302: "WEIBULL",
    303: "SUMXMY2",
    304: "SUMX2MY2",
    305: "SUMX2PY2",
    306: "CHITEST",
    307: "CORREL",
    308: "COVAR",
    309: "FORECAST",
    310: "FTEST",
    311: "INTERCEPT",
    312: "PEARSON",
    313: "RSQ",
    314: "STEYX",
    315: "SLOPE",
    316: "TTEST",
    317: "PROB",
    318: "DEVSQ",
    319: "GEOMEAN",
    320: "HARMEAN",
    321: "SUMSQ",
    322: "KURT",
    323: "SKEW",
    324: "ZTEST",
    325: "LARGE",
    326: "SMALL",
    327: "QUARTILE",
    328: "PERCENTILE",
    329: "PERCENTRANK",
    330: "MODE",
    331: "TRIMMEAN",
    332: "TINV",
    334: "MOVIE.COMMAND",
    335: "GET.MOVIE",
    336: "CONCATENATE",
    337: "POWER",
    338: "PIVOT.ADD.DATA",
    339: "GET.PIVOT.TABLE",
    340: "GET.PIVOT.FIELD",
    341: "GET.PIVOT.ITEM",
    342: "RADIANS",
    343: "DEGREES",
    344: "SUBTOTAL",
    345: "SUMIF",
    346: "COUNTIF",
    347: "COUNTBLANK",
    348: "SCENARIO.GET",
    349: "OPTIONS.LISTS.GET",
    350: "ISPMT",
    351: "DATEDIF",
    352: "DATESTRING",
    353: "NUMBERSTRING",
    354: "ROMAN",
    355: "OPEN.DIALOG",
    356: "SAVE.DIALOG",
    357: "VIEW.GET",
    358: "GETPIVOTDATA",
    359: "HYPERLINK",
    360: "PHONETIC",
    361: "AVERAGEA",
    362: "MAXA",
    363: "MINA",
    364: "STDEVPA",
    365: "VARPA",
    366: "STDEVA",
    367: "VARA",
    368: "BAHTTEXT",
    369: "THAIDAYOFWEEK",
    370: "THAIDIGIT",
    371: "THAIMONTHOFYEAR",
    372: "THAINUMSOUND",
    373: "THAINUMSTRING",
    374: "THAISTRINGLENGTH",
    375: "ISTHAIDIGIT",
    376: "ROUNDBAHTDOWN",
    377: "ROUNDBAHTUP",
    378: "THAIYEAR",
    379: "RTD",
    380: "CUBEVALUE",
    381: "CUBEMEMBER",
    382: "CUBEMEMBERPROPERTY",
    383: "CUBERANKEDMEMBER",
    384: "HEX2BIN",
    385: "HEX2DEC",
    386: "HEX2OCT",
    387: "DEC2BIN",
    388: "DEC2HEX",
    389: "DEC2OCT",
    390: "OCT2BIN",
    391: "OCT2HEX",
    392: "OCT2DEC",
    393: "BIN2DEC",
    394: "BIN2OCT",
    395: "BIN2HEX",
    396: "IMSUB",
    397: "IMDIV",
    398: "IMPOWER",
    399: "IMABS",
    400: "IMSQRT",
    401: "IMLN",
    402: "IMLOG2",
    403: "IMLOG10",
    404: "IMSIN",
    405: "IMCOS",
    406: "IMEXP",
    407: "IMARGUMENT",
    408: "IMCONJUGATE",
    409: "IMAGINARY",
    410: "IMREAL",
    411: "COMPLEX",
    412: "IMSUM",
    413: "IMPRODUCT",
    414: "SERIESSUM",
    415: "FACTDOUBLE",
    416: "SQRTPI",
    417: "QUOTIENT",
    418: "DELTA",
    419: "GESTEP",
    420: "ISEVEN",
    421: "ISODD",
    422: "MROUND",
    423: "ERF",
    424: "ERFC",
    425: "BESSELJ",
    426: "BESSELK",
    427: "BESSELY",
    428: "BESSELI",
    429: "XIRR",
    430: "XNPV",
    431: "PRICEMAT",
    432: "YIELDMAT",
    433: "INTRATE",
    434: "RECEIVED",
    435: "DISC",
    436: "PRICEDISC",
    437: "YIELDDISC",
    438: "TBILLEQ",
    439: "TBILLPRICE",
    440: "TBILLYIELD",
    441: "PRICE",
    442: "YIELD",
    443: "DOLLARDE",
    444: "DOLLARFR",
    445: "NOMINAL",
    446: "EFFECT",
    447: "CUMPRINC",
    448: "CUMIPMT",
    449: "EDATE",
    450: "EOMONTH",
    451: "YEARFRAC",
    452: "COUPDAYBS",
    453: "COUPDAYS",
    454: "COUPDAYSNC",
    455: "COUPNCD",
    456: "COUPNUM",
    457: "COUPPCD",
    458: "DURATION",
    459: "MDURATION",
    460: "ODDLPRICE",
    461: "ODDLYIELD",
    462: "ODDFPRICE",
    463: "ODDFYIELD",
    464: "RANDBETWEEN",
    465: "WEEKNUM",
    466: "AMORDEGRC",
    467: "AMORLINC",
    468: "CONVERT",
    724: "SHEETJS",
    469: "ACCRINT",
    470: "ACCRINTM",
    471: "WORKDAY",
    472: "NETWORKDAYS",
    473: "GCD",
    474: "MULTINOMIAL",
    475: "LCM",
    476: "FVSCHEDULE",
    477: "CUBEKPIMEMBER",
    478: "CUBESET",
    479: "CUBESETCOUNT",
    480: "IFERROR",
    481: "COUNTIFS",
    482: "SUMIFS",
    483: "AVERAGEIF",
    484: "AVERAGEIFS"
};
var FtabArgc = {
    2: 1,
    3: 1,
    10: 0,
    15: 1,
    16: 1,
    17: 1,
    18: 1,
    19: 0,
    20: 1,
    21: 1,
    22: 1,
    23: 1,
    24: 1,
    25: 1,
    26: 1,
    27: 2,
    30: 2,
    31: 3,
    32: 1,
    33: 1,
    34: 0,
    35: 0,
    38: 1,
    39: 2,
    40: 3,
    41: 3,
    42: 3,
    43: 3,
    44: 3,
    45: 3,
    47: 3,
    48: 2,
    53: 1,
    61: 3,
    63: 0,
    65: 3,
    66: 3,
    67: 1,
    68: 1,
    69: 1,
    70: 1,
    71: 1,
    72: 1,
    73: 1,
    74: 0,
    75: 1,
    76: 1,
    77: 1,
    79: 2,
    80: 2,
    83: 1,
    85: 0,
    86: 1,
    89: 0,
    90: 1,
    94: 0,
    95: 0,
    97: 2,
    98: 1,
    99: 1,
    101: 3,
    102: 3,
    105: 1,
    106: 1,
    108: 2,
    111: 1,
    112: 1,
    113: 1,
    114: 1,
    117: 2,
    118: 1,
    119: 4,
    121: 1,
    126: 1,
    127: 1,
    128: 1,
    129: 1,
    130: 1,
    131: 1,
    133: 1,
    134: 1,
    135: 1,
    136: 2,
    137: 2,
    138: 2,
    140: 1,
    141: 1,
    142: 3,
    143: 4,
    144: 4,
    161: 1,
    162: 1,
    163: 1,
    164: 1,
    165: 2,
    172: 1,
    175: 2,
    176: 2,
    177: 3,
    178: 2,
    179: 1,
    184: 1,
    186: 1,
    189: 3,
    190: 1,
    195: 3,
    196: 3,
    197: 1,
    198: 1,
    199: 3,
    201: 1,
    207: 4,
    210: 3,
    211: 1,
    212: 2,
    213: 2,
    214: 1,
    215: 1,
    225: 0,
    229: 1,
    230: 1,
    231: 1,
    232: 1,
    233: 1,
    234: 1,
    235: 3,
    244: 1,
    247: 4,
    252: 2,
    257: 1,
    261: 1,
    271: 1,
    273: 4,
    274: 2,
    275: 2,
    276: 2,
    277: 3,
    278: 3,
    279: 1,
    280: 3,
    281: 3,
    282: 3,
    283: 1,
    284: 1,
    285: 2,
    286: 4,
    287: 3,
    288: 2,
    289: 4,
    290: 3,
    291: 3,
    292: 3,
    293: 4,
    294: 1,
    295: 3,
    296: 1,
    297: 3,
    298: 1,
    299: 2,
    300: 3,
    301: 3,
    302: 4,
    303: 2,
    304: 2,
    305: 2,
    306: 2,
    307: 2,
    308: 2,
    309: 3,
    310: 2,
    311: 2,
    312: 2,
    313: 2,
    314: 2,
    315: 2,
    316: 4,
    325: 2,
    326: 2,
    327: 2,
    328: 2,
    331: 2,
    332: 2,
    337: 2,
    342: 1,
    343: 1,
    346: 2,
    347: 1,
    350: 4,
    351: 3,
    352: 1,
    353: 2,
    360: 1,
    368: 1,
    369: 1,
    370: 1,
    371: 1,
    372: 1,
    373: 1,
    374: 1,
    375: 1,
    376: 1,
    377: 1,
    378: 1,
    382: 3,
    385: 1,
    392: 1,
    393: 1,
    396: 2,
    397: 2,
    398: 2,
    399: 1,
    400: 1,
    401: 1,
    402: 1,
    403: 1,
    404: 1,
    405: 1,
    406: 1,
    407: 1,
    408: 1,
    409: 1,
    410: 1,
    414: 4,
    415: 1,
    416: 1,
    417: 2,
    420: 1,
    421: 1,
    422: 2,
    424: 1,
    425: 2,
    426: 2,
    427: 2,
    428: 2,
    430: 3,
    438: 3,
    439: 3,
    440: 3,
    443: 2,
    444: 2,
    445: 2,
    446: 2,
    447: 6,
    448: 6,
    449: 2,
    450: 2,
    464: 2,
    468: 3,
    476: 2,
    479: 1,
    480: 2,
    65535: 0
};
/* Part 3 TODO: actually parse formulae */ function ods_to_csf_formula(f /*:string*/ ) /*:string*/ {
    if (f.slice(0, 3) == "of:") f = f.slice(3);
    /* 5.2 Basic Expressions */ if (f.charCodeAt(0) == 61) {
        f = f.slice(1);
        if (f.charCodeAt(0) == 61) f = f.slice(1);
    }
    f = f.replace(/COM\.MICROSOFT\./g, "");
    /* Part 3 Section 5.8 References */ f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) {
        return $1.replace(/\./g, "");
    });
    /* TODO: something other than this */ f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
    return f.replace(/[;~]/g, ",").replace(/\|/g, ";");
}
function csf_to_ods_formula(f /*:string*/ ) /*:string*/ {
    var o = "of:=" + f.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g, ":");
    /* TODO: something other than this */ return o.replace(/;/g, "|").replace(/,/g, ";");
}
function ods_to_csf_3D(r /*:string*/ ) /*:[string, string]*/ {
    var a = r.split(":");
    var s = a[0].split(".")[0];
    return [
        s,
        a[0].split(".")[1] + (a.length > 1 ? ":" + (a[1].split(".")[1] || a[1].split(".")[0]) : "")
    ];
}
function csf_to_ods_3D(r /*:string*/ ) /*:string*/ {
    return r.replace(/\./, "!");
}
var strs = {}; // shared strings
var _ssfopts = {}; // spreadsheet formatting options
/*global Map */ var browser_has_Map = typeof Map !== "undefined";
function get_sst_id(sst /*:SST*/ , str /*:string*/ , rev) /*:number*/ {
    var i = 0, len = sst.length;
    if (rev) {
        if (browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {
            var revarr = browser_has_Map ? rev.get(str) : rev[str];
            for(; i < revarr.length; ++i)if (sst[revarr[i]].t === str) {
                sst.Count++;
                return revarr[i];
            }
        }
    } else for(; i < len; ++i)if (sst[i].t === str) {
        sst.Count++;
        return i;
    }
    sst[len] = {
        t: str
    } /*:any*/ ;
    sst.Count++;
    sst.Unique++;
    if (rev) {
        if (browser_has_Map) {
            if (!rev.has(str)) rev.set(str, []);
            rev.get(str).push(len);
        } else {
            if (!Object.prototype.hasOwnProperty.call(rev, str)) rev[str] = [];
            rev[str].push(len);
        }
    }
    return len;
}
function col_obj_w(C /*:number*/ , col) {
    var p = {
        min: C + 1,
        max: C + 1
    } /*:any*/ ;
    /* wch (chars), wpx (pixels) */ var wch = -1;
    if (col.MDW) MDW = col.MDW;
    if (col.width != null) p.customWidth = 1;
    else if (col.wpx != null) wch = px2char(col.wpx);
    else if (col.wch != null) wch = col.wch;
    if (wch > -1) {
        p.width = char2width(wch);
        p.customWidth = 1;
    } else if (col.width != null) p.width = col.width;
    if (col.hidden) p.hidden = true;
    if (col.level != null) p.outlineLevel = p.level = col.level;
    return p;
}
function default_margins(margins /*:Margins*/ , mode /*:?string*/ ) {
    if (!margins) return;
    var defs = [
        0.7,
        0.7,
        0.75,
        0.75,
        0.3,
        0.3
    ];
    if (mode == "xlml") defs = [
        1,
        1,
        1,
        1,
        0.5,
        0.5
    ];
    if (margins.left == null) margins.left = defs[0];
    if (margins.right == null) margins.right = defs[1];
    if (margins.top == null) margins.top = defs[2];
    if (margins.bottom == null) margins.bottom = defs[3];
    if (margins.header == null) margins.header = defs[4];
    if (margins.footer == null) margins.footer = defs[5];
}
function get_cell_style(styles /*:Array<any>*/ , cell /*:Cell*/ , opts) {
    var z = opts.revssf[cell.z != null ? cell.z : "General"];
    var i = 0x3c, len = styles.length;
    if (z == null && opts.ssf) {
        for(; i < 0x188; ++i)if (opts.ssf[i] == null) {
            SSF_load(cell.z, i);
            // $FlowIgnore
            opts.ssf[i] = cell.z;
            opts.revssf[cell.z] = z = i;
            break;
        }
    }
    for(i = 0; i != len; ++i)if (styles[i].numFmtId === z) return i;
    styles[len] = {
        numFmtId: z,
        fontId: 0,
        fillId: 0,
        borderId: 0,
        xfId: 0,
        applyNumberFormat: 1
    };
    return len;
}
function safe_format(p /*:Cell*/ , fmtid /*:number*/ , fillid /*:?number*/ , opts, themes, styles) {
    try {
        if (opts.cellNF) p.z = table_fmt[fmtid];
    } catch (e) {
        if (opts.WTF) throw e;
    }
    if (p.t === "z" && !opts.cellStyles) return;
    if (p.t === "d" && typeof p.v === "string") p.v = parseDate(p.v);
    if ((!opts || opts.cellText !== false) && p.t !== "z") try {
        if (table_fmt[fmtid] == null) SSF_load(SSFImplicit[fmtid] || "General", fmtid);
        if (p.t === "e") p.w = p.w || BErr[p.v];
        else if (fmtid === 0) {
            if (p.t === "n") {
                if ((p.v | 0) === p.v) p.w = p.v.toString(10);
                else p.w = SSF_general_num(p.v);
            } else if (p.t === "d") {
                var dd = datenum(p.v);
                if ((dd | 0) === dd) p.w = dd.toString(10);
                else p.w = SSF_general_num(dd);
            } else if (p.v === undefined) return "";
            else p.w = SSF_general(p.v, _ssfopts);
        } else if (p.t === "d") p.w = SSF_format(fmtid, datenum(p.v), _ssfopts);
        else p.w = SSF_format(fmtid, p.v, _ssfopts);
    } catch (e) {
        if (opts.WTF) throw e;
    }
    if (!opts.cellStyles) return;
    if (fillid != null) try {
        p.s = styles.Fills[fillid];
        if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
            p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
            if (opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
        }
        if (p.s.bgColor && p.s.bgColor.theme) {
            p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
            if (opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
        }
    } catch (e) {
        if (opts.WTF && styles.Fills) throw e;
    }
}
function check_ws(ws /*:Worksheet*/ , sname /*:string*/ , i /*:number*/ ) {
    if (ws && ws["!ref"]) {
        var range = safe_decode_range(ws["!ref"]);
        if (range.e.c < range.s.c || range.e.r < range.s.r) throw new Error("Bad range (" + i + "): " + ws["!ref"]);
    }
}
function parse_ws_xml_dim(ws /*:Worksheet*/ , s /*:string*/ ) {
    var d = safe_decode_range(s);
    if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0) ws["!ref"] = encode_range(d);
}
var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
var dimregex = /"(\w*:\w*)"/;
var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
var marginregex = /<(?:\w:)?pageMargins[^>]*\/>/g;
var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
var sheetprregex2 = /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;
/* 18.3 Worksheets */ function parse_ws_xml(data /*:?string*/ , opts, idx /*:number*/ , rels, wb /*:WBWBProps*/ , themes, styles) /*:Worksheet*/ {
    if (!data) return data;
    if (!rels) rels = {
        "!id": {}
    };
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    /* 18.3.1.99 worksheet CT_Worksheet */ var s = opts.dense ? [] : {} /*:any*/ ;
    var refguess /*:Range*/  = {
        s: {
            r: 2000000,
            c: 2000000
        },
        e: {
            r: 0,
            c: 0
        }
    } /*:any*/ ;
    var data1 = "", data2 = "";
    var mtch /*:?any*/  = data.match(sheetdataregex);
    if (mtch) {
        data1 = data.slice(0, mtch.index);
        data2 = data.slice(mtch.index + mtch[0].length);
    } else data1 = data2 = data;
    /* 18.3.1.82 sheetPr CT_SheetPr */ var sheetPr = data1.match(sheetprregex);
    if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
    else if (sheetPr = data1.match(sheetprregex2)) parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1] || "", s, wb, idx, styles, themes);
    /* 18.3.1.35 dimension CT_SheetDimension */ var ridx = (data1.match(/<(?:\w*:)?dimension/) || {
        index: -1
    }).index;
    if (ridx > 0) {
        var ref = data1.slice(ridx, ridx + 50).match(dimregex);
        if (ref) parse_ws_xml_dim(s, ref[1]);
    }
    /* 18.3.1.88 sheetViews CT_SheetViews */ var svs = data1.match(svsregex);
    if (svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);
    /* 18.3.1.17 cols CT_Cols */ var columns /*:Array<ColInfo>*/  = [];
    if (opts.cellStyles) {
        /* 18.3.1.13 col CT_Col */ var cols = data1.match(colregex);
        if (cols) parse_ws_xml_cols(columns, cols);
    }
    /* 18.3.1.80 sheetData CT_SheetData ? */ if (mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);
    /* 18.3.1.2  autoFilter CT_AutoFilter */ var afilter = data2.match(afregex);
    if (afilter) s["!autofilter"] = parse_ws_xml_autofilter(afilter[0]);
    /* 18.3.1.55 mergeCells CT_MergeCells */ var merges /*:Array<Range>*/  = [];
    var _merge = data2.match(mergecregex);
    if (_merge) for(ridx = 0; ridx != _merge.length; ++ridx)merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf('"') + 1));
    /* 18.3.1.48 hyperlinks CT_Hyperlinks */ var hlink = data2.match(hlinkregex);
    if (hlink) parse_ws_xml_hlinks(s, hlink, rels);
    /* 18.3.1.62 pageMargins CT_PageMargins */ var margins = data2.match(marginregex);
    if (margins) s["!margins"] = parse_ws_xml_margins(parsexmltag(margins[0]));
    if (!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s["!ref"] = encode_range(refguess);
    if (opts.sheetRows > 0 && s["!ref"]) {
        var tmpref = safe_decode_range(s["!ref"]);
        if (opts.sheetRows <= +tmpref.e.r) {
            tmpref.e.r = opts.sheetRows - 1;
            if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
            if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
            if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
            if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
            s["!fullref"] = s["!ref"];
            s["!ref"] = encode_range(tmpref);
        }
    }
    if (columns.length > 0) s["!cols"] = columns;
    if (merges.length > 0) s["!merges"] = merges;
    return s;
}
function write_ws_xml_merges(merges /*:Array<Range>*/ ) /*:string*/ {
    if (merges.length === 0) return "";
    var o = '<mergeCells count="' + merges.length + '">';
    for(var i = 0; i != merges.length; ++i)o += '<mergeCell ref="' + encode_range(merges[i]) + '"/>';
    return o + "</mergeCells>";
}
/* 18.3.1.82-3 sheetPr CT_ChartsheetPr / CT_SheetPr */ function parse_ws_xml_sheetpr(sheetPr /*:string*/ , s, wb /*:WBWBProps*/ , idx /*:number*/ ) {
    var data = parsexmltag(sheetPr);
    if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
    if (data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
}
function parse_ws_xml_sheetpr2(sheetPr /*:string*/ , body /*:string*/ , s, wb /*:WBWBProps*/ , idx /*:number*/ ) {
    parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s, wb, idx);
}
function write_ws_xml_sheetpr(ws, wb, idx, opts, o) {
    var needed = false;
    var props = {}, payload = null;
    if (opts.bookType !== "xlsx" && wb.vbaraw) {
        var cname = wb.SheetNames[idx];
        try {
            if (wb.Workbook) cname = wb.Workbook.Sheets[idx].CodeName || cname;
        } catch (e) {}
        needed = true;
        props.codeName = utf8write(escapexml(cname));
    }
    if (ws && ws["!outline"]) {
        var outlineprops = {
            summaryBelow: 1,
            summaryRight: 1
        };
        if (ws["!outline"].above) outlineprops.summaryBelow = 0;
        if (ws["!outline"].left) outlineprops.summaryRight = 0;
        payload = (payload || "") + writextag("outlinePr", null, outlineprops);
    }
    if (!needed && !payload) return;
    o[o.length] = writextag("sheetPr", payload, props);
}
/* 18.3.1.85 sheetProtection CT_SheetProtection */ var sheetprot_deffalse = [
    "objects",
    "scenarios",
    "selectLockedCells",
    "selectUnlockedCells"
];
var sheetprot_deftrue = [
    "formatColumns",
    "formatRows",
    "formatCells",
    "insertColumns",
    "insertRows",
    "insertHyperlinks",
    "deleteColumns",
    "deleteRows",
    "sort",
    "autoFilter",
    "pivotTables"
];
function write_ws_xml_protection(sp) /*:string*/ {
    // algorithmName, hashValue, saltValue, spinCount
    var o = {
        sheet: 1
    } /*:any*/ ;
    sheetprot_deffalse.forEach(function(n) {
        if (sp[n] != null && sp[n]) o[n] = "1";
    });
    sheetprot_deftrue.forEach(function(n) {
        if (sp[n] != null && !sp[n]) o[n] = "0";
    });
    /* TODO: algorithm */ if (sp.password) o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();
    return writextag("sheetProtection", null, o);
}
function parse_ws_xml_hlinks(s, data /*:Array<string>*/ , rels) {
    var dense = Array.isArray(s);
    for(var i = 0; i != data.length; ++i){
        var val = parsexmltag(utf8read(data[i]), true);
        if (!val.ref) return;
        var rel = ((rels || {})["!id"] || [])[val.id];
        if (rel) {
            val.Target = rel.Target;
            if (val.location) val.Target += "#" + unescapexml(val.location);
        } else {
            val.Target = "#" + unescapexml(val.location);
            rel = {
                Target: val.Target,
                TargetMode: "Internal"
            };
        }
        val.Rel = rel;
        if (val.tooltip) {
            val.Tooltip = val.tooltip;
            delete val.tooltip;
        }
        var rng = safe_decode_range(val.ref);
        for(var R = rng.s.r; R <= rng.e.r; ++R)for(var C = rng.s.c; C <= rng.e.c; ++C){
            var addr = encode_cell({
                c: C,
                r: R
            });
            if (dense) {
                if (!s[R]) s[R] = [];
                if (!s[R][C]) s[R][C] = {
                    t: "z",
                    v: undefined
                };
                s[R][C].l = val;
            } else {
                if (!s[addr]) s[addr] = {
                    t: "z",
                    v: undefined
                };
                s[addr].l = val;
            }
        }
    }
}
function parse_ws_xml_margins(margin) {
    var o = {};
    [
        "left",
        "right",
        "top",
        "bottom",
        "header",
        "footer"
    ].forEach(function(k) {
        if (margin[k]) o[k] = parseFloat(margin[k]);
    });
    return o;
}
function write_ws_xml_margins(margin) /*:string*/ {
    default_margins(margin);
    return writextag("pageMargins", null, margin);
}
function parse_ws_xml_cols(columns, cols) {
    var seencol = false;
    for(var coli = 0; coli != cols.length; ++coli){
        var coll = parsexmltag(cols[coli], true);
        if (coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
        var colm = parseInt(coll.min, 10) - 1, colM = parseInt(coll.max, 10) - 1;
        if (coll.outlineLevel) coll.level = +coll.outlineLevel || 0;
        delete coll.min;
        delete coll.max;
        coll.width = +coll.width;
        if (!seencol && coll.width) {
            seencol = true;
            find_mdw_colw(coll.width);
        }
        process_col(coll);
        while(colm <= colM)columns[colm++] = dup(coll);
    }
}
function write_ws_xml_cols(ws, cols) /*:string*/ {
    var o = [
        "<cols>"
    ], col;
    for(var i = 0; i != cols.length; ++i){
        if (!(col = cols[i])) continue;
        o[o.length] = writextag("col", null, col_obj_w(i, col));
    }
    o[o.length] = "</cols>";
    return o.join("");
}
function parse_ws_xml_autofilter(data /*:string*/ ) {
    var o = {
        ref: (data.match(/ref="([^"]*)"/) || [])[1]
    };
    return o;
}
function write_ws_xml_autofilter(data, ws, wb, idx) /*:string*/ {
    var ref = typeof data.ref == "string" ? data.ref : encode_range(data.ref);
    if (!wb.Workbook) wb.Workbook = {
        Sheets: []
    } /*:any*/ ;
    if (!wb.Workbook.Names) wb.Workbook.Names = [];
    var names /*: Array<any> */  = wb.Workbook.Names;
    var range = decode_range(ref);
    if (range.s.r == range.e.r) {
        range.e.r = decode_range(ws["!ref"]).e.r;
        ref = encode_range(range);
    }
    for(var i = 0; i < names.length; ++i){
        var name = names[i];
        if (name.Name != "_xlnm._FilterDatabase") continue;
        if (name.Sheet != idx) continue;
        name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
        break;
    }
    if (i == names.length) names.push({
        Name: "_xlnm._FilterDatabase",
        Sheet: idx,
        Ref: "'" + wb.SheetNames[idx] + "'!" + ref
    });
    return writextag("autoFilter", null, {
        ref: ref
    });
}
/* 18.3.1.88 sheetViews CT_SheetViews */ /* 18.3.1.87 sheetView CT_SheetView */ var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;
function parse_ws_xml_sheetviews(data, wb /*:WBWBProps*/ ) {
    if (!wb.Views) wb.Views = [
        {}
    ];
    (data.match(sviewregex) || []).forEach(function(r /*:string*/ , i /*:number*/ ) {
        var tag = parsexmltag(r);
        // $FlowIgnore
        if (!wb.Views[i]) wb.Views[i] = {};
        // $FlowIgnore
        if (+tag.zoomScale) wb.Views[i].zoom = +tag.zoomScale;
        // $FlowIgnore
        if (parsexmlbool(tag.rightToLeft)) wb.Views[i].RTL = true;
    });
}
function write_ws_xml_sheetviews(ws, opts, idx, wb) /*:string*/ {
    var sview = {
        workbookViewId: "0"
    } /*:any*/ ;
    // $FlowIgnore
    if ((((wb || {}).Workbook || {}).Views || [])[0]) sview.rightToLeft = wb.Workbook.Views[0].RTL ? "1" : "0";
    return writextag("sheetViews", writextag("sheetView", null, sview), {});
}
function write_ws_xml_cell(cell /*:Cell*/ , ref, ws, opts /*::, idx, wb*/ ) /*:string*/ {
    if (cell.c) ws["!comments"].push([
        ref,
        cell.c
    ]);
    if (cell.v === undefined && typeof cell.f !== "string" || cell.t === "z" && !cell.f) return "";
    var vv = "";
    var oldt = cell.t, oldv = cell.v;
    if (cell.t !== "z") switch(cell.t){
        case "b":
            vv = cell.v ? "1" : "0";
            break;
        case "n":
            vv = "" + cell.v;
            break;
        case "e":
            vv = BErr[cell.v];
            break;
        case "d":
            if (opts && opts.cellDates) vv = parseDate(cell.v, -1).toISOString();
            else {
                cell = dup(cell);
                cell.t = "n";
                vv = "" + (cell.v = datenum(parseDate(cell.v)));
            }
            if (typeof cell.z === "undefined") cell.z = table_fmt[14];
            break;
        default:
            vv = cell.v;
            break;
    }
    var v = writetag("v", escapexml(vv)), o = {
        r: ref
    } /*:any*/ ;
    /* TODO: cell style */ var os = get_cell_style(opts.cellXfs, cell, opts);
    if (os !== 0) o.s = os;
    switch(cell.t){
        case "n":
            break;
        case "d":
            o.t = "d";
            break;
        case "b":
            o.t = "b";
            break;
        case "e":
            o.t = "e";
            break;
        case "z":
            break;
        default:
            if (cell.v == null) {
                delete cell.t;
                break;
            }
            if (cell.v.length > 32767) throw new Error("Text length must not exceed 32767 characters");
            if (opts && opts.bookSST) {
                v = writetag("v", "" + get_sst_id(opts.Strings, cell.v, opts.revStrings));
                o.t = "s";
                break;
            }
            o.t = "str";
            break;
    }
    if (cell.t != oldt) {
        cell.t = oldt;
        cell.v = oldv;
    }
    if (typeof cell.f == "string" && cell.f) {
        var ff = cell.F && cell.F.slice(0, ref.length) == ref ? {
            t: "array",
            ref: cell.F
        } : null;
        v = writextag("f", escapexml(cell.f), ff) + (cell.v != null ? v : "");
    }
    if (cell.l) ws["!links"].push([
        ref,
        cell.l
    ]);
    if (cell.D) o.cm = 1;
    return writextag("c", v, o);
}
var parse_ws_xml_data = /*#__PURE__*/ function() {
    var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
    var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
    var refregex = /ref=["']([^"']*)["']/;
    var match_v = matchtag("v"), match_f = matchtag("f");
    return function parse_ws_xml_data(sdata /*:string*/ , s, opts, guess /*:Range*/ , themes, styles) {
        var ri = 0, x = "", cells /*:Array<string>*/  = [], cref /*:?Array<string>*/  = [], idx = 0, i = 0, cc = 0, d = "", p /*:any*/ ;
        var tag, tagr = 0, tagc = 0;
        var sstr, ftag;
        var fmtid = 0, fillid = 0;
        var do_format = Array.isArray(styles.CellXf), cf;
        var arrayf /*:Array<[Range, string]>*/  = [];
        var sharedf = [];
        var dense = Array.isArray(s);
        var rows /*:Array<RowInfo>*/  = [], rowobj = {}, rowrite = false;
        var sheetStubs = !!opts.sheetStubs;
        for(var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt){
            x = marr[mt].trim();
            var xlen = x.length;
            if (xlen === 0) continue;
            /* 18.3.1.73 row CT_Row */ var rstarti = 0;
            outa: for(ri = 0; ri < xlen; ++ri)switch(/*x.charCodeAt(ri)*/ x[ri]){
                case ">" /*62*/ :
                    if (/*x.charCodeAt(ri-1) != 47*/ x[ri - 1] != "/") {
                        ++ri;
                        break outa;
                    }
                    if (opts && opts.cellStyles) {
                        // TODO: avoid duplication
                        tag = parsexmltag(x.slice(rstarti, ri), true);
                        tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
                        tagc = -1;
                        if (opts.sheetRows && opts.sheetRows < tagr) continue;
                        rowobj = {};
                        rowrite = false;
                        if (tag.ht) {
                            rowrite = true;
                            rowobj.hpt = parseFloat(tag.ht);
                            rowobj.hpx = pt2px(rowobj.hpt);
                        }
                        if (tag.hidden == "1") {
                            rowrite = true;
                            rowobj.hidden = true;
                        }
                        if (tag.outlineLevel != null) {
                            rowrite = true;
                            rowobj.level = +tag.outlineLevel;
                        }
                        if (rowrite) rows[tagr - 1] = rowobj;
                    }
                    break;
                case "<" /*60*/ :
                    rstarti = ri;
                    break;
            }
            if (rstarti >= ri) break;
            tag = parsexmltag(x.slice(rstarti, ri), true);
            tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
            tagc = -1;
            if (opts.sheetRows && opts.sheetRows < tagr) continue;
            if (guess.s.r > tagr - 1) guess.s.r = tagr - 1;
            if (guess.e.r < tagr - 1) guess.e.r = tagr - 1;
            if (opts && opts.cellStyles) {
                rowobj = {};
                rowrite = false;
                if (tag.ht) {
                    rowrite = true;
                    rowobj.hpt = parseFloat(tag.ht);
                    rowobj.hpx = pt2px(rowobj.hpt);
                }
                if (tag.hidden == "1") {
                    rowrite = true;
                    rowobj.hidden = true;
                }
                if (tag.outlineLevel != null) {
                    rowrite = true;
                    rowobj.level = +tag.outlineLevel;
                }
                if (rowrite) rows[tagr - 1] = rowobj;
            }
            /* 18.3.1.4 c CT_Cell */ cells = x.slice(ri).split(cellregex);
            for(var rslice = 0; rslice != cells.length; ++rslice)if (cells[rslice].trim().charAt(0) != "<") break;
            cells = cells.slice(rslice);
            for(ri = 0; ri != cells.length; ++ri){
                x = cells[ri].trim();
                if (x.length === 0) continue;
                cref = x.match(rregex);
                idx = ri;
                i = 0;
                cc = 0;
                x = "<c " + (x.slice(0, 1) == "<" ? ">" : "") + x;
                if (cref != null && cref.length === 2) {
                    idx = 0;
                    d = cref[1];
                    for(i = 0; i != d.length; ++i){
                        if ((cc = d.charCodeAt(i) - 64) < 1 || cc > 26) break;
                        idx = 26 * idx + cc;
                    }
                    --idx;
                    tagc = idx;
                } else ++tagc;
                for(i = 0; i != x.length; ++i)if (x.charCodeAt(i) === 62) break;
                ++i;
                tag = parsexmltag(x.slice(0, i), true);
                if (!tag.r) tag.r = encode_cell({
                    r: tagr - 1,
                    c: tagc
                });
                d = x.slice(i);
                p = {
                    t: ""
                } /*:any*/ ;
                if ((cref = d.match(match_v)) != null && /*::cref != null && */ cref[1] !== "") p.v = unescapexml(cref[1]);
                if (opts.cellFormula) {
                    if ((cref = d.match(match_f)) != null && /*::cref != null && */ cref[1] !== "") {
                        /* TODO: match against XLSXFutureFunctions */ p.f = unescapexml(utf8read(cref[1])).replace(/\r\n/g, "\n");
                        if (!opts.xlfn) p.f = _xlfn(p.f);
                        if (/*::cref != null && cref[0] != null && */ cref[0].indexOf('t="array"') > -1) {
                            p.F = (d.match(refregex) || [])[1];
                            if (p.F.indexOf(":") > -1) arrayf.push([
                                safe_decode_range(p.F),
                                p.F
                            ]);
                        } else if (/*::cref != null && cref[0] != null && */ cref[0].indexOf('t="shared"') > -1) {
                            // TODO: parse formula
                            ftag = parsexmltag(cref[0]);
                            var ___f = unescapexml(utf8read(cref[1]));
                            if (!opts.xlfn) ___f = _xlfn(___f);
                            sharedf[parseInt(ftag.si, 10)] = [
                                ftag,
                                ___f,
                                tag.r
                            ];
                        }
                    } else if (cref = d.match(/<f[^>]*\/>/)) {
                        ftag = parsexmltag(cref[0]);
                        if (sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);
                    }
                    /* TODO: factor out contains logic */ var _tag = decode_cell(tag.r);
                    for(i = 0; i < arrayf.length; ++i)if (_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r) {
                        if (_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c) p.F = arrayf[i][1];
                    }
                }
                if (tag.t == null && p.v === undefined) {
                    if (p.f || p.F) {
                        p.v = 0;
                        p.t = "n";
                    } else if (!sheetStubs) continue;
                    else p.t = "z";
                } else p.t = tag.t || "n";
                if (guess.s.c > tagc) guess.s.c = tagc;
                if (guess.e.c < tagc) guess.e.c = tagc;
                /* 18.18.11 t ST_CellType */ switch(p.t){
                    case "n":
                        if (p.v == "" || p.v == null) {
                            if (!sheetStubs) continue;
                            p.t = "z";
                        } else p.v = parseFloat(p.v);
                        break;
                    case "s":
                        if (typeof p.v == "undefined") {
                            if (!sheetStubs) continue;
                            p.t = "z";
                        } else {
                            sstr = strs[parseInt(p.v, 10)];
                            p.v = sstr.t;
                            p.r = sstr.r;
                            if (opts.cellHTML) p.h = sstr.h;
                        }
                        break;
                    case "str":
                        p.t = "s";
                        p.v = p.v != null ? utf8read(p.v) : "";
                        if (opts.cellHTML) p.h = escapehtml(p.v);
                        break;
                    case "inlineStr":
                        cref = d.match(isregex);
                        p.t = "s";
                        if (cref != null && (sstr = parse_si(cref[1]))) {
                            p.v = sstr.t;
                            if (opts.cellHTML) p.h = sstr.h;
                        } else p.v = "";
                        break;
                    case "b":
                        p.v = parsexmlbool(p.v);
                        break;
                    case "d":
                        if (opts.cellDates) p.v = parseDate(p.v, 1);
                        else {
                            p.v = datenum(parseDate(p.v, 1));
                            p.t = "n";
                        }
                        break;
                    /* error string in .w, number in .v */ case "e":
                        if (!opts || opts.cellText !== false) p.w = p.v;
                        p.v = RBErr[p.v];
                        break;
                }
                /* formatting */ fmtid = fillid = 0;
                cf = null;
                if (do_format && tag.s !== undefined) {
                    cf = styles.CellXf[tag.s];
                    if (cf != null) {
                        if (cf.numFmtId != null) fmtid = cf.numFmtId;
                        if (opts.cellStyles) {
                            if (cf.fillId != null) fillid = cf.fillId;
                        }
                    }
                }
                safe_format(p, fmtid, fillid, opts, themes, styles);
                if (opts.cellDates && do_format && p.t == "n" && fmt_is_date(table_fmt[fmtid])) {
                    p.t = "d";
                    p.v = numdate(p.v);
                }
                if (tag.cm && opts.xlmeta) {
                    var cm = (opts.xlmeta.Cell || [])[+tag.cm - 1];
                    if (cm && cm.type == "XLDAPR") p.D = true;
                }
                if (dense) {
                    var _r = decode_cell(tag.r);
                    if (!s[_r.r]) s[_r.r] = [];
                    s[_r.r][_r.c] = p;
                } else s[tag.r] = p;
            }
        }
        if (rows.length > 0) s["!rows"] = rows;
    };
}();
function write_ws_xml_data(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/  /*::, rels*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [], r /*:Array<string>*/  = [], range = safe_decode_range(ws["!ref"]), cell = "", ref, rr = "", cols /*:Array<string>*/  = [], R = 0, C = 0, rows = ws["!rows"];
    var dense = Array.isArray(ws);
    var params = {
        r: rr
    } /*:any*/ , row /*:RowInfo*/ , height = -1;
    for(C = range.s.c; C <= range.e.c; ++C)cols[C] = encode_col(C);
    for(R = range.s.r; R <= range.e.r; ++R){
        r = [];
        rr = encode_row(R);
        for(C = range.s.c; C <= range.e.c; ++C){
            ref = cols[C] + rr;
            var _cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (_cell === undefined) continue;
            if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null) r.push(cell);
        }
        if (r.length > 0 || rows && rows[R]) {
            params = {
                r: rr
            } /*:any*/ ;
            if (rows && rows[R]) {
                row = rows[R];
                if (row.hidden) params.hidden = 1;
                height = -1;
                if (row.hpx) height = px2pt(row.hpx);
                else if (row.hpt) height = row.hpt;
                if (height > -1) {
                    params.ht = height;
                    params.customHeight = 1;
                }
                if (row.level) params.outlineLevel = row.level;
            }
            o[o.length] = writextag("row", r.join(""), params);
        }
    }
    if (rows) {
        for(; R < rows.length; ++R)if (rows && rows[R]) {
            params = {
                r: R + 1
            } /*:any*/ ;
            row = rows[R];
            if (row.hidden) params.hidden = 1;
            height = -1;
            if (row.hpx) height = px2pt(row.hpx);
            else if (row.hpt) height = row.hpt;
            if (height > -1) {
                params.ht = height;
                params.customHeight = 1;
            }
            if (row.level) params.outlineLevel = row.level;
            o[o.length] = writextag("row", "", params);
        }
    }
    return o.join("");
}
function write_ws_xml(idx /*:number*/ , opts, wb /*:Workbook*/ , rels) /*:string*/ {
    var o = [
        XML_HEADER,
        writextag("worksheet", null, {
            "xmlns": XMLNS_main[0],
            "xmlns:r": XMLNS.r
        })
    ];
    var s = wb.SheetNames[idx], sidx = 0, rdata = "";
    var ws = wb.Sheets[s];
    if (ws == null) ws = {};
    var ref = ws["!ref"] || "A1";
    var range = safe_decode_range(ref);
    if (range.e.c > 0x3FFF || range.e.r > 0xFFFFF) {
        if (opts.WTF) throw new Error("Range " + ref + " exceeds format limit A1:XFD1048576");
        range.e.c = Math.min(range.e.c, 0x3FFF);
        range.e.r = Math.min(range.e.c, 0xFFFFF);
        ref = encode_range(range);
    }
    if (!rels) rels = {};
    ws["!comments"] = [];
    var _drawing = [];
    write_ws_xml_sheetpr(ws, wb, idx, opts, o);
    o[o.length] = writextag("dimension", null, {
        "ref": ref
    });
    o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);
    /* TODO: store in WB, process styles */ if (opts.sheetFormat) o[o.length] = writextag("sheetFormatPr", null, {
        defaultRowHeight: opts.sheetFormat.defaultRowHeight || "16",
        baseColWidth: opts.sheetFormat.baseColWidth || "10",
        outlineLevelRow: opts.sheetFormat.outlineLevelRow || "7"
    });
    if (ws["!cols"] != null && ws["!cols"].length > 0) o[o.length] = write_ws_xml_cols(ws, ws["!cols"]);
    o[sidx = o.length] = "<sheetData/>";
    ws["!links"] = [];
    if (ws["!ref"] != null) {
        rdata = write_ws_xml_data(ws, opts, idx, wb, rels);
        if (rdata.length > 0) o[o.length] = rdata;
    }
    if (o.length > sidx + 1) {
        o[o.length] = "</sheetData>";
        o[sidx] = o[sidx].replace("/>", ">");
    }
    /* sheetCalcPr */ if (ws["!protect"]) o[o.length] = write_ws_xml_protection(ws["!protect"]);
    /* protectedRanges */ /* scenarios */ if (ws["!autofilter"] != null) o[o.length] = write_ws_xml_autofilter(ws["!autofilter"], ws, wb, idx);
    /* sortState */ /* dataConsolidate */ /* customSheetViews */ if (ws["!merges"] != null && ws["!merges"].length > 0) o[o.length] = write_ws_xml_merges(ws["!merges"]);
    /* phoneticPr */ /* conditionalFormatting */ /* dataValidations */ var relc = -1, rel, rId = -1;
    if (/*::(*/ ws["!links"]/*::||[])*/ .length > 0) {
        o[o.length] = "<hyperlinks>";
        /*::(*/ ws["!links"]/*::||[])*/ .forEach(function(l) {
            if (!l[1].Target) return;
            rel = {
                "ref": l[0]
            } /*:any*/ ;
            if (l[1].Target.charAt(0) != "#") {
                rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, ""), RELS.HLINK);
                rel["r:id"] = "rId" + rId;
            }
            if ((relc = l[1].Target.indexOf("#")) > -1) rel.location = escapexml(l[1].Target.slice(relc + 1));
            if (l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip);
            o[o.length] = writextag("hyperlink", null, rel);
        });
        o[o.length] = "</hyperlinks>";
    }
    delete ws["!links"];
    /* printOptions */ if (ws["!margins"] != null) o[o.length] = write_ws_xml_margins(ws["!margins"]);
    /* pageSetup */ /* headerFooter */ /* rowBreaks */ /* colBreaks */ /* customProperties */ /* cellWatches */ if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) o[o.length] = writetag("ignoredErrors", writextag("ignoredError", null, {
        numberStoredAsText: 1,
        sqref: ref
    }));
    /* smartTags */ if (_drawing.length > 0) {
        rId = add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
        o[o.length] = writextag("drawing", null, {
            "r:id": "rId" + rId
        });
        ws["!drawing"] = _drawing;
    }
    if (ws["!comments"].length > 0) {
        rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
        o[o.length] = writextag("legacyDrawing", null, {
            "r:id": "rId" + rId
        });
        ws["!legacy"] = rId;
    }
    /* legacyDrawingHF */ /* picture */ /* oleObjects */ /* controls */ /* webPublishItems */ /* tableParts */ /* extLst */ if (o.length > 1) {
        o[o.length] = "</worksheet>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSB] 2.4.726 BrtRowHdr */ function parse_BrtRowHdr(data, length) {
    var z = {} /*:any*/ ;
    var tgt = data.l + length;
    z.r = data.read_shift(4);
    data.l += 4; // TODO: ixfe
    var miyRw = data.read_shift(2);
    data.l += 1; // TODO: top/bot padding
    var flags = data.read_shift(1);
    data.l = tgt;
    if (flags & 0x07) z.level = flags & 0x07;
    if (flags & 0x10) z.hidden = true;
    if (flags & 0x20) z.hpt = miyRw / 20;
    return z;
}
function write_BrtRowHdr(R /*:number*/ , range, ws) {
    var o = new_buf(145);
    var row = (ws["!rows"] || [])[R] || {};
    o.write_shift(4, R);
    o.write_shift(4, 0); /* TODO: ixfe */ 
    var miyRw = 0x0140;
    if (row.hpx) miyRw = px2pt(row.hpx) * 20;
    else if (row.hpt) miyRw = row.hpt * 20;
    o.write_shift(2, miyRw);
    o.write_shift(1, 0); /* top/bot padding */ 
    var flags = 0x0;
    if (row.level) flags |= row.level;
    if (row.hidden) flags |= 0x10;
    if (row.hpx || row.hpt) flags |= 0x20;
    o.write_shift(1, flags);
    o.write_shift(1, 0); /* phonetic guide */ 
    /* [MS-XLSB] 2.5.8 BrtColSpan explains the mechanism */ var ncolspan = 0, lcs = o.l;
    o.l += 4;
    var caddr = {
        r: R,
        c: 0
    };
    for(var i = 0; i < 16; ++i){
        if (range.s.c > i + 1 << 10 || range.e.c < i << 10) continue;
        var first = -1, last = -1;
        for(var j = i << 10; j < i + 1 << 10; ++j){
            caddr.c = j;
            var cell = Array.isArray(ws) ? (ws[caddr.r] || [])[caddr.c] : ws[encode_cell(caddr)];
            if (cell) {
                if (first < 0) first = j;
                last = j;
            }
        }
        if (first < 0) continue;
        ++ncolspan;
        o.write_shift(4, first);
        o.write_shift(4, last);
    }
    var l = o.l;
    o.l = lcs;
    o.write_shift(4, ncolspan);
    o.l = l;
    return o.length > o.l ? o.slice(0, o.l) : o;
}
function write_row_header(ba, ws, range, R) {
    var o = write_BrtRowHdr(R, range, ws);
    if (o.length > 17 || (ws["!rows"] || [])[R]) write_record(ba, 0x0000 /* BrtRowHdr */ , o);
}
/* [MS-XLSB] 2.4.820 BrtWsDim */ var parse_BrtWsDim = parse_UncheckedRfX;
var write_BrtWsDim = write_UncheckedRfX;
/* [MS-XLSB] 2.4.821 BrtWsFmtInfo */ function parse_BrtWsFmtInfo() {}
//function write_BrtWsFmtInfo(ws, o) { }
/* [MS-XLSB] 2.4.823 BrtWsProp */ function parse_BrtWsProp(data, length) {
    var z = {};
    var f = data[data.l];
    ++data.l;
    z.above = !(f & 0x40);
    z.left = !(f & 0x80);
    /* TODO: pull flags */ data.l += 18;
    z.name = parse_XLSBCodeName(data, length - 19);
    return z;
}
function write_BrtWsProp(str, outl, o) {
    if (o == null) o = new_buf(84 + 4 * str.length);
    var f = 0xC0;
    if (outl) {
        if (outl.above) f &= -65;
        if (outl.left) f &= -129;
    }
    o.write_shift(1, f);
    for(var i = 1; i < 3; ++i)o.write_shift(1, 0);
    write_BrtColor({
        auto: 1
    }, o);
    o.write_shift(-4, -1);
    o.write_shift(-4, -1);
    write_XLSBCodeName(str, o);
    return o.slice(0, o.l);
}
/* [MS-XLSB] 2.4.306 BrtCellBlank */ function parse_BrtCellBlank(data) {
    var cell = parse_XLSBCell(data);
    return [
        cell
    ];
}
function write_BrtCellBlank(cell, ncell, o) {
    if (o == null) o = new_buf(8);
    return write_XLSBCell(ncell, o);
}
function parse_BrtShortBlank(data) {
    var cell = parse_XLSBShortCell(data);
    return [
        cell
    ];
}
function write_BrtShortBlank(cell, ncell, o) {
    if (o == null) o = new_buf(4);
    return write_XLSBShortCell(ncell, o);
}
/* [MS-XLSB] 2.4.307 BrtCellBool */ function parse_BrtCellBool(data) {
    var cell = parse_XLSBCell(data);
    var fBool = data.read_shift(1);
    return [
        cell,
        fBool,
        "b"
    ];
}
function write_BrtCellBool(cell, ncell, o) {
    if (o == null) o = new_buf(9);
    write_XLSBCell(ncell, o);
    o.write_shift(1, cell.v ? 1 : 0);
    return o;
}
function parse_BrtShortBool(data) {
    var cell = parse_XLSBShortCell(data);
    var fBool = data.read_shift(1);
    return [
        cell,
        fBool,
        "b"
    ];
}
function write_BrtShortBool(cell, ncell, o) {
    if (o == null) o = new_buf(5);
    write_XLSBShortCell(ncell, o);
    o.write_shift(1, cell.v ? 1 : 0);
    return o;
}
/* [MS-XLSB] 2.4.308 BrtCellError */ function parse_BrtCellError(data) {
    var cell = parse_XLSBCell(data);
    var bError = data.read_shift(1);
    return [
        cell,
        bError,
        "e"
    ];
}
function write_BrtCellError(cell, ncell, o) {
    if (o == null) o = new_buf(9);
    write_XLSBCell(ncell, o);
    o.write_shift(1, cell.v);
    return o;
}
function parse_BrtShortError(data) {
    var cell = parse_XLSBShortCell(data);
    var bError = data.read_shift(1);
    return [
        cell,
        bError,
        "e"
    ];
}
function write_BrtShortError(cell, ncell, o) {
    if (o == null) o = new_buf(8);
    write_XLSBShortCell(ncell, o);
    o.write_shift(1, cell.v);
    o.write_shift(2, 0);
    o.write_shift(1, 0);
    return o;
}
/* [MS-XLSB] 2.4.311 BrtCellIsst */ function parse_BrtCellIsst(data) {
    var cell = parse_XLSBCell(data);
    var isst = data.read_shift(4);
    return [
        cell,
        isst,
        "s"
    ];
}
function write_BrtCellIsst(cell, ncell, o) {
    if (o == null) o = new_buf(12);
    write_XLSBCell(ncell, o);
    o.write_shift(4, ncell.v);
    return o;
}
function parse_BrtShortIsst(data) {
    var cell = parse_XLSBShortCell(data);
    var isst = data.read_shift(4);
    return [
        cell,
        isst,
        "s"
    ];
}
function write_BrtShortIsst(cell, ncell, o) {
    if (o == null) o = new_buf(8);
    write_XLSBShortCell(ncell, o);
    o.write_shift(4, ncell.v);
    return o;
}
/* [MS-XLSB] 2.4.313 BrtCellReal */ function parse_BrtCellReal(data) {
    var cell = parse_XLSBCell(data);
    var value = parse_Xnum(data);
    return [
        cell,
        value,
        "n"
    ];
}
function write_BrtCellReal(cell, ncell, o) {
    if (o == null) o = new_buf(16);
    write_XLSBCell(ncell, o);
    write_Xnum(cell.v, o);
    return o;
}
function parse_BrtShortReal(data) {
    var cell = parse_XLSBShortCell(data);
    var value = parse_Xnum(data);
    return [
        cell,
        value,
        "n"
    ];
}
function write_BrtShortReal(cell, ncell, o) {
    if (o == null) o = new_buf(12);
    write_XLSBShortCell(ncell, o);
    write_Xnum(cell.v, o);
    return o;
}
/* [MS-XLSB] 2.4.314 BrtCellRk */ function parse_BrtCellRk(data) {
    var cell = parse_XLSBCell(data);
    var value = parse_RkNumber(data);
    return [
        cell,
        value,
        "n"
    ];
}
function write_BrtCellRk(cell, ncell, o) {
    if (o == null) o = new_buf(12);
    write_XLSBCell(ncell, o);
    write_RkNumber(cell.v, o);
    return o;
}
function parse_BrtShortRk(data) {
    var cell = parse_XLSBShortCell(data);
    var value = parse_RkNumber(data);
    return [
        cell,
        value,
        "n"
    ];
}
function write_BrtShortRk(cell, ncell, o) {
    if (o == null) o = new_buf(8);
    write_XLSBShortCell(ncell, o);
    write_RkNumber(cell.v, o);
    return o;
}
/* [MS-XLSB] 2.4.323 BrtCellRString */ function parse_BrtCellRString(data) {
    var cell = parse_XLSBCell(data);
    var value = parse_RichStr(data);
    return [
        cell,
        value,
        "is"
    ];
}
/* [MS-XLSB] 2.4.317 BrtCellSt */ function parse_BrtCellSt(data) {
    var cell = parse_XLSBCell(data);
    var value = parse_XLWideString(data);
    return [
        cell,
        value,
        "str"
    ];
}
function write_BrtCellSt(cell, ncell, o) {
    if (o == null) o = new_buf(12 + 4 * cell.v.length);
    write_XLSBCell(ncell, o);
    write_XLWideString(cell.v, o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
function parse_BrtShortSt(data) {
    var cell = parse_XLSBShortCell(data);
    var value = parse_XLWideString(data);
    return [
        cell,
        value,
        "str"
    ];
}
function write_BrtShortSt(cell, ncell, o) {
    if (o == null) o = new_buf(8 + 4 * cell.v.length);
    write_XLSBShortCell(ncell, o);
    write_XLWideString(cell.v, o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.653 BrtFmlaBool */ function parse_BrtFmlaBool(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value = data.read_shift(1);
    var o = [
        cell,
        value,
        "b"
    ];
    if (opts.cellFormula) {
        data.l += 2;
        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ 
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.654 BrtFmlaError */ function parse_BrtFmlaError(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value = data.read_shift(1);
    var o = [
        cell,
        value,
        "e"
    ];
    if (opts.cellFormula) {
        data.l += 2;
        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ 
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.655 BrtFmlaNum */ function parse_BrtFmlaNum(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value = parse_Xnum(data);
    var o = [
        cell,
        value,
        "n"
    ];
    if (opts.cellFormula) {
        data.l += 2;
        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ 
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.656 BrtFmlaString */ function parse_BrtFmlaString(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value = parse_XLWideString(data);
    var o = [
        cell,
        value,
        "str"
    ];
    if (opts.cellFormula) {
        data.l += 2;
        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ 
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.682 BrtMergeCell */ var parse_BrtMergeCell = parse_UncheckedRfX;
var write_BrtMergeCell = write_UncheckedRfX;
/* [MS-XLSB] 2.4.107 BrtBeginMergeCells */ function write_BrtBeginMergeCells(cnt, o) {
    if (o == null) o = new_buf(4);
    o.write_shift(4, cnt);
    return o;
}
/* [MS-XLSB] 2.4.662 BrtHLink */ function parse_BrtHLink(data, length /*::, opts*/ ) {
    var end = data.l + length;
    var rfx = parse_UncheckedRfX(data, 16);
    var relId = parse_XLNullableWideString(data);
    var loc = parse_XLWideString(data);
    var tooltip = parse_XLWideString(data);
    var display = parse_XLWideString(data);
    data.l = end;
    var o = {
        rfx: rfx,
        relId: relId,
        loc: loc,
        display: display
    } /*:any*/ ;
    if (tooltip) o.Tooltip = tooltip;
    return o;
}
function write_BrtHLink(l, rId) {
    var o = new_buf(50 + 4 * (l[1].Target.length + (l[1].Tooltip || "").length));
    write_UncheckedRfX({
        s: decode_cell(l[0]),
        e: decode_cell(l[0])
    }, o);
    write_RelID("rId" + rId, o);
    var locidx = l[1].Target.indexOf("#");
    var loc = locidx == -1 ? "" : l[1].Target.slice(locidx + 1);
    write_XLWideString(loc || "", o);
    write_XLWideString(l[1].Tooltip || "", o);
    write_XLWideString("", o);
    return o.slice(0, o.l);
}
/* [MS-XLSB] 2.4.692 BrtPane */ function parse_BrtPane() {}
/* [MS-XLSB] 2.4.6 BrtArrFmla */ function parse_BrtArrFmla(data, length, opts) {
    var end = data.l + length;
    var rfx = parse_RfX(data, 16);
    var fAlwaysCalc = data.read_shift(1);
    var o = [
        rfx
    ];
    o[2] = fAlwaysCalc;
    if (opts.cellFormula) {
        var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
        o[1] = formula;
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.750 BrtShrFmla */ function parse_BrtShrFmla(data, length, opts) {
    var end = data.l + length;
    var rfx = parse_UncheckedRfX(data, 16);
    var o = [
        rfx
    ];
    if (opts.cellFormula) {
        var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
        o[1] = formula;
        data.l = end;
    } else data.l = end;
    return o;
}
/* [MS-XLSB] 2.4.323 BrtColInfo */ /* TODO: once XLS ColInfo is set, combine the functions */ function write_BrtColInfo(C /*:number*/ , col, o) {
    if (o == null) o = new_buf(18);
    var p = col_obj_w(C, col);
    o.write_shift(-4, C);
    o.write_shift(-4, C);
    o.write_shift(4, (p.width || 10) * 256);
    o.write_shift(4, 0 /*ixfe*/ ); // style
    var flags = 0;
    if (col.hidden) flags |= 0x01;
    if (typeof p.width == "number") flags |= 0x02;
    if (col.level) flags |= col.level << 8;
    o.write_shift(2, flags); // bit flag
    return o;
}
/* [MS-XLSB] 2.4.678 BrtMargins */ var BrtMarginKeys = [
    "left",
    "right",
    "top",
    "bottom",
    "header",
    "footer"
];
function parse_BrtMargins(data /*::, length, opts*/ ) /*:Margins*/ {
    var margins = {} /*:any*/ ;
    BrtMarginKeys.forEach(function(k) {
        margins[k] = parse_Xnum(data, 8);
    });
    return margins;
}
function write_BrtMargins(margins /*:Margins*/ , o) {
    if (o == null) o = new_buf(48);
    default_margins(margins);
    BrtMarginKeys.forEach(function(k) {
        write_Xnum(margins /*:any*/ [k], o);
    });
    return o;
}
/* [MS-XLSB] 2.4.299 BrtBeginWsView */ function parse_BrtBeginWsView(data /*::, length, opts*/ ) {
    var f = data.read_shift(2);
    data.l += 28;
    return {
        RTL: f & 0x20
    };
}
function write_BrtBeginWsView(ws, Workbook, o) {
    if (o == null) o = new_buf(30);
    var f = 0x39c;
    if ((((Workbook || {}).Views || [])[0] || {}).RTL) f |= 0x20;
    o.write_shift(2, f); // bit flag
    o.write_shift(4, 0);
    o.write_shift(4, 0); // view first row
    o.write_shift(4, 0); // view first col
    o.write_shift(1, 0); // gridline color ICV
    o.write_shift(1, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 100); // zoom scale
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(4, 0); // workbook view id
    return o;
}
/* [MS-XLSB] 2.4.309 BrtCellIgnoreEC */ function write_BrtCellIgnoreEC(ref) {
    var o = new_buf(24);
    o.write_shift(4, 4);
    o.write_shift(4, 1);
    write_UncheckedRfX(ref, o);
    return o;
}
/* [MS-XLSB] 2.4.748 BrtSheetProtection */ function write_BrtSheetProtection(sp, o) {
    if (o == null) o = new_buf(66);
    o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);
    o.write_shift(4, 1); // this record should not be written if no protection
    [
        [
            "objects",
            false
        ],
        [
            "scenarios",
            false
        ],
        [
            "formatCells",
            true
        ],
        [
            "formatColumns",
            true
        ],
        [
            "formatRows",
            true
        ],
        [
            "insertColumns",
            true
        ],
        [
            "insertRows",
            true
        ],
        [
            "insertHyperlinks",
            true
        ],
        [
            "deleteColumns",
            true
        ],
        [
            "deleteRows",
            true
        ],
        [
            "selectLockedCells",
            false
        ],
        [
            "sort",
            true
        ],
        [
            "autoFilter",
            true
        ],
        [
            "pivotTables",
            true
        ],
        [
            "selectUnlockedCells",
            false
        ] // fSelUnlockedCells
    ].forEach(function(n) {
        /*:: if(o == null) throw "unreachable"; */ if (n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);
        else o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);
    });
    return o;
}
function parse_BrtDVal() {}
function parse_BrtDVal14() {}
/* [MS-XLSB] 2.1.7.61 Worksheet */ function parse_ws_bin(data, _opts, idx, rels, wb /*:WBWBProps*/ , themes, styles) /*:Worksheet*/ {
    if (!data) return data;
    var opts = _opts || {};
    if (!rels) rels = {
        "!id": {}
    };
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    var s /*:Worksheet*/  = opts.dense ? [] : {};
    var ref;
    var refguess = {
        s: {
            r: 2000000,
            c: 2000000
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var state /*:Array<string>*/  = [];
    var pass = false, end = false;
    var row, p, cf, R, C, addr, sstr, rr, cell /*:Cell*/ ;
    var merges /*:Array<Range>*/  = [];
    opts.biff = 12;
    opts["!row"] = 0;
    var ai = 0, af = false;
    var arrayf /*:Array<[Range, string]>*/  = [];
    var sharedf = {};
    var supbooks = opts.supbooks || /*::(*/ wb /*:: :any)*/ .supbooks || [
        []
    ];
    supbooks.sharedf = sharedf;
    supbooks.arrayf = arrayf;
    supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) {
        return x.name;
    });
    if (!opts.supbooks) {
        opts.supbooks = supbooks;
        if (wb.Names) for(var i = 0; i < wb.Names.length; ++i)supbooks[0][i + 1] = wb.Names[i];
    }
    var colinfo /*:Array<ColInfo>*/  = [], rowinfo /*:Array<RowInfo>*/  = [];
    var seencol = false;
    XLSBRecordEnum[0x0010] = {
        n: "BrtShortReal",
        f: parse_BrtShortReal
    };
    var cm, vm;
    recordhopper(data, function ws_parse(val, RR, RT) {
        if (end) return;
        switch(RT){
            case 0x0094:
                /* 'BrtWsDim' */ ref = val;
                break;
            case 0x0000:
                /* 'BrtRowHdr' */ row = val;
                if (opts.sheetRows && opts.sheetRows <= row.r) end = true;
                rr = encode_row(R = row.r);
                opts["!row"] = row.r;
                if (val.hidden || val.hpt || val.level != null) {
                    if (val.hpt) val.hpx = pt2px(val.hpt);
                    rowinfo[val.r] = val;
                }
                break;
            case 0x0002:
            /* 'BrtCellRk' */ case 0x0003:
            /* 'BrtCellError' */ case 0x0004:
            /* 'BrtCellBool' */ case 0x0005:
            /* 'BrtCellReal' */ case 0x0006:
            /* 'BrtCellSt' */ case 0x0007:
            /* 'BrtCellIsst' */ case 0x0008:
            /* 'BrtFmlaString' */ case 0x0009:
            /* 'BrtFmlaNum' */ case 0x000A:
            /* 'BrtFmlaBool' */ case 0x000B:
            /* 'BrtFmlaError' */ case 0x000D:
            /* 'BrtShortRk' */ case 0x000E:
            /* 'BrtShortError' */ case 0x000F:
            /* 'BrtShortBool' */ case 0x0010:
            /* 'BrtShortReal' */ case 0x0011:
            /* 'BrtShortSt' */ case 0x0012:
            /* 'BrtShortIsst' */ case 0x003E:
                /* 'BrtCellRString' */ p = {
                    t: val[2]
                } /*:any*/ ;
                switch(val[2]){
                    case "n":
                        p.v = val[1];
                        break;
                    case "s":
                        sstr = strs[val[1]];
                        p.v = sstr.t;
                        p.r = sstr.r;
                        break;
                    case "b":
                        p.v = val[1] ? true : false;
                        break;
                    case "e":
                        p.v = val[1];
                        if (opts.cellText !== false) p.w = BErr[p.v];
                        break;
                    case "str":
                        p.t = "s";
                        p.v = val[1];
                        break;
                    case "is":
                        p.t = "s";
                        p.v = val[1].t;
                        break;
                }
                if (cf = styles.CellXf[val[0].iStyleRef]) safe_format(p, cf.numFmtId, null, opts, themes, styles);
                C = val[0].c == -1 ? C + 1 : val[0].c;
                if (opts.dense) {
                    if (!s[R]) s[R] = [];
                    s[R][C] = p;
                } else s[encode_col(C) + rr] = p;
                if (opts.cellFormula) {
                    af = false;
                    for(ai = 0; ai < arrayf.length; ++ai){
                        var aii = arrayf[ai];
                        if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) {
                            if (C >= aii[0].s.c && C <= aii[0].e.c) {
                                p.F = encode_range(aii[0]);
                                af = true;
                            }
                        }
                    }
                    if (!af && val.length > 3) p.f = val[3];
                }
                if (refguess.s.r > row.r) refguess.s.r = row.r;
                if (refguess.s.c > C) refguess.s.c = C;
                if (refguess.e.r < row.r) refguess.e.r = row.r;
                if (refguess.e.c < C) refguess.e.c = C;
                if (opts.cellDates && cf && p.t == "n" && fmt_is_date(table_fmt[cf.numFmtId])) {
                    var _d = SSF_parse_date_code(p.v);
                    if (_d) {
                        p.t = "d";
                        p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
                    }
                }
                if (cm) {
                    if (cm.type == "XLDAPR") p.D = true;
                    cm = void 0;
                }
                if (vm) vm = void 0;
                break;
            case 0x0001:
            /* 'BrtCellBlank' */ case 0x000C:
                /* 'BrtShortBlank' */ if (!opts.sheetStubs || pass) break;
                p = {
                    t: "z",
                    v: void 0
                } /*:any*/ ;
                C = val[0].c == -1 ? C + 1 : val[0].c;
                if (opts.dense) {
                    if (!s[R]) s[R] = [];
                    s[R][C] = p;
                } else s[encode_col(C) + rr] = p;
                if (refguess.s.r > row.r) refguess.s.r = row.r;
                if (refguess.s.c > C) refguess.s.c = C;
                if (refguess.e.r < row.r) refguess.e.r = row.r;
                if (refguess.e.c < C) refguess.e.c = C;
                if (cm) {
                    if (cm.type == "XLDAPR") p.D = true;
                    cm = void 0;
                }
                if (vm) vm = void 0;
                break;
            case 0x00B0:
                /* 'BrtMergeCell' */ merges.push(val);
                break;
            case 0x0031:
                cm = ((opts.xlmeta || {}).Cell || [])[val - 1];
                break;
            case 0x01EE:
                /* 'BrtHLink' */ var rel = rels["!id"][val.relId];
                if (rel) {
                    val.Target = rel.Target;
                    if (val.loc) val.Target += "#" + val.loc;
                    val.Rel = rel;
                } else if (val.relId == "") val.Target = "#" + val.loc;
                for(R = val.rfx.s.r; R <= val.rfx.e.r; ++R)for(C = val.rfx.s.c; C <= val.rfx.e.c; ++C)if (opts.dense) {
                    if (!s[R]) s[R] = [];
                    if (!s[R][C]) s[R][C] = {
                        t: "z",
                        v: undefined
                    };
                    s[R][C].l = val;
                } else {
                    addr = encode_cell({
                        c: C,
                        r: R
                    });
                    if (!s[addr]) s[addr] = {
                        t: "z",
                        v: undefined
                    };
                    s[addr].l = val;
                }
                break;
            case 0x01AA:
                /* 'BrtArrFmla' */ if (!opts.cellFormula) break;
                arrayf.push(val);
                cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
                cell.f = stringify_formula(val[1], refguess, {
                    r: row.r,
                    c: C
                }, supbooks, opts);
                cell.F = encode_range(val[0]);
                break;
            case 0x01AB:
                /* 'BrtShrFmla' */ if (!opts.cellFormula) break;
                sharedf[encode_cell(val[0].s)] = val[1];
                cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
                cell.f = stringify_formula(val[1], refguess, {
                    r: row.r,
                    c: C
                }, supbooks, opts);
                break;
            /* identical to 'ColInfo' in XLS */ case 0x003C:
                /* 'BrtColInfo' */ if (!opts.cellStyles) break;
                while(val.e >= val.s){
                    colinfo[val.e--] = {
                        width: val.w / 256,
                        hidden: !!(val.flags & 0x01),
                        level: val.level
                    };
                    if (!seencol) {
                        seencol = true;
                        find_mdw_colw(val.w / 256);
                    }
                    process_col(colinfo[val.e + 1]);
                }
                break;
            case 0x00A1:
                /* 'BrtBeginAFilter' */ s["!autofilter"] = {
                    ref: encode_range(val)
                };
                break;
            case 0x01DC:
                /* 'BrtMargins' */ s["!margins"] = val;
                break;
            case 0x0093:
                /* 'BrtWsProp' */ if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
                if (val.name) wb.Sheets[idx].CodeName = val.name;
                if (val.above || val.left) s["!outline"] = {
                    above: val.above,
                    left: val.left
                };
                break;
            case 0x0089:
                /* 'BrtBeginWsView' */ if (!wb.Views) wb.Views = [
                    {}
                ];
                if (!wb.Views[0]) wb.Views[0] = {};
                if (val.RTL) wb.Views[0].RTL = true;
                break;
            case 0x01E5:
                break;
            case 0x0040:
            /* 'BrtDVal' */ case 0x041D:
                break;
            case 0x0097:
                break;
            case 0x0098:
            /* 'BrtSel' */ case 0x00AF:
            /* 'BrtAFilterDateGroupItem' */ case 0x0284:
            /* 'BrtActiveX' */ case 0x0271:
            /* 'BrtBigName' */ case 0x0232:
            /* 'BrtBkHim' */ case 0x018C:
            /* 'BrtBrk' */ case 0x0458:
            /* 'BrtCFIcon' */ case 0x047A:
            /* 'BrtCFRuleExt' */ case 0x01D7:
            /* 'BrtCFVO' */ case 0x041A:
            /* 'BrtCFVO14' */ case 0x0289:
            /* 'BrtCellIgnoreEC' */ case 0x0451:
            /* 'BrtCellIgnoreEC14' */ case 0x024D:
            /* 'BrtCellSmartTagProperty' */ case 0x025F:
            /* 'BrtCellWatch' */ case 0x0234:
            /* 'BrtColor' */ case 0x041F:
            /* 'BrtColor14' */ case 0x00A8:
            /* 'BrtColorFilter' */ case 0x00AE:
            /* 'BrtCustomFilter' */ case 0x049C:
            /* 'BrtCustomFilter14' */ case 0x01F3:
            /* 'BrtDRef' */ case 0x01FB:
            /* 'BrtDXF' */ case 0x0226:
            /* 'BrtDrawing' */ case 0x00AB:
            /* 'BrtDynamicFilter' */ case 0x00A7:
            /* 'BrtFilter' */ case 0x0499:
            /* 'BrtFilter14' */ case 0x00A9:
            /* 'BrtIconFilter' */ case 0x049D:
            /* 'BrtIconFilter14' */ case 0x0227:
            /* 'BrtLegacyDrawing' */ case 0x0228:
            /* 'BrtLegacyDrawingHF' */ case 0x0295:
            /* 'BrtListPart' */ case 0x027F:
            /* 'BrtOleObject' */ case 0x01DE:
            /* 'BrtPageSetup' */ case 0x0219:
            /* 'BrtPhoneticInfo' */ case 0x01DD:
            /* 'BrtPrintOptions' */ case 0x0218:
            /* 'BrtRangeProtection' */ case 0x044F:
            /* 'BrtRangeProtection14' */ case 0x02A8:
            /* 'BrtRangeProtectionIso' */ case 0x0450:
            /* 'BrtRangeProtectionIso14' */ case 0x0400:
            /* 'BrtRwDescent' */ case 0x0297:
            /* 'BrtSheetCalcProp' */ case 0x0217:
            /* 'BrtSheetProtection' */ case 0x02A6:
            /* 'BrtSheetProtectionIso' */ case 0x01F8:
            /* 'BrtSlc' */ case 0x0413:
            /* 'BrtSparkline' */ case 0x01AC:
            /* 'BrtTable' */ case 0x00AA:
            /* 'BrtTop10Filter' */ case 0x0C00:
            /* 'BrtUid' */ case 0x0032:
            /* 'BrtValueMeta' */ case 0x0816:
            /* 'BrtWebExtension' */ case 0x0415:
                break;
            case 0x0023:
                /* 'BrtFRTBegin' */ pass = true;
                break;
            case 0x0024:
                /* 'BrtFRTEnd' */ pass = false;
                break;
            case 0x0025:
                /* 'BrtACBegin' */ state.push(RT);
                pass = true;
                break;
            case 0x0026:
                /* 'BrtACEnd' */ state.pop();
                pass = false;
                break;
            default:
                if (RR.T) ;
                else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    }, opts);
    delete opts.supbooks;
    delete opts["!row"];
    if (!s["!ref"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s["!ref"] = encode_range(ref || refguess);
    if (opts.sheetRows && s["!ref"]) {
        var tmpref = safe_decode_range(s["!ref"]);
        if (opts.sheetRows <= +tmpref.e.r) {
            tmpref.e.r = opts.sheetRows - 1;
            if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
            if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
            if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
            if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
            s["!fullref"] = s["!ref"];
            s["!ref"] = encode_range(tmpref);
        }
    }
    if (merges.length > 0) s["!merges"] = merges;
    if (colinfo.length > 0) s["!cols"] = colinfo;
    if (rowinfo.length > 0) s["!rows"] = rowinfo;
    return s;
}
/* TODO: something useful -- this is a stub */ function write_ws_bin_cell(ba /*:BufArray*/ , cell /*:Cell*/ , R /*:number*/ , C /*:number*/ , opts, ws /*:Worksheet*/ , last_seen /*:boolean*/ ) /*:boolean*/ {
    if (cell.v === undefined) return false;
    var vv = "";
    switch(cell.t){
        case "b":
            vv = cell.v ? "1" : "0";
            break;
        case "d":
            cell = dup(cell);
            cell.z = cell.z || table_fmt[14];
            cell.v = datenum(parseDate(cell.v));
            cell.t = "n";
            break;
        /* falls through */ case "n":
        case "e":
            vv = "" + cell.v;
            break;
        default:
            vv = cell.v;
            break;
    }
    var o /*:any*/  = {
        r: R,
        c: C
    } /*:any*/ ;
    /* TODO: cell style */ o.s = get_cell_style(opts.cellXfs, cell, opts);
    if (cell.l) ws["!links"].push([
        encode_cell(o),
        cell.l
    ]);
    if (cell.c) ws["!comments"].push([
        encode_cell(o),
        cell.c
    ]);
    switch(cell.t){
        case "s":
        case "str":
            if (opts.bookSST) {
                vv = get_sst_id(opts.Strings, cell.v /*:any*/ , opts.revStrings);
                o.t = "s";
                o.v = vv;
                if (last_seen) write_record(ba, 0x0012 /* BrtShortIsst */ , write_BrtShortIsst(cell, o));
                else write_record(ba, 0x0007 /* BrtCellIsst */ , write_BrtCellIsst(cell, o));
            } else {
                o.t = "str";
                if (last_seen) write_record(ba, 0x0011 /* BrtShortSt */ , write_BrtShortSt(cell, o));
                else write_record(ba, 0x0006 /* BrtCellSt */ , write_BrtCellSt(cell, o));
            }
            return true;
        case "n":
            /* TODO: determine threshold for Real vs RK */ if (cell.v == (cell.v | 0) && cell.v > -1000 && cell.v < 1000) {
                if (last_seen) write_record(ba, 0x000D /* BrtShortRk */ , write_BrtShortRk(cell, o));
                else write_record(ba, 0x0002 /* BrtCellRk */ , write_BrtCellRk(cell, o));
            } else if (last_seen) write_record(ba, 0x0010 /* BrtShortReal */ , write_BrtShortReal(cell, o));
            else write_record(ba, 0x0005 /* BrtCellReal */ , write_BrtCellReal(cell, o));
            return true;
        case "b":
            o.t = "b";
            if (last_seen) write_record(ba, 0x000F /* BrtShortBool */ , write_BrtShortBool(cell, o));
            else write_record(ba, 0x0004 /* BrtCellBool */ , write_BrtCellBool(cell, o));
            return true;
        case "e":
            o.t = "e";
            if (last_seen) write_record(ba, 0x000E /* BrtShortError */ , write_BrtShortError(cell, o));
            else write_record(ba, 0x0003 /* BrtCellError */ , write_BrtCellError(cell, o));
            return true;
    }
    if (last_seen) write_record(ba, 0x000C /* BrtShortBlank */ , write_BrtShortBlank(cell, o));
    else write_record(ba, 0x0001 /* BrtCellBlank */ , write_BrtCellBlank(cell, o));
    return true;
}
function write_CELLTABLE(ba, ws /*:Worksheet*/ , idx /*:number*/ , opts /*::, wb:Workbook*/ ) {
    var range = safe_decode_range(ws["!ref"] || "A1"), ref, rr = "", cols /*:Array<string>*/  = [];
    write_record(ba, 0x0091 /* BrtBeginSheetData */ );
    var dense = Array.isArray(ws);
    var cap = range.e.r;
    if (ws["!rows"]) cap = Math.max(range.e.r, ws["!rows"].length - 1);
    for(var R = range.s.r; R <= cap; ++R){
        rr = encode_row(R);
        /* [ACCELLTABLE] */ /* BrtRowHdr */ write_row_header(ba, ws, range, R);
        var last_seen = false;
        if (R <= range.e.r) for(var C = range.s.c; C <= range.e.c; ++C){
            /* *16384CELL */ if (R === range.s.r) cols[C] = encode_col(C);
            ref = cols[C] + rr;
            var cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (!cell) {
                last_seen = false;
                continue;
            }
            /* write cell */ last_seen = write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen);
        }
    }
    write_record(ba, 0x0092 /* BrtEndSheetData */ );
}
function write_MERGECELLS(ba, ws /*:Worksheet*/ ) {
    if (!ws || !ws["!merges"]) return;
    write_record(ba, 0x00B1 /* BrtBeginMergeCells */ , write_BrtBeginMergeCells(ws["!merges"].length));
    ws["!merges"].forEach(function(m) {
        write_record(ba, 0x00B0 /* BrtMergeCell */ , write_BrtMergeCell(m));
    });
    write_record(ba, 0x00B2 /* BrtEndMergeCells */ );
}
function write_COLINFOS(ba, ws /*:Worksheet*/  /*::, idx:number, opts, wb:Workbook*/ ) {
    if (!ws || !ws["!cols"]) return;
    write_record(ba, 0x0186 /* BrtBeginColInfos */ );
    ws["!cols"].forEach(function(m, i) {
        if (m) write_record(ba, 0x003C /* 'BrtColInfo' */ , write_BrtColInfo(i, m));
    });
    write_record(ba, 0x0187 /* BrtEndColInfos */ );
}
function write_IGNOREECS(ba, ws /*:Worksheet*/ ) {
    if (!ws || !ws["!ref"]) return;
    write_record(ba, 0x0288 /* BrtBeginCellIgnoreECs */ );
    write_record(ba, 0x0289 /* BrtCellIgnoreEC */ , write_BrtCellIgnoreEC(safe_decode_range(ws["!ref"])));
    write_record(ba, 0x028A /* BrtEndCellIgnoreECs */ );
}
function write_HLINKS(ba, ws /*:Worksheet*/ , rels) {
    /* *BrtHLink */ ws["!links"].forEach(function(l) {
        if (!l[1].Target) return;
        var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, ""), RELS.HLINK);
        write_record(ba, 0x01EE /* BrtHLink */ , write_BrtHLink(l, rId));
    });
    delete ws["!links"];
}
function write_LEGACYDRAWING(ba, ws /*:Worksheet*/ , idx /*:number*/ , rels) {
    /* [BrtLegacyDrawing] */ if (ws["!comments"].length > 0) {
        var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
        write_record(ba, 0x0227 /* BrtLegacyDrawing */ , write_RelID("rId" + rId));
        ws["!legacy"] = rId;
    }
}
function write_AUTOFILTER(ba, ws, wb, idx) {
    if (!ws["!autofilter"]) return;
    var data = ws["!autofilter"];
    var ref = typeof data.ref === "string" ? data.ref : encode_range(data.ref);
    /* Update FilterDatabase defined name for the worksheet */ if (!wb.Workbook) wb.Workbook = {
        Sheets: []
    } /*:any*/ ;
    if (!wb.Workbook.Names) wb.Workbook.Names = [];
    var names /*: Array<any> */  = wb.Workbook.Names;
    var range = decode_range(ref);
    if (range.s.r == range.e.r) {
        range.e.r = decode_range(ws["!ref"]).e.r;
        ref = encode_range(range);
    }
    for(var i = 0; i < names.length; ++i){
        var name = names[i];
        if (name.Name != "_xlnm._FilterDatabase") continue;
        if (name.Sheet != idx) continue;
        name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
        break;
    }
    if (i == names.length) names.push({
        Name: "_xlnm._FilterDatabase",
        Sheet: idx,
        Ref: "'" + wb.SheetNames[idx] + "'!" + ref
    });
    write_record(ba, 0x00A1 /* BrtBeginAFilter */ , write_UncheckedRfX(safe_decode_range(ref)));
    /* *FILTERCOLUMN */ /* [SORTSTATE] */ /* BrtEndAFilter */ write_record(ba, 0x00A2 /* BrtEndAFilter */ );
}
function write_WSVIEWS2(ba, ws, Workbook) {
    write_record(ba, 0x0085 /* BrtBeginWsViews */ );
    /* [ACUID] */ write_record(ba, 0x0089 /* BrtBeginWsView */ , write_BrtBeginWsView(ws, Workbook));
    /* [BrtPane] */ /* *4BrtSel */ /* *4SXSELECT */ /* *FRT */ write_record(ba, 0x008A /* BrtEndWsView */ );
    /* *FRT */ write_record(ba, 0x0086 /* BrtEndWsViews */ );
}
function write_WSFMTINFO() {
/* [ACWSFMTINFO] */ // write_record(ba, 0x01E5 /* BrtWsFmtInfo */, write_BrtWsFmtInfo(ws));
}
function write_SHEETPROTECT(ba, ws) {
    if (!ws["!protect"]) return;
    /* [BrtSheetProtectionIso] */ write_record(ba, 0x0217 /* BrtSheetProtection */ , write_BrtSheetProtection(ws["!protect"]));
}
function write_ws_bin(idx /*:number*/ , opts, wb /*:Workbook*/ , rels) {
    var ba = buf_array();
    var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
    var c /*:string*/  = s;
    try {
        if (wb && wb.Workbook) c = wb.Workbook.Sheets[idx].CodeName || c;
    } catch (e) {}
    var r = safe_decode_range(ws["!ref"] || "A1");
    if (r.e.c > 0x3FFF || r.e.r > 0xFFFFF) {
        if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:XFD1048576");
        r.e.c = Math.min(r.e.c, 0x3FFF);
        r.e.r = Math.min(r.e.c, 0xFFFFF);
    }
    ws["!links"] = [];
    /* passed back to write_zip and removed there */ ws["!comments"] = [];
    write_record(ba, 0x0081 /* BrtBeginSheet */ );
    if (wb.vbaraw || ws["!outline"]) write_record(ba, 0x0093 /* BrtWsProp */ , write_BrtWsProp(c, ws["!outline"]));
    write_record(ba, 0x0094 /* BrtWsDim */ , write_BrtWsDim(r));
    write_WSVIEWS2(ba, ws, wb.Workbook);
    write_WSFMTINFO(ba, ws);
    write_COLINFOS(ba, ws, idx, opts, wb);
    write_CELLTABLE(ba, ws, idx, opts, wb);
    /* [BrtSheetCalcProp] */ write_SHEETPROTECT(ba, ws);
    /* *([BrtRangeProtectionIso] BrtRangeProtection) */ /* [SCENMAN] */ write_AUTOFILTER(ba, ws, wb, idx);
    /* [SORTSTATE] */ /* [DCON] */ /* [USERSHVIEWS] */ write_MERGECELLS(ba, ws);
    /* [BrtPhoneticInfo] */ /* *CONDITIONALFORMATTING */ /* [DVALS] */ write_HLINKS(ba, ws, rels);
    /* [BrtPrintOptions] */ if (ws["!margins"]) write_record(ba, 0x01DC /* BrtMargins */ , write_BrtMargins(ws["!margins"]));
    /* [BrtPageSetup] */ /* [HEADERFOOTER] */ /* [RWBRK] */ /* [COLBRK] */ /* *BrtBigName */ /* [CELLWATCHES] */ if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) write_IGNOREECS(ba, ws);
    /* [SMARTTAGS] */ /* [BrtDrawing] */ write_LEGACYDRAWING(ba, ws, idx, rels);
    /* [BrtLegacyDrawingHF] */ /* [BrtBkHim] */ /* [OLEOBJECTS] */ /* [ACTIVEXCONTROLS] */ /* [WEBPUBITEMS] */ /* [LISTPARTS] */ /* FRTWORKSHEET */ write_record(ba, 0x0082 /* BrtEndSheet */ );
    return ba.end();
}
function parse_Cache(data /*:string*/ ) /*:[Array<number|string>, string, ?string]*/ {
    var col /*:Array<number|string>*/  = [];
    var num = data.match(/^<c:numCache>/);
    var f;
    /* 21.2.2.150 pt CT_NumVal */ (data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg) || []).forEach(function(pt) {
        var q = pt.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
        if (!q) return;
        col[+q[1]] = num ? +q[2] : q[2];
    });
    /* 21.2.2.71 formatCode CT_Xstring */ var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || [
        "",
        "General"
    ])[1]);
    (data.match(/<c:f>(.*?)<\/c:f>/mg) || []).forEach(function(F) {
        f = F.replace(/<.*?>/g, "");
    });
    return [
        col,
        nf,
        f
    ];
}
/* 21.2 DrawingML - Charts */ function parse_chart(data /*:?string*/ , name /*:string*/ , opts, rels, wb, csheet) {
    var cs /*:Worksheet*/  = csheet || {
        "!type": "chart"
    };
    if (!data) return csheet;
    /* 21.2.2.27 chart CT_Chart */ var C = 0, R = 0, col = "A";
    var refguess = {
        s: {
            r: 2000000,
            c: 2000000
        },
        e: {
            r: 0,
            c: 0
        }
    };
    /* 21.2.2.120 numCache CT_NumData */ (data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm) || []).forEach(function(nc) {
        var cache = parse_Cache(nc);
        refguess.s.r = refguess.s.c = 0;
        refguess.e.c = C;
        col = encode_col(C);
        cache[0].forEach(function(n, i) {
            cs[col + encode_row(i)] = {
                t: "n",
                v: n,
                z: cache[1]
            };
            R = i;
        });
        if (refguess.e.r < R) refguess.e.r = R;
        ++C;
    });
    if (C > 0) cs["!ref"] = encode_range(refguess);
    return cs;
}
/* 18.3 Worksheets also covers Chartsheets */ function parse_cs_xml(data /*:?string*/ , opts, idx /*:number*/ , rels, wb /*::, themes, styles*/ ) /*:Worksheet*/ {
    if (!data) return data;
    /* 18.3.1.12 chartsheet CT_ChartSheet */ if (!rels) rels = {
        "!id": {}
    };
    var s = {
        "!type": "chart",
        "!drawel": null,
        "!rel": ""
    } /*:any*/ ;
    var m;
    /* 18.3.1.83 sheetPr CT_ChartsheetPr */ var sheetPr = data.match(sheetprregex);
    if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
    /* 18.3.1.36 drawing CT_Drawing */ if (m = data.match(/drawing r:id="(.*?)"/)) s["!rel"] = m[1];
    if (rels["!id"][s["!rel"]]) s["!drawel"] = rels["!id"][s["!rel"]];
    return s;
}
function write_cs_xml(idx /*:number*/ , opts, wb /*:Workbook*/ , rels) /*:string*/ {
    var o = [
        XML_HEADER,
        writextag("chartsheet", null, {
            "xmlns": XMLNS_main[0],
            "xmlns:r": XMLNS.r
        })
    ];
    o[o.length] = writextag("drawing", null, {
        "r:id": "rId1"
    });
    add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
    if (o.length > 2) {
        o[o.length] = "</chartsheet>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSB] 2.4.331 BrtCsProp */ function parse_BrtCsProp(data, length /*:number*/ ) {
    data.l += 10;
    var name = parse_XLWideString(data, length - 10);
    return {
        name: name
    };
}
/* [MS-XLSB] 2.1.7.7 Chart Sheet */ function parse_cs_bin(data, opts, idx /*:number*/ , rels, wb /*::, themes, styles*/ ) /*:Worksheet*/ {
    if (!data) return data;
    if (!rels) rels = {
        "!id": {}
    };
    var s = {
        "!type": "chart",
        "!drawel": null,
        "!rel": ""
    };
    var state /*:Array<string>*/  = [];
    var pass = false;
    recordhopper(data, function cs_parse(val, R, RT) {
        switch(RT){
            case 0x0226:
                /* 'BrtDrawing' */ s["!rel"] = val;
                break;
            case 0x028B:
                /* 'BrtCsProp' */ if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
                if (val.name) wb.Sheets[idx].CodeName = val.name;
                break;
            case 0x0232:
            /* 'BrtBkHim' */ case 0x028C:
            /* 'BrtCsPageSetup' */ case 0x029D:
            /* 'BrtCsProtection' */ case 0x02A7:
            /* 'BrtCsProtectionIso' */ case 0x0227:
            /* 'BrtLegacyDrawing' */ case 0x0228:
            /* 'BrtLegacyDrawingHF' */ case 0x01DC:
            /* 'BrtMargins' */ case 0x0C00:
                break;
            case 0x0023:
                /* 'BrtFRTBegin' */ pass = true;
                break;
            case 0x0024:
                /* 'BrtFRTEnd' */ pass = false;
                break;
            case 0x0025:
                /* 'BrtACBegin' */ state.push(RT);
                break;
            case 0x0026:
                /* 'BrtACEnd' */ state.pop();
                break;
            default:
                if (R.T > 0) state.push(RT);
                else if (R.T < 0) state.pop();
                else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    }, opts);
    if (rels["!id"][s["!rel"]]) s["!drawel"] = rels["!id"][s["!rel"]];
    return s;
}
function write_cs_bin() {
    var ba = buf_array();
    write_record(ba, 0x0081 /* BrtBeginSheet */ );
    /* [BrtCsProp] */ /* CSVIEWS */ /* [[BrtCsProtectionIso] BrtCsProtection] */ /* [USERCSVIEWS] */ /* [BrtMargins] */ /* [BrtCsPageSetup] */ /* [HEADERFOOTER] */ /* BrtDrawing */ /* [BrtLegacyDrawing] */ /* [BrtLegacyDrawingHF] */ /* [BrtBkHim] */ /* [WEBPUBITEMS] */ /* FRTCHARTSHEET */ write_record(ba, 0x0082 /* BrtEndSheet */ );
    return ba.end();
}
/* 18.2.28 (CT_WorkbookProtection) Defaults */ var WBPropsDef = [
    [
        "allowRefreshQuery",
        false,
        "bool"
    ],
    [
        "autoCompressPictures",
        true,
        "bool"
    ],
    [
        "backupFile",
        false,
        "bool"
    ],
    [
        "checkCompatibility",
        false,
        "bool"
    ],
    [
        "CodeName",
        ""
    ],
    [
        "date1904",
        false,
        "bool"
    ],
    [
        "defaultThemeVersion",
        0,
        "int"
    ],
    [
        "filterPrivacy",
        false,
        "bool"
    ],
    [
        "hidePivotFieldList",
        false,
        "bool"
    ],
    [
        "promptedSolutions",
        false,
        "bool"
    ],
    [
        "publishItems",
        false,
        "bool"
    ],
    [
        "refreshAllConnections",
        false,
        "bool"
    ],
    [
        "saveExternalLinkValues",
        true,
        "bool"
    ],
    [
        "showBorderUnselectedTables",
        true,
        "bool"
    ],
    [
        "showInkAnnotation",
        true,
        "bool"
    ],
    [
        "showObjects",
        "all"
    ],
    [
        "showPivotChartFilter",
        false,
        "bool"
    ],
    [
        "updateLinks",
        "userSet"
    ]
];
/* 18.2.30 (CT_BookView) Defaults */ var WBViewDef = [
    [
        "activeTab",
        0,
        "int"
    ],
    [
        "autoFilterDateGrouping",
        true,
        "bool"
    ],
    [
        "firstSheet",
        0,
        "int"
    ],
    [
        "minimized",
        false,
        "bool"
    ],
    [
        "showHorizontalScroll",
        true,
        "bool"
    ],
    [
        "showSheetTabs",
        true,
        "bool"
    ],
    [
        "showVerticalScroll",
        true,
        "bool"
    ],
    [
        "tabRatio",
        600,
        "int"
    ],
    [
        "visibility",
        "visible"
    ]
];
/* 18.2.19 (CT_Sheet) Defaults */ var SheetDef = [];
/* 18.2.2  (CT_CalcPr) Defaults */ var CalcPrDef = [
    [
        "calcCompleted",
        "true"
    ],
    [
        "calcMode",
        "auto"
    ],
    [
        "calcOnSave",
        "true"
    ],
    [
        "concurrentCalc",
        "true"
    ],
    [
        "fullCalcOnLoad",
        "false"
    ],
    [
        "fullPrecision",
        "true"
    ],
    [
        "iterate",
        "false"
    ],
    [
        "iterateCount",
        "100"
    ],
    [
        "iterateDelta",
        "0.001"
    ],
    [
        "refMode",
        "A1"
    ]
];
/* 18.2.3 (CT_CustomWorkbookView) Defaults */ /*var CustomWBViewDef = [
	['autoUpdate', 'false'],
	['changesSavedWin', 'false'],
	['includeHiddenRowCol', 'true'],
	['includePrintSettings', 'true'],
	['maximized', 'false'],
	['minimized', 'false'],
	['onlySync', 'false'],
	['personalView', 'false'],
	['showComments', 'commIndicator'],
	['showFormulaBar', 'true'],
	['showHorizontalScroll', 'true'],
	['showObjects', 'all'],
	['showSheetTabs', 'true'],
	['showStatusbar', 'true'],
	['showVerticalScroll', 'true'],
	['tabRatio', '600'],
	['xWindow', '0'],
	['yWindow', '0']
];*/ function push_defaults_array(target, defaults) {
    for(var j = 0; j != target.length; ++j){
        var w = target[j];
        for(var i = 0; i != defaults.length; ++i){
            var z = defaults[i];
            if (w[z[0]] == null) w[z[0]] = z[1];
            else switch(z[2]){
                case "bool":
                    if (typeof w[z[0]] == "string") w[z[0]] = parsexmlbool(w[z[0]]);
                    break;
                case "int":
                    if (typeof w[z[0]] == "string") w[z[0]] = parseInt(w[z[0]], 10);
                    break;
            }
        }
    }
}
function push_defaults(target, defaults) {
    for(var i = 0; i != defaults.length; ++i){
        var z = defaults[i];
        if (target[z[0]] == null) target[z[0]] = z[1];
        else switch(z[2]){
            case "bool":
                if (typeof target[z[0]] == "string") target[z[0]] = parsexmlbool(target[z[0]]);
                break;
            case "int":
                if (typeof target[z[0]] == "string") target[z[0]] = parseInt(target[z[0]], 10);
                break;
        }
    }
}
function parse_wb_defaults(wb) {
    push_defaults(wb.WBProps, WBPropsDef);
    push_defaults(wb.CalcPr, CalcPrDef);
    push_defaults_array(wb.WBView, WBViewDef);
    push_defaults_array(wb.Sheets, SheetDef);
    _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
}
function safe1904(wb /*:Workbook*/ ) /*:string*/ {
    /* TODO: store date1904 somewhere else */ if (!wb.Workbook) return "false";
    if (!wb.Workbook.WBProps) return "false";
    return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
}
var badchars = /*#__PURE__*/ "][*?/\\".split("");
function check_ws_name(n /*:string*/ , safe /*:?boolean*/ ) /*:boolean*/ {
    if (n.length > 31) {
        if (safe) return false;
        throw new Error("Sheet names cannot exceed 31 chars");
    }
    var _good = true;
    badchars.forEach(function(c) {
        if (n.indexOf(c) == -1) return;
        if (!safe) throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
        _good = false;
    });
    return _good;
}
function check_wb_names(N, S, codes) {
    N.forEach(function(n, i) {
        check_ws_name(n);
        for(var j = 0; j < i; ++j)if (n == N[j]) throw new Error("Duplicate Sheet Name: " + n);
        if (codes) {
            var cn = S && S[i] && S[i].CodeName || n;
            if (cn.charCodeAt(0) == 95 && cn.length > 22) throw new Error("Bad Code Name: Worksheet" + cn);
        }
    });
}
function check_wb(wb) {
    if (!wb || !wb.SheetNames || !wb.Sheets) throw new Error("Invalid Workbook");
    if (!wb.SheetNames.length) throw new Error("Workbook is empty");
    var Sheets = wb.Workbook && wb.Workbook.Sheets || [];
    check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);
    for(var i = 0; i < wb.SheetNames.length; ++i)check_ws(wb.Sheets[wb.SheetNames[i]], wb.SheetNames[i], i);
/* TODO: validate workbook */ }
/* 18.2 Workbook */ var wbnsregex = /<\w+:workbook/;
function parse_wb_xml(data, opts) /*:WorkbookFile*/ {
    if (!data) throw new Error("Could not find file");
    var wb = /*::(*/ {
        AppVersion: {},
        WBProps: {},
        WBView: [],
        Sheets: [],
        CalcPr: {},
        Names: [],
        xmlns: ""
    } /*::)*/ ;
    var pass = false, xmlns = "xmlns";
    var dname = {}, dnstart = 0;
    data.replace(tagregex, function xml_wb(x, idx) {
        var y /*:any*/  = parsexmltag(x);
        switch(strip_ns(y[0])){
            case "<?xml":
                break;
            /* 18.2.27 workbook CT_Workbook 1 */ case "<workbook":
                if (x.match(wbnsregex)) xmlns = "xmlns" + x.match(/<(\w+):/)[1];
                wb.xmlns = y[xmlns];
                break;
            case "</workbook>":
                break;
            /* 18.2.13 fileVersion CT_FileVersion ? */ case "<fileVersion":
                delete y[0];
                wb.AppVersion = y;
                break;
            case "<fileVersion/>":
            case "</fileVersion>":
                break;
            /* 18.2.12 fileSharing CT_FileSharing ? */ case "<fileSharing":
                break;
            case "<fileSharing/>":
                break;
            /* 18.2.28 workbookPr CT_WorkbookPr ? */ case "<workbookPr":
            case "<workbookPr/>":
                WBPropsDef.forEach(function(w) {
                    if (y[w[0]] == null) return;
                    switch(w[2]){
                        case "bool":
                            wb.WBProps[w[0]] = parsexmlbool(y[w[0]]);
                            break;
                        case "int":
                            wb.WBProps[w[0]] = parseInt(y[w[0]], 10);
                            break;
                        default:
                            wb.WBProps[w[0]] = y[w[0]];
                    }
                });
                if (y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);
                break;
            case "</workbookPr>":
                break;
            /* 18.2.29 workbookProtection CT_WorkbookProtection ? */ case "<workbookProtection":
                break;
            case "<workbookProtection/>":
                break;
            /* 18.2.1  bookViews CT_BookViews ? */ case "<bookViews":
            case "<bookViews>":
            case "</bookViews>":
                break;
            /* 18.2.30   workbookView CT_BookView + */ case "<workbookView":
            case "<workbookView/>":
                delete y[0];
                wb.WBView.push(y);
                break;
            case "</workbookView>":
                break;
            /* 18.2.20 sheets CT_Sheets 1 */ case "<sheets":
            case "<sheets>":
            case "</sheets>":
                break; // aggregate sheet
            /* 18.2.19   sheet CT_Sheet + */ case "<sheet":
                switch(y.state){
                    case "hidden":
                        y.Hidden = 1;
                        break;
                    case "veryHidden":
                        y.Hidden = 2;
                        break;
                    default:
                        y.Hidden = 0;
                }
                delete y.state;
                y.name = unescapexml(utf8read(y.name));
                delete y[0];
                wb.Sheets.push(y);
                break;
            case "</sheet>":
                break;
            /* 18.2.15 functionGroups CT_FunctionGroups ? */ case "<functionGroups":
            case "<functionGroups/>":
                break;
            /* 18.2.14   functionGroup CT_FunctionGroup + */ case "<functionGroup":
                break;
            /* 18.2.9  externalReferences CT_ExternalReferences ? */ case "<externalReferences":
            case "</externalReferences>":
            case "<externalReferences>":
                break;
            /* 18.2.8    externalReference CT_ExternalReference + */ case "<externalReference":
                break;
            /* 18.2.6  definedNames CT_DefinedNames ? */ case "<definedNames/>":
                break;
            case "<definedNames>":
            case "<definedNames":
                pass = true;
                break;
            case "</definedNames>":
                pass = false;
                break;
            /* 18.2.5    definedName CT_DefinedName + */ case "<definedName":
                dname = {};
                dname.Name = utf8read(y.name);
                if (y.comment) dname.Comment = y.comment;
                if (y.localSheetId) dname.Sheet = +y.localSheetId;
                if (parsexmlbool(y.hidden || "0")) dname.Hidden = true;
                dnstart = idx + x.length;
                break;
            case "</definedName>":
                dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
                wb.Names.push(dname);
                break;
            case "<definedName/>":
                break;
            /* 18.2.2  calcPr CT_CalcPr ? */ case "<calcPr":
                delete y[0];
                wb.CalcPr = y;
                break;
            case "<calcPr/>":
                delete y[0];
                wb.CalcPr = y;
                break;
            case "</calcPr>":
                break;
            /* 18.2.16 oleSize CT_OleSize ? (ref required) */ case "<oleSize":
                break;
            /* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */ case "<customWorkbookViews>":
            case "</customWorkbookViews>":
            case "<customWorkbookViews":
                break;
            /* 18.2.3  customWorkbookView CT_CustomWorkbookView + */ case "<customWorkbookView":
            case "</customWorkbookView>":
                break;
            /* 18.2.18 pivotCaches CT_PivotCaches ? */ case "<pivotCaches>":
            case "</pivotCaches>":
            case "<pivotCaches":
                break;
            /* 18.2.17 pivotCache CT_PivotCache ? */ case "<pivotCache":
                break;
            /* 18.2.21 smartTagPr CT_SmartTagPr ? */ case "<smartTagPr":
            case "<smartTagPr/>":
                break;
            /* 18.2.23 smartTagTypes CT_SmartTagTypes ? */ case "<smartTagTypes":
            case "<smartTagTypes>":
            case "</smartTagTypes>":
                break;
            /* 18.2.22 smartTagType CT_SmartTagType ? */ case "<smartTagType":
                break;
            /* 18.2.24 webPublishing CT_WebPublishing ? */ case "<webPublishing":
            case "<webPublishing/>":
                break;
            /* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */ case "<fileRecoveryPr":
            case "<fileRecoveryPr/>":
                break;
            /* 18.2.26 webPublishObjects CT_WebPublishObjects ? */ case "<webPublishObjects>":
            case "<webPublishObjects":
            case "</webPublishObjects>":
                break;
            /* 18.2.25 webPublishObject CT_WebPublishObject ? */ case "<webPublishObject":
                break;
            /* 18.2.10 extLst CT_ExtensionList ? */ case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
                break;
            /* 18.2.7  ext CT_Extension + */ case "<ext":
                pass = true;
                break; //TODO: check with versions of excel
            case "</ext>":
                pass = false;
                break;
            /* Others */ case "<ArchID":
                break;
            case "<AlternateContent":
            case "<AlternateContent>":
                pass = true;
                break;
            case "</AlternateContent>":
                pass = false;
                break;
            /* TODO */ case "<revisionPtr":
                break;
            default:
                if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in workbook");
        }
        return x;
    });
    if (XMLNS_main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns);
    parse_wb_defaults(wb);
    return wb;
}
function write_wb_xml(wb /*:Workbook*/  /*::, opts:?WriteOpts*/ ) /*:string*/ {
    var o = [
        XML_HEADER
    ];
    o[o.length] = writextag("workbook", null, {
        "xmlns": XMLNS_main[0],
        //'xmlns:mx': XMLNS.mx,
        //'xmlns:s': XMLNS_main[0],
        "xmlns:r": XMLNS.r
    });
    var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0;
    /* fileVersion */ /* fileSharing */ var workbookPr /*:any*/  = {
        codeName: "ThisWorkbook"
    } /*:any*/ ;
    if (wb.Workbook && wb.Workbook.WBProps) {
        WBPropsDef.forEach(function(x) {
            /*:: if(!wb.Workbook || !wb.Workbook.WBProps) throw "unreachable"; */ if (wb.Workbook.WBProps[x[0]] == null) return;
            if (wb.Workbook.WBProps[x[0]] == x[1]) return;
            workbookPr[x[0]] = wb.Workbook.WBProps[x[0]];
        });
        /*:: if(!wb.Workbook || !wb.Workbook.WBProps) throw "unreachable"; */ if (wb.Workbook.WBProps.CodeName) {
            workbookPr.codeName = wb.Workbook.WBProps.CodeName;
            delete workbookPr.CodeName;
        }
    }
    o[o.length] = writextag("workbookPr", null, workbookPr);
    /* workbookProtection */ var sheets = wb.Workbook && wb.Workbook.Sheets || [];
    var i = 0;
    /* bookViews only written if first worksheet is hidden */ if (sheets && sheets[0] && !!sheets[0].Hidden) {
        o[o.length] = "<bookViews>";
        for(i = 0; i != wb.SheetNames.length; ++i){
            if (!sheets[i]) break;
            if (!sheets[i].Hidden) break;
        }
        if (i == wb.SheetNames.length) i = 0;
        o[o.length] = '<workbookView firstSheet="' + i + '" activeTab="' + i + '"/>';
        o[o.length] = "</bookViews>";
    }
    o[o.length] = "<sheets>";
    for(i = 0; i != wb.SheetNames.length; ++i){
        var sht = {
            name: escapexml(wb.SheetNames[i].slice(0, 31))
        } /*:any*/ ;
        sht.sheetId = "" + (i + 1);
        sht["r:id"] = "rId" + (i + 1);
        if (sheets[i]) switch(sheets[i].Hidden){
            case 1:
                sht.state = "hidden";
                break;
            case 2:
                sht.state = "veryHidden";
                break;
        }
        o[o.length] = writextag("sheet", null, sht);
    }
    o[o.length] = "</sheets>";
    /* functionGroups */ /* externalReferences */ if (write_names) {
        o[o.length] = "<definedNames>";
        if (wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function(n) {
            var d /*:any*/  = {
                name: n.Name
            };
            if (n.Comment) d.comment = n.Comment;
            if (n.Sheet != null) d.localSheetId = "" + n.Sheet;
            if (n.Hidden) d.hidden = "1";
            if (!n.Ref) return;
            o[o.length] = writextag("definedName", escapexml(n.Ref), d);
        });
        o[o.length] = "</definedNames>";
    }
    /* calcPr */ /* oleSize */ /* customWorkbookViews */ /* pivotCaches */ /* smartTagPr */ /* smartTagTypes */ /* webPublishing */ /* fileRecoveryPr */ /* webPublishObjects */ /* extLst */ if (o.length > 2) {
        o[o.length] = "</workbook>";
        o[1] = o[1].replace("/>", ">");
    }
    return o.join("");
}
/* [MS-XLSB] 2.4.304 BrtBundleSh */ function parse_BrtBundleSh(data, length /*:number*/ ) {
    var z = {};
    z.Hidden = data.read_shift(4); //hsState ST_SheetState
    z.iTabID = data.read_shift(4);
    z.strRelID = parse_RelID(data, length - 8);
    z.name = parse_XLWideString(data);
    return z;
}
function write_BrtBundleSh(data, o) {
    if (!o) o = new_buf(127);
    o.write_shift(4, data.Hidden);
    o.write_shift(4, data.iTabID);
    write_RelID(data.strRelID, o);
    write_XLWideString(data.name.slice(0, 31), o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.815 BrtWbProp */ function parse_BrtWbProp(data, length) /*:WBProps*/ {
    var o /*:WBProps*/  = {} /*:any*/ ;
    var flags = data.read_shift(4);
    o.defaultThemeVersion = data.read_shift(4);
    var strName = length > 8 ? parse_XLWideString(data) : "";
    if (strName.length > 0) o.CodeName = strName;
    o.autoCompressPictures = !!(flags & 0x10000);
    o.backupFile = !!(flags & 0x40);
    o.checkCompatibility = !!(flags & 0x1000);
    o.date1904 = !!(flags & 0x01);
    o.filterPrivacy = !!(flags & 0x08);
    o.hidePivotFieldList = !!(flags & 0x400);
    o.promptedSolutions = !!(flags & 0x10);
    o.publishItems = !!(flags & 0x800);
    o.refreshAllConnections = !!(flags & 0x40000);
    o.saveExternalLinkValues = !!(flags & 0x80);
    o.showBorderUnselectedTables = !!(flags & 0x04);
    o.showInkAnnotation = !!(flags & 0x20);
    o.showObjects = [
        "all",
        "placeholders",
        "none"
    ][flags >> 13 & 0x03];
    o.showPivotChartFilter = !!(flags & 0x8000);
    o.updateLinks = [
        "userSet",
        "never",
        "always"
    ][flags >> 8 & 0x03];
    return o;
}
function write_BrtWbProp(data /*:?WBProps*/ , o) {
    if (!o) o = new_buf(72);
    var flags = 0;
    if (data) /* TODO: mirror parse_BrtWbProp fields */ {
        if (data.filterPrivacy) flags |= 0x08;
    }
    o.write_shift(4, flags);
    o.write_shift(4, 0);
    write_XLSBCodeName(data && data.CodeName || "ThisWorkbook", o);
    return o.slice(0, o.l);
}
function parse_BrtFRTArchID$(data, length) {
    var o = {};
    data.read_shift(4);
    o.ArchID = data.read_shift(4);
    data.l += length - 8;
    return o;
}
/* [MS-XLSB] 2.4.687 BrtName */ function parse_BrtName(data, length, opts) {
    var end = data.l + length;
    data.l += 4; //var flags = data.read_shift(4);
    data.l += 1; //var chKey = data.read_shift(1);
    var itab = data.read_shift(4);
    var name = parse_XLNameWideString(data);
    var formula = parse_XLSBNameParsedFormula(data, 0, opts);
    var comment = parse_XLNullableWideString(data);
    //if(0 /* fProc */) {
    // unusedstring1: XLNullableWideString
    // description: XLNullableWideString
    // helpTopic: XLNullableWideString
    // unusedstring2: XLNullableWideString
    //}
    data.l = end;
    var out = {
        Name: name,
        Ptg: formula
    } /*:any*/ ;
    if (itab < 0xFFFFFFF) out.Sheet = itab;
    if (comment) out.Comment = comment;
    return out;
}
/* [MS-XLSB] 2.1.7.61 Workbook */ function parse_wb_bin(data, opts) /*:WorkbookFile*/ {
    var wb = {
        AppVersion: {},
        WBProps: {},
        WBView: [],
        Sheets: [],
        CalcPr: {},
        xmlns: ""
    };
    var state /*:Array<string>*/  = [];
    var pass = false;
    if (!opts) opts = {};
    opts.biff = 12;
    var Names = [];
    var supbooks = [
        []
    ];
    supbooks.SheetNames = [];
    supbooks.XTI = [];
    XLSBRecordEnum[0x0010] = {
        n: "BrtFRTArchID$",
        f: parse_BrtFRTArchID$
    };
    recordhopper(data, function hopper_wb(val, R, RT) {
        switch(RT){
            case 0x009C:
                /* 'BrtBundleSh' */ supbooks.SheetNames.push(val.name);
                wb.Sheets.push(val);
                break;
            case 0x0099:
                /* 'BrtWbProp' */ wb.WBProps = val;
                break;
            case 0x0027:
                /* 'BrtName' */ if (val.Sheet != null) opts.SID = val.Sheet;
                val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
                delete opts.SID;
                delete val.Ptg;
                Names.push(val);
                break;
            case 0x040C:
                break;
            case 0x0165:
            /* 'BrtSupSelf' */ case 0x0166:
            /* 'BrtSupSame' */ case 0x0163:
            /* 'BrtSupBookSrc' */ case 0x029B:
                /* 'BrtSupAddin' */ if (!supbooks[0].length) supbooks[0] = [
                    RT,
                    val
                ];
                else supbooks.push([
                    RT,
                    val
                ]);
                supbooks[supbooks.length - 1].XTI = [];
                break;
            case 0x016A:
                /* 'BrtExternSheet' */ if (supbooks.length === 0) {
                    supbooks[0] = [];
                    supbooks[0].XTI = [];
                }
                supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
                supbooks.XTI = supbooks.XTI.concat(val);
                break;
            case 0x0169:
                break;
            case 0x0817:
            /* 'BrtAbsPath15' */ case 0x009E:
            /* 'BrtBookView' */ case 0x008F:
            /* 'BrtBeginBundleShs' */ case 0x0298:
            /* 'BrtBeginFnGroup' */ case 0x0161:
                break;
            /* case 'BrtModelTimeGroupingCalcCol' */ case 0x0C00:
            /* 'BrtUid' */ case 0x0C01:
            /* 'BrtRevisionPtr' */ case 0x0216:
            /* 'BrtBookProtection' */ case 0x02A5:
            /* 'BrtBookProtectionIso' */ case 0x009D:
            /* 'BrtCalcProp' */ case 0x0262:
            /* 'BrtCrashRecErr' */ case 0x0802:
            /* 'BrtDecoupledPivotCacheID' */ case 0x009B:
            /* 'BrtFileRecover' */ case 0x0224:
            /* 'BrtFileSharing' */ case 0x02A4:
            /* 'BrtFileSharingIso' */ case 0x0080:
            /* 'BrtFileVersion' */ case 0x0299:
            /* 'BrtFnGroup' */ case 0x0850:
            /* 'BrtModelRelationship' */ case 0x084D:
            /* 'BrtModelTable' */ case 0x0225:
            /* 'BrtOleSize' */ case 0x0805:
            /* 'BrtPivotTableRef' */ case 0x0254:
            /* 'BrtSmartTagType' */ case 0x081C:
            /* 'BrtTableSlicerCacheID' */ case 0x081B:
            /* 'BrtTableSlicerCacheIDs' */ case 0x0822:
            /* 'BrtTimelineCachePivotCacheID' */ case 0x018D:
            /* 'BrtUserBookView' */ case 0x009A:
            /* 'BrtWbFactoid' */ case 0x045D:
            /* 'BrtWbProp14' */ case 0x0229:
            /* 'BrtWebOpt' */ case 0x082B:
                break;
            case 0x0023:
                /* 'BrtFRTBegin' */ state.push(RT);
                pass = true;
                break;
            case 0x0024:
                /* 'BrtFRTEnd' */ state.pop();
                pass = false;
                break;
            case 0x0025:
                /* 'BrtACBegin' */ state.push(RT);
                pass = true;
                break;
            case 0x0026:
                /* 'BrtACEnd' */ state.pop();
                pass = false;
                break;
            case 0x0010:
                break;
            default:
                if (R.T) ;
                else if (!pass || opts.WTF && state[state.length - 1] != 0x0025 /* BrtACBegin */  && state[state.length - 1] != 0x0023 /* BrtFRTBegin */ ) throw new Error("Unexpected record 0x" + RT.toString(16));
        }
    }, opts);
    parse_wb_defaults(wb);
    // $FlowIgnore
    wb.Names = Names;
    wb /*:any*/ .supbooks = supbooks;
    return wb;
}
function write_BUNDLESHS(ba, wb /*::, opts*/ ) {
    write_record(ba, 0x008F /* BrtBeginBundleShs */ );
    for(var idx = 0; idx != wb.SheetNames.length; ++idx){
        var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;
        var d = {
            Hidden: viz,
            iTabID: idx + 1,
            strRelID: "rId" + (idx + 1),
            name: wb.SheetNames[idx]
        };
        write_record(ba, 0x009C /* BrtBundleSh */ , write_BrtBundleSh(d));
    }
    write_record(ba, 0x0090 /* BrtEndBundleShs */ );
}
/* [MS-XLSB] 2.4.649 BrtFileVersion */ function write_BrtFileVersion(data, o) {
    if (!o) o = new_buf(127);
    for(var i = 0; i != 4; ++i)o.write_shift(4, 0);
    write_XLWideString("SheetJS", o);
    write_XLWideString(XLSX.version, o);
    write_XLWideString(XLSX.version, o);
    write_XLWideString("7262", o);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
/* [MS-XLSB] 2.4.301 BrtBookView */ function write_BrtBookView(idx, o) {
    if (!o) o = new_buf(29);
    o.write_shift(-4, 0);
    o.write_shift(-4, 460);
    o.write_shift(4, 28800);
    o.write_shift(4, 17600);
    o.write_shift(4, 500);
    o.write_shift(4, idx);
    o.write_shift(4, idx);
    var flags = 0x78;
    o.write_shift(1, flags);
    return o.length > o.l ? o.slice(0, o.l) : o;
}
function write_BOOKVIEWS(ba, wb /*::, opts*/ ) {
    /* required if hidden tab appears before visible tab */ if (!wb.Workbook || !wb.Workbook.Sheets) return;
    var sheets = wb.Workbook.Sheets;
    var i = 0, vistab = -1, hidden = -1;
    for(; i < sheets.length; ++i){
        if (!sheets[i] || !sheets[i].Hidden && vistab == -1) vistab = i;
        else if (sheets[i].Hidden == 1 && hidden == -1) hidden = i;
    }
    if (hidden > vistab) return;
    write_record(ba, 0x0087 /* BrtBeginBookViews */ );
    write_record(ba, 0x009E /* BrtBookView */ , write_BrtBookView(vistab));
    /* 1*(BrtBookView *FRT) */ write_record(ba, 0x0088 /* BrtEndBookViews */ );
}
/* [MS-XLSB] 2.4.305 BrtCalcProp */ /*function write_BrtCalcProp(data, o) {
	if(!o) o = new_buf(26);
	o.write_shift(4,0); // force recalc
	o.write_shift(4,1);
	o.write_shift(4,0);
	write_Xnum(0, o);
	o.write_shift(-4, 1023);
	o.write_shift(1, 0x33);
	o.write_shift(1, 0x00);
	return o;
}*/ /* [MS-XLSB] 2.4.646 BrtFileRecover */ /*function write_BrtFileRecover(data, o) {
	if(!o) o = new_buf(1);
	o.write_shift(1,0);
	return o;
}*/ /* [MS-XLSB] 2.1.7.61 Workbook */ function write_wb_bin(wb, opts) {
    var ba = buf_array();
    write_record(ba, 0x0083 /* BrtBeginBook */ );
    write_record(ba, 0x0080 /* BrtFileVersion */ , write_BrtFileVersion());
    /* [[BrtFileSharingIso] BrtFileSharing] */ write_record(ba, 0x0099 /* BrtWbProp */ , write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));
    /* [ACABSPATH] */ /* [[BrtBookProtectionIso] BrtBookProtection] */ write_BOOKVIEWS(ba, wb, opts);
    write_BUNDLESHS(ba, wb, opts);
    /* [FNGROUP] */ /* [EXTERNALS] */ /* *BrtName */ /* write_record(ba, 0x009D BrtCalcProp, write_BrtCalcProp()); */ /* [BrtOleSize] */ /* *(BrtUserBookView *FRT) */ /* [PIVOTCACHEIDS] */ /* [BrtWbFactoid] */ /* [SMARTTAGTYPES] */ /* [BrtWebOpt] */ /* write_record(ba, 0x009B BrtFileRecover, write_BrtFileRecover()); */ /* [WEBPUBITEMS] */ /* [CRERRS] */ /* FRTWORKBOOK */ write_record(ba, 0x0084 /* BrtEndBook */ );
    return ba.end();
}
function parse_wb(data, name /*:string*/ , opts) /*:WorkbookFile*/ {
    if (name.slice(-4) === ".bin") return parse_wb_bin(data /*:any*/ , opts);
    return parse_wb_xml(data /*:any*/ , opts);
}
function parse_ws(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {
    if (name.slice(-4) === ".bin") return parse_ws_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);
    return parse_ws_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);
}
function parse_cs(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {
    if (name.slice(-4) === ".bin") return parse_cs_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);
    return parse_cs_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);
}
function parse_ms(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {
    if (name.slice(-4) === ".bin") return parse_ms_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);
    return parse_ms_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);
}
function parse_ds(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {
    if (name.slice(-4) === ".bin") return parse_ds_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);
    return parse_ds_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);
}
function parse_sty(data, name /*:string*/ , themes, opts) {
    if (name.slice(-4) === ".bin") return parse_sty_bin(data /*:any*/ , themes, opts);
    return parse_sty_xml(data /*:any*/ , themes, opts);
}
function parse_theme(data /*:string*/ , name /*:string*/ , opts) {
    return parse_theme_xml(data, opts);
}
function parse_sst(data, name /*:string*/ , opts) /*:SST*/ {
    if (name.slice(-4) === ".bin") return parse_sst_bin(data /*:any*/ , opts);
    return parse_sst_xml(data /*:any*/ , opts);
}
function parse_cmnt(data, name /*:string*/ , opts) /*:Array<RawComment>*/ {
    if (name.slice(-4) === ".bin") return parse_comments_bin(data /*:any*/ , opts);
    return parse_comments_xml(data /*:any*/ , opts);
}
function parse_cc(data, name /*:string*/ , opts) {
    if (name.slice(-4) === ".bin") return parse_cc_bin(data /*:any*/ , name, opts);
    return parse_cc_xml(data /*:any*/ , name, opts);
}
function parse_xlink(data, rel, name /*:string*/ , opts) {
    if (name.slice(-4) === ".bin") return parse_xlink_bin(data /*:any*/ , rel, name, opts);
    return parse_xlink_xml(data /*:any*/ , rel, name, opts);
}
function parse_xlmeta(data, name /*:string*/ , opts) {
    if (name.slice(-4) === ".bin") return parse_xlmeta_bin(data /*:any*/ , name, opts);
    return parse_xlmeta_xml(data /*:any*/ , name, opts);
}
function write_wb(wb, name /*:string*/ , opts) {
    return (name.slice(-4) === ".bin" ? write_wb_bin : write_wb_xml)(wb, opts);
}
function write_ws(data /*:number*/ , name /*:string*/ , opts, wb /*:Workbook*/ , rels) {
    return (name.slice(-4) === ".bin" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels);
}
// eslint-disable-next-line no-unused-vars
function write_cs(data /*:number*/ , name /*:string*/ , opts, wb /*:Workbook*/ , rels) {
    return (name.slice(-4) === ".bin" ? write_cs_bin : write_cs_xml)(data, opts, wb, rels);
}
function write_sty(data, name /*:string*/ , opts) {
    return (name.slice(-4) === ".bin" ? write_sty_bin : write_sty_xml)(data, opts);
}
function write_sst(data /*:SST*/ , name /*:string*/ , opts) {
    return (name.slice(-4) === ".bin" ? write_sst_bin : write_sst_xml)(data, opts);
}
function write_cmnt(data /*:Array<any>*/ , name /*:string*/ , opts) {
    return (name.slice(-4) === ".bin" ? write_comments_bin : write_comments_xml)(data, opts);
}
/*
function write_cc(data, name:string, opts) {
	return (name.slice(-4)===".bin" ? write_cc_bin : write_cc_xml)(data, opts);
}
*/ function write_xlmeta(name /*:string*/ ) {
    return (name.slice(-4) === ".bin" ? write_xlmeta_bin : write_xlmeta_xml)();
}
var attregexg2 = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
var attregex2 = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
function xlml_parsexmltag(tag /*:string*/ , skip_root /*:?boolean*/ ) {
    var words = tag.split(/\s+/);
    var z /*:any*/  = [];
    if (!skip_root) z[0] = words[0];
    if (words.length === 1) return z;
    var m = tag.match(attregexg2), y, j, w, i;
    if (m) for(i = 0; i != m.length; ++i){
        y = m[i].match(attregex2);
        /*:: if(!y || !y[2]) continue; */ if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);
        else {
            if (y[1].slice(0, 6) === "xmlns:") w = "xmlns" + y[1].slice(6);
            else w = y[1].slice(j + 1);
            z[w] = y[2].slice(1, y[2].length - 1);
        }
    }
    return z;
}
function xlml_parsexmltagobj(tag /*:string*/ ) {
    var words = tag.split(/\s+/);
    var z = {};
    if (words.length === 1) return z;
    var m = tag.match(attregexg2), y, j, w, i;
    if (m) for(i = 0; i != m.length; ++i){
        y = m[i].match(attregex2);
        /*:: if(!y || !y[2]) continue; */ if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);
        else {
            if (y[1].slice(0, 6) === "xmlns:") w = "xmlns" + y[1].slice(6);
            else w = y[1].slice(j + 1);
            z[w] = y[2].slice(1, y[2].length - 1);
        }
    }
    return z;
}
// ----
/* map from xlml named formats to SSF TODO: localize */ var XLMLFormatMap /*: {[string]:string}*/ ;
function xlml_format(format, value) /*:string*/ {
    var fmt = XLMLFormatMap[format] || unescapexml(format);
    if (fmt === "General") return SSF_general(value);
    return SSF_format(fmt, value);
}
function xlml_set_custprop(Custprops, key, cp, val /*:string*/ ) {
    var oval /*:any*/  = val;
    switch((cp[0].match(/dt:dt="([\w.]+)"/) || [
        "",
        ""
    ])[1]){
        case "boolean":
            oval = parsexmlbool(val);
            break;
        case "i2":
        case "int":
            oval = parseInt(val, 10);
            break;
        case "r4":
        case "float":
            oval = parseFloat(val);
            break;
        case "date":
        case "dateTime.tz":
            oval = parseDate(val);
            break;
        case "i8":
        case "string":
        case "fixed":
        case "uuid":
        case "bin.base64":
            break;
        default:
            throw new Error("bad custprop:" + cp[0]);
    }
    Custprops[unescapexml(key)] = oval;
}
function safe_format_xlml(cell /*:Cell*/ , nf, o) {
    if (cell.t === "z") return;
    if (!o || o.cellText !== false) try {
        if (cell.t === "e") cell.w = cell.w || BErr[cell.v];
        else if (nf === "General") {
            if (cell.t === "n") {
                if ((cell.v | 0) === cell.v) cell.w = cell.v.toString(10);
                else cell.w = SSF_general_num(cell.v);
            } else cell.w = SSF_general(cell.v);
        } else cell.w = xlml_format(nf || "General", cell.v);
    } catch (e) {
        if (o.WTF) throw e;
    }
    try {
        var z = XLMLFormatMap[nf] || nf || "General";
        if (o.cellNF) cell.z = z;
        if (o.cellDates && cell.t == "n" && fmt_is_date(z)) {
            var _d = SSF_parse_date_code(cell.v);
            if (_d) {
                cell.t = "d";
                cell.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
            }
        }
    } catch (e) {
        if (o.WTF) throw e;
    }
}
function process_style_xlml(styles, stag, opts) {
    if (opts.cellStyles) {
        if (stag.Interior) {
            var I = stag.Interior;
            if (I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
        }
    }
    styles[stag.ID] = stag;
}
/* TODO: there must exist some form of OSP-blessed spec */ function parse_xlml_data(xml, ss, data, cell /*:any*/ , base, styles, csty, row, arrayf, o) {
    var nf = "General", sid = cell.StyleID, S = {};
    o = o || {};
    var interiors = [];
    var i = 0;
    if (sid === undefined && row) sid = row.StyleID;
    if (sid === undefined && csty) sid = csty.StyleID;
    while(styles[sid] !== undefined){
        if (styles[sid].nf) nf = styles[sid].nf;
        if (styles[sid].Interior) interiors.push(styles[sid].Interior);
        if (!styles[sid].Parent) break;
        sid = styles[sid].Parent;
    }
    switch(data.Type){
        case "Boolean":
            cell.t = "b";
            cell.v = parsexmlbool(xml);
            break;
        case "String":
            cell.t = "s";
            cell.r = xlml_fixstr(unescapexml(xml));
            cell.v = xml.indexOf("<") > -1 ? unescapexml(ss || xml).replace(/<.*?>/g, "") : cell.r; // todo: BR etc
            break;
        case "DateTime":
            if (xml.slice(-1) != "Z") xml += "Z";
            cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / 86400000;
            if (cell.v !== cell.v) cell.v = unescapexml(xml);
            else if (cell.v < 60) cell.v = cell.v - 1;
            if (!nf || nf == "General") nf = "yyyy-mm-dd";
        /* falls through */ case "Number":
            if (cell.v === undefined) cell.v = +xml;
            if (!cell.t) cell.t = "n";
            break;
        case "Error":
            cell.t = "e";
            cell.v = RBErr[xml];
            if (o.cellText !== false) cell.w = xml;
            break;
        default:
            if (xml == "" && ss == "") cell.t = "z";
            else {
                cell.t = "s";
                cell.v = xlml_fixstr(ss || xml);
            }
            break;
    }
    safe_format_xlml(cell, nf, o);
    if (o.cellFormula !== false) {
        if (cell.Formula) {
            var fstr = unescapexml(cell.Formula);
            /* strictly speaking, the leading = is required but some writers omit */ if (fstr.charCodeAt(0) == 61 /* = */ ) fstr = fstr.slice(1);
            cell.f = rc_to_a1(fstr, base);
            delete cell.Formula;
            if (cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base);
            else if (cell.ArrayRange) {
                cell.F = rc_to_a1(cell.ArrayRange, base);
                arrayf.push([
                    safe_decode_range(cell.F),
                    cell.F
                ]);
            }
        } else {
            for(i = 0; i < arrayf.length; ++i)if (base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r) {
                if (base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c) cell.F = arrayf[i][1];
            }
        }
    }
    if (o.cellStyles) {
        interiors.forEach(function(x) {
            if (!S.patternType && x.patternType) S.patternType = x.patternType;
        });
        cell.s = S;
    }
    if (cell.StyleID !== undefined) cell.ixfe = cell.StyleID;
}
function xlml_clean_comment(comment /*:any*/ ) {
    comment.t = comment.v || "";
    comment.t = comment.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
    comment.v = comment.w = comment.ixfe = undefined;
}
/* TODO: Everything */ function parse_xlml_xml(d, _opts) /*:Workbook*/ {
    var opts = _opts || {};
    make_ssf();
    var str = debom(xlml_normalize(d));
    if (opts.type == "binary" || opts.type == "array" || opts.type == "base64") {
        if (typeof $cptable !== "undefined") str = $cptable.utils.decode(65001, char_codes(str));
        else str = utf8read(str);
    }
    var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
    opening = opening.replace(/".*?"/g, "");
    if ((opening.indexOf(">") & 1023) > Math.min(opening.indexOf(",") & 1023, opening.indexOf(";") & 1023)) {
        var _o = dup(opts);
        _o.type = "string";
        return PRN.to_workbook(str, _o);
    }
    if (opening.indexOf("<?xml") == -1) [
        "html",
        "table",
        "head",
        "meta",
        "script",
        "style",
        "div"
    ].forEach(function(tag) {
        if (opening.indexOf("<" + tag) >= 0) ishtml = true;
    });
    if (ishtml) return html_to_workbook(str, opts);
    XLMLFormatMap = {
        "General Number": "General",
        "General Date": table_fmt[22],
        "Long Date": "dddd, mmmm dd, yyyy",
        "Medium Date": table_fmt[15],
        "Short Date": table_fmt[14],
        "Long Time": table_fmt[19],
        "Medium Time": table_fmt[18],
        "Short Time": table_fmt[20],
        "Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        "Fixed": table_fmt[2],
        "Standard": table_fmt[4],
        "Percent": table_fmt[10],
        "Scientific": table_fmt[11],
        "Yes/No": '"Yes";"Yes";"No";@',
        "True/False": '"True";"True";"False";@',
        "On/Off": '"Yes";"Yes";"No";@'
    } /*:any*/ ;
    var Rn;
    var state = [], tmp;
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    var sheets = {}, sheetnames /*:Array<string>*/  = [], cursheet /*:Worksheet*/  = opts.dense ? [] : {}, sheetname = "";
    var cell = {} /*:any*/ , row = {}; // eslint-disable-line no-unused-vars
    var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
    var c = 0, r = 0;
    var refguess /*:Range*/  = {
        s: {
            r: 2000000,
            c: 2000000
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var styles = {}, stag = {};
    var ss = "", fidx = 0;
    var merges /*:Array<Range>*/  = [];
    var Props = {}, Custprops = {}, pidx = 0, cp = [];
    var comments /*:Array<Comment>*/  = [], comment /*:Comment*/  = {} /*:any*/ ;
    var cstys = [], csty, seencol = false;
    var arrayf /*:Array<[Range, string]>*/  = [];
    var rowinfo /*:Array<RowInfo>*/  = [], rowobj = {}, cc = 0, rr = 0;
    var Workbook /*:WBWBProps*/  = {
        Sheets: [],
        WBProps: {
            date1904: false
        }
    } /*:any*/ , wsprops = {};
    xlmlregex.lastIndex = 0;
    str = str.replace(/<!--([\s\S]*?)-->/mg, "");
    var raw_Rn3 = "";
    while(Rn = xlmlregex.exec(str))switch(Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase()){
        case "data" /*case 'Data'*/ :
            if (raw_Rn3 == "data") {
                if (Rn[1] === "/") {
                    if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
                } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                    Rn[3],
                    true
                ]);
                break;
            }
            if (state[state.length - 1][1]) break;
            if (Rn[1] === "/") parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] == /*"Comment"*/ "comment" ? comment : cell, {
                c: c,
                r: r
            }, styles, cstys[c], row, arrayf, opts);
            else {
                ss = "";
                dtag = xlml_parsexmltag(Rn[0]);
                didx = Rn.index + Rn[0].length;
            }
            break;
        case "cell" /*case 'Cell'*/ :
            if (Rn[1] === "/") {
                if (comments.length > 0) cell.c = comments;
                if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) {
                    if (opts.dense) {
                        if (!cursheet[r]) cursheet[r] = [];
                        cursheet[r][c] = cell;
                    } else cursheet[encode_col(c) + encode_row(r)] = cell;
                }
                if (cell.HRef) {
                    cell.l = {
                        Target: unescapexml(cell.HRef)
                    } /*:any*/ ;
                    if (cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;
                    delete cell.HRef;
                    delete cell.HRefScreenTip;
                }
                if (cell.MergeAcross || cell.MergeDown) {
                    cc = c + (parseInt(cell.MergeAcross, 10) | 0);
                    rr = r + (parseInt(cell.MergeDown, 10) | 0);
                    merges.push({
                        s: {
                            c: c,
                            r: r
                        },
                        e: {
                            c: cc,
                            r: rr
                        }
                    });
                }
                if (!opts.sheetStubs) {
                    if (cell.MergeAcross) c = cc + 1;
                    else ++c;
                } else if (cell.MergeAcross || cell.MergeDown) {
                    /*:: if(!cc) cc = 0; if(!rr) rr = 0; */ for(var cma = c; cma <= cc; ++cma){
                        for(var cmd = r; cmd <= rr; ++cmd)if (cma > c || cmd > r) {
                            if (opts.dense) {
                                if (!cursheet[cmd]) cursheet[cmd] = [];
                                cursheet[cmd][cma] = {
                                    t: "z"
                                };
                            } else cursheet[encode_col(cma) + encode_row(cmd)] = {
                                t: "z"
                            };
                        }
                    }
                    c = cc + 1;
                } else ++c;
            } else {
                cell = xlml_parsexmltagobj(Rn[0]);
                if (cell.Index) c = +cell.Index - 1;
                if (c < refguess.s.c) refguess.s.c = c;
                if (c > refguess.e.c) refguess.e.c = c;
                if (Rn[0].slice(-2) === "/>") ++c;
                comments = [];
            }
            break;
        case "row" /*case 'Row'*/ :
            if (Rn[1] === "/" || Rn[0].slice(-2) === "/>") {
                if (r < refguess.s.r) refguess.s.r = r;
                if (r > refguess.e.r) refguess.e.r = r;
                if (Rn[0].slice(-2) === "/>") {
                    row = xlml_parsexmltag(Rn[0]);
                    if (row.Index) r = +row.Index - 1;
                }
                c = 0;
                ++r;
            } else {
                row = xlml_parsexmltag(Rn[0]);
                if (row.Index) r = +row.Index - 1;
                rowobj = {};
                if (row.AutoFitHeight == "0" || row.Height) {
                    rowobj.hpx = parseInt(row.Height, 10);
                    rowobj.hpt = px2pt(rowobj.hpx);
                    rowinfo[r] = rowobj;
                }
                if (row.Hidden == "1") {
                    rowobj.hidden = true;
                    rowinfo[r] = rowobj;
                }
            }
            break;
        case "worksheet" /*case 'Worksheet'*/ :
            /* TODO: read range from FullRows/FullColumns */ if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
                sheetnames.push(sheetname);
                if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
                    cursheet["!ref"] = encode_range(refguess);
                    if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {
                        cursheet["!fullref"] = cursheet["!ref"];
                        refguess.e.r = opts.sheetRows - 1;
                        cursheet["!ref"] = encode_range(refguess);
                    }
                }
                if (merges.length) cursheet["!merges"] = merges;
                if (cstys.length > 0) cursheet["!cols"] = cstys;
                if (rowinfo.length > 0) cursheet["!rows"] = rowinfo;
                sheets[sheetname] = cursheet;
            } else {
                refguess = {
                    s: {
                        r: 2000000,
                        c: 2000000
                    },
                    e: {
                        r: 0,
                        c: 0
                    }
                };
                r = c = 0;
                state.push([
                    Rn[3],
                    false
                ]);
                tmp = xlml_parsexmltag(Rn[0]);
                sheetname = unescapexml(tmp.Name);
                cursheet = opts.dense ? [] : {};
                merges = [];
                arrayf = [];
                rowinfo = [];
                wsprops = {
                    name: sheetname,
                    Hidden: 0
                };
                Workbook.Sheets.push(wsprops);
            }
            break;
        case "table" /*case 'Table'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].slice(-2) == "/>") break;
            else {
                state.push([
                    Rn[3],
                    false
                ]);
                cstys = [];
                seencol = false;
            }
            break;
        case "style" /*case 'Style'*/ :
            if (Rn[1] === "/") process_style_xlml(styles, stag, opts);
            else stag = xlml_parsexmltag(Rn[0]);
            break;
        case "numberformat" /*case 'NumberFormat'*/ :
            stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
            if (XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];
            for(var ssfidx = 0; ssfidx != 0x188; ++ssfidx)if (table_fmt[ssfidx] == stag.nf) break;
            if (ssfidx == 0x188) {
                for(ssfidx = 0x39; ssfidx != 0x188; ++ssfidx)if (table_fmt[ssfidx] == null) {
                    SSF_load(stag.nf, ssfidx);
                    break;
                }
            }
            break;
        case "column" /*case 'Column'*/ :
            if (state[state.length - 1][0] !== /*'Table'*/ "table") break;
            csty = xlml_parsexmltag(Rn[0]);
            if (csty.Hidden) {
                csty.hidden = true;
                delete csty.Hidden;
            }
            if (csty.Width) csty.wpx = parseInt(csty.Width, 10);
            if (!seencol && csty.wpx > 10) {
                seencol = true;
                MDW = DEF_MDW; //find_mdw_wpx(csty.wpx);
                for(var _col = 0; _col < cstys.length; ++_col)if (cstys[_col]) process_col(cstys[_col]);
            }
            if (seencol) process_col(csty);
            cstys[csty.Index - 1 || cstys.length] = csty;
            for(var i = 0; i < +csty.Span; ++i)cstys[cstys.length] = dup(csty);
            break;
        case "namedrange" /*case 'NamedRange'*/ :
            if (Rn[1] === "/") break;
            if (!Workbook.Names) Workbook.Names = [];
            var _NamedRange = parsexmltag(Rn[0]);
            var _DefinedName /*:DefinedName*/  = {
                Name: _NamedRange.Name,
                Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), {
                    r: 0,
                    c: 0
                })
            } /*:any*/ ;
            if (Workbook.Sheets.length > 0) _DefinedName.Sheet = Workbook.Sheets.length - 1;
            /*:: if(Workbook.Names) */ Workbook.Names.push(_DefinedName);
            break;
        case "namedcell" /*case 'NamedCell'*/ :
            break;
        case "b" /*case 'B'*/ :
            break;
        case "i" /*case 'I'*/ :
            break;
        case "u" /*case 'U'*/ :
            break;
        case "s" /*case 'S'*/ :
            break;
        case "em" /*case 'EM'*/ :
            break;
        case "h2" /*case 'H2'*/ :
            break;
        case "h3" /*case 'H3'*/ :
            break;
        case "sub" /*case 'Sub'*/ :
            break;
        case "sup" /*case 'Sup'*/ :
            break;
        case "span" /*case 'Span'*/ :
            break;
        case "alignment" /*case 'Alignment'*/ :
            break;
        case "borders" /*case 'Borders'*/ :
            break;
        case "border" /*case 'Border'*/ :
            break;
        case "font" /*case 'Font'*/ :
            if (Rn[0].slice(-2) === "/>") break;
            else if (Rn[1] === "/") ss += str.slice(fidx, Rn.index);
            else fidx = Rn.index + Rn[0].length;
            break;
        case "interior" /*case 'Interior'*/ :
            if (!opts.cellStyles) break;
            stag.Interior = xlml_parsexmltag(Rn[0]);
            break;
        case "protection" /*case 'Protection'*/ :
            break;
        case "author" /*case 'Author'*/ :
        case "title" /*case 'Title'*/ :
        case "description" /*case 'Description'*/ :
        case "created" /*case 'Created'*/ :
        case "keywords" /*case 'Keywords'*/ :
        case "subject" /*case 'Subject'*/ :
        case "category" /*case 'Category'*/ :
        case "company" /*case 'Company'*/ :
        case "lastauthor" /*case 'LastAuthor'*/ :
        case "lastsaved" /*case 'LastSaved'*/ :
        case "lastprinted" /*case 'LastPrinted'*/ :
        case "version" /*case 'Version'*/ :
        case "revision" /*case 'Revision'*/ :
        case "totaltime" /*case 'TotalTime'*/ :
        case "hyperlinkbase" /*case 'HyperlinkBase'*/ :
        case "manager" /*case 'Manager'*/ :
        case "contentstatus" /*case 'ContentStatus'*/ :
        case "identifier" /*case 'Identifier'*/ :
        case "language" /*case 'Language'*/ :
        case "appname" /*case 'AppName'*/ :
            if (Rn[0].slice(-2) === "/>") break;
            else if (Rn[1] === "/") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));
            else pidx = Rn.index + Rn[0].length;
            break;
        case "paragraphs" /*case 'Paragraphs'*/ :
            break;
        case "styles" /*case 'Styles'*/ :
        case "workbook" /*case 'Workbook'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else state.push([
                Rn[3],
                false
            ]);
            break;
        case "comment" /*case 'Comment'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
                xlml_clean_comment(comment);
                comments.push(comment);
            } else {
                state.push([
                    Rn[3],
                    false
                ]);
                tmp = xlml_parsexmltag(Rn[0]);
                comment = {
                    a: tmp.Author
                } /*:any*/ ;
            }
            break;
        case "autofilter" /*case 'AutoFilter'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                var AutoFilter = xlml_parsexmltag(Rn[0]);
                cursheet["!autofilter"] = {
                    ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, "")
                };
                state.push([
                    Rn[3],
                    true
                ]);
            }
            break;
        case "name" /*case 'Name'*/ :
            break;
        case "datavalidation" /*case 'DataValidation'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                Rn[3],
                true
            ]);
            break;
        case "pixelsperinch" /*case 'PixelsPerInch'*/ :
            break;
        case "componentoptions" /*case 'ComponentOptions'*/ :
        case "documentproperties" /*case 'DocumentProperties'*/ :
        case "customdocumentproperties" /*case 'CustomDocumentProperties'*/ :
        case "officedocumentsettings" /*case 'OfficeDocumentSettings'*/ :
        case "pivottable" /*case 'PivotTable'*/ :
        case "pivotcache" /*case 'PivotCache'*/ :
        case "names" /*case 'Names'*/ :
        case "mapinfo" /*case 'MapInfo'*/ :
        case "pagebreaks" /*case 'PageBreaks'*/ :
        case "querytable" /*case 'QueryTable'*/ :
        case "sorting" /*case 'Sorting'*/ :
        case "schema" /*case 'Schema'*/ :
        case "conditionalformatting" /*case 'ConditionalFormatting'*/ :
        case "smarttagtype" /*case 'SmartTagType'*/ :
        case "smarttags" /*case 'SmartTags'*/ :
        case "excelworkbook" /*case 'ExcelWorkbook'*/ :
        case "workbookoptions" /*case 'WorkbookOptions'*/ :
        case "worksheetoptions" /*case 'WorksheetOptions'*/ :
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                Rn[3],
                true
            ]);
            break;
        case "null" /*case 'Null'*/ :
            break;
        default:
            /* FODS file root is <office:document> */ if (state.length == 0 && Rn[3] == "document") return parse_fods(str, opts);
            /* UOS file root is <uof:UOF> */ if (state.length == 0 && Rn[3] == "uof" /*"UOF"*/ ) return parse_fods(str, opts);
            var seen = true;
            switch(state[state.length - 1][0]){
                /* OfficeDocumentSettings */ case "officedocumentsettings" /*case 'OfficeDocumentSettings'*/ :
                    switch(Rn[3]){
                        case "allowpng" /*case 'AllowPNG'*/ :
                            break;
                        case "removepersonalinformation" /*case 'RemovePersonalInformation'*/ :
                            break;
                        case "downloadcomponents" /*case 'DownloadComponents'*/ :
                            break;
                        case "locationofcomponents" /*case 'LocationOfComponents'*/ :
                            break;
                        case "colors" /*case 'Colors'*/ :
                            break;
                        case "color" /*case 'Color'*/ :
                            break;
                        case "index" /*case 'Index'*/ :
                            break;
                        case "rgb" /*case 'RGB'*/ :
                            break;
                        case "targetscreensize" /*case 'TargetScreenSize'*/ :
                            break;
                        case "readonlyrecommended" /*case 'ReadOnlyRecommended'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* ComponentOptions */ case "componentoptions" /*case 'ComponentOptions'*/ :
                    switch(Rn[3]){
                        case "toolbar" /*case 'Toolbar'*/ :
                            break;
                        case "hideofficelogo" /*case 'HideOfficeLogo'*/ :
                            break;
                        case "spreadsheetautofit" /*case 'SpreadsheetAutoFit'*/ :
                            break;
                        case "label" /*case 'Label'*/ :
                            break;
                        case "caption" /*case 'Caption'*/ :
                            break;
                        case "maxheight" /*case 'MaxHeight'*/ :
                            break;
                        case "maxwidth" /*case 'MaxWidth'*/ :
                            break;
                        case "nextsheetnumber" /*case 'NextSheetNumber'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* ExcelWorkbook */ case "excelworkbook" /*case 'ExcelWorkbook'*/ :
                    switch(Rn[3]){
                        case "date1904" /*case 'Date1904'*/ :
                            /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */ Workbook.WBProps.date1904 = true;
                            break;
                        case "windowheight" /*case 'WindowHeight'*/ :
                            break;
                        case "windowwidth" /*case 'WindowWidth'*/ :
                            break;
                        case "windowtopx" /*case 'WindowTopX'*/ :
                            break;
                        case "windowtopy" /*case 'WindowTopY'*/ :
                            break;
                        case "tabratio" /*case 'TabRatio'*/ :
                            break;
                        case "protectstructure" /*case 'ProtectStructure'*/ :
                            break;
                        case "protectwindow" /*case 'ProtectWindow'*/ :
                            break;
                        case "protectwindows" /*case 'ProtectWindows'*/ :
                            break;
                        case "activesheet" /*case 'ActiveSheet'*/ :
                            break;
                        case "displayinknotes" /*case 'DisplayInkNotes'*/ :
                            break;
                        case "firstvisiblesheet" /*case 'FirstVisibleSheet'*/ :
                            break;
                        case "supbook" /*case 'SupBook'*/ :
                            break;
                        case "sheetname" /*case 'SheetName'*/ :
                            break;
                        case "sheetindex" /*case 'SheetIndex'*/ :
                            break;
                        case "sheetindexfirst" /*case 'SheetIndexFirst'*/ :
                            break;
                        case "sheetindexlast" /*case 'SheetIndexLast'*/ :
                            break;
                        case "dll" /*case 'Dll'*/ :
                            break;
                        case "acceptlabelsinformulas" /*case 'AcceptLabelsInFormulas'*/ :
                            break;
                        case "donotsavelinkvalues" /*case 'DoNotSaveLinkValues'*/ :
                            break;
                        case "iteration" /*case 'Iteration'*/ :
                            break;
                        case "maxiterations" /*case 'MaxIterations'*/ :
                            break;
                        case "maxchange" /*case 'MaxChange'*/ :
                            break;
                        case "path" /*case 'Path'*/ :
                            break;
                        case "xct" /*case 'Xct'*/ :
                            break;
                        case "count" /*case 'Count'*/ :
                            break;
                        case "selectedsheets" /*case 'SelectedSheets'*/ :
                            break;
                        case "calculation" /*case 'Calculation'*/ :
                            break;
                        case "uncalced" /*case 'Uncalced'*/ :
                            break;
                        case "startupprompt" /*case 'StartupPrompt'*/ :
                            break;
                        case "crn" /*case 'Crn'*/ :
                            break;
                        case "externname" /*case 'ExternName'*/ :
                            break;
                        case "formula" /*case 'Formula'*/ :
                            break;
                        case "colfirst" /*case 'ColFirst'*/ :
                            break;
                        case "collast" /*case 'ColLast'*/ :
                            break;
                        case "wantadvise" /*case 'WantAdvise'*/ :
                            break;
                        case "boolean" /*case 'Boolean'*/ :
                            break;
                        case "error" /*case 'Error'*/ :
                            break;
                        case "text" /*case 'Text'*/ :
                            break;
                        case "ole" /*case 'OLE'*/ :
                            break;
                        case "noautorecover" /*case 'NoAutoRecover'*/ :
                            break;
                        case "publishobjects" /*case 'PublishObjects'*/ :
                            break;
                        case "donotcalculatebeforesave" /*case 'DoNotCalculateBeforeSave'*/ :
                            break;
                        case "number" /*case 'Number'*/ :
                            break;
                        case "refmoder1c1" /*case 'RefModeR1C1'*/ :
                            break;
                        case "embedsavesmarttags" /*case 'EmbedSaveSmartTags'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* WorkbookOptions */ case "workbookoptions" /*case 'WorkbookOptions'*/ :
                    switch(Rn[3]){
                        case "owcversion" /*case 'OWCVersion'*/ :
                            break;
                        case "height" /*case 'Height'*/ :
                            break;
                        case "width" /*case 'Width'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* WorksheetOptions */ case "worksheetoptions" /*case 'WorksheetOptions'*/ :
                    switch(Rn[3]){
                        case "visible" /*case 'Visible'*/ :
                            if (Rn[0].slice(-2) === "/>") ;
                            else if (Rn[1] === "/") switch(str.slice(pidx, Rn.index)){
                                case "SheetHidden":
                                    wsprops.Hidden = 1;
                                    break;
                                case "SheetVeryHidden":
                                    wsprops.Hidden = 2;
                                    break;
                            }
                            else pidx = Rn.index + Rn[0].length;
                            break;
                        case "header" /*case 'Header'*/ :
                            if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
                            if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet["!margins"].header = +parsexmltag(Rn[0]).Margin;
                            break;
                        case "footer" /*case 'Footer'*/ :
                            if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
                            if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet["!margins"].footer = +parsexmltag(Rn[0]).Margin;
                            break;
                        case "pagemargins" /*case 'PageMargins'*/ :
                            var pagemargins = parsexmltag(Rn[0]);
                            if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
                            if (!isNaN(+pagemargins.Top)) cursheet["!margins"].top = +pagemargins.Top;
                            if (!isNaN(+pagemargins.Left)) cursheet["!margins"].left = +pagemargins.Left;
                            if (!isNaN(+pagemargins.Right)) cursheet["!margins"].right = +pagemargins.Right;
                            if (!isNaN(+pagemargins.Bottom)) cursheet["!margins"].bottom = +pagemargins.Bottom;
                            break;
                        case "displayrighttoleft" /*case 'DisplayRightToLeft'*/ :
                            if (!Workbook.Views) Workbook.Views = [];
                            if (!Workbook.Views[0]) Workbook.Views[0] = {};
                            Workbook.Views[0].RTL = true;
                            break;
                        case "freezepanes" /*case 'FreezePanes'*/ :
                            break;
                        case "frozennosplit" /*case 'FrozenNoSplit'*/ :
                            break;
                        case "splithorizontal" /*case 'SplitHorizontal'*/ :
                        case "splitvertical" /*case 'SplitVertical'*/ :
                            break;
                        case "donotdisplaygridlines" /*case 'DoNotDisplayGridlines'*/ :
                            break;
                        case "activerow" /*case 'ActiveRow'*/ :
                            break;
                        case "activecol" /*case 'ActiveCol'*/ :
                            break;
                        case "toprowbottompane" /*case 'TopRowBottomPane'*/ :
                            break;
                        case "leftcolumnrightpane" /*case 'LeftColumnRightPane'*/ :
                            break;
                        case "unsynced" /*case 'Unsynced'*/ :
                            break;
                        case "print" /*case 'Print'*/ :
                            break;
                        case "printerrors" /*case 'PrintErrors'*/ :
                            break;
                        case "panes" /*case 'Panes'*/ :
                            break;
                        case "scale" /*case 'Scale'*/ :
                            break;
                        case "pane" /*case 'Pane'*/ :
                            break;
                        case "number" /*case 'Number'*/ :
                            break;
                        case "layout" /*case 'Layout'*/ :
                            break;
                        case "pagesetup" /*case 'PageSetup'*/ :
                            break;
                        case "selected" /*case 'Selected'*/ :
                            break;
                        case "protectobjects" /*case 'ProtectObjects'*/ :
                            break;
                        case "enableselection" /*case 'EnableSelection'*/ :
                            break;
                        case "protectscenarios" /*case 'ProtectScenarios'*/ :
                            break;
                        case "validprinterinfo" /*case 'ValidPrinterInfo'*/ :
                            break;
                        case "horizontalresolution" /*case 'HorizontalResolution'*/ :
                            break;
                        case "verticalresolution" /*case 'VerticalResolution'*/ :
                            break;
                        case "numberofcopies" /*case 'NumberofCopies'*/ :
                            break;
                        case "activepane" /*case 'ActivePane'*/ :
                            break;
                        case "toprowvisible" /*case 'TopRowVisible'*/ :
                            break;
                        case "leftcolumnvisible" /*case 'LeftColumnVisible'*/ :
                            break;
                        case "fittopage" /*case 'FitToPage'*/ :
                            break;
                        case "rangeselection" /*case 'RangeSelection'*/ :
                            break;
                        case "papersizeindex" /*case 'PaperSizeIndex'*/ :
                            break;
                        case "pagelayoutzoom" /*case 'PageLayoutZoom'*/ :
                            break;
                        case "pagebreakzoom" /*case 'PageBreakZoom'*/ :
                            break;
                        case "filteron" /*case 'FilterOn'*/ :
                            break;
                        case "fitwidth" /*case 'FitWidth'*/ :
                            break;
                        case "fitheight" /*case 'FitHeight'*/ :
                            break;
                        case "commentslayout" /*case 'CommentsLayout'*/ :
                            break;
                        case "zoom" /*case 'Zoom'*/ :
                            break;
                        case "lefttoright" /*case 'LeftToRight'*/ :
                            break;
                        case "gridlines" /*case 'Gridlines'*/ :
                            break;
                        case "allowsort" /*case 'AllowSort'*/ :
                            break;
                        case "allowfilter" /*case 'AllowFilter'*/ :
                            break;
                        case "allowinsertrows" /*case 'AllowInsertRows'*/ :
                            break;
                        case "allowdeleterows" /*case 'AllowDeleteRows'*/ :
                            break;
                        case "allowinsertcols" /*case 'AllowInsertCols'*/ :
                            break;
                        case "allowdeletecols" /*case 'AllowDeleteCols'*/ :
                            break;
                        case "allowinserthyperlinks" /*case 'AllowInsertHyperlinks'*/ :
                            break;
                        case "allowformatcells" /*case 'AllowFormatCells'*/ :
                            break;
                        case "allowsizecols" /*case 'AllowSizeCols'*/ :
                            break;
                        case "allowsizerows" /*case 'AllowSizeRows'*/ :
                            break;
                        case "nosummaryrowsbelowdetail" /*case 'NoSummaryRowsBelowDetail'*/ :
                            if (!cursheet["!outline"]) cursheet["!outline"] = {};
                            cursheet["!outline"].above = true;
                            break;
                        case "tabcolorindex" /*case 'TabColorIndex'*/ :
                            break;
                        case "donotdisplayheadings" /*case 'DoNotDisplayHeadings'*/ :
                            break;
                        case "showpagelayoutzoom" /*case 'ShowPageLayoutZoom'*/ :
                            break;
                        case "nosummarycolumnsrightdetail" /*case 'NoSummaryColumnsRightDetail'*/ :
                            if (!cursheet["!outline"]) cursheet["!outline"] = {};
                            cursheet["!outline"].left = true;
                            break;
                        case "blackandwhite" /*case 'BlackAndWhite'*/ :
                            break;
                        case "donotdisplayzeros" /*case 'DoNotDisplayZeros'*/ :
                            break;
                        case "displaypagebreak" /*case 'DisplayPageBreak'*/ :
                            break;
                        case "rowcolheadings" /*case 'RowColHeadings'*/ :
                            break;
                        case "donotdisplayoutline" /*case 'DoNotDisplayOutline'*/ :
                            break;
                        case "noorientation" /*case 'NoOrientation'*/ :
                            break;
                        case "allowusepivottables" /*case 'AllowUsePivotTables'*/ :
                            break;
                        case "zeroheight" /*case 'ZeroHeight'*/ :
                            break;
                        case "viewablerange" /*case 'ViewableRange'*/ :
                            break;
                        case "selection" /*case 'Selection'*/ :
                            break;
                        case "protectcontents" /*case 'ProtectContents'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* PivotTable */ case "pivottable" /*case 'PivotTable'*/ :
                case "pivotcache" /*case 'PivotCache'*/ :
                    switch(Rn[3]){
                        case "immediateitemsondrop" /*case 'ImmediateItemsOnDrop'*/ :
                            break;
                        case "showpagemultipleitemlabel" /*case 'ShowPageMultipleItemLabel'*/ :
                            break;
                        case "compactrowindent" /*case 'CompactRowIndent'*/ :
                            break;
                        case "location" /*case 'Location'*/ :
                            break;
                        case "pivotfield" /*case 'PivotField'*/ :
                            break;
                        case "orientation" /*case 'Orientation'*/ :
                            break;
                        case "layoutform" /*case 'LayoutForm'*/ :
                            break;
                        case "layoutsubtotallocation" /*case 'LayoutSubtotalLocation'*/ :
                            break;
                        case "layoutcompactrow" /*case 'LayoutCompactRow'*/ :
                            break;
                        case "position" /*case 'Position'*/ :
                            break;
                        case "pivotitem" /*case 'PivotItem'*/ :
                            break;
                        case "datatype" /*case 'DataType'*/ :
                            break;
                        case "datafield" /*case 'DataField'*/ :
                            break;
                        case "sourcename" /*case 'SourceName'*/ :
                            break;
                        case "parentfield" /*case 'ParentField'*/ :
                            break;
                        case "ptlineitems" /*case 'PTLineItems'*/ :
                            break;
                        case "ptlineitem" /*case 'PTLineItem'*/ :
                            break;
                        case "countofsameitems" /*case 'CountOfSameItems'*/ :
                            break;
                        case "item" /*case 'Item'*/ :
                            break;
                        case "itemtype" /*case 'ItemType'*/ :
                            break;
                        case "ptsource" /*case 'PTSource'*/ :
                            break;
                        case "cacheindex" /*case 'CacheIndex'*/ :
                            break;
                        case "consolidationreference" /*case 'ConsolidationReference'*/ :
                            break;
                        case "filename" /*case 'FileName'*/ :
                            break;
                        case "reference" /*case 'Reference'*/ :
                            break;
                        case "nocolumngrand" /*case 'NoColumnGrand'*/ :
                            break;
                        case "norowgrand" /*case 'NoRowGrand'*/ :
                            break;
                        case "blanklineafteritems" /*case 'BlankLineAfterItems'*/ :
                            break;
                        case "hidden" /*case 'Hidden'*/ :
                            break;
                        case "subtotal" /*case 'Subtotal'*/ :
                            break;
                        case "basefield" /*case 'BaseField'*/ :
                            break;
                        case "mapchilditems" /*case 'MapChildItems'*/ :
                            break;
                        case "function" /*case 'Function'*/ :
                            break;
                        case "refreshonfileopen" /*case 'RefreshOnFileOpen'*/ :
                            break;
                        case "printsettitles" /*case 'PrintSetTitles'*/ :
                            break;
                        case "mergelabels" /*case 'MergeLabels'*/ :
                            break;
                        case "defaultversion" /*case 'DefaultVersion'*/ :
                            break;
                        case "refreshname" /*case 'RefreshName'*/ :
                            break;
                        case "refreshdate" /*case 'RefreshDate'*/ :
                            break;
                        case "refreshdatecopy" /*case 'RefreshDateCopy'*/ :
                            break;
                        case "versionlastrefresh" /*case 'VersionLastRefresh'*/ :
                            break;
                        case "versionlastupdate" /*case 'VersionLastUpdate'*/ :
                            break;
                        case "versionupdateablemin" /*case 'VersionUpdateableMin'*/ :
                            break;
                        case "versionrefreshablemin" /*case 'VersionRefreshableMin'*/ :
                            break;
                        case "calculation" /*case 'Calculation'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* PageBreaks */ case "pagebreaks" /*case 'PageBreaks'*/ :
                    switch(Rn[3]){
                        case "colbreaks" /*case 'ColBreaks'*/ :
                            break;
                        case "colbreak" /*case 'ColBreak'*/ :
                            break;
                        case "rowbreaks" /*case 'RowBreaks'*/ :
                            break;
                        case "rowbreak" /*case 'RowBreak'*/ :
                            break;
                        case "colstart" /*case 'ColStart'*/ :
                            break;
                        case "colend" /*case 'ColEnd'*/ :
                            break;
                        case "rowend" /*case 'RowEnd'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* AutoFilter */ case "autofilter" /*case 'AutoFilter'*/ :
                    switch(Rn[3]){
                        case "autofiltercolumn" /*case 'AutoFilterColumn'*/ :
                            break;
                        case "autofiltercondition" /*case 'AutoFilterCondition'*/ :
                            break;
                        case "autofilterand" /*case 'AutoFilterAnd'*/ :
                            break;
                        case "autofilteror" /*case 'AutoFilterOr'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* QueryTable */ case "querytable" /*case 'QueryTable'*/ :
                    switch(Rn[3]){
                        case "id" /*case 'Id'*/ :
                            break;
                        case "autoformatfont" /*case 'AutoFormatFont'*/ :
                            break;
                        case "autoformatpattern" /*case 'AutoFormatPattern'*/ :
                            break;
                        case "querysource" /*case 'QuerySource'*/ :
                            break;
                        case "querytype" /*case 'QueryType'*/ :
                            break;
                        case "enableredirections" /*case 'EnableRedirections'*/ :
                            break;
                        case "refreshedinxl9" /*case 'RefreshedInXl9'*/ :
                            break;
                        case "urlstring" /*case 'URLString'*/ :
                            break;
                        case "htmltables" /*case 'HTMLTables'*/ :
                            break;
                        case "connection" /*case 'Connection'*/ :
                            break;
                        case "commandtext" /*case 'CommandText'*/ :
                            break;
                        case "refreshinfo" /*case 'RefreshInfo'*/ :
                            break;
                        case "notitles" /*case 'NoTitles'*/ :
                            break;
                        case "nextid" /*case 'NextId'*/ :
                            break;
                        case "columninfo" /*case 'ColumnInfo'*/ :
                            break;
                        case "overwritecells" /*case 'OverwriteCells'*/ :
                            break;
                        case "donotpromptforfile" /*case 'DoNotPromptForFile'*/ :
                            break;
                        case "textwizardsettings" /*case 'TextWizardSettings'*/ :
                            break;
                        case "source" /*case 'Source'*/ :
                            break;
                        case "number" /*case 'Number'*/ :
                            break;
                        case "decimal" /*case 'Decimal'*/ :
                            break;
                        case "thousandseparator" /*case 'ThousandSeparator'*/ :
                            break;
                        case "trailingminusnumbers" /*case 'TrailingMinusNumbers'*/ :
                            break;
                        case "formatsettings" /*case 'FormatSettings'*/ :
                            break;
                        case "fieldtype" /*case 'FieldType'*/ :
                            break;
                        case "delimiters" /*case 'Delimiters'*/ :
                            break;
                        case "tab" /*case 'Tab'*/ :
                            break;
                        case "comma" /*case 'Comma'*/ :
                            break;
                        case "autoformatname" /*case 'AutoFormatName'*/ :
                            break;
                        case "versionlastedit" /*case 'VersionLastEdit'*/ :
                            break;
                        case "versionlastrefresh" /*case 'VersionLastRefresh'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                case "datavalidation" /*case 'DataValidation'*/ :
                    switch(Rn[3]){
                        case "range" /*case 'Range'*/ :
                            break;
                        case "type" /*case 'Type'*/ :
                            break;
                        case "min" /*case 'Min'*/ :
                            break;
                        case "max" /*case 'Max'*/ :
                            break;
                        case "sort" /*case 'Sort'*/ :
                            break;
                        case "descending" /*case 'Descending'*/ :
                            break;
                        case "order" /*case 'Order'*/ :
                            break;
                        case "casesensitive" /*case 'CaseSensitive'*/ :
                            break;
                        case "value" /*case 'Value'*/ :
                            break;
                        case "errorstyle" /*case 'ErrorStyle'*/ :
                            break;
                        case "errormessage" /*case 'ErrorMessage'*/ :
                            break;
                        case "errortitle" /*case 'ErrorTitle'*/ :
                            break;
                        case "inputmessage" /*case 'InputMessage'*/ :
                            break;
                        case "inputtitle" /*case 'InputTitle'*/ :
                            break;
                        case "combohide" /*case 'ComboHide'*/ :
                            break;
                        case "inputhide" /*case 'InputHide'*/ :
                            break;
                        case "condition" /*case 'Condition'*/ :
                            break;
                        case "qualifier" /*case 'Qualifier'*/ :
                            break;
                        case "useblank" /*case 'UseBlank'*/ :
                            break;
                        case "value1" /*case 'Value1'*/ :
                            break;
                        case "value2" /*case 'Value2'*/ :
                            break;
                        case "format" /*case 'Format'*/ :
                            break;
                        case "cellrangelist" /*case 'CellRangeList'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                case "sorting" /*case 'Sorting'*/ :
                case "conditionalformatting" /*case 'ConditionalFormatting'*/ :
                    switch(Rn[3]){
                        case "range" /*case 'Range'*/ :
                            break;
                        case "type" /*case 'Type'*/ :
                            break;
                        case "min" /*case 'Min'*/ :
                            break;
                        case "max" /*case 'Max'*/ :
                            break;
                        case "sort" /*case 'Sort'*/ :
                            break;
                        case "descending" /*case 'Descending'*/ :
                            break;
                        case "order" /*case 'Order'*/ :
                            break;
                        case "casesensitive" /*case 'CaseSensitive'*/ :
                            break;
                        case "value" /*case 'Value'*/ :
                            break;
                        case "errorstyle" /*case 'ErrorStyle'*/ :
                            break;
                        case "errormessage" /*case 'ErrorMessage'*/ :
                            break;
                        case "errortitle" /*case 'ErrorTitle'*/ :
                            break;
                        case "cellrangelist" /*case 'CellRangeList'*/ :
                            break;
                        case "inputmessage" /*case 'InputMessage'*/ :
                            break;
                        case "inputtitle" /*case 'InputTitle'*/ :
                            break;
                        case "combohide" /*case 'ComboHide'*/ :
                            break;
                        case "inputhide" /*case 'InputHide'*/ :
                            break;
                        case "condition" /*case 'Condition'*/ :
                            break;
                        case "qualifier" /*case 'Qualifier'*/ :
                            break;
                        case "useblank" /*case 'UseBlank'*/ :
                            break;
                        case "value1" /*case 'Value1'*/ :
                            break;
                        case "value2" /*case 'Value2'*/ :
                            break;
                        case "format" /*case 'Format'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* MapInfo (schema) */ case "mapinfo" /*case 'MapInfo'*/ :
                case "schema" /*case 'Schema'*/ :
                case "data" /*case 'data'*/ :
                    switch(Rn[3]){
                        case "map" /*case 'Map'*/ :
                            break;
                        case "entry" /*case 'Entry'*/ :
                            break;
                        case "range" /*case 'Range'*/ :
                            break;
                        case "xpath" /*case 'XPath'*/ :
                            break;
                        case "field" /*case 'Field'*/ :
                            break;
                        case "xsdtype" /*case 'XSDType'*/ :
                            break;
                        case "filteron" /*case 'FilterOn'*/ :
                            break;
                        case "aggregate" /*case 'Aggregate'*/ :
                            break;
                        case "elementtype" /*case 'ElementType'*/ :
                            break;
                        case "attributetype" /*case 'AttributeType'*/ :
                            break;
                        /* These are from xsd (XML Schema Definition) */ case "schema" /*case 'schema'*/ :
                        case "element" /*case 'element'*/ :
                        case "complextype" /*case 'complexType'*/ :
                        case "datatype" /*case 'datatype'*/ :
                        case "all" /*case 'all'*/ :
                        case "attribute" /*case 'attribute'*/ :
                        case "extends" /*case 'extends'*/ :
                            break;
                        case "row" /*case 'row'*/ :
                            break;
                        default:
                            seen = false;
                    }
                    break;
                /* SmartTags (can be anything) */ case "smarttags" /*case 'SmartTags'*/ :
                    break;
                default:
                    seen = false;
                    break;
            }
            if (seen) break;
            /* CustomDocumentProperties */ if (Rn[3].match(/!\[CDATA/)) break;
            if (!state[state.length - 1][1]) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
            if (state[state.length - 1][0] === /*'CustomDocumentProperties'*/ "customdocumentproperties") {
                if (Rn[0].slice(-2) === "/>") break;
                else if (Rn[1] === "/") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));
                else {
                    cp = Rn;
                    pidx = Rn.index + Rn[0].length;
                }
                break;
            }
            if (opts.WTF) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
    }
    var out = {} /*:any*/ ;
    if (!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
    out.SheetNames = sheetnames;
    out.Workbook = Workbook;
    out.SSF = dup(table_fmt);
    out.Props = Props;
    out.Custprops = Custprops;
    return out;
}
function parse_xlml(data /*:RawBytes|string*/ , opts) /*:Workbook*/ {
    fix_read_opts(opts = opts || {});
    switch(opts.type || "base64"){
        case "base64":
            return parse_xlml_xml(Base64_decode(data), opts);
        case "binary":
        case "buffer":
        case "file":
            return parse_xlml_xml(data, opts);
        case "array":
            return parse_xlml_xml(a2s(data), opts);
    }
/*:: throw new Error("unsupported type " + opts.type); */ }
/* TODO */ function write_props_xlml(wb /*:Workbook*/ , opts) /*:string*/ {
    var o /*:Array<string>*/  = [];
    /* DocumentProperties */ if (wb.Props) o.push(xlml_write_docprops(wb.Props, opts));
    /* CustomDocumentProperties */ if (wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));
    return o.join("");
}
/* TODO */ function write_wb_xlml() /*:string*/ {
    /* OfficeDocumentSettings */ /* ExcelWorkbook */ return "";
}
/* TODO */ function write_sty_xlml(wb, opts) /*:string*/ {
    /* Styles */ var styles /*:Array<string>*/  = [
        '<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'
    ];
    opts.cellXfs.forEach(function(xf, id) {
        var payload /*:Array<string>*/  = [];
        payload.push(writextag("NumberFormat", null, {
            "ss:Format": escapexml(table_fmt[xf.numFmtId])
        }));
        var o = /*::(*/ {
            "ss:ID": "s" + (21 + id)
        } /*:: :any)*/ ;
        styles.push(writextag("Style", payload.join(""), o));
    });
    return writextag("Styles", styles.join(""));
}
function write_name_xlml(n) {
    return writextag("NamedRange", null, {
        "ss:Name": n.Name,
        "ss:RefersTo": "=" + a1_to_rc(n.Ref, {
            r: 0,
            c: 0
        })
    });
}
function write_names_xlml(wb /*::, opts*/ ) /*:string*/ {
    if (!((wb || {}).Workbook || {}).Names) return "";
    /*:: if(!wb || !wb.Workbook || !wb.Workbook.Names) throw new Error("unreachable"); */ var names /*:Array<any>*/  = wb.Workbook.Names;
    var out /*:Array<string>*/  = [];
    for(var i = 0; i < names.length; ++i){
        var n = names[i];
        if (n.Sheet != null) continue;
        if (n.Name.match(/^_xlfn\./)) continue;
        out.push(write_name_xlml(n));
    }
    return writextag("Names", out.join(""));
}
function write_ws_xlml_names(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/ ) /*:string*/ {
    if (!ws) return "";
    if (!((wb || {}).Workbook || {}).Names) return "";
    /*:: if(!wb || !wb.Workbook || !wb.Workbook.Names) throw new Error("unreachable"); */ var names /*:Array<any>*/  = wb.Workbook.Names;
    var out /*:Array<string>*/  = [];
    for(var i = 0; i < names.length; ++i){
        var n = names[i];
        if (n.Sheet != idx) continue;
        /*switch(n.Name) {
			case "_": continue;
		}*/ if (n.Name.match(/^_xlfn\./)) continue;
        out.push(write_name_xlml(n));
    }
    return out.join("");
}
/* WorksheetOptions */ function write_ws_xlml_wsopts(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/ ) /*:string*/ {
    if (!ws) return "";
    var o /*:Array<string>*/  = [];
    /* NOTE: spec technically allows any order, but stick with implied order */ /* FitToPage */ /* DoNotDisplayColHeaders */ /* DoNotDisplayRowHeaders */ /* ViewableRange */ /* Selection */ /* GridlineColor */ /* Name */ /* ExcelWorksheetType */ /* IntlMacro */ /* Unsynced */ /* Selected */ /* CodeName */ if (ws["!margins"]) {
        o.push("<PageSetup>");
        if (ws["!margins"].header) o.push(writextag("Header", null, {
            "x:Margin": ws["!margins"].header
        }));
        if (ws["!margins"].footer) o.push(writextag("Footer", null, {
            "x:Margin": ws["!margins"].footer
        }));
        o.push(writextag("PageMargins", null, {
            "x:Bottom": ws["!margins"].bottom || "0.75",
            "x:Left": ws["!margins"].left || "0.7",
            "x:Right": ws["!margins"].right || "0.7",
            "x:Top": ws["!margins"].top || "0.75"
        }));
        o.push("</PageSetup>");
    }
    /* PageSetup */ /* DisplayPageBreak */ /* TransitionExpressionEvaluation */ /* TransitionFormulaEntry */ /* Print */ /* Zoom */ /* PageLayoutZoom */ /* PageBreakZoom */ /* ShowPageBreakZoom */ /* DefaultRowHeight */ /* DefaultColumnWidth */ /* StandardWidth */ if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
        /* Visible */ if (wb.Workbook.Sheets[idx].Hidden) o.push(writextag("Visible", wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden", {}));
        else {
            /* Selected */ for(var i = 0; i < idx; ++i)if (wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden) break;
            if (i == idx) o.push("<Selected/>");
        }
    }
    /* LeftColumnVisible */ if (((((wb || {}).Workbook || {}).Views || [])[0] || {}).RTL) o.push("<DisplayRightToLeft/>");
    /* GridlineColorIndex */ /* DisplayFormulas */ /* DoNotDisplayGridlines */ /* DoNotDisplayHeadings */ /* DoNotDisplayOutline */ /* ApplyAutomaticOutlineStyles */ /* NoSummaryRowsBelowDetail */ /* NoSummaryColumnsRightDetail */ /* DoNotDisplayZeros */ /* ActiveRow */ /* ActiveColumn */ /* FilterOn */ /* RangeSelection */ /* TopRowVisible */ /* TopRowBottomPane */ /* LeftColumnRightPane */ /* ActivePane */ /* SplitHorizontal */ /* SplitVertical */ /* FreezePanes */ /* FrozenNoSplit */ /* TabColorIndex */ /* Panes */ /* NOTE: Password not supported in XLML Format */ if (ws["!protect"]) {
        o.push(writetag("ProtectContents", "True"));
        if (ws["!protect"].objects) o.push(writetag("ProtectObjects", "True"));
        if (ws["!protect"].scenarios) o.push(writetag("ProtectScenarios", "True"));
        if (ws["!protect"].selectLockedCells != null && !ws["!protect"].selectLockedCells) o.push(writetag("EnableSelection", "NoSelection"));
        else if (ws["!protect"].selectUnlockedCells != null && !ws["!protect"].selectUnlockedCells) o.push(writetag("EnableSelection", "UnlockedCells"));
        [
            [
                "formatCells",
                "AllowFormatCells"
            ],
            [
                "formatColumns",
                "AllowSizeCols"
            ],
            [
                "formatRows",
                "AllowSizeRows"
            ],
            [
                "insertColumns",
                "AllowInsertCols"
            ],
            [
                "insertRows",
                "AllowInsertRows"
            ],
            [
                "insertHyperlinks",
                "AllowInsertHyperlinks"
            ],
            [
                "deleteColumns",
                "AllowDeleteCols"
            ],
            [
                "deleteRows",
                "AllowDeleteRows"
            ],
            [
                "sort",
                "AllowSort"
            ],
            [
                "autoFilter",
                "AllowFilter"
            ],
            [
                "pivotTables",
                "AllowUsePivotTables"
            ]
        ].forEach(function(x) {
            if (ws["!protect"][x[0]]) o.push("<" + x[1] + "/>");
        });
    }
    if (o.length == 0) return "";
    return writextag("WorksheetOptions", o.join(""), {
        xmlns: XLMLNS.x
    });
}
function write_ws_xlml_comment(comments /*:Array<any>*/ ) /*:string*/ {
    return comments.map(function(c) {
        // TODO: formatted text
        var t = xlml_unfixstr(c.t || "");
        var d = writextag("ss:Data", t, {
            "xmlns": "http://www.w3.org/TR/REC-html40"
        });
        return writextag("Comment", d, {
            "ss:Author": c.a
        });
    }).join("");
}
function write_ws_xlml_cell(cell, ref /*:string*/ , ws, opts, idx /*:number*/ , wb, addr) /*:string*/ {
    if (!cell || cell.v == undefined && cell.f == undefined) return "";
    var attr = {};
    if (cell.f) attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr));
    if (cell.F && cell.F.slice(0, ref.length) == ref) {
        var end = decode_cell(cell.F.slice(ref.length + 1));
        attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]");
    }
    if (cell.l && cell.l.Target) {
        attr["ss:HRef"] = escapexml(cell.l.Target);
        if (cell.l.Tooltip) attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip);
    }
    if (ws["!merges"]) {
        var marr = ws["!merges"];
        for(var mi = 0; mi != marr.length; ++mi){
            if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;
            if (marr[mi].e.c > marr[mi].s.c) attr["ss:MergeAcross"] = marr[mi].e.c - marr[mi].s.c;
            if (marr[mi].e.r > marr[mi].s.r) attr["ss:MergeDown"] = marr[mi].e.r - marr[mi].s.r;
        }
    }
    var t = "", p = "";
    switch(cell.t){
        case "z":
            if (!opts.sheetStubs) return "";
            break;
        case "n":
            t = "Number";
            p = String(cell.v);
            break;
        case "b":
            t = "Boolean";
            p = cell.v ? "1" : "0";
            break;
        case "e":
            t = "Error";
            p = BErr[cell.v];
            break;
        case "d":
            t = "DateTime";
            p = new Date(cell.v).toISOString();
            if (cell.z == null) cell.z = cell.z || table_fmt[14];
            break;
        case "s":
            t = "String";
            p = escapexlml(cell.v || "");
            break;
    }
    /* TODO: cell style */ var os = get_cell_style(opts.cellXfs, cell, opts);
    attr["ss:StyleID"] = "s" + (21 + os);
    attr["ss:Index"] = addr.c + 1;
    var _v = cell.v != null ? p : "";
    var m = cell.t == "z" ? "" : '<Data ss:Type="' + t + '">' + _v + "</Data>";
    if ((cell.c || []).length > 0) m += write_ws_xlml_comment(cell.c);
    return writextag("Cell", m, attr);
}
function write_ws_xlml_row(R /*:number*/ , row) /*:string*/ {
    var o = '<Row ss:Index="' + (R + 1) + '"';
    if (row) {
        if (row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);
        if (row.hpx) o += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"';
        if (row.hidden) o += ' ss:Hidden="1"';
    }
    return o + ">";
}
/* TODO */ function write_ws_xlml_table(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/ ) /*:string*/ {
    if (!ws["!ref"]) return "";
    var range /*:Range*/  = safe_decode_range(ws["!ref"]);
    var marr /*:Array<Range>*/  = ws["!merges"] || [], mi = 0;
    var o /*:Array<string>*/  = [];
    if (ws["!cols"]) ws["!cols"].forEach(function(n, i) {
        process_col(n);
        var w = !!n.width;
        var p = col_obj_w(i, n);
        var k /*:any*/  = {
            "ss:Index": i + 1
        };
        if (w) k["ss:Width"] = width2px(p.width);
        if (n.hidden) k["ss:Hidden"] = "1";
        o.push(writextag("Column", null, k));
    });
    var dense = Array.isArray(ws);
    for(var R = range.s.r; R <= range.e.r; ++R){
        var row = [
            write_ws_xlml_row(R, (ws["!rows"] || [])[R])
        ];
        for(var C = range.s.c; C <= range.e.c; ++C){
            var skip = false;
            for(mi = 0; mi != marr.length; ++mi){
                if (marr[mi].s.c > C) continue;
                if (marr[mi].s.r > R) continue;
                if (marr[mi].e.c < C) continue;
                if (marr[mi].e.r < R) continue;
                if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
                break;
            }
            if (skip) continue;
            var addr = {
                r: R,
                c: C
            };
            var ref = encode_cell(addr), cell = dense ? (ws[R] || [])[C] : ws[ref];
            row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
        }
        row.push("</Row>");
        if (row.length > 2) o.push(row.join(""));
    }
    return o.join("");
}
function write_ws_xlml(idx /*:number*/ , opts, wb /*:Workbook*/ ) /*:string*/ {
    var o /*:Array<string>*/  = [];
    var s = wb.SheetNames[idx];
    var ws = wb.Sheets[s];
    var t /*:string*/  = ws ? write_ws_xlml_names(ws, opts, idx, wb) : "";
    if (t.length > 0) o.push("<Names>" + t + "</Names>");
    /* Table */ t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : "";
    if (t.length > 0) o.push("<Table>" + t + "</Table>");
    /* WorksheetOptions */ o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));
    return o.join("");
}
function write_xlml(wb, opts) /*:string*/ {
    if (!opts) opts = {};
    if (!wb.SSF) wb.SSF = dup(table_fmt);
    if (wb.SSF) {
        make_ssf();
        SSF_load_table(wb.SSF);
        // $FlowIgnore
        opts.revssf = evert_num(wb.SSF);
        opts.revssf[wb.SSF[65535]] = 0;
        opts.ssf = wb.SSF;
        opts.cellXfs = [];
        get_cell_style(opts.cellXfs, {}, {
            revssf: {
                "General": 0
            }
        });
    }
    var d /*:Array<string>*/  = [];
    d.push(write_props_xlml(wb, opts));
    d.push(write_wb_xlml(wb, opts));
    d.push("");
    d.push("");
    for(var i = 0; i < wb.SheetNames.length; ++i)d.push(writextag("Worksheet", write_ws_xlml(i, opts, wb), {
        "ss:Name": escapexml(wb.SheetNames[i])
    }));
    d[2] = write_sty_xlml(wb, opts);
    d[3] = write_names_xlml(wb, opts);
    return XML_HEADER + writextag("Workbook", d.join(""), {
        "xmlns": XLMLNS.ss,
        "xmlns:o": XLMLNS.o,
        "xmlns:x": XLMLNS.x,
        "xmlns:ss": XLMLNS.ss,
        "xmlns:dt": XLMLNS.dt,
        "xmlns:html": XLMLNS.html
    });
}
/* [MS-OLEDS] 2.3.8 CompObjStream */ function parse_compobj(obj /*:CFBEntry*/ ) {
    var v = {};
    var o = obj.content;
    /*:: if(o == null) return; */ /* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */ o.l = 28;
    v.AnsiUserType = o.read_shift(0, "lpstr-ansi");
    v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);
    if (o.length - o.l <= 4) return v;
    var m /*:number*/  = o.read_shift(4);
    if (m == 0 || m > 40) return v;
    o.l -= 4;
    v.Reserved1 = o.read_shift(0, "lpstr-ansi");
    if (o.length - o.l <= 4) return v;
    m = o.read_shift(4);
    if (m !== 0x71b239f4) return v;
    v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);
    m = o.read_shift(4);
    if (m == 0 || m > 40) return v;
    o.l -= 4;
    v.Reserved2 = o.read_shift(0, "lpwstr");
}
/*
	Continue logic for:
	- 2.4.58 Continue          0x003c
	- 2.4.59 ContinueBigName   0x043c
	- 2.4.60 ContinueFrt       0x0812
	- 2.4.61 ContinueFrt11     0x0875
	- 2.4.62 ContinueFrt12     0x087f
*/ var CONTINUE_RT = [
    0x003c,
    0x043c,
    0x0812,
    0x0875,
    0x087f
];
function slurp(RecordType, R, blob, length /*:number*/ , opts) /*:any*/ {
    var l = length;
    var bufs = [];
    var d = blob.slice(blob.l, blob.l + l);
    if (opts && opts.enc && opts.enc.insitu && d.length > 0) switch(RecordType){
        case 0x0009:
        case 0x0209:
        case 0x0409:
        case 0x0809 /* BOF */ :
        case 0x002f /* FilePass */ :
        case 0x0195 /* FileLock */ :
        case 0x00e1 /* InterfaceHdr */ :
        case 0x0196 /* RRDInfo */ :
        case 0x0138 /* RRDHead */ :
        case 0x0194 /* UsrExcl */ :
        case 0x000a /* EOF */ :
            break;
        case 0x0085 /* BoundSheet8 */ :
            break;
        default:
            opts.enc.insitu(d);
    }
    bufs.push(d);
    blob.l += l;
    var nextrt = __readUInt16LE(blob, blob.l), next = XLSRecordEnum[nextrt];
    var start = 0;
    while(next != null && CONTINUE_RT.indexOf(nextrt) > -1){
        l = __readUInt16LE(blob, blob.l + 2);
        start = blob.l + 4;
        if (nextrt == 0x0812 /* ContinueFrt */ ) start += 4;
        else if (nextrt == 0x0875 || nextrt == 0x087f) start += 12;
        d = blob.slice(start, blob.l + 4 + l);
        bufs.push(d);
        blob.l += 4 + l;
        next = XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)];
    }
    var b = bconcat(bufs);
    prep_blob(b, 0);
    var ll = 0;
    b.lens = [];
    for(var j = 0; j < bufs.length; ++j){
        b.lens.push(ll);
        ll += bufs[j].length;
    }
    if (b.length < length) throw "XLS Record 0x" + RecordType.toString(16) + " Truncated: " + b.length + " < " + length;
    return R.f(b, b.length, opts);
}
function safe_format_xf(p /*:any*/ , opts /*:ParseOpts*/ , date1904 /*:?boolean*/ ) {
    if (p.t === "z") return;
    if (!p.XF) return;
    var fmtid = 0;
    try {
        fmtid = p.z || p.XF.numFmtId || 0;
        if (opts.cellNF) p.z = table_fmt[fmtid];
    } catch (e) {
        if (opts.WTF) throw e;
    }
    if (!opts || opts.cellText !== false) try {
        if (p.t === "e") p.w = p.w || BErr[p.v];
        else if (fmtid === 0 || fmtid == "General") {
            if (p.t === "n") {
                if ((p.v | 0) === p.v) p.w = p.v.toString(10);
                else p.w = SSF_general_num(p.v);
            } else p.w = SSF_general(p.v);
        } else p.w = SSF_format(fmtid, p.v, {
            date1904: !!date1904,
            dateNF: opts && opts.dateNF
        });
    } catch (e) {
        if (opts.WTF) throw e;
    }
    if (opts.cellDates && fmtid && p.t == "n" && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {
        var _d = SSF_parse_date_code(p.v);
        if (_d) {
            p.t = "d";
            p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
        }
    }
}
function make_cell(val, ixfe, t) /*:Cell*/ {
    return {
        v: val,
        ixfe: ixfe,
        t: t
    } /*:any*/ ;
}
// 2.3.2
function parse_workbook(blob, options /*:ParseOpts*/ ) /*:Workbook*/ {
    var wb = {
        opts: {}
    } /*:any*/ ;
    var Sheets = {};
    if (DENSE != null && options.dense == null) options.dense = DENSE;
    var out /*:Worksheet*/  = options.dense ? [] : {};
    var Directory = {};
    var range /*:Range*/  = {} /*:any*/ ;
    var last_formula = null;
    var sst /*:SST*/  = [];
    var cur_sheet = "";
    var Preamble = {};
    var lastcell, last_cell = "", cc /*:Cell*/ , cmnt, rngC, rngR;
    var sharedf = {};
    var arrayf /*:Array<[Range, string]>*/  = [];
    var temp_val /*:Cell*/ ;
    var country;
    var XFs = []; /* XF records */ 
    var palette /*:Array<[number, number, number]>*/  = [];
    var Workbook /*:WBWBProps*/  = {
        Sheets: [],
        WBProps: {
            date1904: false
        },
        Views: [
            {}
        ]
    } /*:any*/ , wsprops = {};
    var get_rgb = function getrgb(icv /*:number*/ ) /*:[number, number, number]*/ {
        if (icv < 8) return XLSIcv[icv];
        if (icv < 64) return palette[icv - 8] || XLSIcv[icv];
        return XLSIcv[icv];
    };
    var process_cell_style = function pcs(cell, line /*:any*/ , options) {
        var xfd = line.XF.data;
        if (!xfd || !xfd.patternType || !options || !options.cellStyles) return;
        line.s = {} /*:any*/ ;
        line.s.patternType = xfd.patternType;
        var t;
        if (t = rgb2Hex(get_rgb(xfd.icvFore))) line.s.fgColor = {
            rgb: t
        };
        if (t = rgb2Hex(get_rgb(xfd.icvBack))) line.s.bgColor = {
            rgb: t
        };
    };
    var addcell = function addcell(cell /*:any*/ , line /*:any*/ , options /*:any*/ ) {
        if (file_depth > 1) return;
        if (options.sheetRows && cell.r >= options.sheetRows) return;
        if (options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);
        delete line.ixfe;
        delete line.XF;
        lastcell = cell;
        last_cell = encode_cell(cell);
        if (!range || !range.s || !range.e) range = {
            s: {
                r: 0,
                c: 0
            },
            e: {
                r: 0,
                c: 0
            }
        };
        if (cell.r < range.s.r) range.s.r = cell.r;
        if (cell.c < range.s.c) range.s.c = cell.c;
        if (cell.r + 1 > range.e.r) range.e.r = cell.r + 1;
        if (cell.c + 1 > range.e.c) range.e.c = cell.c + 1;
        if (options.cellFormula && line.f) for(var afi = 0; afi < arrayf.length; ++afi){
            if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;
            if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;
            line.F = encode_range(arrayf[afi][0]);
            if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;
            if (line.f) line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
            break;
        }
        if (options.dense) {
            if (!out[cell.r]) out[cell.r] = [];
            out[cell.r][cell.c] = line;
        } else out[last_cell] = line;
    };
    var opts = {
        enc: false,
        sbcch: 0,
        snames: [],
        sharedf: sharedf,
        arrayf: arrayf,
        rrtabid: [],
        lastuser: "",
        biff: 8,
        codepage: 0,
        winlocked: 0,
        cellStyles: !!options && !!options.cellStyles,
        WTF: !!options && !!options.wtf
    } /*:any*/ ;
    if (options.password) opts.password = options.password;
    var themes;
    var merges /*:Array<Range>*/  = [];
    var objects = [];
    var colinfo /*:Array<ColInfo>*/  = [], rowinfo /*:Array<RowInfo>*/  = [];
    var seencol = false;
    var supbooks = []; // 1-indexed, will hold extern names
    supbooks.SheetNames = opts.snames;
    supbooks.sharedf = opts.sharedf;
    supbooks.arrayf = opts.arrayf;
    supbooks.names = [];
    supbooks.XTI = [];
    var last_RT = 0;
    var file_depth = 0; /* TODO: make a real stack */ 
    var BIFF2Fmt = 0, BIFF2FmtTable /*:Array<string>*/  = [];
    var FilterDatabases = []; /* TODO: sort out supbooks and process elsewhere */ 
    var last_lbl /*:?DefinedName*/ ;
    /* explicit override for some broken writers */ opts.codepage = 1200;
    set_cp(1200);
    var seen_codepage = false;
    while(blob.l < blob.length - 1){
        var s = blob.l;
        var RecordType = blob.read_shift(2);
        if (RecordType === 0 && last_RT === 0x000a /* EOF */ ) break;
        var length = blob.l === blob.length ? 0 : blob.read_shift(2);
        var R = XLSRecordEnum[RecordType];
        //console.log(RecordType.toString(16), RecordType, R, blob.l, length, blob.length);
        //if(!R) console.log(blob.slice(blob.l, blob.l + length));
        if (R && R.f) {
            if (options.bookSheets) {
                if (last_RT === 0x0085 /* BoundSheet8 */  && RecordType !== 0x0085 /* R.n !== 'BoundSheet8' */ ) break;
            }
            last_RT = RecordType;
            if (R.r === 2 || R.r == 12) {
                var rt = blob.read_shift(2);
                length -= 2;
                if (!opts.enc && rt !== RecordType && ((rt & 0xFF) << 8 | rt >> 8) !== RecordType) throw new Error("rt mismatch: " + rt + "!=" + RecordType);
                if (R.r == 12) {
                    blob.l += 10;
                    length -= 10;
                } // skip FRT
            }
            //console.error(R,blob.l,length,blob.length);
            var val /*:any*/  = {} /*:any*/ ;
            if (RecordType === 0x000a /* EOF */ ) val = /*::(*/ R.f(blob, length, opts) /*:: :any)*/ ;
            else val = /*::(*/ slurp(RecordType, R, blob, length, opts) /*:: :any)*/ ;
            /*:: val = (val:any); */ if (file_depth == 0 && [
                0x0009,
                0x0209,
                0x0409,
                0x0809
            ].indexOf(last_RT) === -1 /* 'BOF' */ ) continue;
            switch(RecordType){
                case 0x0022 /* Date1904 */ :
                    /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */ wb.opts.Date1904 = Workbook.WBProps.date1904 = val;
                    break;
                case 0x0086 /* WriteProtect */ :
                    wb.opts.WriteProtect = true;
                    break;
                case 0x002f /* FilePass */ :
                    if (!opts.enc) blob.l = 0;
                    opts.enc = val;
                    if (!options.password) throw new Error("File is password-protected");
                    if (val.valid == null) throw new Error("Encryption scheme unsupported");
                    if (!val.valid) throw new Error("Password is incorrect");
                    break;
                case 0x005c /* WriteAccess */ :
                    opts.lastuser = val;
                    break;
                case 0x0042 /* CodePage */ :
                    var cpval = Number(val);
                    /* overrides based on test cases */ switch(cpval){
                        case 0x5212:
                            cpval = 1200;
                            break;
                        case 0x8000:
                            cpval = 10000;
                            break;
                        case 0x8001:
                            cpval = 1252;
                            break;
                    }
                    set_cp(opts.codepage = cpval);
                    seen_codepage = true;
                    break;
                case 0x013d /* RRTabId */ :
                    opts.rrtabid = val;
                    break;
                case 0x0019 /* WinProtect */ :
                    opts.winlocked = val;
                    break;
                case 0x01b7 /* RefreshAll */ :
                    wb.opts["RefreshAll"] = val;
                    break;
                case 0x000c /* CalcCount */ :
                    wb.opts["CalcCount"] = val;
                    break;
                case 0x0010 /* CalcDelta */ :
                    wb.opts["CalcDelta"] = val;
                    break;
                case 0x0011 /* CalcIter */ :
                    wb.opts["CalcIter"] = val;
                    break;
                case 0x000d /* CalcMode */ :
                    wb.opts["CalcMode"] = val;
                    break;
                case 0x000e /* CalcPrecision */ :
                    wb.opts["CalcPrecision"] = val;
                    break;
                case 0x005f /* CalcSaveRecalc */ :
                    wb.opts["CalcSaveRecalc"] = val;
                    break;
                case 0x000f /* CalcRefMode */ :
                    opts.CalcRefMode = val;
                    break; // TODO: implement R1C1
                case 0x08a3 /* ForceFullCalculation */ :
                    wb.opts.FullCalc = val;
                    break;
                case 0x0081 /* WsBool */ :
                    if (val.fDialog) out["!type"] = "dialog";
                    if (!val.fBelow) (out["!outline"] || (out["!outline"] = {})).above = true;
                    if (!val.fRight) (out["!outline"] || (out["!outline"] = {})).left = true;
                    break; // TODO
                case 0x00e0 /* XF */ :
                    XFs.push(val);
                    break;
                case 0x01ae /* SupBook */ :
                    supbooks.push([
                        val
                    ]);
                    supbooks[supbooks.length - 1].XTI = [];
                    break;
                case 0x0023:
                case 0x0223 /* ExternName */ :
                    supbooks[supbooks.length - 1].push(val);
                    break;
                case 0x0018:
                case 0x0218 /* Lbl */ :
                    last_lbl = {
                        Name: val.Name,
                        Ref: stringify_formula(val.rgce, range, null, supbooks, opts)
                    } /*:DefinedName*/ ;
                    if (val.itab > 0) last_lbl.Sheet = val.itab - 1;
                    supbooks.names.push(last_lbl);
                    if (!supbooks[0]) {
                        supbooks[0] = [];
                        supbooks[0].XTI = [];
                    }
                    supbooks[supbooks.length - 1].push(val);
                    if (val.Name == "_xlnm._FilterDatabase" && val.itab > 0) {
                        if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == "PtgArea3d") FilterDatabases[val.itab - 1] = {
                            ref: encode_range(val.rgce[0][0][1][2])
                        };
                    }
                    break;
                case 0x0016 /* ExternCount */ :
                    opts.ExternCount = val;
                    break;
                case 0x0017 /* ExternSheet */ :
                    if (supbooks.length == 0) {
                        supbooks[0] = [];
                        supbooks[0].XTI = [];
                    }
                    supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
                    supbooks.XTI = supbooks.XTI.concat(val);
                    break;
                case 0x0894 /* NameCmt */ :
                    /* TODO: search for correct name */ if (opts.biff < 8) break;
                    if (last_lbl != null) last_lbl.Comment = val[1];
                    break;
                case 0x0012 /* Protect */ :
                    out["!protect"] = val;
                    break; /* for sheet or book */ 
                case 0x0013 /* Password */ :
                    if (val !== 0 && opts.WTF) console.error("Password verifier: " + val);
                    break;
                case 0x0085 /* BoundSheet8 */ :
                    Directory[val.pos] = val;
                    opts.snames.push(val.name);
                    break;
                case 0x000a /* EOF */ :
                    if (--file_depth) break;
                    if (range.e) {
                        if (range.e.r > 0 && range.e.c > 0) {
                            range.e.r--;
                            range.e.c--;
                            out["!ref"] = encode_range(range);
                            if (options.sheetRows && options.sheetRows <= range.e.r) {
                                var tmpri = range.e.r;
                                range.e.r = options.sheetRows - 1;
                                out["!fullref"] = out["!ref"];
                                out["!ref"] = encode_range(range);
                                range.e.r = tmpri;
                            }
                            range.e.r++;
                            range.e.c++;
                        }
                        if (merges.length > 0) out["!merges"] = merges;
                        if (objects.length > 0) out["!objects"] = objects;
                        if (colinfo.length > 0) out["!cols"] = colinfo;
                        if (rowinfo.length > 0) out["!rows"] = rowinfo;
                        Workbook.Sheets.push(wsprops);
                    }
                    if (cur_sheet === "") Preamble = out;
                    else Sheets[cur_sheet] = out;
                    out = options.dense ? [] : {};
                    break;
                case 0x0009:
                case 0x0209:
                case 0x0409:
                case 0x0809 /* BOF */ :
                    if (opts.biff === 8) opts.biff = ({
                        /*::[*/ 0x0009: 2,
                        /*::[*/ 0x0209: 3,
                        /*::[*/ 0x0409: 4
                    })[RecordType] || ({
                        /*::[*/ 0x0200: 2,
                        /*::[*/ 0x0300: 3,
                        /*::[*/ 0x0400: 4,
                        /*::[*/ 0x0500: 5,
                        /*::[*/ 0x0600: 8,
                        /*::[*/ 0x0002: 2,
                        /*::[*/ 0x0007: 2
                    })[val.BIFFVer] || 8;
                    opts.biffguess = val.BIFFVer == 0;
                    if (val.BIFFVer == 0 && val.dt == 0x1000) {
                        opts.biff = 5;
                        seen_codepage = true;
                        set_cp(opts.codepage = 28591);
                    }
                    if (opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;
                    if (file_depth++) break;
                    out = options.dense ? [] : {};
                    if (opts.biff < 8 && !seen_codepage) {
                        seen_codepage = true;
                        set_cp(opts.codepage = options.codepage || 1252);
                    }
                    if (opts.biff < 5 || val.BIFFVer == 0 && val.dt == 0x1000) {
                        if (cur_sheet === "") cur_sheet = "Sheet1";
                        range = {
                            s: {
                                r: 0,
                                c: 0
                            },
                            e: {
                                r: 0,
                                c: 0
                            }
                        };
                        /* fake BoundSheet8 */ var fakebs8 = {
                            pos: blob.l - length,
                            name: cur_sheet
                        };
                        Directory[fakebs8.pos] = fakebs8;
                        opts.snames.push(cur_sheet);
                    } else cur_sheet = (Directory[s] || {
                        name: ""
                    }).name;
                    if (val.dt == 0x20) out["!type"] = "chart";
                    if (val.dt == 0x40) out["!type"] = "macro";
                    merges = [];
                    objects = [];
                    opts.arrayf = arrayf = [];
                    colinfo = [];
                    rowinfo = [];
                    seencol = false;
                    wsprops = {
                        Hidden: (Directory[s] || {
                            hs: 0
                        }).hs,
                        name: cur_sheet
                    };
                    break;
                case 0x0203 /* Number */ :
                case 0x0003 /* BIFF2NUM */ :
                case 0x0002 /* BIFF2INT */ :
                    if (out["!type"] == "chart") {
                        if (options.dense ? (out[val.r] || [])[val.c] : out[encode_cell({
                            c: val.c,
                            r: val.r
                        })]) ++val.c;
                    }
                    temp_val = {
                        ixfe: val.ixfe,
                        XF: XFs[val.ixfe] || {},
                        v: val.val,
                        t: "n"
                    } /*:any*/ ;
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({
                        c: val.c,
                        r: val.r
                    }, temp_val, options);
                    break;
                case 0x0005:
                case 0x0205 /* BoolErr */ :
                    temp_val = {
                        ixfe: val.ixfe,
                        XF: XFs[val.ixfe],
                        v: val.val,
                        t: val.t
                    } /*:any*/ ;
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({
                        c: val.c,
                        r: val.r
                    }, temp_val, options);
                    break;
                case 0x027e /* RK */ :
                    temp_val = {
                        ixfe: val.ixfe,
                        XF: XFs[val.ixfe],
                        v: val.rknum,
                        t: "n"
                    } /*:any*/ ;
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({
                        c: val.c,
                        r: val.r
                    }, temp_val, options);
                    break;
                case 0x00bd /* MulRk */ :
                    for(var j = val.c; j <= val.C; ++j){
                        var ixfe = val.rkrec[j - val.c][0];
                        temp_val = {
                            ixfe: ixfe,
                            XF: XFs[ixfe],
                            v: val.rkrec[j - val.c][1],
                            t: "n"
                        } /*:any*/ ;
                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({
                            c: j,
                            r: val.r
                        }, temp_val, options);
                    }
                    break;
                case 0x0006:
                case 0x0206:
                case 0x0406 /* Formula */ :
                    if (val.val == "String") {
                        last_formula = val;
                        break;
                    }
                    temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
                    temp_val.XF = XFs[temp_val.ixfe];
                    if (options.cellFormula) {
                        var _f = val.formula;
                        if (_f && _f[0] && _f[0][0] && _f[0][0][0] == "PtgExp") {
                            var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
                            var _fe = encode_cell({
                                r: _fr,
                                c: _fc
                            });
                            if (sharedf[_fe]) temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
                            else temp_val.F = ((options.dense ? (out[_fr] || [])[_fc] : out[_fe]) || {}).F;
                        } else temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
                    }
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell(val.cell, temp_val, options);
                    last_formula = val;
                    break;
                case 0x0007:
                case 0x0207 /* String */ :
                    if (last_formula) {
                        last_formula.val = val;
                        temp_val = make_cell(val, last_formula.cell.ixfe, "s");
                        temp_val.XF = XFs[temp_val.ixfe];
                        if (options.cellFormula) temp_val.f = "" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell(last_formula.cell, temp_val, options);
                        last_formula = null;
                    } else throw new Error("String record expects Formula");
                    break;
                case 0x0021:
                case 0x0221 /* Array */ :
                    arrayf.push(val);
                    var _arraystart = encode_cell(val[0].s);
                    cc = options.dense ? (out[val[0].s.r] || [])[val[0].s.c] : out[_arraystart];
                    if (options.cellFormula && cc) {
                        if (!last_formula) break; /* technically unreachable */ 
                        if (!_arraystart || !cc) break;
                        cc.f = "" + stringify_formula(val[1], range, val[0], supbooks, opts);
                        cc.F = encode_range(val[0]);
                    }
                    break;
                case 0x04bc /* ShrFmla */ :
                    if (!options.cellFormula) break;
                    if (last_cell) {
                        /* TODO: capture range */ if (!last_formula) break; /* technically unreachable */ 
                        sharedf[encode_cell(last_formula.cell)] = val[0];
                        cc = options.dense ? (out[last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
                        (cc || {}).f = "" + stringify_formula(val[0], range, lastcell, supbooks, opts);
                    }
                    break;
                case 0x00fd /* LabelSst */ :
                    temp_val = make_cell(sst[val.isst].t, val.ixfe, "s");
                    if (sst[val.isst].h) temp_val.h = sst[val.isst].h;
                    temp_val.XF = XFs[temp_val.ixfe];
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({
                        c: val.c,
                        r: val.r
                    }, temp_val, options);
                    break;
                case 0x0201 /* Blank */ :
                    if (options.sheetStubs) {
                        temp_val = {
                            ixfe: val.ixfe,
                            XF: XFs[val.ixfe],
                            t: "z"
                        } /*:any*/ ;
                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({
                            c: val.c,
                            r: val.r
                        }, temp_val, options);
                    }
                    break;
                case 0x00be /* MulBlank */ :
                    if (options.sheetStubs) for(var _j = val.c; _j <= val.C; ++_j){
                        var _ixfe = val.ixfe[_j - val.c];
                        temp_val = {
                            ixfe: _ixfe,
                            XF: XFs[_ixfe],
                            t: "z"
                        } /*:any*/ ;
                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                        safe_format_xf(temp_val, options, wb.opts.Date1904);
                        addcell({
                            c: _j,
                            r: val.r
                        }, temp_val, options);
                    }
                    break;
                case 0x00d6 /* RString */ :
                case 0x0204 /* Label */ :
                case 0x0004 /* BIFF2STR */ :
                    temp_val = make_cell(val.val, val.ixfe, "s");
                    temp_val.XF = XFs[temp_val.ixfe];
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({
                        c: val.c,
                        r: val.r
                    }, temp_val, options);
                    break;
                case 0x0000:
                case 0x0200 /* Dimensions */ :
                    if (file_depth === 1) range = val; /* TODO: stack */ 
                    break;
                case 0x00fc /* SST */ :
                    sst = val;
                    break;
                case 0x041e /* Format */ :
                    if (opts.biff == 4) {
                        BIFF2FmtTable[BIFF2Fmt++] = val[1];
                        for(var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx)if (table_fmt[b4idx] == val[1]) break;
                        if (b4idx >= 163) SSF_load(val[1], BIFF2Fmt + 163);
                    } else SSF_load(val[1], val[0]);
                    break;
                case 0x001e /* BIFF2FORMAT */ :
                    BIFF2FmtTable[BIFF2Fmt++] = val;
                    for(var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx)if (table_fmt[b2idx] == val) break;
                    if (b2idx >= 163) SSF_load(val, BIFF2Fmt + 163);
                    break;
                case 0x00e5 /* MergeCells */ :
                    merges = merges.concat(val);
                    break;
                case 0x005d /* Obj */ :
                    objects[val.cmo[0]] = opts.lastobj = val;
                    break;
                case 0x01b6 /* TxO */ :
                    opts.lastobj.TxO = val;
                    break;
                case 0x007f /* ImData */ :
                    opts.lastobj.ImData = val;
                    break;
                case 0x01b8 /* HLink */ :
                    for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC){
                        cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({
                            c: rngC,
                            r: rngR
                        })];
                        if (cc) cc.l = val[1];
                    }
                    break;
                case 0x0800 /* HLinkTooltip */ :
                    for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC){
                        cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({
                            c: rngC,
                            r: rngR
                        })];
                        if (cc && cc.l) cc.l.Tooltip = val[1];
                    }
                    break;
                case 0x001c /* Note */ :
                    if (opts.biff <= 5 && opts.biff >= 2) break; /* TODO: BIFF5 */ 
                    cc = options.dense ? (out[val[0].r] || [])[val[0].c] : out[encode_cell(val[0])];
                    var noteobj = objects[val[2]];
                    if (!cc) {
                        if (options.dense) {
                            if (!out[val[0].r]) out[val[0].r] = [];
                            cc = out[val[0].r][val[0].c] = {
                                t: "z"
                            } /*:any*/ ;
                        } else cc = out[encode_cell(val[0])] = {
                            t: "z"
                        } /*:any*/ ;
                        range.e.r = Math.max(range.e.r, val[0].r);
                        range.s.r = Math.min(range.s.r, val[0].r);
                        range.e.c = Math.max(range.e.c, val[0].c);
                        range.s.c = Math.min(range.s.c, val[0].c);
                    }
                    if (!cc.c) cc.c = [];
                    cmnt = {
                        a: val[1],
                        t: noteobj.TxO.t
                    };
                    cc.c.push(cmnt);
                    break;
                case 0x087d /* XFExt */ :
                    update_xfext(XFs[val.ixfe], val.ext);
                    break;
                case 0x007d /* ColInfo */ :
                    if (!opts.cellStyles) break;
                    while(val.e >= val.s){
                        colinfo[val.e--] = {
                            width: val.w / 256,
                            level: val.level || 0,
                            hidden: !!(val.flags & 1)
                        };
                        if (!seencol) {
                            seencol = true;
                            find_mdw_colw(val.w / 256);
                        }
                        process_col(colinfo[val.e + 1]);
                    }
                    break;
                case 0x0208 /* Row */ :
                    var rowobj = {};
                    if (val.level != null) {
                        rowinfo[val.r] = rowobj;
                        rowobj.level = val.level;
                    }
                    if (val.hidden) {
                        rowinfo[val.r] = rowobj;
                        rowobj.hidden = true;
                    }
                    if (val.hpt) {
                        rowinfo[val.r] = rowobj;
                        rowobj.hpt = val.hpt;
                        rowobj.hpx = pt2px(val.hpt);
                    }
                    break;
                case 0x0026 /* LeftMargin */ :
                case 0x0027 /* RightMargin */ :
                case 0x0028 /* TopMargin */ :
                case 0x0029 /* BottomMargin */ :
                    if (!out["!margins"]) default_margins(out["!margins"] = {});
                    out["!margins"][({
                        0x26: "left",
                        0x27: "right",
                        0x28: "top",
                        0x29: "bottom"
                    })[RecordType]] = val;
                    break;
                case 0x00a1 /* Setup */ :
                    if (!out["!margins"]) default_margins(out["!margins"] = {});
                    out["!margins"].header = val.header;
                    out["!margins"].footer = val.footer;
                    break;
                case 0x023e /* Window2 */ :
                    // $FlowIgnore
                    if (val.RTL) Workbook.Views[0].RTL = true;
                    break;
                case 0x0092 /* Palette */ :
                    palette = val;
                    break;
                case 0x0896 /* Theme */ :
                    themes = val;
                    break;
                case 0x008c /* Country */ :
                    country = val;
                    break;
                case 0x01ba /* CodeName */ :
                    /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */ if (!cur_sheet) Workbook.WBProps.CodeName = val || "ThisWorkbook";
                    else wsprops.CodeName = val || wsprops.name;
                    break;
            }
        } else {
            if (!R) console.error("Missing Info for XLS Record 0x" + RecordType.toString(16));
            blob.l += length;
        }
    }
    wb.SheetNames = keys(Directory).sort(function(a, b) {
        return Number(a) - Number(b);
    }).map(function(x) {
        return Directory[x].name;
    });
    if (!options.bookSheets) wb.Sheets = Sheets;
    if (!wb.SheetNames.length && Preamble["!ref"]) {
        wb.SheetNames.push("Sheet1");
        /*jshint -W069 */ if (wb.Sheets) wb.Sheets["Sheet1"] = Preamble;
    /*jshint +W069 */ } else wb.Preamble = Preamble;
    if (wb.Sheets) FilterDatabases.forEach(function(r, i) {
        wb.Sheets[wb.SheetNames[i]]["!autofilter"] = r;
    });
    wb.Strings = sst;
    wb.SSF = dup(table_fmt);
    if (opts.enc) wb.Encryption = opts.enc;
    if (themes) wb.Themes = themes;
    wb.Metadata = {};
    if (country !== undefined) wb.Metadata.Country = country;
    if (supbooks.names.length > 0) Workbook.Names = supbooks.names;
    wb.Workbook = Workbook;
    return wb;
}
/* TODO: split props*/ var PSCLSID = {
    SI: "e0859ff2f94f6810ab9108002b27b3d9",
    DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
    UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
};
function parse_xls_props(cfb /*:CFBContainer*/ , props, o) {
    /* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */ var DSI = CFB.find(cfb, "/!DocumentSummaryInformation");
    if (DSI && DSI.size > 0) try {
        var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
        for(var d in DocSummary)props[d] = DocSummary[d];
    } catch (e) {
        if (o.WTF) throw e; /* empty */ 
    }
    /* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/ var SI = CFB.find(cfb, "/!SummaryInformation");
    if (SI && SI.size > 0) try {
        var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
        for(var s in Summary)if (props[s] == null) props[s] = Summary[s];
    } catch (e) {
        if (o.WTF) throw e; /* empty */ 
    }
    if (props.HeadingPairs && props.TitlesOfParts) {
        load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);
        delete props.HeadingPairs;
        delete props.TitlesOfParts;
    }
}
function write_xls_props(wb /*:Workbook*/ , cfb /*:CFBContainer*/ ) {
    var DSEntries = [], SEntries = [], CEntries = [];
    var i = 0, Keys;
    var DocSummaryRE /*:{[key:string]:string}*/  = evert_key(DocSummaryPIDDSI, "n");
    var SummaryRE /*:{[key:string]:string}*/  = evert_key(SummaryPIDSI, "n");
    if (wb.Props) {
        Keys = keys(wb.Props);
        // $FlowIgnore
        for(i = 0; i < Keys.length; ++i)(Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([
            Keys[i],
            wb.Props[Keys[i]]
        ]);
    }
    if (wb.Custprops) {
        Keys = keys(wb.Custprops);
        // $FlowIgnore
        for(i = 0; i < Keys.length; ++i)if (!Object.prototype.hasOwnProperty.call(wb.Props || {}, Keys[i])) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([
            Keys[i],
            wb.Custprops[Keys[i]]
        ]);
    }
    var CEntries2 = [];
    for(i = 0; i < CEntries.length; ++i){
        if (XLSPSSkip.indexOf(CEntries[i][0]) > -1 || PseudoPropsPairs.indexOf(CEntries[i][0]) > -1) continue;
        if (CEntries[i][1] == null) continue;
        CEntries2.push(CEntries[i]);
    }
    if (SEntries.length) CFB.utils.cfb_add(cfb, "/\x05SummaryInformation", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));
    if (DSEntries.length || CEntries2.length) CFB.utils.cfb_add(cfb, "/\x05DocumentSummaryInformation", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));
}
function parse_xlscfb(cfb /*:any*/ , options /*:?ParseOpts*/ ) /*:Workbook*/ {
    if (!options) options = {};
    fix_read_opts(options);
    reset_cp();
    if (options.codepage) set_ansi(options.codepage);
    var CompObj /*:?CFBEntry*/ , WB /*:?any*/ ;
    if (cfb.FullPaths) {
        if (CFB.find(cfb, "/encryption")) throw new Error("File is password-protected");
        CompObj = CFB.find(cfb, "!CompObj");
        WB = CFB.find(cfb, "/Workbook") || CFB.find(cfb, "/Book");
    } else {
        switch(options.type){
            case "base64":
                cfb = s2a(Base64_decode(cfb));
                break;
            case "binary":
                cfb = s2a(cfb);
                break;
            case "buffer":
                break;
            case "array":
                if (!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb);
                break;
        }
        prep_blob(cfb, 0);
        WB = {
            content: cfb
        } /*:any*/ ;
    }
    var /*::CompObjP, */ WorkbookP /*:: :Workbook = XLSX.utils.book_new(); */ ;
    var _data /*:?any*/ ;
    if (CompObj) /*::CompObjP = */ parse_compobj(CompObj);
    if (options.bookProps && !options.bookSheets) WorkbookP = {} /*:any*/ ;
    else /*:: if(cfb instanceof CFBContainer) */ {
        var T = has_buf ? "buffer" : "array";
        if (WB && WB.content) WorkbookP = parse_workbook(WB.content, options);
        else if ((_data = CFB.find(cfb, "PerfectOffice_MAIN")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
        else if ((_data = CFB.find(cfb, "NativeContent_MAIN")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
        else if ((_data = CFB.find(cfb, "MN0")) && _data.content) throw new Error("Unsupported Works 4 for Mac file");
        else throw new Error("Cannot find Workbook stream");
        if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, "/_VBA_PROJECT_CUR/VBA/dir")) WorkbookP.vbaraw = make_vba_xls(cfb);
    }
    var props = {};
    if (cfb.FullPaths) parse_xls_props(/*::((*/ cfb /*:: :any):CFBContainer)*/ , props, options);
    WorkbookP.Props = WorkbookP.Custprops = props; /* TODO: split up properties */ 
    if (options.bookFiles) WorkbookP.cfb = cfb;
    /*WorkbookP.CompObjP = CompObjP; // TODO: storage? */ return WorkbookP;
}
function write_xlscfb(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:CFBContainer*/ {
    var o = opts || {};
    var cfb = CFB.utils.cfb_new({
        root: "R"
    });
    var wbpath = "/Workbook";
    switch(o.bookType || "xls"){
        case "xls":
            o.bookType = "biff8";
        /* falls through */ case "xla":
            if (!o.bookType) o.bookType = "xla";
        /* falls through */ case "biff8":
            wbpath = "/Workbook";
            o.biff = 8;
            break;
        case "biff5":
            wbpath = "/Book";
            o.biff = 5;
            break;
        default:
            throw new Error("invalid type " + o.bookType + " for XLS CFB");
    }
    CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));
    if (o.biff == 8 && (wb.Props || wb.Custprops)) write_xls_props(wb, cfb);
    // TODO: SI, DSI, CO
    if (o.biff == 8 && wb.vbaraw) fill_vba_xls(cfb, CFB.read(wb.vbaraw, {
        type: typeof wb.vbaraw == "string" ? "binary" : "buffer"
    }));
    return cfb;
}
/* [MS-XLSB] 2.3 Record Enumeration */ var XLSBRecordEnum = {
    /*::[*/ 0x0000: {
        f: parse_BrtRowHdr
    },
    /*::[*/ 0x0001: {
        f: parse_BrtCellBlank
    },
    /*::[*/ 0x0002: {
        f: parse_BrtCellRk
    },
    /*::[*/ 0x0003: {
        f: parse_BrtCellError
    },
    /*::[*/ 0x0004: {
        f: parse_BrtCellBool
    },
    /*::[*/ 0x0005: {
        f: parse_BrtCellReal
    },
    /*::[*/ 0x0006: {
        f: parse_BrtCellSt
    },
    /*::[*/ 0x0007: {
        f: parse_BrtCellIsst
    },
    /*::[*/ 0x0008: {
        f: parse_BrtFmlaString
    },
    /*::[*/ 0x0009: {
        f: parse_BrtFmlaNum
    },
    /*::[*/ 0x000A: {
        f: parse_BrtFmlaBool
    },
    /*::[*/ 0x000B: {
        f: parse_BrtFmlaError
    },
    /*::[*/ 0x000C: {
        f: parse_BrtShortBlank
    },
    /*::[*/ 0x000D: {
        f: parse_BrtShortRk
    },
    /*::[*/ 0x000E: {
        f: parse_BrtShortError
    },
    /*::[*/ 0x000F: {
        f: parse_BrtShortBool
    },
    /*::[*/ 0x0010: {
        f: parse_BrtShortReal
    },
    /*::[*/ 0x0011: {
        f: parse_BrtShortSt
    },
    /*::[*/ 0x0012: {
        f: parse_BrtShortIsst
    },
    /*::[*/ 0x0013: {
        f: parse_RichStr
    },
    /*::[*/ 0x0014: {},
    /*::[*/ 0x0015: {},
    /*::[*/ 0x0016: {},
    /*::[*/ 0x0017: {},
    /*::[*/ 0x0018: {},
    /*::[*/ 0x0019: {},
    /*::[*/ 0x001A: {},
    /*::[*/ 0x001B: {},
    /*::[*/ 0x001C: {},
    /*::[*/ 0x001D: {},
    /*::[*/ 0x001E: {},
    /*::[*/ 0x001F: {},
    /*::[*/ 0x0020: {},
    /*::[*/ 0x0021: {},
    /*::[*/ 0x0022: {},
    /*::[*/ 0x0023: {
        T: 1
    },
    /*::[*/ 0x0024: {
        T: -1
    },
    /*::[*/ 0x0025: {
        T: 1
    },
    /*::[*/ 0x0026: {
        T: -1
    },
    /*::[*/ 0x0027: {
        f: parse_BrtName
    },
    /*::[*/ 0x0028: {},
    /*::[*/ 0x002A: {},
    /*::[*/ 0x002B: {
        f: parse_BrtFont
    },
    /*::[*/ 0x002C: {
        f: parse_BrtFmt
    },
    /*::[*/ 0x002D: {
        f: parse_BrtFill
    },
    /*::[*/ 0x002E: {
        f: parse_BrtBorder
    },
    /*::[*/ 0x002F: {
        f: parse_BrtXF
    },
    /*::[*/ 0x0030: {},
    /*::[*/ 0x0031: {
        f: parse_Int32LE
    },
    /*::[*/ 0x0032: {},
    /*::[*/ 0x0033: {
        f: parse_BrtMdb
    },
    /*::[*/ 0x0034: {
        T: 1
    },
    /*::[*/ 0x0035: {
        T: -1
    },
    /*::[*/ 0x0036: {
        T: 1
    },
    /*::[*/ 0x0037: {
        T: -1
    },
    /*::[*/ 0x0038: {
        T: 1
    },
    /*::[*/ 0x0039: {
        T: -1
    },
    /*::[*/ 0x003A: {},
    /*::[*/ 0x003B: {},
    /*::[*/ 0x003C: {
        f: parse_ColInfo
    },
    /*::[*/ 0x003E: {
        f: parse_BrtCellRString
    },
    /*::[*/ 0x003F: {
        f: parse_BrtCalcChainItem$
    },
    /*::[*/ 0x0040: {
        f: parse_BrtDVal
    },
    /*::[*/ 0x0041: {},
    /*::[*/ 0x0042: {},
    /*::[*/ 0x0043: {},
    /*::[*/ 0x0044: {},
    /*::[*/ 0x0045: {},
    /*::[*/ 0x0046: {},
    /*::[*/ 0x0080: {},
    /*::[*/ 0x0081: {
        T: 1
    },
    /*::[*/ 0x0082: {
        T: -1
    },
    /*::[*/ 0x0083: {
        T: 1,
        f: parsenoop,
        p: 0
    },
    /*::[*/ 0x0084: {
        T: -1
    },
    /*::[*/ 0x0085: {
        T: 1
    },
    /*::[*/ 0x0086: {
        T: -1
    },
    /*::[*/ 0x0087: {
        T: 1
    },
    /*::[*/ 0x0088: {
        T: -1
    },
    /*::[*/ 0x0089: {
        T: 1,
        f: parse_BrtBeginWsView
    },
    /*::[*/ 0x008A: {
        T: -1
    },
    /*::[*/ 0x008B: {
        T: 1
    },
    /*::[*/ 0x008C: {
        T: -1
    },
    /*::[*/ 0x008D: {
        T: 1
    },
    /*::[*/ 0x008E: {
        T: -1
    },
    /*::[*/ 0x008F: {
        T: 1
    },
    /*::[*/ 0x0090: {
        T: -1
    },
    /*::[*/ 0x0091: {
        T: 1
    },
    /*::[*/ 0x0092: {
        T: -1
    },
    /*::[*/ 0x0093: {
        f: parse_BrtWsProp
    },
    /*::[*/ 0x0094: {
        f: parse_BrtWsDim,
        p: 16
    },
    /*::[*/ 0x0097: {
        f: parse_BrtPane
    },
    /*::[*/ 0x0098: {},
    /*::[*/ 0x0099: {
        f: parse_BrtWbProp
    },
    /*::[*/ 0x009A: {},
    /*::[*/ 0x009B: {},
    /*::[*/ 0x009C: {
        f: parse_BrtBundleSh
    },
    /*::[*/ 0x009D: {},
    /*::[*/ 0x009E: {},
    /*::[*/ 0x009F: {
        T: 1,
        f: parse_BrtBeginSst
    },
    /*::[*/ 0x00A0: {
        T: -1
    },
    /*::[*/ 0x00A1: {
        T: 1,
        f: parse_UncheckedRfX
    },
    /*::[*/ 0x00A2: {
        T: -1
    },
    /*::[*/ 0x00A3: {
        T: 1
    },
    /*::[*/ 0x00A4: {
        T: -1
    },
    /*::[*/ 0x00A5: {
        T: 1
    },
    /*::[*/ 0x00A6: {
        T: -1
    },
    /*::[*/ 0x00A7: {},
    /*::[*/ 0x00A8: {},
    /*::[*/ 0x00A9: {},
    /*::[*/ 0x00AA: {},
    /*::[*/ 0x00AB: {},
    /*::[*/ 0x00AC: {
        T: 1
    },
    /*::[*/ 0x00AD: {
        T: -1
    },
    /*::[*/ 0x00AE: {},
    /*::[*/ 0x00AF: {},
    /*::[*/ 0x00B0: {
        f: parse_BrtMergeCell
    },
    /*::[*/ 0x00B1: {
        T: 1
    },
    /*::[*/ 0x00B2: {
        T: -1
    },
    /*::[*/ 0x00B3: {
        T: 1
    },
    /*::[*/ 0x00B4: {
        T: -1
    },
    /*::[*/ 0x00B5: {
        T: 1
    },
    /*::[*/ 0x00B6: {
        T: -1
    },
    /*::[*/ 0x00B7: {
        T: 1
    },
    /*::[*/ 0x00B8: {
        T: -1
    },
    /*::[*/ 0x00B9: {
        T: 1
    },
    /*::[*/ 0x00BA: {
        T: -1
    },
    /*::[*/ 0x00BB: {
        T: 1
    },
    /*::[*/ 0x00BC: {
        T: -1
    },
    /*::[*/ 0x00BD: {
        T: 1
    },
    /*::[*/ 0x00BE: {
        T: -1
    },
    /*::[*/ 0x00BF: {
        T: 1
    },
    /*::[*/ 0x00C0: {
        T: -1
    },
    /*::[*/ 0x00C1: {
        T: 1
    },
    /*::[*/ 0x00C2: {
        T: -1
    },
    /*::[*/ 0x00C3: {
        T: 1
    },
    /*::[*/ 0x00C4: {
        T: -1
    },
    /*::[*/ 0x00C5: {
        T: 1
    },
    /*::[*/ 0x00C6: {
        T: -1
    },
    /*::[*/ 0x00C7: {
        T: 1
    },
    /*::[*/ 0x00C8: {
        T: -1
    },
    /*::[*/ 0x00C9: {
        T: 1
    },
    /*::[*/ 0x00CA: {
        T: -1
    },
    /*::[*/ 0x00CB: {
        T: 1
    },
    /*::[*/ 0x00CC: {
        T: -1
    },
    /*::[*/ 0x00CD: {
        T: 1
    },
    /*::[*/ 0x00CE: {
        T: -1
    },
    /*::[*/ 0x00CF: {
        T: 1
    },
    /*::[*/ 0x00D0: {
        T: -1
    },
    /*::[*/ 0x00D1: {
        T: 1
    },
    /*::[*/ 0x00D2: {
        T: -1
    },
    /*::[*/ 0x00D3: {
        T: 1
    },
    /*::[*/ 0x00D4: {
        T: -1
    },
    /*::[*/ 0x00D5: {
        T: 1
    },
    /*::[*/ 0x00D6: {
        T: -1
    },
    /*::[*/ 0x00D7: {
        T: 1
    },
    /*::[*/ 0x00D8: {
        T: -1
    },
    /*::[*/ 0x00D9: {
        T: 1
    },
    /*::[*/ 0x00DA: {
        T: -1
    },
    /*::[*/ 0x00DB: {
        T: 1
    },
    /*::[*/ 0x00DC: {
        T: -1
    },
    /*::[*/ 0x00DD: {
        T: 1
    },
    /*::[*/ 0x00DE: {
        T: -1
    },
    /*::[*/ 0x00DF: {
        T: 1
    },
    /*::[*/ 0x00E0: {
        T: -1
    },
    /*::[*/ 0x00E1: {
        T: 1
    },
    /*::[*/ 0x00E2: {
        T: -1
    },
    /*::[*/ 0x00E3: {
        T: 1
    },
    /*::[*/ 0x00E4: {
        T: -1
    },
    /*::[*/ 0x00E5: {
        T: 1
    },
    /*::[*/ 0x00E6: {
        T: -1
    },
    /*::[*/ 0x00E7: {
        T: 1
    },
    /*::[*/ 0x00E8: {
        T: -1
    },
    /*::[*/ 0x00E9: {
        T: 1
    },
    /*::[*/ 0x00EA: {
        T: -1
    },
    /*::[*/ 0x00EB: {
        T: 1
    },
    /*::[*/ 0x00EC: {
        T: -1
    },
    /*::[*/ 0x00ED: {
        T: 1
    },
    /*::[*/ 0x00EE: {
        T: -1
    },
    /*::[*/ 0x00EF: {
        T: 1
    },
    /*::[*/ 0x00F0: {
        T: -1
    },
    /*::[*/ 0x00F1: {
        T: 1
    },
    /*::[*/ 0x00F2: {
        T: -1
    },
    /*::[*/ 0x00F3: {
        T: 1
    },
    /*::[*/ 0x00F4: {
        T: -1
    },
    /*::[*/ 0x00F5: {
        T: 1
    },
    /*::[*/ 0x00F6: {
        T: -1
    },
    /*::[*/ 0x00F7: {
        T: 1
    },
    /*::[*/ 0x00F8: {
        T: -1
    },
    /*::[*/ 0x00F9: {
        T: 1
    },
    /*::[*/ 0x00FA: {
        T: -1
    },
    /*::[*/ 0x00FB: {
        T: 1
    },
    /*::[*/ 0x00FC: {
        T: -1
    },
    /*::[*/ 0x00FD: {
        T: 1
    },
    /*::[*/ 0x00FE: {
        T: -1
    },
    /*::[*/ 0x00FF: {
        T: 1
    },
    /*::[*/ 0x0100: {
        T: -1
    },
    /*::[*/ 0x0101: {
        T: 1
    },
    /*::[*/ 0x0102: {
        T: -1
    },
    /*::[*/ 0x0103: {
        T: 1
    },
    /*::[*/ 0x0104: {
        T: -1
    },
    /*::[*/ 0x0105: {
        T: 1
    },
    /*::[*/ 0x0106: {
        T: -1
    },
    /*::[*/ 0x0107: {
        T: 1
    },
    /*::[*/ 0x0108: {
        T: -1
    },
    /*::[*/ 0x0109: {
        T: 1
    },
    /*::[*/ 0x010A: {
        T: -1
    },
    /*::[*/ 0x010B: {
        T: 1
    },
    /*::[*/ 0x010C: {
        T: -1
    },
    /*::[*/ 0x010D: {
        T: 1
    },
    /*::[*/ 0x010E: {
        T: -1
    },
    /*::[*/ 0x010F: {
        T: 1
    },
    /*::[*/ 0x0110: {
        T: -1
    },
    /*::[*/ 0x0111: {
        T: 1
    },
    /*::[*/ 0x0112: {
        T: -1
    },
    /*::[*/ 0x0113: {
        T: 1
    },
    /*::[*/ 0x0114: {
        T: -1
    },
    /*::[*/ 0x0115: {},
    /*::[*/ 0x0116: {
        T: 1
    },
    /*::[*/ 0x0117: {
        T: -1
    },
    /*::[*/ 0x0118: {
        T: 1
    },
    /*::[*/ 0x0119: {
        T: -1
    },
    /*::[*/ 0x011A: {
        T: 1
    },
    /*::[*/ 0x011B: {
        T: 1
    },
    /*::[*/ 0x011C: {
        T: -1
    },
    /*::[*/ 0x011D: {
        T: 1
    },
    /*::[*/ 0x011E: {
        T: -1
    },
    /*::[*/ 0x011F: {
        T: 1
    },
    /*::[*/ 0x0120: {
        T: -1
    },
    /*::[*/ 0x0121: {
        T: 1
    },
    /*::[*/ 0x0122: {
        T: -1
    },
    /*::[*/ 0x0123: {
        T: 1
    },
    /*::[*/ 0x0124: {
        T: -1
    },
    /*::[*/ 0x0125: {
        T: 1
    },
    /*::[*/ 0x0126: {
        T: -1
    },
    /*::[*/ 0x0127: {
        T: 1
    },
    /*::[*/ 0x0128: {
        T: -1
    },
    /*::[*/ 0x0129: {
        T: 1
    },
    /*::[*/ 0x012A: {
        T: -1
    },
    /*::[*/ 0x012B: {
        T: 1
    },
    /*::[*/ 0x012C: {
        T: -1
    },
    /*::[*/ 0x012D: {
        T: 1
    },
    /*::[*/ 0x012E: {
        T: -1
    },
    /*::[*/ 0x012F: {
        T: 1
    },
    /*::[*/ 0x0130: {
        T: -1
    },
    /*::[*/ 0x0131: {
        T: 1
    },
    /*::[*/ 0x0132: {
        T: -1
    },
    /*::[*/ 0x0133: {
        T: 1
    },
    /*::[*/ 0x0134: {
        T: -1
    },
    /*::[*/ 0x0135: {
        T: 1
    },
    /*::[*/ 0x0136: {
        T: -1
    },
    /*::[*/ 0x0137: {
        T: 1
    },
    /*::[*/ 0x0138: {
        T: -1
    },
    /*::[*/ 0x0139: {
        T: -1
    },
    /*::[*/ 0x013A: {
        T: 1
    },
    /*::[*/ 0x013B: {
        T: -1
    },
    /*::[*/ 0x013C: {
        T: 1
    },
    /*::[*/ 0x013D: {
        T: -1
    },
    /*::[*/ 0x013E: {
        T: 1
    },
    /*::[*/ 0x013F: {
        T: -1
    },
    /*::[*/ 0x0140: {
        T: 1
    },
    /*::[*/ 0x0141: {
        T: -1
    },
    /*::[*/ 0x0142: {
        T: 1
    },
    /*::[*/ 0x0143: {
        T: -1
    },
    /*::[*/ 0x0144: {
        T: 1
    },
    /*::[*/ 0x0145: {
        T: -1
    },
    /*::[*/ 0x0146: {
        T: 1
    },
    /*::[*/ 0x0147: {
        T: -1
    },
    /*::[*/ 0x0148: {
        T: 1
    },
    /*::[*/ 0x0149: {
        T: -1
    },
    /*::[*/ 0x014A: {
        T: 1
    },
    /*::[*/ 0x014B: {
        T: -1
    },
    /*::[*/ 0x014C: {
        T: 1
    },
    /*::[*/ 0x014D: {
        T: -1
    },
    /*::[*/ 0x014E: {
        T: 1
    },
    /*::[*/ 0x014F: {
        f: parse_BrtMdtinfo
    },
    /*::[*/ 0x0150: {
        T: -1
    },
    /*::[*/ 0x0151: {
        f: parse_BrtBeginEsmdb,
        T: 1
    },
    /*::[*/ 0x0152: {
        T: -1
    },
    /*::[*/ 0x0153: {
        T: 1
    },
    /*::[*/ 0x0154: {
        T: -1
    },
    /*::[*/ 0x0155: {
        T: 1
    },
    /*::[*/ 0x0156: {
        T: -1
    },
    /*::[*/ 0x0157: {
        T: 1
    },
    /*::[*/ 0x0158: {
        T: -1
    },
    /*::[*/ 0x0159: {
        T: 1
    },
    /*::[*/ 0x015A: {
        T: -1
    },
    /*::[*/ 0x015B: {
        T: 1
    },
    /*::[*/ 0x015C: {
        T: -1
    },
    /*::[*/ 0x015D: {
        T: 1
    },
    /*::[*/ 0x015E: {
        T: -1
    },
    /*::[*/ 0x015F: {},
    /*::[*/ 0x0160: {},
    /*::[*/ 0x0161: {
        T: 1
    },
    /*::[*/ 0x0162: {
        T: -1
    },
    /*::[*/ 0x0163: {
        f: parse_RelID
    },
    /*::[*/ 0x0165: {},
    /*::[*/ 0x0166: {},
    /*::[*/ 0x0167: {},
    /*::[*/ 0x0168: {
        T: 1
    },
    /*::[*/ 0x0169: {},
    /*::[*/ 0x016A: {
        f: parse_ExternSheet
    },
    /*::[*/ 0x016B: {},
    /*::[*/ 0x016C: {},
    /*::[*/ 0x016E: {},
    /*::[*/ 0x016F: {},
    /*::[*/ 0x0170: {},
    /*::[*/ 0x0171: {},
    /*::[*/ 0x0172: {},
    /*::[*/ 0x0173: {},
    /*::[*/ 0x0174: {
        T: 1
    },
    /*::[*/ 0x0175: {
        T: -1
    },
    /*::[*/ 0x0176: {
        T: 1
    },
    /*::[*/ 0x0177: {
        T: -1
    },
    /*::[*/ 0x0178: {
        T: 1
    },
    /*::[*/ 0x0179: {
        T: -1
    },
    /*::[*/ 0x017A: {
        T: 1
    },
    /*::[*/ 0x017B: {
        T: -1
    },
    /*::[*/ 0x017C: {
        T: 1
    },
    /*::[*/ 0x017D: {
        T: -1
    },
    /*::[*/ 0x017E: {
        T: 1
    },
    /*::[*/ 0x017F: {
        T: -1
    },
    /*::[*/ 0x0180: {
        T: 1
    },
    /*::[*/ 0x0181: {
        T: -1
    },
    /*::[*/ 0x0182: {
        T: 1
    },
    /*::[*/ 0x0183: {
        T: -1
    },
    /*::[*/ 0x0184: {
        T: 1
    },
    /*::[*/ 0x0185: {
        T: -1
    },
    /*::[*/ 0x0186: {
        T: 1
    },
    /*::[*/ 0x0187: {
        T: -1
    },
    /*::[*/ 0x0188: {
        T: 1
    },
    /*::[*/ 0x0189: {
        T: -1
    },
    /*::[*/ 0x018A: {
        T: 1
    },
    /*::[*/ 0x018B: {
        T: -1
    },
    /*::[*/ 0x018C: {},
    /*::[*/ 0x018D: {},
    /*::[*/ 0x018E: {},
    /*::[*/ 0x018F: {},
    /*::[*/ 0x0190: {},
    /*::[*/ 0x0191: {
        T: 1
    },
    /*::[*/ 0x0193: {},
    /*::[*/ 0x0194: {},
    /*::[*/ 0x0195: {},
    /*::[*/ 0x0196: {},
    /*::[*/ 0x0197: {},
    /*::[*/ 0x0198: {},
    /*::[*/ 0x0199: {},
    /*::[*/ 0x019A: {},
    /*::[*/ 0x019B: {},
    /*::[*/ 0x019C: {},
    /*::[*/ 0x019D: {},
    /*::[*/ 0x019E: {},
    /*::[*/ 0x019F: {},
    /*::[*/ 0x01A0: {},
    /*::[*/ 0x01A1: {},
    /*::[*/ 0x01A2: {},
    /*::[*/ 0x01A3: {},
    /*::[*/ 0x01A4: {},
    /*::[*/ 0x01A5: {},
    /*::[*/ 0x01A6: {
        T: 1
    },
    /*::[*/ 0x01A7: {
        T: 1
    },
    /*::[*/ 0x01A8: {
        T: -1
    },
    /*::[*/ 0x01A9: {
        T: -1
    },
    /*::[*/ 0x01AA: {
        f: parse_BrtArrFmla
    },
    /*::[*/ 0x01AB: {
        f: parse_BrtShrFmla
    },
    /*::[*/ 0x01AC: {},
    /*::[*/ 0x01AD: {
        T: 1
    },
    /*::[*/ 0x01AE: {
        T: -1
    },
    /*::[*/ 0x01AF: {
        T: 1
    },
    /*::[*/ 0x01B0: {
        T: -1
    },
    /*::[*/ 0x01B1: {
        T: 1
    },
    /*::[*/ 0x01B2: {
        T: -1
    },
    /*::[*/ 0x01B3: {
        T: 1
    },
    /*::[*/ 0x01B4: {
        T: -1
    },
    /*::[*/ 0x01B5: {
        T: 1
    },
    /*::[*/ 0x01B6: {
        T: -1
    },
    /*::[*/ 0x01B7: {
        T: 1
    },
    /*::[*/ 0x01B8: {
        T: -1
    },
    /*::[*/ 0x01B9: {
        T: 1
    },
    /*::[*/ 0x01BA: {
        T: -1
    },
    /*::[*/ 0x01BB: {
        T: 1
    },
    /*::[*/ 0x01BC: {
        T: -1
    },
    /*::[*/ 0x01BD: {
        T: 1
    },
    /*::[*/ 0x01BE: {
        T: -1
    },
    /*::[*/ 0x01BF: {
        T: 1
    },
    /*::[*/ 0x01C0: {
        T: -1
    },
    /*::[*/ 0x01C1: {
        T: 1
    },
    /*::[*/ 0x01C2: {
        T: -1
    },
    /*::[*/ 0x01C3: {
        T: 1
    },
    /*::[*/ 0x01C4: {
        T: -1
    },
    /*::[*/ 0x01C5: {
        T: 1
    },
    /*::[*/ 0x01C6: {
        T: -1
    },
    /*::[*/ 0x01C7: {
        T: 1
    },
    /*::[*/ 0x01C8: {
        T: -1
    },
    /*::[*/ 0x01C9: {
        T: 1
    },
    /*::[*/ 0x01CA: {
        T: -1
    },
    /*::[*/ 0x01CB: {
        T: 1
    },
    /*::[*/ 0x01CC: {
        T: -1
    },
    /*::[*/ 0x01CD: {
        T: 1
    },
    /*::[*/ 0x01CE: {
        T: -1
    },
    /*::[*/ 0x01CF: {
        T: 1
    },
    /*::[*/ 0x01D0: {
        T: -1
    },
    /*::[*/ 0x01D1: {
        T: 1
    },
    /*::[*/ 0x01D2: {
        T: -1
    },
    /*::[*/ 0x01D3: {
        T: 1
    },
    /*::[*/ 0x01D4: {
        T: -1
    },
    /*::[*/ 0x01D5: {
        T: 1
    },
    /*::[*/ 0x01D6: {
        T: -1
    },
    /*::[*/ 0x01D7: {},
    /*::[*/ 0x01D8: {},
    /*::[*/ 0x01D9: {
        T: 1
    },
    /*::[*/ 0x01DA: {
        T: -1
    },
    /*::[*/ 0x01DB: {},
    /*::[*/ 0x01DC: {
        f: parse_BrtMargins
    },
    /*::[*/ 0x01DD: {},
    /*::[*/ 0x01DE: {},
    /*::[*/ 0x01DF: {
        T: 1
    },
    /*::[*/ 0x01E0: {
        T: -1
    },
    /*::[*/ 0x01E1: {
        T: 1
    },
    /*::[*/ 0x01E2: {
        T: -1
    },
    /*::[*/ 0x01E3: {
        T: 1
    },
    /*::[*/ 0x01E4: {
        T: -1
    },
    /*::[*/ 0x01E5: {
        f: parse_BrtWsFmtInfo
    },
    /*::[*/ 0x01E6: {
        T: 1
    },
    /*::[*/ 0x01E7: {
        T: -1
    },
    /*::[*/ 0x01E8: {
        T: 1
    },
    /*::[*/ 0x01E9: {
        T: -1
    },
    /*::[*/ 0x01EA: {
        T: 1
    },
    /*::[*/ 0x01EB: {
        T: -1
    },
    /*::[*/ 0x01EC: {
        T: 1
    },
    /*::[*/ 0x01ED: {
        T: -1
    },
    /*::[*/ 0x01EE: {
        f: parse_BrtHLink
    },
    /*::[*/ 0x01EF: {
        T: 1
    },
    /*::[*/ 0x01F0: {
        T: -1
    },
    /*::[*/ 0x01F1: {
        T: 1
    },
    /*::[*/ 0x01F2: {
        T: -1
    },
    /*::[*/ 0x01F3: {},
    /*::[*/ 0x01F4: {
        T: 1
    },
    /*::[*/ 0x01F5: {
        T: -1
    },
    /*::[*/ 0x01F6: {
        T: 1
    },
    /*::[*/ 0x01F7: {
        T: -1
    },
    /*::[*/ 0x01F8: {},
    /*::[*/ 0x01F9: {
        T: 1
    },
    /*::[*/ 0x01FA: {
        T: -1
    },
    /*::[*/ 0x01FB: {},
    /*::[*/ 0x01FC: {
        T: 1
    },
    /*::[*/ 0x01FD: {
        T: -1
    },
    /*::[*/ 0x01FE: {
        T: 1
    },
    /*::[*/ 0x01FF: {
        T: -1
    },
    /*::[*/ 0x0200: {},
    /*::[*/ 0x0201: {},
    /*::[*/ 0x0202: {
        T: 1
    },
    /*::[*/ 0x0203: {
        T: -1
    },
    /*::[*/ 0x0204: {
        T: 1
    },
    /*::[*/ 0x0205: {
        T: -1
    },
    /*::[*/ 0x0206: {
        T: 1
    },
    /*::[*/ 0x0207: {
        T: -1
    },
    /*::[*/ 0x0208: {
        T: 1
    },
    /*::[*/ 0x0209: {
        T: -1
    },
    /*::[*/ 0x020A: {},
    /*::[*/ 0x020B: {},
    /*::[*/ 0x020C: {},
    /*::[*/ 0x020D: {},
    /*::[*/ 0x020E: {},
    /*::[*/ 0x020F: {},
    /*::[*/ 0x0210: {
        T: 1
    },
    /*::[*/ 0x0211: {
        T: -1
    },
    /*::[*/ 0x0212: {
        T: 1
    },
    /*::[*/ 0x0213: {
        T: -1
    },
    /*::[*/ 0x0214: {
        T: 1
    },
    /*::[*/ 0x0215: {
        T: -1
    },
    /*::[*/ 0x0216: {},
    /*::[*/ 0x0217: {},
    /*::[*/ 0x0218: {},
    /*::[*/ 0x0219: {},
    /*::[*/ 0x021A: {
        T: 1
    },
    /*::[*/ 0x021B: {
        T: -1
    },
    /*::[*/ 0x021C: {
        T: 1
    },
    /*::[*/ 0x021D: {
        T: -1
    },
    /*::[*/ 0x021E: {
        T: 1
    },
    /*::[*/ 0x0224: {},
    /*::[*/ 0x0225: {},
    /*::[*/ 0x0226: {
        f: parse_RelID
    },
    /*::[*/ 0x0227: {},
    /*::[*/ 0x0228: {},
    /*::[*/ 0x0229: {},
    /*::[*/ 0x022A: {
        T: 1
    },
    /*::[*/ 0x022B: {
        T: -1
    },
    /*::[*/ 0x022C: {
        T: 1
    },
    /*::[*/ 0x022D: {
        T: -1
    },
    /*::[*/ 0x022E: {
        T: 1
    },
    /*::[*/ 0x022F: {
        T: -1
    },
    /*::[*/ 0x0230: {
        T: 1
    },
    /*::[*/ 0x0231: {
        T: -1
    },
    /*::[*/ 0x0232: {},
    /*::[*/ 0x0234: {},
    /*::[*/ 0x0235: {
        T: 1
    },
    /*::[*/ 0x0236: {
        T: -1
    },
    /*::[*/ 0x0239: {
        T: 1
    },
    /*::[*/ 0x023A: {
        T: -1
    },
    /*::[*/ 0x023C: {},
    /*::[*/ 0x023D: {
        T: 1
    },
    /*::[*/ 0x023E: {
        T: -1
    },
    /*::[*/ 0x0241: {},
    /*::[*/ 0x0242: {},
    /*::[*/ 0x0243: {},
    /*::[*/ 0x0244: {},
    /*::[*/ 0x0245: {},
    /*::[*/ 0x0246: {},
    /*::[*/ 0x0247: {},
    /*::[*/ 0x0248: {},
    /*::[*/ 0x0249: {},
    /*::[*/ 0x024A: {},
    /*::[*/ 0x024B: {},
    /*::[*/ 0x024C: {
        T: -1
    },
    /*::[*/ 0x024D: {},
    /*::[*/ 0x024E: {
        T: 1
    },
    /*::[*/ 0x024F: {
        T: -1
    },
    /*::[*/ 0x0250: {
        T: 1
    },
    /*::[*/ 0x0251: {
        T: -1
    },
    /*::[*/ 0x0252: {
        T: 1
    },
    /*::[*/ 0x0253: {
        T: -1
    },
    /*::[*/ 0x0254: {},
    /*::[*/ 0x0255: {
        T: 1
    },
    /*::[*/ 0x0256: {
        T: -1
    },
    /*::[*/ 0x0257: {
        T: 1
    },
    /*::[*/ 0x0258: {
        T: -1
    },
    /*::[*/ 0x0259: {
        T: 1
    },
    /*::[*/ 0x025A: {
        T: -1
    },
    /*::[*/ 0x025B: {
        T: 1
    },
    /*::[*/ 0x025C: {
        T: -1
    },
    /*::[*/ 0x025D: {
        T: 1
    },
    /*::[*/ 0x025E: {
        T: -1
    },
    /*::[*/ 0x025F: {},
    /*::[*/ 0x0260: {
        T: 1
    },
    /*::[*/ 0x0261: {
        T: -1
    },
    /*::[*/ 0x0262: {},
    /*::[*/ 0x0263: {
        T: 1
    },
    /*::[*/ 0x0264: {
        T: -1
    },
    /*::[*/ 0x0265: {
        T: 1
    },
    /*::[*/ 0x0266: {
        T: -1
    },
    /*::[*/ 0x0267: {
        T: 1
    },
    /*::[*/ 0x0268: {
        T: -1
    },
    /*::[*/ 0x0269: {
        T: 1
    },
    /*::[*/ 0x026A: {
        T: -1
    },
    /*::[*/ 0x026B: {
        T: 1
    },
    /*::[*/ 0x026C: {
        T: -1
    },
    /*::[*/ 0x0271: {},
    /*::[*/ 0x0272: {
        T: 1
    },
    /*::[*/ 0x0273: {
        T: -1
    },
    /*::[*/ 0x0274: {
        T: 1
    },
    /*::[*/ 0x0275: {
        T: -1
    },
    /*::[*/ 0x0276: {
        T: 1
    },
    /*::[*/ 0x0277: {
        T: -1
    },
    /*::[*/ 0x0278: {
        f: parse_BrtCommentAuthor
    },
    /*::[*/ 0x0279: {
        T: 1
    },
    /*::[*/ 0x027A: {
        T: -1
    },
    /*::[*/ 0x027B: {
        T: 1,
        f: parse_BrtBeginComment
    },
    /*::[*/ 0x027C: {
        T: -1
    },
    /*::[*/ 0x027D: {
        f: parse_BrtCommentText
    },
    /*::[*/ 0x027E: {
        T: 1
    },
    /*::[*/ 0x027F: {},
    /*::[*/ 0x0280: {
        T: -1
    },
    /*::[*/ 0x0281: {
        T: 1
    },
    /*::[*/ 0x0282: {
        T: -1
    },
    /*::[*/ 0x0283: {
        T: 1
    },
    /*::[*/ 0x0284: {},
    /*::[*/ 0x0285: {
        T: -1
    },
    /*::[*/ 0x0286: {
        T: 1
    },
    /*::[*/ 0x0288: {
        T: 1
    },
    /*::[*/ 0x0289: {},
    /*::[*/ 0x028A: {
        T: -1
    },
    /*::[*/ 0x028B: {
        f: parse_BrtCsProp
    },
    /*::[*/ 0x028C: {},
    /*::[*/ 0x028D: {
        T: 1
    },
    /*::[*/ 0x028E: {
        T: -1
    },
    /*::[*/ 0x028F: {
        T: 1
    },
    /*::[*/ 0x0290: {
        T: -1
    },
    /*::[*/ 0x0291: {
        T: 1
    },
    /*::[*/ 0x0292: {
        T: -1
    },
    /*::[*/ 0x0293: {},
    /*::[*/ 0x0294: {
        T: 1
    },
    /*::[*/ 0x0295: {},
    /*::[*/ 0x0296: {
        T: -1
    },
    /*::[*/ 0x0297: {},
    /*::[*/ 0x0298: {
        T: 1
    },
    /*::[*/ 0x0299: {},
    /*::[*/ 0x029A: {
        T: -1
    },
    /*::[*/ 0x029B: {},
    /*::[*/ 0x029C: {},
    /*::[*/ 0x029D: {},
    /*::[*/ 0x029F: {
        T: 1
    },
    /*::[*/ 0x02A0: {
        T: -1
    },
    /*::[*/ 0x02A1: {
        T: 1
    },
    /*::[*/ 0x02A2: {
        T: -1
    },
    /*::[*/ 0x02A3: {},
    /*::[*/ 0x02A4: {},
    /*::[*/ 0x02A5: {},
    /*::[*/ 0x02A6: {},
    /*::[*/ 0x02A7: {},
    /*::[*/ 0x02A8: {},
    /*::[*/ 0x02A9: {},
    /*::[*/ 0x0400: {},
    /*::[*/ 0x0401: {},
    /*::[*/ 0x0402: {
        T: 1
    },
    /*::[*/ 0x0403: {
        T: -1
    },
    /*::[*/ 0x0404: {
        T: 1
    },
    /*::[*/ 0x0405: {
        T: -1
    },
    /*::[*/ 0x0406: {},
    /*::[*/ 0x0407: {
        T: 1
    },
    /*::[*/ 0x0408: {
        T: -1
    },
    /*::[*/ 0x0409: {
        T: 1
    },
    /*::[*/ 0x040A: {
        T: -1
    },
    /*::[*/ 0x040B: {},
    /*::[*/ 0x040C: {},
    /*::[*/ 0x040D: {},
    /*::[*/ 0x040E: {
        T: 1
    },
    /*::[*/ 0x040F: {
        T: -1
    },
    /*::[*/ 0x0410: {},
    /*::[*/ 0x0411: {
        T: 1
    },
    /*::[*/ 0x0412: {
        T: -1
    },
    /*::[*/ 0x0413: {},
    /*::[*/ 0x0414: {},
    /*::[*/ 0x0415: {},
    /*::[*/ 0x0416: {
        T: 1
    },
    /*::[*/ 0x0417: {
        T: -1
    },
    /*::[*/ 0x0418: {
        T: 1
    },
    /*::[*/ 0x0419: {
        T: -1
    },
    /*::[*/ 0x041A: {},
    /*::[*/ 0x041B: {
        T: 1
    },
    /*::[*/ 0x041C: {
        T: 1
    },
    /*::[*/ 0x041D: {
        f: parse_BrtDVal14
    },
    /*::[*/ 0x041E: {
        T: 1
    },
    /*::[*/ 0x041F: {},
    /*::[*/ 0x0420: {
        T: 1
    },
    /*::[*/ 0x0421: {
        T: -1
    },
    /*::[*/ 0x0422: {
        T: 1
    },
    /*::[*/ 0x0423: {
        T: -1
    },
    /*::[*/ 0x0425: {},
    /*::[*/ 0x0426: {
        T: 1
    },
    /*::[*/ 0x0427: {
        T: -1
    },
    /*::[*/ 0x0428: {
        T: 1
    },
    /*::[*/ 0x0429: {
        T: -1
    },
    /*::[*/ 0x042A: {
        T: 1
    },
    /*::[*/ 0x042B: {
        T: -1
    },
    /*::[*/ 0x042C: {
        T: 1
    },
    /*::[*/ 0x042D: {
        T: -1
    },
    /*::[*/ 0x042E: {
        T: 1
    },
    /*::[*/ 0x042F: {
        T: -1
    },
    /*::[*/ 0x0430: {
        T: 1
    },
    /*::[*/ 0x0431: {
        T: -1
    },
    /*::[*/ 0x0433: {
        T: 1
    },
    /*::[*/ 0x0434: {
        T: -1
    },
    /*::[*/ 0x0435: {
        T: 1
    },
    /*::[*/ 0x0436: {
        T: -1
    },
    /*::[*/ 0x0437: {
        T: 1
    },
    /*::[*/ 0x0438: {
        T: -1
    },
    /*::[*/ 0x0439: {
        T: 1
    },
    /*::[*/ 0x043A: {
        T: -1
    },
    /*::[*/ 0x043B: {
        T: 1
    },
    /*::[*/ 0x043C: {
        T: -1
    },
    /*::[*/ 0x043D: {},
    /*::[*/ 0x043E: {
        T: 1
    },
    /*::[*/ 0x043F: {
        T: -1
    },
    /*::[*/ 0x0440: {
        T: 1
    },
    /*::[*/ 0x0441: {
        T: -1
    },
    /*::[*/ 0x0442: {
        T: 1
    },
    /*::[*/ 0x0443: {
        T: -1
    },
    /*::[*/ 0x0444: {
        T: 1
    },
    /*::[*/ 0x0445: {
        T: -1
    },
    /*::[*/ 0x0446: {
        T: 1
    },
    /*::[*/ 0x0447: {
        T: -1
    },
    /*::[*/ 0x0448: {},
    /*::[*/ 0x0449: {
        T: 1
    },
    /*::[*/ 0x044A: {},
    /*::[*/ 0x044B: {
        T: -1
    },
    /*::[*/ 0x044C: {
        T: 1
    },
    /*::[*/ 0x044D: {
        T: -1
    },
    /*::[*/ 0x044E: {},
    /*::[*/ 0x044F: {},
    /*::[*/ 0x0450: {},
    /*::[*/ 0x0451: {},
    /*::[*/ 0x0457: {},
    /*::[*/ 0x0458: {},
    /*::[*/ 0x0459: {
        T: 1
    },
    /*::[*/ 0x045A: {
        T: -1
    },
    /*::[*/ 0x045B: {
        T: 1
    },
    /*::[*/ 0x045C: {
        T: -1
    },
    /*::[*/ 0x045D: {},
    /*::[*/ 0x045E: {
        T: 1
    },
    /*::[*/ 0x045F: {
        T: -1
    },
    /*::[*/ 0x0460: {
        T: 1
    },
    /*::[*/ 0x0461: {
        T: -1
    },
    /*::[*/ 0x0462: {
        T: 1
    },
    /*::[*/ 0x0463: {
        T: -1
    },
    /*::[*/ 0x0464: {
        T: 1
    },
    /*::[*/ 0x0465: {
        T: -1
    },
    /*::[*/ 0x0466: {},
    /*::[*/ 0x0468: {
        T: 1
    },
    /*::[*/ 0x0469: {
        T: -1
    },
    /*::[*/ 0x046A: {},
    /*::[*/ 0x046B: {
        T: 1
    },
    /*::[*/ 0x046C: {
        T: -1
    },
    /*::[*/ 0x046D: {
        T: 1
    },
    /*::[*/ 0x046E: {
        T: -1
    },
    /*::[*/ 0x046F: {
        T: 1
    },
    /*::[*/ 0x0470: {
        T: -1
    },
    /*::[*/ 0x0471: {
        T: 1
    },
    /*::[*/ 0x0472: {
        T: -1
    },
    /*::[*/ 0x0473: {
        T: 1
    },
    /*::[*/ 0x0474: {
        T: -1
    },
    /*::[*/ 0x0475: {},
    /*::[*/ 0x0476: {
        T: 1
    },
    /*::[*/ 0x0477: {
        T: -1
    },
    /*::[*/ 0x0478: {
        T: 1
    },
    /*::[*/ 0x0479: {
        T: -1
    },
    /*::[*/ 0x047A: {},
    /*::[*/ 0x047B: {
        T: 1
    },
    /*::[*/ 0x047C: {
        T: -1
    },
    /*::[*/ 0x047D: {
        T: 1
    },
    /*::[*/ 0x047E: {
        T: -1
    },
    /*::[*/ 0x0480: {
        T: 1
    },
    /*::[*/ 0x0481: {
        T: -1
    },
    /*::[*/ 0x0482: {
        T: -1
    },
    /*::[*/ 0x0483: {
        T: -1
    },
    /*::[*/ 0x0484: {
        T: -1
    },
    /*::[*/ 0x0485: {
        T: 1
    },
    /*::[*/ 0x0486: {
        T: -1
    },
    /*::[*/ 0x0487: {
        T: 1
    },
    /*::[*/ 0x0488: {
        T: -1
    },
    /*::[*/ 0x0489: {
        T: 1
    },
    /*::[*/ 0x048A: {
        T: -1
    },
    /*::[*/ 0x048B: {
        T: 1
    },
    /*::[*/ 0x048C: {
        T: -1
    },
    /*::[*/ 0x048D: {
        T: 1
    },
    /*::[*/ 0x048E: {
        T: -1
    },
    /*::[*/ 0x048F: {
        T: 1
    },
    /*::[*/ 0x0490: {
        T: -1
    },
    /*::[*/ 0x0491: {
        T: 1
    },
    /*::[*/ 0x0492: {
        T: -1
    },
    /*::[*/ 0x0493: {},
    /*::[*/ 0x0494: {
        T: 1
    },
    /*::[*/ 0x0495: {
        T: -1
    },
    /*::[*/ 0x0499: {},
    /*::[*/ 0x049A: {
        T: 1
    },
    /*::[*/ 0x049C: {},
    /*::[*/ 0x049D: {},
    /*::[*/ 0x049E: {},
    /*::[*/ 0x0800: {
        T: 1
    },
    /*::[*/ 0x0801: {
        T: -1
    },
    /*::[*/ 0x0802: {},
    /*::[*/ 0x0803: {
        T: 1
    },
    /*::[*/ 0x0804: {
        T: -1
    },
    /*::[*/ 0x0805: {},
    /*::[*/ 0x0806: {},
    /*::[*/ 0x0807: {
        T: 1
    },
    /*::[*/ 0x0808: {
        T: -1
    },
    /*::[*/ 0x0809: {
        T: 1
    },
    /*::[*/ 0x080A: {
        T: -1
    },
    /*::[*/ 0x080C: {},
    /*::[*/ 0x0813: {},
    /*::[*/ 0x0814: {
        T: 1
    },
    /*::[*/ 0x0815: {
        T: -1
    },
    /*::[*/ 0x0816: {},
    /*::[*/ 0x0817: {},
    /*::[*/ 0x0818: {
        T: 1
    },
    /*::[*/ 0x0819: {
        T: -1
    },
    /*::[*/ 0x081B: {},
    /*::[*/ 0x081C: {},
    /*::[*/ 0x081D: {
        T: 1
    },
    /*::[*/ 0x081E: {
        T: -1
    },
    /*::[*/ 0x081F: {},
    /*::[*/ 0x0820: {
        T: 1
    },
    /*::[*/ 0x0821: {
        T: -1
    },
    /*::[*/ 0x0822: {},
    /*::[*/ 0x0823: {
        T: 1
    },
    /*::[*/ 0x0824: {
        T: -1
    },
    /*::[*/ 0x0825: {
        T: 1
    },
    /*::[*/ 0x0826: {
        T: -1
    },
    /*::[*/ 0x0827: {
        T: 1
    },
    /*::[*/ 0x0828: {
        T: -1
    },
    /*::[*/ 0x0829: {
        T: 1
    },
    /*::[*/ 0x082A: {
        T: -1
    },
    /*::[*/ 0x082B: {},
    /*::[*/ 0x082C: {},
    /*::[*/ 0x082D: {
        T: 1
    },
    /*::[*/ 0x082E: {
        T: -1
    },
    /*::[*/ 0x082F: {},
    /*::[*/ 0x0830: {
        T: 1
    },
    /*::[*/ 0x0831: {
        T: -1
    },
    /*::[*/ 0x0832: {
        T: 1
    },
    /*::[*/ 0x0833: {
        T: -1
    },
    /*::[*/ 0x0834: {
        T: 1
    },
    /*::[*/ 0x0835: {
        T: -1
    },
    /*::[*/ 0x0836: {},
    /*::[*/ 0x0837: {
        T: 1
    },
    /*::[*/ 0x0838: {
        T: -1
    },
    /*::[*/ 0x0839: {},
    /*::[*/ 0x083A: {
        T: 1
    },
    /*::[*/ 0x083B: {
        T: -1
    },
    /*::[*/ 0x083C: {},
    /*::[*/ 0x083D: {
        T: 1
    },
    /*::[*/ 0x083E: {
        T: -1
    },
    /*::[*/ 0x083F: {
        T: 1
    },
    /*::[*/ 0x0840: {
        T: -1
    },
    /*::[*/ 0x0841: {
        T: 1
    },
    /*::[*/ 0x0842: {
        T: -1
    },
    /*::[*/ 0x0843: {},
    /*::[*/ 0x0844: {},
    /*::[*/ 0x0845: {},
    /*::[*/ 0x0846: {
        T: 1
    },
    /*::[*/ 0x0847: {
        T: -1
    },
    /*::[*/ 0x0848: {},
    /*::[*/ 0x0849: {
        T: 1
    },
    /*::[*/ 0x084A: {
        T: -1
    },
    /*::[*/ 0x084B: {
        T: 1
    },
    /*::[*/ 0x084C: {
        T: -1
    },
    /*::[*/ 0x084D: {},
    /*::[*/ 0x084E: {
        T: 1
    },
    /*::[*/ 0x084F: {
        T: -1
    },
    /*::[*/ 0x0850: {},
    /*::[*/ 0x0851: {
        T: 1
    },
    /*::[*/ 0x0852: {
        T: -1
    },
    /*::[*/ 0x0853: {
        T: 1
    },
    /*::[*/ 0x0854: {
        T: -1
    },
    /*::[*/ 0x0855: {
        T: 1
    },
    /*::[*/ 0x0856: {},
    /*::[*/ 0x0857: {},
    /*::[*/ 0x0858: {},
    /*::[*/ 0x0859: {
        T: 1
    },
    /*::[*/ 0x085A: {
        T: -1
    },
    /*::[*/ 0x085B: {
        T: 1
    },
    /*::[*/ 0x085C: {
        T: -1
    },
    /*::[*/ 0x085D: {},
    /*::[*/ 0x0C00: {},
    /*::[*/ 0x0C01: {},
    /*::[*/ 0x1000: {
        T: 1
    },
    /*::[*/ 0x1001: {
        T: -1
    },
    /*::[*/ 0x138A: {
        T: 1
    },
    /*::[*/ 0x138B: {
        T: -1
    },
    /*::[*/ 0x13D9: {
        T: 1
    },
    /*::[*/ 0x13DA: {
        T: -1
    },
    /*::[*/ 0x13DB: {},
    /*::[*/ 0x13DC: {
        T: 1
    },
    /*::[*/ 0x13DD: {
        T: -1
    },
    /*::[*/ 0x13DE: {
        T: 1
    },
    /*::[*/ 0x13DF: {
        T: -1
    },
    /*::[*/ 0x13E0: {},
    /*::[*/ 0x13E1: {},
    /*::[*/ 0x13E2: {},
    /*::[*/ 0x13E4: {
        T: 1
    },
    /*::[*/ 0x13E5: {
        T: -1
    },
    /*::[*/ 0x13E6: {},
    /*::[*/ 0x13E7: {
        T: 1
    },
    /*::[*/ 0x13E8: {
        T: -1
    },
    /*::[*/ 0x13E9: {},
    /*::[*/ 0x13EB: {},
    /*::[*/ 0xFFFF: {
        n: ""
    }
};
/* [MS-XLS] 2.3 Record Enumeration (and other sources) */ var XLSRecordEnum = {
    /* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */ /*::[*/ 0x0006: {
        f: parse_Formula
    },
    /*::[*/ 0x000a: {
        f: parsenoop2
    },
    /*::[*/ 0x000c: {
        f: parseuint16
    },
    /*::[*/ 0x000d: {
        f: parseuint16
    },
    /*::[*/ 0x000e: {
        f: parsebool
    },
    /*::[*/ 0x000f: {
        f: parsebool
    },
    /*::[*/ 0x0010: {
        f: parse_Xnum
    },
    /*::[*/ 0x0011: {
        f: parsebool
    },
    /*::[*/ 0x0012: {
        f: parsebool
    },
    /*::[*/ 0x0013: {
        f: parseuint16
    },
    /*::[*/ 0x0014: {
        f: parse_XLHeaderFooter
    },
    /*::[*/ 0x0015: {
        f: parse_XLHeaderFooter
    },
    /*::[*/ 0x0017: {
        f: parse_ExternSheet
    },
    /*::[*/ 0x0018: {
        f: parse_Lbl
    },
    /*::[*/ 0x0019: {
        f: parsebool
    },
    /*::[*/ 0x001a: {},
    /*::[*/ 0x001b: {},
    /*::[*/ 0x001c: {
        f: parse_Note
    },
    /*::[*/ 0x001d: {},
    /*::[*/ 0x0022: {
        f: parsebool
    },
    /*::[*/ 0x0023: {
        f: parse_ExternName
    },
    /*::[*/ 0x0026: {
        f: parse_Xnum
    },
    /*::[*/ 0x0027: {
        f: parse_Xnum
    },
    /*::[*/ 0x0028: {
        f: parse_Xnum
    },
    /*::[*/ 0x0029: {
        f: parse_Xnum
    },
    /*::[*/ 0x002a: {
        f: parsebool
    },
    /*::[*/ 0x002b: {
        f: parsebool
    },
    /*::[*/ 0x002f: {
        f: parse_FilePass
    },
    /*::[*/ 0x0031: {
        f: parse_Font
    },
    /*::[*/ 0x0033: {
        f: parseuint16
    },
    /*::[*/ 0x003c: {},
    /*::[*/ 0x003d: {
        f: parse_Window1
    },
    /*::[*/ 0x0040: {
        f: parsebool
    },
    /*::[*/ 0x0041: {
        f: parse_Pane
    },
    /*::[*/ 0x0042: {
        f: parseuint16
    },
    /*::[*/ 0x004d: {},
    /*::[*/ 0x0050: {},
    /*::[*/ 0x0051: {},
    /*::[*/ 0x0052: {},
    /*::[*/ 0x0055: {
        f: parseuint16
    },
    /*::[*/ 0x0059: {},
    /*::[*/ 0x005a: {},
    /*::[*/ 0x005b: {},
    /*::[*/ 0x005c: {
        f: parse_WriteAccess
    },
    /*::[*/ 0x005d: {
        f: parse_Obj
    },
    /*::[*/ 0x005e: {},
    /*::[*/ 0x005f: {
        f: parsebool
    },
    /*::[*/ 0x0060: {},
    /*::[*/ 0x0061: {},
    /*::[*/ 0x0063: {
        f: parsebool
    },
    /*::[*/ 0x007d: {
        f: parse_ColInfo
    },
    /*::[*/ 0x0080: {
        f: parse_Guts
    },
    /*::[*/ 0x0081: {
        f: parse_WsBool
    },
    /*::[*/ 0x0082: {
        f: parseuint16
    },
    /*::[*/ 0x0083: {
        f: parsebool
    },
    /*::[*/ 0x0084: {
        f: parsebool
    },
    /*::[*/ 0x0085: {
        f: parse_BoundSheet8
    },
    /*::[*/ 0x0086: {},
    /*::[*/ 0x008c: {
        f: parse_Country
    },
    /*::[*/ 0x008d: {
        f: parseuint16
    },
    /*::[*/ 0x0090: {},
    /*::[*/ 0x0092: {
        f: parse_Palette
    },
    /*::[*/ 0x0097: {},
    /*::[*/ 0x0098: {},
    /*::[*/ 0x0099: {},
    /*::[*/ 0x009a: {},
    /*::[*/ 0x009b: {},
    /*::[*/ 0x009c: {
        f: parseuint16
    },
    /*::[*/ 0x009d: {},
    /*::[*/ 0x009e: {},
    /*::[*/ 0x00a0: {
        f: parse_Scl
    },
    /*::[*/ 0x00a1: {
        f: parse_Setup
    },
    /*::[*/ 0x00ae: {},
    /*::[*/ 0x00af: {},
    /*::[*/ 0x00b0: {},
    /*::[*/ 0x00b1: {},
    /*::[*/ 0x00b2: {},
    /*::[*/ 0x00b4: {},
    /*::[*/ 0x00b5: {},
    /*::[*/ 0x00b6: {},
    /*::[*/ 0x00b8: {},
    /*::[*/ 0x00b9: {},
    /*::[*/ 0x00bd: {
        f: parse_MulRk
    },
    /*::[*/ 0x00be: {
        f: parse_MulBlank
    },
    /*::[*/ 0x00c1: {
        f: parsenoop2
    },
    /*::[*/ 0x00c5: {},
    /*::[*/ 0x00c6: {},
    /*::[*/ 0x00c7: {},
    /*::[*/ 0x00c8: {},
    /*::[*/ 0x00c9: {},
    /*::[*/ 0x00ca: {
        f: parsebool
    },
    /*::[*/ 0x00cb: {},
    /*::[*/ 0x00cc: {},
    /*::[*/ 0x00cd: {},
    /*::[*/ 0x00ce: {},
    /*::[*/ 0x00cf: {},
    /*::[*/ 0x00d0: {},
    /*::[*/ 0x00d1: {},
    /*::[*/ 0x00d2: {},
    /*::[*/ 0x00d3: {},
    /*::[*/ 0x00d5: {},
    /*::[*/ 0x00d7: {},
    /*::[*/ 0x00d8: {},
    /*::[*/ 0x00d9: {},
    /*::[*/ 0x00da: {
        f: parseuint16
    },
    /*::[*/ 0x00dc: {},
    /*::[*/ 0x00dd: {
        f: parsebool
    },
    /*::[*/ 0x00de: {},
    /*::[*/ 0x00e0: {
        f: parse_XF
    },
    /*::[*/ 0x00e1: {
        f: parse_InterfaceHdr
    },
    /*::[*/ 0x00e2: {
        f: parsenoop2
    },
    /*::[*/ 0x00e3: {},
    /*::[*/ 0x00e5: {
        f: parse_MergeCells
    },
    /*::[*/ 0x00e9: {},
    /*::[*/ 0x00eb: {},
    /*::[*/ 0x00ec: {},
    /*::[*/ 0x00ed: {},
    /*::[*/ 0x00ef: {},
    /*::[*/ 0x00f0: {},
    /*::[*/ 0x00f1: {},
    /*::[*/ 0x00f2: {},
    /*::[*/ 0x00f4: {},
    /*::[*/ 0x00f5: {},
    /*::[*/ 0x00f6: {},
    /*::[*/ 0x00f7: {},
    /*::[*/ 0x00f8: {},
    /*::[*/ 0x00f9: {},
    /*::[*/ 0x00fb: {},
    /*::[*/ 0x00fc: {
        f: parse_SST
    },
    /*::[*/ 0x00fd: {
        f: parse_LabelSst
    },
    /*::[*/ 0x00ff: {
        f: parse_ExtSST
    },
    /*::[*/ 0x0100: {},
    /*::[*/ 0x0103: {},
    /*::[*/ 0x0122: {},
    /*::[*/ 0x0137: {},
    /*::[*/ 0x0138: {},
    /*::[*/ 0x013b: {},
    /*::[*/ 0x013d: {
        f: parseuint16a
    },
    /*::[*/ 0x013e: {},
    /*::[*/ 0x013f: {},
    /*::[*/ 0x0140: {},
    /*::[*/ 0x014a: {},
    /*::[*/ 0x014b: {},
    /*::[*/ 0x014d: {},
    /*::[*/ 0x014e: {},
    /*::[*/ 0x014f: {},
    /*::[*/ 0x0150: {},
    /*::[*/ 0x0151: {},
    /*::[*/ 0x0152: {},
    /*::[*/ 0x0153: {},
    /*::[*/ 0x0154: {},
    /*::[*/ 0x015f: {},
    /*::[*/ 0x0160: {
        f: parsebool
    },
    /*::[*/ 0x0161: {
        f: parsenoop2
    },
    /*::[*/ 0x0191: {},
    /*::[*/ 0x0192: {},
    /*::[*/ 0x0193: {},
    /*::[*/ 0x0194: {},
    /*::[*/ 0x0195: {},
    /*::[*/ 0x0196: {},
    /*::[*/ 0x0197: {},
    /*::[*/ 0x0198: {},
    /*::[*/ 0x01a9: {},
    /*::[*/ 0x01aa: {},
    /*::[*/ 0x01ab: {},
    /*::[*/ 0x01ac: {},
    /*::[*/ 0x01ad: {},
    /*::[*/ 0x01ae: {
        f: parse_SupBook
    },
    /*::[*/ 0x01af: {
        f: parsebool
    },
    /*::[*/ 0x01b0: {},
    /*::[*/ 0x01b1: {},
    /*::[*/ 0x01b2: {},
    /*::[*/ 0x01b5: {},
    /*::[*/ 0x01b6: {
        f: parse_TxO
    },
    /*::[*/ 0x01b7: {
        f: parsebool
    },
    /*::[*/ 0x01b8: {
        f: parse_HLink
    },
    /*::[*/ 0x01b9: {},
    /*::[*/ 0x01ba: {
        f: parse_XLUnicodeString
    },
    /*::[*/ 0x01bb: {},
    /*::[*/ 0x01bc: {
        f: parseuint16
    },
    /*::[*/ 0x01bd: {},
    /*::[*/ 0x01be: {},
    /*::[*/ 0x01c0: {
        f: parsenoop2
    },
    /*::[*/ 0x01c1: {
        f: parse_RecalcId,
        r: 2
    },
    /*::[*/ 0x01c2: {
        f: parsenoop2
    },
    /*::[*/ 0x0200: {
        f: parse_Dimensions
    },
    /*::[*/ 0x0201: {
        f: parse_Blank
    },
    /*::[*/ 0x0203: {
        f: parse_Number
    },
    /*::[*/ 0x0204: {
        f: parse_Label
    },
    /*::[*/ 0x0205: {
        f: parse_BoolErr
    },
    /*::[*/ 0x0207: {
        f: parse_String
    },
    /*::[*/ 0x0208: {
        f: parse_Row
    },
    /*::[*/ 0x020b: {},
    /*::[*/ 0x0221: {
        f: parse_Array
    },
    /*::[*/ 0x0225: {
        f: parse_DefaultRowHeight
    },
    /*::[*/ 0x0236: {},
    /*::[*/ 0x023e: {
        f: parse_Window2
    },
    /*::[*/ 0x027e: {
        f: parse_RK
    },
    /*::[*/ 0x0293: {},
    /*::[*/ 0x0418: {},
    /*::[*/ 0x041e: {
        f: parse_Format
    },
    /*::[*/ 0x043c: {},
    /*::[*/ 0x04bc: {
        f: parse_ShrFmla
    },
    /*::[*/ 0x0800: {
        f: parse_HLinkTooltip
    },
    /*::[*/ 0x0801: {},
    /*::[*/ 0x0802: {},
    /*::[*/ 0x0803: {},
    /*::[*/ 0x0804: {},
    /*::[*/ 0x0805: {},
    /*::[*/ 0x0806: {},
    /*::[*/ 0x0807: {},
    /*::[*/ 0x0808: {},
    /*::[*/ 0x0809: {
        f: parse_BOF
    },
    /*::[*/ 0x080a: {},
    /*::[*/ 0x080b: {},
    /*::[*/ 0x080c: {},
    /*::[*/ 0x080d: {},
    /*::[*/ 0x080e: {},
    /*::[*/ 0x080f: {},
    /*::[*/ 0x0810: {},
    /*::[*/ 0x0812: {},
    /*::[*/ 0x0813: {},
    /*::[*/ 0x0850: {},
    /*::[*/ 0x0851: {},
    /*::[*/ 0x0852: {},
    /*::[*/ 0x0853: {},
    /*::[*/ 0x0854: {},
    /*::[*/ 0x0855: {},
    /*::[*/ 0x0856: {},
    /*::[*/ 0x0857: {},
    /*::[*/ 0x0858: {},
    /*::[*/ 0x0859: {},
    /*::[*/ 0x085a: {},
    /*::[*/ 0x0862: {},
    /*::[*/ 0x0863: {
        r: 12
    },
    /*::[*/ 0x0864: {},
    /*::[*/ 0x0865: {},
    /*::[*/ 0x0866: {},
    /*::[*/ 0x0867: {
        f: parsenoop2
    },
    /*::[*/ 0x0868: {},
    /*::[*/ 0x086a: {},
    /*::[*/ 0x086b: {},
    /*::[*/ 0x086c: {},
    /*::[*/ 0x0871: {},
    /*::[*/ 0x0872: {},
    /*::[*/ 0x0874: {},
    /*::[*/ 0x0875: {},
    /*::[*/ 0x0876: {},
    /*::[*/ 0x0877: {},
    /*::[*/ 0x0878: {},
    /*::[*/ 0x0879: {},
    /*::[*/ 0x087a: {},
    /*::[*/ 0x087b: {},
    /*::[*/ 0x087c: {
        f: parse_XFCRC,
        r: 12
    },
    /*::[*/ 0x087d: {
        f: parse_XFExt,
        r: 12
    },
    /*::[*/ 0x087e: {},
    /*::[*/ 0x087f: {},
    /*::[*/ 0x0884: {},
    /*::[*/ 0x0885: {},
    /*::[*/ 0x0886: {},
    /*::[*/ 0x0887: {},
    /*::[*/ 0x0888: {},
    /*::[*/ 0x0889: {},
    /*::[*/ 0x088a: {},
    /*::[*/ 0x088b: {},
    /*::[*/ 0x088c: {
        f: parsebool,
        r: 12
    },
    /*::[*/ 0x088d: {},
    /*::[*/ 0x088e: {
        r: 12
    },
    /*::[*/ 0x088f: {},
    /*::[*/ 0x0890: {},
    /*::[*/ 0x0892: {},
    /*::[*/ 0x0893: {},
    /*::[*/ 0x0894: {
        f: parse_NameCmt,
        r: 12
    },
    /*::[*/ 0x0895: {},
    /*::[*/ 0x0896: {
        f: parse_Theme,
        r: 12
    },
    /*::[*/ 0x0897: {},
    /*::[*/ 0x0898: {},
    /*::[*/ 0x0899: {},
    /*::[*/ 0x089a: {
        f: parse_MTRSettings,
        r: 12
    },
    /*::[*/ 0x089b: {
        f: parsenoop2
    },
    /*::[*/ 0x089c: {},
    /*::[*/ 0x089d: {},
    /*::[*/ 0x089e: {},
    /*::[*/ 0x089f: {},
    /*::[*/ 0x08a3: {
        f: parse_ForceFullCalculation
    },
    /*::[*/ 0x08a4: {},
    /*::[*/ 0x08a5: {},
    /*::[*/ 0x08a6: {},
    /*::[*/ 0x08a7: {},
    /*::[*/ 0x1001: {},
    /*::[*/ 0x1002: {},
    /*::[*/ 0x1003: {},
    /*::[*/ 0x1006: {},
    /*::[*/ 0x1007: {},
    /*::[*/ 0x1009: {},
    /*::[*/ 0x100a: {},
    /*::[*/ 0x100b: {},
    /*::[*/ 0x100c: {},
    /*::[*/ 0x100d: {},
    /*::[*/ 0x1014: {},
    /*::[*/ 0x1015: {},
    /*::[*/ 0x1016: {},
    /*::[*/ 0x1017: {},
    /*::[*/ 0x1018: {},
    /*::[*/ 0x1019: {},
    /*::[*/ 0x101a: {},
    /*::[*/ 0x101b: {},
    /*::[*/ 0x101c: {},
    /*::[*/ 0x101d: {},
    /*::[*/ 0x101e: {},
    /*::[*/ 0x101f: {},
    /*::[*/ 0x1020: {},
    /*::[*/ 0x1021: {},
    /*::[*/ 0x1022: {},
    /*::[*/ 0x1024: {},
    /*::[*/ 0x1025: {},
    /*::[*/ 0x1026: {
        f: parseuint16
    },
    /*::[*/ 0x1027: {},
    /*::[*/ 0x1032: {},
    /*::[*/ 0x1033: {},
    /*::[*/ 0x1034: {},
    /*::[*/ 0x1035: {},
    /*::[*/ 0x103a: {},
    /*::[*/ 0x103c: {},
    /*::[*/ 0x103d: {},
    /*::[*/ 0x103e: {},
    /*::[*/ 0x103f: {},
    /*::[*/ 0x1040: {},
    /*::[*/ 0x1041: {},
    /*::[*/ 0x1043: {},
    /*::[*/ 0x1044: {
        f: parse_ShtProps
    },
    /*::[*/ 0x1045: {},
    /*::[*/ 0x1046: {},
    /*::[*/ 0x1048: {},
    /*::[*/ 0x104a: {},
    /*::[*/ 0x104b: {},
    /*::[*/ 0x104e: {},
    /*::[*/ 0x104f: {},
    /*::[*/ 0x1050: {},
    /*::[*/ 0x1051: {},
    /*::[*/ 0x105b: {},
    /*::[*/ 0x105c: {
        f: parse_ClrtClient
    },
    /*::[*/ 0x105d: {},
    /*::[*/ 0x105f: {},
    /*::[*/ 0x1060: {},
    /*::[*/ 0x1061: {},
    /*::[*/ 0x1062: {},
    /*::[*/ 0x1063: {},
    /*::[*/ 0x1064: {},
    /*::[*/ 0x1065: {},
    /*::[*/ 0x1066: {},
    /*::[*/ 0x1067: {},
    /*::[*/ 0x1068: {},
    /*::[*/ 0x0000: {
        f: parse_Dimensions
    },
    /*::[*/ 0x0001: {},
    /*::[*/ 0x0002: {
        f: parse_BIFF2INT
    },
    /*::[*/ 0x0003: {
        f: parse_BIFF2NUM
    },
    /*::[*/ 0x0004: {
        f: parse_BIFF2STR
    },
    /*::[*/ 0x0005: {
        f: parse_BoolErr
    },
    /*::[*/ 0x0007: {
        f: parse_BIFF2STRING
    },
    /*::[*/ 0x0008: {},
    /*::[*/ 0x0009: {
        f: parse_BOF
    },
    /*::[*/ 0x000b: {},
    /*::[*/ 0x0016: {
        f: parseuint16
    },
    /*::[*/ 0x001e: {
        f: parse_BIFF2Format
    },
    /*::[*/ 0x001f: {},
    /* 16-bit cnt of BIFF2FORMAT records */ /*::[*/ 0x0020: {},
    /*::[*/ 0x0021: {
        f: parse_Array
    },
    /*::[*/ 0x0024: {},
    /*::[*/ 0x0025: {
        f: parse_DefaultRowHeight
    },
    // 0x2c ??
    // 0x2d ??
    // 0x2e ??
    // 0x30 FONTCOUNT: number of fonts
    /*::[*/ 0x0032: {
        f: parse_BIFF2FONTXTRA
    },
    // 0x35: INFOOPTS
    // 0x36: TABLE (BIFF2 only)
    // 0x37: TABLE2 (BIFF2 only)
    // 0x38: WNDESK
    // 0x39 ??
    // 0x3a: BEGINPREF
    // 0x3b: ENDPREF
    /*::[*/ 0x003e: {},
    // 0x3f ??
    // 0x46: SHOWSCROLL
    // 0x47: SHOWFORMULA
    // 0x48: STATUSBAR
    // 0x49: SHORTMENUS
    // 0x4A:
    // 0x4B:
    // 0x4C:
    // 0x4E:
    // 0x4F:
    // 0x58: TOOLBAR (BIFF3)
    /* - - - */ /*::[*/ 0x0034: {},
    /*::[*/ 0x0043: {},
    /*::[*/ 0x0044: {
        f: parseuint16
    },
    /*::[*/ 0x0045: {},
    /*::[*/ 0x0056: {},
    /* 16-bit cnt, similar to BIFF2 */ /*::[*/ 0x007e: {},
    /* Not necessarily same as 0x027e */ /*::[*/ 0x007f: {
        f: parse_ImData
    },
    /*::[*/ 0x0087: {},
    /*::[*/ 0x0088: {},
    /*::[*/ 0x0089: {},
    // 0x8A
    // 0x8B LH: alternate menu key flag (BIFF3/4)
    // 0x8E
    // 0x8F
    /*::[*/ 0x0091: {},
    // 0x93 STYLE
    /*::[*/ 0x0094: {},
    /*::[*/ 0x0095: {},
    /*::[*/ 0x0096: {},
    // 0xA2 FNPROTO: function prototypes (BIFF4)
    // 0xA3
    // 0xA8
    /*::[*/ 0x00a9: {},
    /*::[*/ 0x00ab: {},
    /*::[*/ 0x00bc: {},
    /* Not necessarily same as 0x04bc */ /*::[*/ 0x00bf: {},
    /*::[*/ 0x00c0: {},
    /*::[*/ 0x00c2: {},
    /*::[*/ 0x00c3: {},
    /*::[*/ 0x00d6: {
        f: parse_RString
    },
    /*::[*/ 0x00df: {},
    /*::[*/ 0x00ea: {},
    /*::[*/ 0x0162: {},
    /*::[*/ 0x01a5: {},
    /*::[*/ 0x0206: {
        f: parse_Formula
    },
    /*::[*/ 0x0209: {
        f: parse_BOF
    },
    /*::[*/ 0x0218: {
        f: parse_Lbl
    },
    /*::[*/ 0x0223: {
        f: parse_ExternName
    },
    /*::[*/ 0x0231: {},
    /*::[*/ 0x0243: {},
    /*::[*/ 0x0406: {
        f: parse_Formula
    },
    /*::[*/ 0x0409: {
        f: parse_BOF
    },
    /*::[*/ 0x0443: {},
    /*::[*/ 0x086d: {},
    /*::[*/ 0x0873: {},
    /*::[*/ 0x0881: {},
    /*::[*/ 0x08c0: {},
    /*::[*/ 0x08c1: {},
    /*::[*/ 0x08c2: {},
    /*::[*/ 0x08c3: {},
    /*::[*/ 0x08c4: {},
    /*::[*/ 0x08c5: {},
    /*::[*/ 0x08c6: {},
    /*::[*/ 0x08c7: {},
    /*::[*/ 0x08c8: {},
    /*::[*/ 0x08c9: {},
    /*::[*/ 0x08ca: {},
    /*::[*/ 0x08cb: {},
    /*::[*/ 0x08d6: {
        r: 12
    },
    /*::[*/ 0x7262: {}
};
function write_biff_rec(ba /*:BufArray*/ , type /*:number*/ , payload, length /*:?number*/ ) /*:void*/ {
    var t /*:number*/  = type;
    if (isNaN(t)) return;
    var len = length || (payload || []).length || 0;
    var o = ba.next(4);
    o.write_shift(2, t);
    o.write_shift(2, len);
    if (/*:: len != null &&*/ len > 0 && is_buf(payload)) ba.push(payload);
}
function write_biff_continue(ba /*:BufArray*/ , type /*:number*/ , payload, length /*:?number*/ ) /*:void*/ {
    var len = length || (payload || []).length || 0;
    if (len <= 8224) return write_biff_rec(ba, type, payload, len);
    var t = type;
    if (isNaN(t)) return;
    var parts = payload.parts || [], sidx = 0;
    var i = 0, w = 0;
    while(w + (parts[sidx] || 8224) <= 8224){
        w += parts[sidx] || 8224;
        sidx++;
    }
    var o = ba.next(4);
    o.write_shift(2, t);
    o.write_shift(2, w);
    ba.push(payload.slice(i, i + w));
    i += w;
    while(i < len){
        o = ba.next(4);
        o.write_shift(2, 0x3c); // TODO: figure out correct continue type
        w = 0;
        while(w + (parts[sidx] || 8224) <= 8224){
            w += parts[sidx] || 8224;
            sidx++;
        }
        o.write_shift(2, w);
        ba.push(payload.slice(i, i + w));
        i += w;
    }
}
function write_BIFF2Cell(out, r /*:number*/ , c /*:number*/ ) {
    if (!out) out = new_buf(7);
    out.write_shift(2, r);
    out.write_shift(2, c);
    out.write_shift(2, 0);
    out.write_shift(1, 0);
    return out;
}
function write_BIFF2BERR(r /*:number*/ , c /*:number*/ , val, t /*:?string*/ ) {
    var out = new_buf(9);
    write_BIFF2Cell(out, r, c);
    write_Bes(val, t || "b", out);
    return out;
}
/* TODO: codepage, large strings */ function write_BIFF2LABEL(r /*:number*/ , c /*:number*/ , val) {
    var out = new_buf(8 + 2 * val.length);
    write_BIFF2Cell(out, r, c);
    out.write_shift(1, val.length);
    out.write_shift(val.length, val, "sbcs");
    return out.l < out.length ? out.slice(0, out.l) : out;
}
function write_ws_biff2_cell(ba /*:BufArray*/ , cell /*:Cell*/ , R /*:number*/ , C /*:number*/  /*::, opts*/ ) {
    if (cell.v != null) switch(cell.t){
        case "d":
        case "n":
            var v = cell.t == "d" ? datenum(parseDate(cell.v)) : cell.v;
            if (v == (v | 0) && v >= 0 && v < 65536) write_biff_rec(ba, 0x0002, write_BIFF2INT(R, C, v));
            else write_biff_rec(ba, 0x0003, write_BIFF2NUM(R, C, v));
            return;
        case "b":
        case "e":
            write_biff_rec(ba, 0x0005, write_BIFF2BERR(R, C, cell.v, cell.t));
            return;
        /* TODO: codepage, sst */ case "s":
        case "str":
            write_biff_rec(ba, 0x0004, write_BIFF2LABEL(R, C, (cell.v || "").slice(0, 255)));
            return;
    }
    write_biff_rec(ba, 0x0001, write_BIFF2Cell(null, R, C));
}
function write_ws_biff2(ba /*:BufArray*/ , ws /*:Worksheet*/ , idx /*:number*/ , opts /*::, wb:Workbook*/ ) {
    var dense = Array.isArray(ws);
    var range = safe_decode_range(ws["!ref"] || "A1"), ref /*:string*/ , rr = "", cols /*:Array<string>*/  = [];
    if (range.e.c > 0xFF || range.e.r > 0x3FFF) {
        if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
        range.e.c = Math.min(range.e.c, 0xFF);
        range.e.r = Math.min(range.e.c, 0x3FFF);
        ref = encode_range(range);
    }
    for(var R = range.s.r; R <= range.e.r; ++R){
        rr = encode_row(R);
        for(var C = range.s.c; C <= range.e.c; ++C){
            if (R === range.s.r) cols[C] = encode_col(C);
            ref = cols[C] + rr;
            var cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (!cell) continue;
            /* write cell */ write_ws_biff2_cell(ba, cell, R, C, opts);
        }
    }
}
/* Based on test files */ function write_biff2_buf(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {
    var o = opts || {};
    if (DENSE != null && o.dense == null) o.dense = DENSE;
    var ba = buf_array();
    var idx = 0;
    for(var i = 0; i < wb.SheetNames.length; ++i)if (wb.SheetNames[i] == o.sheet) idx = i;
    if (idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error("Sheet not found: " + o.sheet);
    write_biff_rec(ba, o.biff == 4 ? 0x0409 : o.biff == 3 ? 0x0209 : 0x0009, write_BOF(wb, 0x10, o));
    /* ... */ write_ws_biff2(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);
    /* ... */ write_biff_rec(ba, 0x000A);
    return ba.end();
}
function write_FONTS_biff8(ba, data, opts) {
    write_biff_rec(ba, 0x0031 /* Font */ , write_Font({
        sz: 12,
        color: {
            theme: 1
        },
        name: "Arial",
        family: 2,
        scheme: "minor"
    }, opts));
}
function write_FMTS_biff8(ba, NF /*:?SSFTable*/ , opts) {
    if (!NF) return;
    [
        [
            5,
            8
        ],
        [
            23,
            26
        ],
        [
            41,
            44
        ],
        [
            /*63*/ 50,
            /*66],[164,*/ 392
        ]
    ].forEach(function(r) {
        /*:: if(!NF) return; */ for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) write_biff_rec(ba, 0x041E /* Format */ , write_Format(i, NF[i], opts));
    });
}
function write_FEAT(ba, ws) {
    /* [MS-XLS] 2.4.112 */ var o = new_buf(19);
    o.write_shift(4, 0x867);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(2, 3);
    o.write_shift(1, 1);
    o.write_shift(4, 0);
    write_biff_rec(ba, 0x0867 /* FeatHdr */ , o);
    /* [MS-XLS] 2.4.111 */ o = new_buf(39);
    o.write_shift(4, 0x868);
    o.write_shift(4, 0);
    o.write_shift(4, 0);
    o.write_shift(2, 3);
    o.write_shift(1, 0);
    o.write_shift(4, 0);
    o.write_shift(2, 1);
    o.write_shift(4, 4);
    o.write_shift(2, 0);
    write_Ref8U(safe_decode_range(ws["!ref"] || "A1"), o);
    o.write_shift(4, 4);
    write_biff_rec(ba, 0x0868 /* Feat */ , o);
}
function write_CELLXFS_biff8(ba, opts) {
    for(var i = 0; i < 16; ++i)write_biff_rec(ba, 0x00e0 /* XF */ , write_XF({
        numFmtId: 0,
        style: true
    }, 0, opts));
    opts.cellXfs.forEach(function(c) {
        write_biff_rec(ba, 0x00e0 /* XF */ , write_XF(c, 0, opts));
    });
}
function write_ws_biff8_hlinks(ba /*:BufArray*/ , ws) {
    for(var R = 0; R < ws["!links"].length; ++R){
        var HL = ws["!links"][R];
        write_biff_rec(ba, 0x01b8 /* HLink */ , write_HLink(HL));
        if (HL[1].Tooltip) write_biff_rec(ba, 0x0800 /* HLinkTooltip */ , write_HLinkTooltip(HL));
    }
    delete ws["!links"];
}
function write_ws_cols_biff8(ba, cols) {
    if (!cols) return;
    var cnt = 0;
    cols.forEach(function(col, idx) {
        if (++cnt <= 256 && col) write_biff_rec(ba, 0x007d /* ColInfo */ , write_ColInfo(col_obj_w(idx, col), idx));
    });
}
function write_ws_biff8_cell(ba /*:BufArray*/ , cell /*:Cell*/ , R /*:number*/ , C /*:number*/ , opts) {
    var os = 16 + get_cell_style(opts.cellXfs, cell, opts);
    if (cell.v == null && !cell.bf) {
        write_biff_rec(ba, 0x0201 /* Blank */ , write_XLSCell(R, C, os));
        return;
    }
    if (cell.bf) write_biff_rec(ba, 0x0006 /* Formula */ , write_Formula(cell, R, C, opts, os));
    else switch(cell.t){
        case "d":
        case "n":
            var v = cell.t == "d" ? datenum(parseDate(cell.v)) : cell.v;
            /* TODO: emit RK as appropriate */ write_biff_rec(ba, 0x0203 /* Number */ , write_Number(R, C, v, os, opts));
            break;
        case "b":
        case "e":
            write_biff_rec(ba, 0x0205 /* BoolErr */ , write_BoolErr(R, C, cell.v, os, opts, cell.t));
            break;
        /* TODO: codepage, sst */ case "s":
        case "str":
            if (opts.bookSST) {
                var isst = get_sst_id(opts.Strings, cell.v, opts.revStrings);
                write_biff_rec(ba, 0x00fd /* LabelSst */ , write_LabelSst(R, C, isst, os, opts));
            } else write_biff_rec(ba, 0x0204 /* Label */ , write_Label(R, C, (cell.v || "").slice(0, 255), os, opts));
            break;
        default:
            write_biff_rec(ba, 0x0201 /* Blank */ , write_XLSCell(R, C, os));
    }
}
/* [MS-XLS] 2.1.7.20.5 */ function write_ws_biff8(idx /*:number*/ , opts, wb /*:Workbook*/ ) {
    var ba = buf_array();
    var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
    var _WB /*:WBWBProps*/  = (wb || {}).Workbook || {} /*:any*/ ;
    var _sheet /*:WBWSProp*/  = (_WB.Sheets || [])[idx] || {} /*:any*/ ;
    var dense = Array.isArray(ws);
    var b8 = opts.biff == 8;
    var ref /*:string*/ , rr = "", cols /*:Array<string>*/  = [];
    var range = safe_decode_range(ws["!ref"] || "A1");
    var MAX_ROWS = b8 ? 65536 : 16384;
    if (range.e.c > 0xFF || range.e.r >= MAX_ROWS) {
        if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
        range.e.c = Math.min(range.e.c, 0xFF);
        range.e.r = Math.min(range.e.c, MAX_ROWS - 1);
    }
    write_biff_rec(ba, 0x0809, write_BOF(wb, 0x10, opts));
    /* [Uncalced] Index */ write_biff_rec(ba, 0x000d /* CalcMode */ , writeuint16(1));
    write_biff_rec(ba, 0x000c /* CalcCount */ , writeuint16(100));
    write_biff_rec(ba, 0x000f /* CalcRefMode */ , writebool(true));
    write_biff_rec(ba, 0x0011 /* CalcIter */ , writebool(false));
    write_biff_rec(ba, 0x0010 /* CalcDelta */ , write_Xnum(0.001));
    write_biff_rec(ba, 0x005f /* CalcSaveRecalc */ , writebool(true));
    write_biff_rec(ba, 0x002a /* PrintRowCol */ , writebool(false));
    write_biff_rec(ba, 0x002b /* PrintGrid */ , writebool(false));
    write_biff_rec(ba, 0x0082 /* GridSet */ , writeuint16(1));
    write_biff_rec(ba, 0x0080 /* Guts */ , write_Guts([
        0,
        0
    ]));
    /* DefaultRowHeight WsBool [Sync] [LPr] [HorizontalPageBreaks] [VerticalPageBreaks] */ /* Header (string) */ /* Footer (string) */ write_biff_rec(ba, 0x0083 /* HCenter */ , writebool(false));
    write_biff_rec(ba, 0x0084 /* VCenter */ , writebool(false));
    /* ... */ if (b8) write_ws_cols_biff8(ba, ws["!cols"]);
    /* ... */ write_biff_rec(ba, 0x200, write_Dimensions(range, opts));
    /* ... */ if (b8) ws["!links"] = [];
    for(var R = range.s.r; R <= range.e.r; ++R){
        rr = encode_row(R);
        for(var C = range.s.c; C <= range.e.c; ++C){
            if (R === range.s.r) cols[C] = encode_col(C);
            ref = cols[C] + rr;
            var cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (!cell) continue;
            /* write cell */ write_ws_biff8_cell(ba, cell, R, C, opts);
            if (b8 && cell.l) ws["!links"].push([
                ref,
                cell.l
            ]);
        }
    }
    var cname /*:string*/  = _sheet.CodeName || _sheet.name || s;
    /* ... */ if (b8) write_biff_rec(ba, 0x023e /* Window2 */ , write_Window2((_WB.Views || [])[0]));
    /* ... */ if (b8 && (ws["!merges"] || []).length) write_biff_rec(ba, 0x00e5 /* MergeCells */ , write_MergeCells(ws["!merges"]));
    /* [LRng] *QUERYTABLE [PHONETICINFO] CONDFMTS */ if (b8) write_ws_biff8_hlinks(ba, ws);
    /* [DVAL] */ write_biff_rec(ba, 0x01ba /* CodeName */ , write_XLUnicodeString(cname, opts));
    /* *WebPub *CellWatch [SheetExt] */ if (b8) write_FEAT(ba, ws);
    /* *FEAT11 *RECORD12 */ write_biff_rec(ba, 0x000a /* EOF */ );
    return ba.end();
}
/* [MS-XLS] 2.1.7.20.3 */ function write_biff8_global(wb /*:Workbook*/ , bufs, opts /*:WriteOpts*/ ) {
    var A = buf_array();
    var _WB /*:WBWBProps*/  = (wb || {}).Workbook || {} /*:any*/ ;
    var _sheets /*:Array<WBWSProp>*/  = _WB.Sheets || [];
    var _wb /*:WBProps*/  = /*::((*/ _WB.WBProps || {} /*:: ):any)*/ ;
    var b8 = opts.biff == 8, b5 = opts.biff == 5;
    write_biff_rec(A, 0x0809, write_BOF(wb, 0x05, opts));
    if (opts.bookType == "xla") write_biff_rec(A, 0x0087 /* Addin */ );
    write_biff_rec(A, 0x00e1 /* InterfaceHdr */ , b8 ? writeuint16(0x04b0) : null);
    write_biff_rec(A, 0x00c1 /* Mms */ , writezeroes(2));
    if (b5) write_biff_rec(A, 0x00bf /* ToolbarHdr */ );
    if (b5) write_biff_rec(A, 0x00c0 /* ToolbarEnd */ );
    write_biff_rec(A, 0x00e2 /* InterfaceEnd */ );
    write_biff_rec(A, 0x005c /* WriteAccess */ , write_WriteAccess("SheetJS", opts));
    /* [FileSharing] */ write_biff_rec(A, 0x0042 /* CodePage */ , writeuint16(b8 ? 0x04b0 : 0x04E4));
    /* *2047 Lel */ if (b8) write_biff_rec(A, 0x0161 /* DSF */ , writeuint16(0));
    if (b8) write_biff_rec(A, 0x01c0 /* Excel9File */ );
    write_biff_rec(A, 0x013d /* RRTabId */ , write_RRTabId(wb.SheetNames.length));
    if (b8 && wb.vbaraw) write_biff_rec(A, 0x00d3 /* ObProj */ );
    /* [ObNoMacros] */ if (b8 && wb.vbaraw) {
        var cname /*:string*/  = _wb.CodeName || "ThisWorkbook";
        write_biff_rec(A, 0x01ba /* CodeName */ , write_XLUnicodeString(cname, opts));
    }
    write_biff_rec(A, 0x009c /* BuiltInFnGroupCount */ , writeuint16(0x11));
    /* *FnGroupName *FnGrp12 */ /* *Lbl */ /* [OleObjectSize] */ write_biff_rec(A, 0x0019 /* WinProtect */ , writebool(false));
    write_biff_rec(A, 0x0012 /* Protect */ , writebool(false));
    write_biff_rec(A, 0x0013 /* Password */ , writeuint16(0));
    if (b8) write_biff_rec(A, 0x01af /* Prot4Rev */ , writebool(false));
    if (b8) write_biff_rec(A, 0x01bc /* Prot4RevPass */ , writeuint16(0));
    write_biff_rec(A, 0x003d /* Window1 */ , write_Window1(opts));
    write_biff_rec(A, 0x0040 /* Backup */ , writebool(false));
    write_biff_rec(A, 0x008d /* HideObj */ , writeuint16(0));
    write_biff_rec(A, 0x0022 /* Date1904 */ , writebool(safe1904(wb) == "true"));
    write_biff_rec(A, 0x000e /* CalcPrecision */ , writebool(true));
    if (b8) write_biff_rec(A, 0x01b7 /* RefreshAll */ , writebool(false));
    write_biff_rec(A, 0x00DA /* BookBool */ , writeuint16(0));
    /* ... */ write_FONTS_biff8(A, wb, opts);
    write_FMTS_biff8(A, wb.SSF, opts);
    write_CELLXFS_biff8(A, opts);
    /* ... */ if (b8) write_biff_rec(A, 0x0160 /* UsesELFs */ , writebool(false));
    var a = A.end();
    var C = buf_array();
    /* METADATA [MTRSettings] [ForceFullCalculation] */ if (b8) write_biff_rec(C, 0x008C, write_Country());
    /* *SUPBOOK *LBL *RTD [RecalcId] *HFPicture *MSODRAWINGGROUP */ /* BIFF8: [SST *Continue] ExtSST */ if (b8 && opts.Strings) write_biff_continue(C, 0x00FC, write_SST(opts.Strings, opts));
    /* *WebPub [WOpt] [CrErr] [BookExt] *FeatHdr *DConn [THEME] [CompressPictures] [Compat12] [GUIDTypeLib] */ write_biff_rec(C, 0x000A /* EOF */ );
    var c = C.end();
    var B = buf_array();
    var blen = 0, j = 0;
    for(j = 0; j < wb.SheetNames.length; ++j)blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;
    var start = a.length + blen + c.length;
    for(j = 0; j < wb.SheetNames.length; ++j){
        var _sheet /*:WBWSProp*/  = _sheets[j] || {} /*:any*/ ;
        write_biff_rec(B, 0x0085 /* BoundSheet8 */ , write_BoundSheet8({
            pos: start,
            hs: _sheet.Hidden || 0,
            dt: 0,
            name: wb.SheetNames[j]
        }, opts));
        start += bufs[j].length;
    }
    /* 1*BoundSheet8 */ var b = B.end();
    if (blen != b.length) throw new Error("BS8 " + blen + " != " + b.length);
    var out = [];
    if (a.length) out.push(a);
    if (b.length) out.push(b);
    if (c.length) out.push(c);
    return bconcat(out);
}
/* [MS-XLS] 2.1.7.20 Workbook Stream */ function write_biff8_buf(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {
    var o = opts || {};
    var bufs = [];
    if (wb && !wb.SSF) wb.SSF = dup(table_fmt);
    if (wb && wb.SSF) {
        make_ssf();
        SSF_load_table(wb.SSF);
        // $FlowIgnore
        o.revssf = evert_num(wb.SSF);
        o.revssf[wb.SSF[65535]] = 0;
        o.ssf = wb.SSF;
    }
    o.Strings = /*::((*/ [] /*:: :any):SST)*/ ;
    o.Strings.Count = 0;
    o.Strings.Unique = 0;
    fix_write_opts(o);
    o.cellXfs = [];
    get_cell_style(o.cellXfs, {}, {
        revssf: {
            "General": 0
        }
    });
    if (!wb.Props) wb.Props = {};
    for(var i = 0; i < wb.SheetNames.length; ++i)bufs[bufs.length] = write_ws_biff8(i, o, wb);
    bufs.unshift(write_biff8_global(wb, bufs, o));
    return bconcat(bufs);
}
function write_biff_buf(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {
    for(var i = 0; i <= wb.SheetNames.length; ++i){
        var ws = wb.Sheets[wb.SheetNames[i]];
        if (!ws || !ws["!ref"]) continue;
        var range = decode_range(ws["!ref"]);
        if (range.e.c > 255) {
            if (typeof console != "undefined" && console.error) console.error("Worksheet '" + wb.SheetNames[i] + "' extends beyond column IV (255).  Data may be lost.");
        }
    }
    var o = opts || {};
    switch(o.biff || 2){
        case 8:
        case 5:
            return write_biff8_buf(wb, opts);
        case 4:
        case 3:
        case 2:
            return write_biff2_buf(wb, opts);
    }
    throw new Error("invalid type " + o.bookType + " for BIFF");
}
/* note: browser DOM element cannot see mso- style attrs, must parse */ function html_to_sheet(str /*:string*/ , _opts) /*:Workbook*/ {
    var opts = _opts || {};
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    var ws /*:Worksheet*/  = opts.dense ? [] : {} /*:any*/ ;
    str = str.replace(/<!--.*?-->/g, "");
    var mtch /*:any*/  = str.match(/<table/i);
    if (!mtch) throw new Error("Invalid HTML: could not find <table>");
    var mtch2 /*:any*/  = str.match(/<\/table/i);
    var i /*:number*/  = mtch.index, j /*:number*/  = mtch2 && mtch2.index || str.length;
    var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, "<tr>");
    var R = -1, C = 0, RS = 0, CS = 0;
    var range /*:Range*/  = {
        s: {
            r: 10000000,
            c: 10000000
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var merges /*:Array<Range>*/  = [];
    for(i = 0; i < rows.length; ++i){
        var row = rows[i].trim();
        var hd = row.slice(0, 3).toLowerCase();
        if (hd == "<tr") {
            ++R;
            if (opts.sheetRows && opts.sheetRows <= R) {
                --R;
                break;
            }
            C = 0;
            continue;
        }
        if (hd != "<td" && hd != "<th") continue;
        var cells = row.split(/<\/t[dh]>/i);
        for(j = 0; j < cells.length; ++j){
            var cell = cells[j].trim();
            if (!cell.match(/<t[dh]/i)) continue;
            var m = cell, cc = 0;
            /* TODO: parse styles etc */ while(m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1)m = m.slice(cc + 1);
            for(var midx = 0; midx < merges.length; ++midx){
                var _merge /*:Range*/  = merges[midx];
                if (_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) {
                    C = _merge.e.c + 1;
                    midx = -1;
                }
            }
            var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
            CS = tag.colspan ? +tag.colspan : 1;
            if ((RS = +tag.rowspan) > 1 || CS > 1) merges.push({
                s: {
                    r: R,
                    c: C
                },
                e: {
                    r: R + (RS || 1) - 1,
                    c: C + CS - 1
                }
            });
            var _t /*:string*/  = tag.t || tag["data-t"] || "";
            /* TODO: generate stub cells */ if (!m.length) {
                C += CS;
                continue;
            }
            m = htmldecode(m);
            if (range.s.r > R) range.s.r = R;
            if (range.e.r < R) range.e.r = R;
            if (range.s.c > C) range.s.c = C;
            if (range.e.c < C) range.e.c = C;
            if (!m.length) {
                C += CS;
                continue;
            }
            var o /*:Cell*/  = {
                t: "s",
                v: m
            };
            if (opts.raw || !m.trim().length || _t == "s") ;
            else if (m === "TRUE") o = {
                t: "b",
                v: true
            };
            else if (m === "FALSE") o = {
                t: "b",
                v: false
            };
            else if (!isNaN(fuzzynum(m))) o = {
                t: "n",
                v: fuzzynum(m)
            };
            else if (!isNaN(fuzzydate(m).getDate())) {
                o = {
                    t: "d",
                    v: parseDate(m)
                } /*:any*/ ;
                if (!opts.cellDates) o = {
                    t: "n",
                    v: datenum(o.v)
                } /*:any*/ ;
                o.z = opts.dateNF || table_fmt[14];
            }
            if (opts.dense) {
                if (!ws[R]) ws[R] = [];
                ws[R][C] = o;
            } else ws[encode_cell({
                r: R,
                c: C
            })] = o;
            C += CS;
        }
    }
    ws["!ref"] = encode_range(range);
    if (merges.length) ws["!merges"] = merges;
    return ws;
}
function make_html_row(ws /*:Worksheet*/ , r /*:Range*/ , R /*:number*/ , o /*:Sheet2HTMLOpts*/ ) /*:string*/ {
    var M /*:Array<Range>*/  = ws["!merges"] || [];
    var oo /*:Array<string>*/  = [];
    for(var C = r.s.c; C <= r.e.c; ++C){
        var RS = 0, CS = 0;
        for(var j = 0; j < M.length; ++j){
            if (M[j].s.r > R || M[j].s.c > C) continue;
            if (M[j].e.r < R || M[j].e.c < C) continue;
            if (M[j].s.r < R || M[j].s.c < C) {
                RS = -1;
                break;
            }
            RS = M[j].e.r - M[j].s.r + 1;
            CS = M[j].e.c - M[j].s.c + 1;
            break;
        }
        if (RS < 0) continue;
        var coord = encode_cell({
            r: R,
            c: C
        });
        var cell = o.dense ? (ws[R] || [])[C] : ws[coord];
        /* TODO: html entities */ var w = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
        var sp = {} /*:any*/ ;
        if (RS > 1) sp.rowspan = RS;
        if (CS > 1) sp.colspan = CS;
        if (o.editable) w = '<span contenteditable="true">' + w + "</span>";
        else if (cell) {
            sp["data-t"] = cell && cell.t || "z";
            if (cell.v != null) sp["data-v"] = cell.v;
            if (cell.z != null) sp["data-z"] = cell.z;
            if (cell.l && (cell.l.Target || "#").charAt(0) != "#") w = '<a href="' + cell.l.Target + '">' + w + "</a>";
        }
        sp.id = (o.id || "sjs") + "-" + coord;
        oo.push(writextag("td", w, sp));
    }
    var preamble = "<tr>";
    return preamble + oo.join("") + "</tr>";
}
var HTML_BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
var HTML_END = "</body></html>";
function html_to_workbook(str /*:string*/ , opts) /*:Workbook*/ {
    var mtch = str.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);
    if (!mtch || mtch.length == 0) throw new Error("Invalid HTML: could not find <table>");
    if (mtch.length == 1) return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
    var wb = book_new();
    mtch.forEach(function(s, idx) {
        book_append_sheet(wb, html_to_sheet(s, opts), "Sheet" + (idx + 1));
    });
    return wb;
}
function make_html_preamble(ws /*:Worksheet*/ , R /*:Range*/ , o /*:Sheet2HTMLOpts*/ ) /*:string*/ {
    var out /*:Array<string>*/  = [];
    return out.join("") + "<table" + (o && o.id ? ' id="' + o.id + '"' : "") + ">";
}
function sheet_to_html(ws /*:Worksheet*/ , opts /*:?Sheet2HTMLOpts*/  /*, wb:?Workbook*/ ) /*:string*/ {
    var o = opts || {};
    var header = o.header != null ? o.header : HTML_BEGIN;
    var footer = o.footer != null ? o.footer : HTML_END;
    var out /*:Array<string>*/  = [
        header
    ];
    var r = decode_range(ws["!ref"]);
    o.dense = Array.isArray(ws);
    out.push(make_html_preamble(ws, r, o));
    for(var R = r.s.r; R <= r.e.r; ++R)out.push(make_html_row(ws, r, R, o));
    out.push("</table>" + footer);
    return out.join("");
}
function sheet_add_dom(ws /*:Worksheet*/ , table /*:HTMLElement*/ , _opts /*:?any*/ ) /*:Worksheet*/ {
    var opts = _opts || {};
    if (DENSE != null) opts.dense = DENSE;
    var or_R = 0, or_C = 0;
    if (opts.origin != null) {
        if (typeof opts.origin == "number") or_R = opts.origin;
        else {
            var _origin /*:CellAddress*/  = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
            or_R = _origin.r;
            or_C = _origin.c;
        }
    }
    var rows /*:HTMLCollection<HTMLTableRowElement>*/  = table.getElementsByTagName("tr");
    var sheetRows = Math.min(opts.sheetRows || 10000000, rows.length);
    var range /*:Range*/  = {
        s: {
            r: 0,
            c: 0
        },
        e: {
            r: or_R,
            c: or_C
        }
    };
    if (ws["!ref"]) {
        var _range /*:Range*/  = decode_range(ws["!ref"]);
        range.s.r = Math.min(range.s.r, _range.s.r);
        range.s.c = Math.min(range.s.c, _range.s.c);
        range.e.r = Math.max(range.e.r, _range.e.r);
        range.e.c = Math.max(range.e.c, _range.e.c);
        if (or_R == -1) range.e.r = or_R = _range.e.r + 1;
    }
    var merges /*:Array<Range>*/  = [], midx = 0;
    var rowinfo /*:Array<RowInfo>*/  = ws["!rows"] || (ws["!rows"] = []);
    var _R = 0, R = 0, _C = 0, C = 0, RS = 0, CS = 0;
    if (!ws["!cols"]) ws["!cols"] = [];
    for(; _R < rows.length && R < sheetRows; ++_R){
        var row /*:HTMLTableRowElement*/  = rows[_R];
        if (is_dom_element_hidden(row)) {
            if (opts.display) continue;
            rowinfo[R] = {
                hidden: true
            };
        }
        var elts /*:HTMLCollection<HTMLTableCellElement>*/  = row.children /*:any*/ ;
        for(_C = C = 0; _C < elts.length; ++_C){
            var elt /*:HTMLTableCellElement*/  = elts[_C];
            if (opts.display && is_dom_element_hidden(elt)) continue;
            var v /*:?string*/  = elt.hasAttribute("data-v") ? elt.getAttribute("data-v") : elt.hasAttribute("v") ? elt.getAttribute("v") : htmldecode(elt.innerHTML);
            var z /*:?string*/  = elt.getAttribute("data-z") || elt.getAttribute("z");
            for(midx = 0; midx < merges.length; ++midx){
                var m /*:Range*/  = merges[midx];
                if (m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) {
                    C = m.e.c + 1 - or_C;
                    midx = -1;
                }
            }
            /* TODO: figure out how to extract nonstandard mso- style */ CS = +elt.getAttribute("colspan") || 1;
            if ((RS = +elt.getAttribute("rowspan") || 1) > 1 || CS > 1) merges.push({
                s: {
                    r: R + or_R,
                    c: C + or_C
                },
                e: {
                    r: R + or_R + (RS || 1) - 1,
                    c: C + or_C + (CS || 1) - 1
                }
            });
            var o /*:Cell*/  = {
                t: "s",
                v: v
            };
            var _t /*:string*/  = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
            if (v != null) {
                if (v.length == 0) o.t = _t || "z";
                else if (opts.raw || v.trim().length == 0 || _t == "s") ;
                else if (v === "TRUE") o = {
                    t: "b",
                    v: true
                };
                else if (v === "FALSE") o = {
                    t: "b",
                    v: false
                };
                else if (!isNaN(fuzzynum(v))) o = {
                    t: "n",
                    v: fuzzynum(v)
                };
                else if (!isNaN(fuzzydate(v).getDate())) {
                    o = {
                        t: "d",
                        v: parseDate(v)
                    } /*:any*/ ;
                    if (!opts.cellDates) o = {
                        t: "n",
                        v: datenum(o.v)
                    } /*:any*/ ;
                    o.z = opts.dateNF || table_fmt[14];
                }
            }
            if (o.z === undefined && z != null) o.z = z;
            /* The first link is used.  Links are assumed to be fully specified.
			 * TODO: The right way to process relative links is to make a new <a> */ var l = "", Aelts = elt.getElementsByTagName("A");
            if (Aelts && Aelts.length) {
                for(var Aelti = 0; Aelti < Aelts.length; ++Aelti)if (Aelts[Aelti].hasAttribute("href")) {
                    l = Aelts[Aelti].getAttribute("href");
                    if (l.charAt(0) != "#") break;
                }
            }
            if (l && l.charAt(0) != "#") o.l = {
                Target: l
            };
            if (opts.dense) {
                if (!ws[R + or_R]) ws[R + or_R] = [];
                ws[R + or_R][C + or_C] = o;
            } else ws[encode_cell({
                c: C + or_C,
                r: R + or_R
            })] = o;
            if (range.e.c < C + or_C) range.e.c = C + or_C;
            C += CS;
        }
        ++R;
    }
    if (merges.length) ws["!merges"] = (ws["!merges"] || []).concat(merges);
    range.e.r = Math.max(range.e.r, R - 1 + or_R);
    ws["!ref"] = encode_range(range);
    if (R >= sheetRows) ws["!fullref"] = encode_range((range.e.r = rows.length - _R + R - 1 + or_R, range)); // We can count the real number of rows to parse but we don't to improve the performance
    return ws;
}
function parse_dom_table(table /*:HTMLElement*/ , _opts /*:?any*/ ) /*:Worksheet*/ {
    var opts = _opts || {};
    var ws /*:Worksheet*/  = opts.dense ? [] : {} /*:any*/ ;
    return sheet_add_dom(ws, table, _opts);
}
function table_to_book(table /*:HTMLElement*/ , opts /*:?any*/ ) /*:Workbook*/ {
    return sheet_to_workbook(parse_dom_table(table, opts), opts);
}
function is_dom_element_hidden(element /*:HTMLElement*/ ) /*:boolean*/ {
    var display /*:string*/  = "";
    var get_computed_style /*:?function*/  = get_get_computed_style_function(element);
    if (get_computed_style) display = get_computed_style(element).getPropertyValue("display");
    if (!display) display = element.style && element.style.display;
    return display === "none";
}
/* global getComputedStyle */ function get_get_computed_style_function(element /*:HTMLElement*/ ) /*:?function*/ {
    // The proper getComputedStyle implementation is the one defined in the element window
    if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === "function") return element.ownerDocument.defaultView.getComputedStyle;
    // If it is not available, try to get one from the global namespace
    if (typeof getComputedStyle === "function") return getComputedStyle;
    return null;
}
/* OpenDocument */ function parse_text_p(text /*:string*/  /*::, tag*/ ) /*:Array<any>*/ {
    /* 6.1.2 White Space Characters */ var fixed = text.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ").replace(/<text:s\/>/g, " ").replace(/<text:s text:c="(\d+)"\/>/g, function($$, $1) {
        return Array(parseInt($1, 10) + 1).join(" ");
    }).replace(/<text:tab[^>]*\/>/g, "	").replace(/<text:line-break\/>/g, "\n");
    var v = unescapexml(fixed.replace(/<[^>]*>/g, ""));
    return [
        v
    ];
}
var number_formats_ods = {
    /* ods name: [short ssf fmt, long ssf fmt] */ day: [
        "d",
        "dd"
    ],
    month: [
        "m",
        "mm"
    ],
    year: [
        "y",
        "yy"
    ],
    hours: [
        "h",
        "hh"
    ],
    minutes: [
        "m",
        "mm"
    ],
    seconds: [
        "s",
        "ss"
    ],
    "am-pm": [
        "A/P",
        "AM/PM"
    ],
    "day-of-week": [
        "ddd",
        "dddd"
    ],
    era: [
        "e",
        "ee"
    ],
    /* there is no native representation of LO "Q" format */ quarter: [
        "\\Qm",
        'm\\"th quarter"'
    ]
};
function parse_content_xml(d /*:string*/ , _opts) /*:Workbook*/ {
    var opts = _opts || {};
    if (DENSE != null && opts.dense == null) opts.dense = DENSE;
    var str = xlml_normalize(d);
    var state /*:Array<any>*/  = [], tmp;
    var tag /*:: = {}*/ ;
    var NFtag = {
        name: ""
    }, NF = "", pidx = 0;
    var sheetag /*:: = {name:"", '名称':""}*/ ;
    var rowtag /*:: = {'行号':""}*/ ;
    var Sheets = {}, SheetNames /*:Array<string>*/  = [];
    var ws = opts.dense ? [] : {} /*:any*/ ;
    var Rn, q /*:: :any = ({t:"", v:null, z:null, w:"",c:[],}:any)*/ ;
    var ctag = {
        value: ""
    } /*:any*/ ;
    var textp = "", textpidx = 0, textptag /*:: = {}*/ ;
    var textR = [];
    var R = -1, C = -1, range = {
        s: {
            r: 1000000,
            c: 10000000
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var row_ol = 0;
    var number_format_map = {};
    var merges /*:Array<Range>*/  = [], mrange = {}, mR = 0, mC = 0;
    var rowinfo /*:Array<RowInfo>*/  = [], rowpeat = 1, colpeat = 1;
    var arrayf /*:Array<[Range, string]>*/  = [];
    var WB = {
        Names: []
    };
    var atag = {} /*:any*/ ;
    var _Ref /*:[string, string]*/  = [
        "",
        ""
    ];
    var comments /*:Array<Comment>*/  = [], comment /*:Comment*/  = {} /*:any*/ ;
    var creator = "", creatoridx = 0;
    var isstub = false, intable = false;
    var i = 0;
    xlmlregex.lastIndex = 0;
    str = str.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
    while(Rn = xlmlregex.exec(str))switch(Rn[3] = Rn[3].replace(/_.*$/, "")){
        case "table":
        case "工作表":
            if (Rn[1] === "/") {
                if (range.e.c >= range.s.c && range.e.r >= range.s.r) ws["!ref"] = encode_range(range);
                else ws["!ref"] = "A1:A1";
                if (opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
                    ws["!fullref"] = ws["!ref"];
                    range.e.r = opts.sheetRows - 1;
                    ws["!ref"] = encode_range(range);
                }
                if (merges.length) ws["!merges"] = merges;
                if (rowinfo.length) ws["!rows"] = rowinfo;
                sheetag.name = sheetag["名称"] || sheetag.name;
                if (typeof JSON !== "undefined") JSON.stringify(sheetag);
                SheetNames.push(sheetag.name);
                Sheets[sheetag.name] = ws;
                intable = false;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                sheetag = parsexmltag(Rn[0], false);
                R = C = -1;
                range.s.r = range.s.c = 10000000;
                range.e.r = range.e.c = 0;
                ws = opts.dense ? [] : {} /*:any*/ ;
                merges = [];
                rowinfo = [];
                intable = true;
            }
            break;
        case "table-row-group":
            if (Rn[1] === "/") --row_ol;
            else ++row_ol;
            break;
        case "table-row":
        case "行":
            if (Rn[1] === "/") {
                R += rowpeat;
                rowpeat = 1;
                break;
            }
            rowtag = parsexmltag(Rn[0], false);
            if (rowtag["行号"]) R = rowtag["行号"] - 1;
            else if (R == -1) R = 0;
            rowpeat = +rowtag["number-rows-repeated"] || 1;
            /* TODO: remove magic */ if (rowpeat < 10) {
                for(i = 0; i < rowpeat; ++i)if (row_ol > 0) rowinfo[R + i] = {
                    level: row_ol
                };
            }
            C = -1;
            break;
        case "covered-table-cell":
            if (Rn[1] !== "/") ++C;
            if (opts.sheetStubs) {
                if (opts.dense) {
                    if (!ws[R]) ws[R] = [];
                    ws[R][C] = {
                        t: "z"
                    };
                } else ws[encode_cell({
                    r: R,
                    c: C
                })] = {
                    t: "z"
                };
            }
            textp = "";
            textR = [];
            break; /* stub */ 
        case "table-cell":
        case "数据":
            if (Rn[0].charAt(Rn[0].length - 2) === "/") {
                ++C;
                ctag = parsexmltag(Rn[0], false);
                colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                q = {
                    t: "z",
                    v: null
                } /*:any*/ ;
                if (ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));
                if ((ctag["数据类型"] || ctag["value-type"]) == "string") {
                    q.t = "s";
                    q.v = unescapexml(ctag["string-value"] || "");
                    if (opts.dense) {
                        if (!ws[R]) ws[R] = [];
                        ws[R][C] = q;
                    } else ws[encode_cell({
                        r: R,
                        c: C
                    })] = q;
                }
                C += colpeat - 1;
            } else if (Rn[1] !== "/") {
                ++C;
                textp = "";
                textpidx = 0;
                textR = [];
                colpeat = 1;
                var rptR = rowpeat ? R + rowpeat - 1 : R;
                if (C > range.e.c) range.e.c = C;
                if (C < range.s.c) range.s.c = C;
                if (R < range.s.r) range.s.r = R;
                if (rptR > range.e.r) range.e.r = rptR;
                ctag = parsexmltag(Rn[0], false);
                comments = [];
                comment = {} /*:any*/ ;
                q = {
                    t: ctag["数据类型"] || ctag["value-type"],
                    v: null
                } /*:any*/ ;
                if (opts.cellFormula) {
                    if (ctag.formula) ctag.formula = unescapexml(ctag.formula);
                    if (ctag["number-matrix-columns-spanned"] && ctag["number-matrix-rows-spanned"]) {
                        mR = parseInt(ctag["number-matrix-rows-spanned"], 10) || 0;
                        mC = parseInt(ctag["number-matrix-columns-spanned"], 10) || 0;
                        mrange = {
                            s: {
                                r: R,
                                c: C
                            },
                            e: {
                                r: R + mR - 1,
                                c: C + mC - 1
                            }
                        };
                        q.F = encode_range(mrange);
                        arrayf.push([
                            mrange,
                            q.F
                        ]);
                    }
                    if (ctag.formula) q.f = ods_to_csf_formula(ctag.formula);
                    else for(i = 0; i < arrayf.length; ++i)if (R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r) {
                        if (C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c) q.F = arrayf[i][1];
                    }
                }
                if (ctag["number-columns-spanned"] || ctag["number-rows-spanned"]) {
                    mR = parseInt(ctag["number-rows-spanned"], 10) || 0;
                    mC = parseInt(ctag["number-columns-spanned"], 10) || 0;
                    mrange = {
                        s: {
                            r: R,
                            c: C
                        },
                        e: {
                            r: R + mR - 1,
                            c: C + mC - 1
                        }
                    };
                    merges.push(mrange);
                }
                /* 19.675.2 table:number-columns-repeated */ if (ctag["number-columns-repeated"]) colpeat = parseInt(ctag["number-columns-repeated"], 10);
                /* 19.385 office:value-type */ switch(q.t){
                    case "boolean":
                        q.t = "b";
                        q.v = parsexmlbool(ctag["boolean-value"]);
                        break;
                    case "float":
                        q.t = "n";
                        q.v = parseFloat(ctag.value);
                        break;
                    case "percentage":
                        q.t = "n";
                        q.v = parseFloat(ctag.value);
                        break;
                    case "currency":
                        q.t = "n";
                        q.v = parseFloat(ctag.value);
                        break;
                    case "date":
                        q.t = "d";
                        q.v = parseDate(ctag["date-value"]);
                        if (!opts.cellDates) {
                            q.t = "n";
                            q.v = datenum(q.v);
                        }
                        q.z = "m/d/yy";
                        break;
                    case "time":
                        q.t = "n";
                        q.v = parse_isodur(ctag["time-value"]) / 86400;
                        if (opts.cellDates) {
                            q.t = "d";
                            q.v = numdate(q.v);
                        }
                        q.z = "HH:MM:SS";
                        break;
                    case "number":
                        q.t = "n";
                        q.v = parseFloat(ctag["数据数值"]);
                        break;
                    default:
                        if (q.t === "string" || q.t === "text" || !q.t) {
                            q.t = "s";
                            if (ctag["string-value"] != null) {
                                textp = unescapexml(ctag["string-value"]);
                                textR = [];
                            }
                        } else throw new Error("Unsupported value type " + q.t);
                }
            } else {
                isstub = false;
                if (q.t === "s") {
                    q.v = textp || "";
                    if (textR.length) q.R = textR;
                    isstub = textpidx == 0;
                }
                if (atag.Target) q.l = atag;
                if (comments.length > 0) {
                    q.c = comments;
                    comments = [];
                }
                if (textp && opts.cellText !== false) q.w = textp;
                if (isstub) {
                    q.t = "z";
                    delete q.v;
                }
                if (!isstub || opts.sheetStubs) {
                    if (!(opts.sheetRows && opts.sheetRows <= R)) for(var rpt = 0; rpt < rowpeat; ++rpt){
                        colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                        if (opts.dense) {
                            if (!ws[R + rpt]) ws[R + rpt] = [];
                            ws[R + rpt][C] = rpt == 0 ? q : dup(q);
                            while(--colpeat > 0)ws[R + rpt][C + colpeat] = dup(q);
                        } else {
                            ws[encode_cell({
                                r: R + rpt,
                                c: C
                            })] = q;
                            while(--colpeat > 0)ws[encode_cell({
                                r: R + rpt,
                                c: C + colpeat
                            })] = dup(q);
                        }
                        if (range.e.c <= C) range.e.c = C;
                    }
                }
                colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                C += colpeat - 1;
                colpeat = 0;
                q = {};
                textp = "";
                textR = [];
            }
            atag = {} /*:any*/ ;
            break; // 9.1.4 <table:table-cell>
        /* pure state */ case "document":
        case "document-content":
        case "电子表格文档":
        case "spreadsheet":
        case "主体":
        case "scripts":
        case "styles":
        case "font-face-decls":
        case "master-styles":
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                Rn[3],
                true
            ]);
            break;
        case "annotation":
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
                comment.t = textp;
                if (textR.length) /*::(*/ comment /*:: :any)*/ .R = textR;
                comment.a = creator;
                comments.push(comment);
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                Rn[3],
                false
            ]);
            creator = "";
            creatoridx = 0;
            textp = "";
            textpidx = 0;
            textR = [];
            break;
        case "creator":
            if (Rn[1] === "/") creator = str.slice(creatoridx, Rn.index);
            else creatoridx = Rn.index + Rn[0].length;
            break;
        /* ignore state */ case "meta":
        case "元数据":
        case "settings":
        case "config-item-set":
        case "config-item-map-indexed":
        case "config-item-map-entry":
        case "config-item-map-named":
        case "shapes":
        case "frame":
        case "text-box":
        case "image":
        case "data-pilot-tables":
        case "list-style":
        case "form":
        case "dde-links":
        case "event-listeners":
        case "chart":
            if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([
                Rn[3],
                false
            ]);
            textp = "";
            textpidx = 0;
            textR = [];
            break;
        case "scientific-number":
            break;
        case "currency-symbol":
            break;
        case "currency-style":
            break;
        case "number-style":
        case "percentage-style":
        case "date-style":
        case "time-style":
            if (Rn[1] === "/") {
                number_format_map[NFtag.name] = NF;
                if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                NF = "";
                NFtag = parsexmltag(Rn[0], false);
                state.push([
                    Rn[3],
                    true
                ]);
            }
            break;
        case "script":
            break; // 3.13 <office:script>
        case "libraries":
            break; // TODO: <ooo:libraries>
        case "automatic-styles":
            break; // 3.15.3 <office:automatic-styles>
        case "default-style":
        case "page-layout":
            break; // TODO: <style:page-layout>
        case "style":
            break;
        case "map":
            break; // 16.3 <style:map>
        case "font-face":
            break; // 16.21 <style:font-face>
        case "paragraph-properties":
            break; // 17.6 <style:paragraph-properties>
        case "table-properties":
            break; // 17.15 <style:table-properties>
        case "table-column-properties":
            break; // 17.16 <style:table-column-properties>
        case "table-row-properties":
            break; // 17.17 <style:table-row-properties>
        case "table-cell-properties":
            break; // 17.18 <style:table-cell-properties>
        case "number":
            switch(state[state.length - 1][0]){
                case "time-style":
                case "date-style":
                    tag = parsexmltag(Rn[0], false);
                    NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
                    break;
            }
            break;
        case "fraction":
            break; // TODO 16.27.6 <number:fraction>
        case "day":
        case "month":
        case "year":
        case "era":
        case "day-of-week":
        case "week-of-year":
        case "quarter":
        case "hours":
        case "minutes":
        case "seconds":
        case "am-pm":
            switch(state[state.length - 1][0]){
                case "time-style":
                case "date-style":
                    tag = parsexmltag(Rn[0], false);
                    NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
                    break;
            }
            break;
        case "boolean-style":
            break; // 16.27.23 <number:boolean-style>
        case "boolean":
            break; // 16.27.24 <number:boolean>
        case "text-style":
            break; // 16.27.25 <number:text-style>
        case "text":
            if (Rn[0].slice(-2) === "/>") break;
            else if (Rn[1] === "/") switch(state[state.length - 1][0]){
                case "number-style":
                case "date-style":
                case "time-style":
                    NF += str.slice(pidx, Rn.index);
                    break;
            }
            else pidx = Rn.index + Rn[0].length;
            break;
        case "named-range":
            tag = parsexmltag(Rn[0], false);
            _Ref = ods_to_csf_3D(tag["cell-range-address"]);
            var nrange = {
                Name: tag.name,
                Ref: _Ref[0] + "!" + _Ref[1]
            } /*:any*/ ;
            if (intable) nrange.Sheet = SheetNames.length;
            WB.Names.push(nrange);
            break;
        case "text-content":
            break; // 16.27.27 <number:text-content>
        case "text-properties":
            break; // 16.27.27 <style:text-properties>
        case "embedded-text":
            break; // 16.27.4 <number:embedded-text>
        case "body":
        case "电子表格":
            break; // 3.3 16.9.6 19.726.3
        case "forms":
            break; // 12.25.2 13.2
        case "table-column":
            break; // 9.1.6 <table:table-column>
        case "table-header-rows":
            break; // 9.1.7 <table:table-header-rows>
        case "table-rows":
            break; // 9.1.12 <table:table-rows>
        /* TODO: outline levels */ case "table-column-group":
            break; // 9.1.10 <table:table-column-group>
        case "table-header-columns":
            break; // 9.1.11 <table:table-header-columns>
        case "table-columns":
            break; // 9.1.12 <table:table-columns>
        case "null-date":
            break; // 9.4.2 <table:null-date> TODO: date1904
        case "graphic-properties":
            break; // 17.21 <style:graphic-properties>
        case "calculation-settings":
            break; // 9.4.1 <table:calculation-settings>
        case "named-expressions":
            break; // 9.4.11 <table:named-expressions>
        case "label-range":
            break; // 9.4.9 <table:label-range>
        case "label-ranges":
            break; // 9.4.10 <table:label-ranges>
        case "named-expression":
            break; // 9.4.13 <table:named-expression>
        case "sort":
            break; // 9.4.19 <table:sort>
        case "sort-by":
            break; // 9.4.20 <table:sort-by>
        case "sort-groups":
            break; // 9.4.22 <table:sort-groups>
        case "tab":
            break; // 6.1.4 <text:tab>
        case "line-break":
            break; // 6.1.5 <text:line-break>
        case "span":
            break; // 6.1.7 <text:span>
        case "p":
        case "文本串":
            if ([
                "master-styles"
            ].indexOf(state[state.length - 1][0]) > -1) break;
            if (Rn[1] === "/" && (!ctag || !ctag["string-value"])) {
                var ptp = parse_text_p(str.slice(textpidx, Rn.index), textptag);
                textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
            } else {
                textptag = parsexmltag(Rn[0], false);
                textpidx = Rn.index + Rn[0].length;
            }
            break; // <text:p>
        case "s":
            break; // <text:s>
        case "database-range":
            if (Rn[1] === "/") break;
            try {
                _Ref = ods_to_csf_3D(parsexmltag(Rn[0])["target-range-address"]);
                Sheets[_Ref[0]]["!autofilter"] = {
                    ref: _Ref[1]
                };
            } catch (e) {}
            break;
        case "date":
            break; // <*:date>
        case "object":
            break; // 10.4.6.2 <draw:object>
        case "title":
        case "标题":
            break; // <*:title> OR <uof:标题>
        case "desc":
            break; // <*:desc>
        case "binary-data":
            break; // 10.4.5 TODO: b64 blob
        /* 9.2 Advanced Tables */ case "table-source":
            break; // 9.2.6
        case "scenario":
            break; // 9.2.6
        case "iteration":
            break; // 9.4.3 <table:iteration>
        case "content-validations":
            break; // 9.4.4 <table:
        case "content-validation":
            break; // 9.4.5 <table:
        case "help-message":
            break; // 9.4.6 <table:
        case "error-message":
            break; // 9.4.7 <table:
        case "database-ranges":
            break; // 9.4.14 <table:database-ranges>
        case "filter":
            break; // 9.5.2 <table:filter>
        case "filter-and":
            break; // 9.5.3 <table:filter-and>
        case "filter-or":
            break; // 9.5.4 <table:filter-or>
        case "filter-condition":
            break; // 9.5.5 <table:filter-condition>
        case "list-level-style-bullet":
            break; // 16.31 <text:
        case "list-level-style-number":
            break; // 16.32 <text:
        case "list-level-properties":
            break; // 17.19 <style:
        /* 7.3 Document Fields */ case "sender-firstname":
        case "sender-lastname":
        case "sender-initials":
        case "sender-title":
        case "sender-position":
        case "sender-email":
        case "sender-phone-private":
        case "sender-fax":
        case "sender-company":
        case "sender-phone-work":
        case "sender-street":
        case "sender-city":
        case "sender-postal-code":
        case "sender-country":
        case "sender-state-or-province":
        case "author-name":
        case "author-initials":
        case "chapter":
        case "file-name":
        case "template-name":
        case "sheet-name":
            break;
        case "event-listener":
            break;
        /* TODO: FODS Properties */ case "initial-creator":
        case "creation-date":
        case "print-date":
        case "generator":
        case "document-statistic":
        case "user-defined":
        case "editing-duration":
        case "editing-cycles":
            break;
        /* TODO: FODS Config */ case "config-item":
            break;
        /* TODO: style tokens */ case "page-number":
            break; // TODO <text:page-number>
        case "page-count":
            break; // TODO <text:page-count>
        case "time":
            break; // TODO <text:time>
        /* 9.3 Advanced Table Cells */ case "cell-range-source":
            break; // 9.3.1 <table:
        case "detective":
            break; // 9.3.2 <table:
        case "operation":
            break; // 9.3.3 <table:
        case "highlighted-range":
            break; // 9.3.4 <table:
        /* 9.6 Data Pilot Tables <table: */ case "data-pilot-table":
        case "source-cell-range":
        case "source-service":
        case "data-pilot-field":
        case "data-pilot-level":
        case "data-pilot-subtotals":
        case "data-pilot-subtotal":
        case "data-pilot-members":
        case "data-pilot-member":
        case "data-pilot-display-info":
        case "data-pilot-sort-info":
        case "data-pilot-layout-info":
        case "data-pilot-field-reference":
        case "data-pilot-groups":
        case "data-pilot-group":
        case "data-pilot-group-member":
            break;
        /* 10.3 Drawing Shapes */ case "rect":
            break;
        /* 14.6 DDE Connections */ case "dde-connection-decls":
        case "dde-connection-decl":
        case "dde-link":
        case "dde-source":
            break;
        case "properties":
            break; // 13.7 <form:properties>
        case "property":
            break; // 13.8 <form:property>
        case "a":
            if (Rn[1] !== "/") {
                atag = parsexmltag(Rn[0], false);
                if (!atag.href) break;
                atag.Target = unescapexml(atag.href);
                delete atag.href;
                if (atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
                    _Ref = ods_to_csf_3D(atag.Target.slice(1));
                    atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
                } else if (atag.Target.match(/^\.\.[\\\/]/)) atag.Target = atag.Target.slice(3);
            }
            break;
        /* non-standard */ case "table-protection":
            break;
        case "data-pilot-grand-total":
            break; // <table:
        case "office-document-common-attrs":
            break; // bare
        default:
            switch(Rn[2]){
                case "dc:":
                case "calcext:":
                case "loext:":
                case "ooo:":
                case "chartooo:":
                case "draw:":
                case "style:":
                case "chart:":
                case "form:":
                case "uof:":
                case "表:":
                case "字:":
                    break;
                default:
                    if (opts.WTF) throw new Error(Rn);
            }
    }
    var out /*:Workbook*/  = {
        Sheets: Sheets,
        SheetNames: SheetNames,
        Workbook: WB
    } /*:any*/ ;
    if (opts.bookSheets) delete /*::(*/ out /*:: :any)*/ .Sheets;
    return out;
}
function parse_ods(zip /*:ZIPFile*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    opts = opts || {} /*:any*/ ;
    if (safegetzipfile(zip, "META-INF/manifest.xml")) parse_manifest(getzipdata(zip, "META-INF/manifest.xml"), opts);
    var content = getzipstr(zip, "content.xml");
    if (!content) throw new Error("Missing content.xml in ODS / UOF file");
    var wb = parse_content_xml(utf8read(content), opts);
    if (safegetzipfile(zip, "meta.xml")) wb.Props = parse_core_props(getzipdata(zip, "meta.xml"));
    return wb;
}
function parse_fods(data /*:string*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    return parse_content_xml(data, opts);
}
/* OpenDocument */ var write_styles_ods /*:{(wb:any, opts:any):string}*/  = /* @__PURE__ */ function() {
    var master_styles = [
        "<office:master-styles>",
        '<style:master-page style:name="mp1" style:page-layout-name="mp1">',
        "<style:header/>",
        '<style:header-left style:display="false"/>',
        "<style:footer/>",
        '<style:footer-left style:display="false"/>',
        "</style:master-page>",
        "</office:master-styles>"
    ].join("");
    var payload = "<office:document-styles " + wxt_helper({
        "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
        "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
        "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
        "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
        "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
        "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
        "xmlns:xlink": "http://www.w3.org/1999/xlink",
        "xmlns:dc": "http://purl.org/dc/elements/1.1/",
        "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
        "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
        "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
        "office:version": "1.2"
    }) + ">" + master_styles + "</office:document-styles>";
    return function wso() {
        return XML_HEADER + payload;
    };
}();
var write_content_ods /*:{(wb:any, opts:any):string}*/  = /* @__PURE__ */ function() {
    /* 6.1.2 White Space Characters */ var write_text_p = function(text /*:string*/ ) /*:string*/ {
        return escapexml(text).replace(/  +/g, function($$) {
            return '<text:s text:c="' + $$.length + '"/>';
        }).replace(/\t/g, "<text:tab/>").replace(/\n/g, "</text:p><text:p>").replace(/^ /, "<text:s/>").replace(/ $/, "<text:s/>");
    };
    var null_cell_xml = "          <table:table-cell />\n";
    var covered_cell_xml = "          <table:covered-table-cell/>\n";
    var write_ws = function(ws, wb /*:Workbook*/ , i /*:number*/  /*::, opts*/ ) /*:string*/ {
        /* Section 9 Tables */ var o /*:Array<string>*/  = [];
        o.push('      <table:table table:name="' + escapexml(wb.SheetNames[i]) + '" table:style-name="ta1">\n');
        var R = 0, C = 0, range = decode_range(ws["!ref"] || "A1");
        var marr /*:Array<Range>*/  = ws["!merges"] || [], mi = 0;
        var dense = Array.isArray(ws);
        if (ws["!cols"]) for(C = 0; C <= range.e.c; ++C)o.push("        <table:table-column" + (ws["!cols"][C] ? ' table:style-name="co' + ws["!cols"][C].ods + '"' : "") + "></table:table-column>\n");
        var H = "", ROWS = ws["!rows"] || [];
        for(R = 0; R < range.s.r; ++R){
            H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : "";
            o.push("        <table:table-row" + H + "></table:table-row>\n");
        }
        for(; R <= range.e.r; ++R){
            H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : "";
            o.push("        <table:table-row" + H + ">\n");
            for(C = 0; C < range.s.c; ++C)o.push(null_cell_xml);
            for(; C <= range.e.c; ++C){
                var skip = false, ct = {}, textp = "";
                for(mi = 0; mi != marr.length; ++mi){
                    if (marr[mi].s.c > C) continue;
                    if (marr[mi].s.r > R) continue;
                    if (marr[mi].e.c < C) continue;
                    if (marr[mi].e.r < R) continue;
                    if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
                    ct["table:number-columns-spanned"] = marr[mi].e.c - marr[mi].s.c + 1;
                    ct["table:number-rows-spanned"] = marr[mi].e.r - marr[mi].s.r + 1;
                    break;
                }
                if (skip) {
                    o.push(covered_cell_xml);
                    continue;
                }
                var ref = encode_cell({
                    r: R,
                    c: C
                }), cell = dense ? (ws[R] || [])[C] : ws[ref];
                if (cell && cell.f) {
                    ct["table:formula"] = escapexml(csf_to_ods_formula(cell.f));
                    if (cell.F) {
                        if (cell.F.slice(0, ref.length) == ref) {
                            var _Fref = decode_range(cell.F);
                            ct["table:number-matrix-columns-spanned"] = _Fref.e.c - _Fref.s.c + 1;
                            ct["table:number-matrix-rows-spanned"] = _Fref.e.r - _Fref.s.r + 1;
                        }
                    }
                }
                if (!cell) {
                    o.push(null_cell_xml);
                    continue;
                }
                switch(cell.t){
                    case "b":
                        textp = cell.v ? "TRUE" : "FALSE";
                        ct["office:value-type"] = "boolean";
                        ct["office:boolean-value"] = cell.v ? "true" : "false";
                        break;
                    case "n":
                        textp = cell.w || String(cell.v || 0);
                        ct["office:value-type"] = "float";
                        ct["office:value"] = cell.v || 0;
                        break;
                    case "s":
                    case "str":
                        textp = cell.v == null ? "" : cell.v;
                        ct["office:value-type"] = "string";
                        break;
                    case "d":
                        textp = cell.w || parseDate(cell.v).toISOString();
                        ct["office:value-type"] = "date";
                        ct["office:date-value"] = parseDate(cell.v).toISOString();
                        ct["table:style-name"] = "ce1";
                        break;
                    //case 'e':
                    default:
                        o.push(null_cell_xml);
                        continue;
                }
                var text_p = write_text_p(textp);
                if (cell.l && cell.l.Target) {
                    var _tgt = cell.l.Target;
                    _tgt = _tgt.charAt(0) == "#" ? "#" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;
                    // TODO: choose correct parent path format based on link delimiters
                    if (_tgt.charAt(0) != "#" && !_tgt.match(/^\w+:/)) _tgt = "../" + _tgt;
                    text_p = writextag("text:a", text_p, {
                        "xlink:href": _tgt.replace(/&/g, "&amp;")
                    });
                }
                o.push("          " + writextag("table:table-cell", writextag("text:p", text_p, {}), ct) + "\n");
            }
            o.push("        </table:table-row>\n");
        }
        o.push("      </table:table>\n");
        return o.join("");
    };
    var write_automatic_styles_ods = function(o /*:Array<string>*/ , wb) {
        o.push(" <office:automatic-styles>\n");
        o.push('  <number:date-style style:name="N37" number:automatic-order="true">\n');
        o.push('   <number:month number:style="long"/>\n');
        o.push("   <number:text>/</number:text>\n");
        o.push('   <number:day number:style="long"/>\n');
        o.push("   <number:text>/</number:text>\n");
        o.push("   <number:year/>\n");
        o.push("  </number:date-style>\n");
        /* column styles */ var cidx = 0;
        wb.SheetNames.map(function(n) {
            return wb.Sheets[n];
        }).forEach(function(ws) {
            if (!ws) return;
            if (ws["!cols"]) {
                for(var C = 0; C < ws["!cols"].length; ++C)if (ws["!cols"][C]) {
                    var colobj = ws["!cols"][C];
                    if (colobj.width == null && colobj.wpx == null && colobj.wch == null) continue;
                    process_col(colobj);
                    colobj.ods = cidx;
                    var w = ws["!cols"][C].wpx + "px";
                    o.push('  <style:style style:name="co' + cidx + '" style:family="table-column">\n');
                    o.push('   <style:table-column-properties fo:break-before="auto" style:column-width="' + w + '"/>\n');
                    o.push("  </style:style>\n");
                    ++cidx;
                }
            }
        });
        /* row styles */ var ridx = 0;
        wb.SheetNames.map(function(n) {
            return wb.Sheets[n];
        }).forEach(function(ws) {
            if (!ws) return;
            if (ws["!rows"]) {
                for(var R = 0; R < ws["!rows"].length; ++R)if (ws["!rows"][R]) {
                    ws["!rows"][R].ods = ridx;
                    var h = ws["!rows"][R].hpx + "px";
                    o.push('  <style:style style:name="ro' + ridx + '" style:family="table-row">\n');
                    o.push('   <style:table-row-properties fo:break-before="auto" style:row-height="' + h + '"/>\n');
                    o.push("  </style:style>\n");
                    ++ridx;
                }
            }
        });
        /* table */ o.push('  <style:style style:name="ta1" style:family="table" style:master-page-name="mp1">\n');
        o.push('   <style:table-properties table:display="true" style:writing-mode="lr-tb"/>\n');
        o.push("  </style:style>\n");
        /* table cells, text */ o.push('  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n');
        /* page-layout */ o.push(" </office:automatic-styles>\n");
    };
    return function wcx(wb, opts) {
        var o = [
            XML_HEADER
        ];
        /* 3.1.3.2 */ var attr = wxt_helper({
            "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
            "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
            "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
            "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
            "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
            "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
            "xmlns:xlink": "http://www.w3.org/1999/xlink",
            "xmlns:dc": "http://purl.org/dc/elements/1.1/",
            "xmlns:meta": "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
            "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
            "xmlns:presentation": "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
            "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
            "xmlns:chart": "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
            "xmlns:dr3d": "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
            "xmlns:math": "http://www.w3.org/1998/Math/MathML",
            "xmlns:form": "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
            "xmlns:script": "urn:oasis:names:tc:opendocument:xmlns:script:1.0",
            "xmlns:ooo": "http://openoffice.org/2004/office",
            "xmlns:ooow": "http://openoffice.org/2004/writer",
            "xmlns:oooc": "http://openoffice.org/2004/calc",
            "xmlns:dom": "http://www.w3.org/2001/xml-events",
            "xmlns:xforms": "http://www.w3.org/2002/xforms",
            "xmlns:xsd": "http://www.w3.org/2001/XMLSchema",
            "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
            "xmlns:sheet": "urn:oasis:names:tc:opendocument:sh33tjs:1.0",
            "xmlns:rpt": "http://openoffice.org/2005/report",
            "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
            "xmlns:xhtml": "http://www.w3.org/1999/xhtml",
            "xmlns:grddl": "http://www.w3.org/2003/g/data-view#",
            "xmlns:tableooo": "http://openoffice.org/2009/table",
            "xmlns:drawooo": "http://openoffice.org/2010/draw",
            "xmlns:calcext": "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0",
            "xmlns:loext": "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0",
            "xmlns:field": "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0",
            "xmlns:formx": "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0",
            "xmlns:css3t": "http://www.w3.org/TR/css3-text/",
            "office:version": "1.2"
        });
        var fods = wxt_helper({
            "xmlns:config": "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
            "office:mimetype": "application/vnd.oasis.opendocument.spreadsheet"
        });
        if (opts.bookType == "fods") {
            o.push("<office:document" + attr + fods + ">\n");
            o.push(write_meta_ods().replace(/office:document-meta/g, "office:meta"));
        // TODO: settings (equiv of settings.xml for ODS)
        } else o.push("<office:document-content" + attr + ">\n");
        // o.push('  <office:scripts/>\n');
        write_automatic_styles_ods(o, wb);
        o.push("  <office:body>\n");
        o.push("    <office:spreadsheet>\n");
        for(var i = 0; i != wb.SheetNames.length; ++i)o.push(write_ws(wb.Sheets[wb.SheetNames[i]], wb, i, opts));
        o.push("    </office:spreadsheet>\n");
        o.push("  </office:body>\n");
        if (opts.bookType == "fods") o.push("</office:document>");
        else o.push("</office:document-content>");
        return o.join("");
    };
}();
function write_ods(wb /*:any*/ , opts /*:any*/ ) {
    if (opts.bookType == "fods") return write_content_ods(wb, opts);
    var zip = zip_new();
    var f = "";
    var manifest /*:Array<Array<string> >*/  = [];
    var rdf /*:Array<[string, string]>*/  = [];
    /* Part 3 Section 3.3 MIME Media Type */ f = "mimetype";
    zip_add_file(zip, f, "application/vnd.oasis.opendocument.spreadsheet");
    /* Part 1 Section 2.2 Documents */ f = "content.xml";
    zip_add_file(zip, f, write_content_ods(wb, opts));
    manifest.push([
        f,
        "text/xml"
    ]);
    rdf.push([
        f,
        "ContentFile"
    ]);
    /* TODO: these are hard-coded styles to satiate excel */ f = "styles.xml";
    zip_add_file(zip, f, write_styles_ods(wb, opts));
    manifest.push([
        f,
        "text/xml"
    ]);
    rdf.push([
        f,
        "StylesFile"
    ]);
    /* TODO: this is hard-coded to satiate excel */ f = "meta.xml";
    zip_add_file(zip, f, XML_HEADER + write_meta_ods());
    manifest.push([
        f,
        "text/xml"
    ]);
    rdf.push([
        f,
        "MetadataFile"
    ]);
    /* Part 3 Section 6 Metadata Manifest File */ f = "manifest.rdf";
    zip_add_file(zip, f, write_rdf(rdf /*, opts*/ ));
    manifest.push([
        f,
        "application/rdf+xml"
    ]);
    /* Part 3 Section 4 Manifest File */ f = "META-INF/manifest.xml";
    zip_add_file(zip, f, write_manifest(manifest /*, opts*/ ));
    return zip;
}
/*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */ function u8_to_dataview(array) {
    return new DataView(array.buffer, array.byteOffset, array.byteLength);
}
function u8str(u8) {
    return typeof TextDecoder != "undefined" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));
}
function stru8(str) {
    return typeof TextEncoder != "undefined" ? new TextEncoder().encode(str) : s2a(utf8write(str));
}
function u8contains(body, search) {
    outer: for(var L = 0; L <= body.length - search.length; ++L){
        for(var j = 0; j < search.length; ++j)if (body[L + j] != search[j]) continue outer;
        return true;
    }
    return false;
}
function u8concat(u8a) {
    var len = u8a.reduce(function(acc, x) {
        return acc + x.length;
    }, 0);
    var out = new Uint8Array(len);
    var off = 0;
    u8a.forEach(function(u8) {
        out.set(u8, off);
        off += u8.length;
    });
    return out;
}
function popcnt(x) {
    x -= x >> 1 & 1431655765;
    x = (x & 858993459) + (x >> 2 & 858993459);
    return (x + (x >> 4) & 252645135) * 16843009 >>> 24;
}
function readDecimal128LE(buf, offset) {
    var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;
    var mantissa = buf[offset + 14] & 1;
    for(var j = offset + 13; j >= offset; --j)mantissa = mantissa * 256 + buf[j];
    return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
}
function writeDecimal128LE(buf, offset, value) {
    var exp = Math.floor(value == 0 ? 0 : Math.LOG10E * Math.log(Math.abs(value))) + 6176 - 20;
    var mantissa = value / Math.pow(10, exp - 6176);
    buf[offset + 15] |= exp >> 7;
    buf[offset + 14] |= (exp & 127) << 1;
    for(var i = 0; mantissa >= 1; ++i, mantissa /= 256)buf[offset + i] = mantissa & 255;
    buf[offset + 15] |= value >= 0 ? 0 : 128;
}
function parse_varint49(buf, ptr) {
    var l = ptr ? ptr[0] : 0;
    var usz = buf[l] & 127;
    varint: if (buf[l++] >= 128) {
        usz |= (buf[l] & 127) << 7;
        if (buf[l++] < 128) break varint;
        usz |= (buf[l] & 127) << 14;
        if (buf[l++] < 128) break varint;
        usz |= (buf[l] & 127) << 21;
        if (buf[l++] < 128) break varint;
        usz += (buf[l] & 127) * Math.pow(2, 28);
        ++l;
        if (buf[l++] < 128) break varint;
        usz += (buf[l] & 127) * Math.pow(2, 35);
        ++l;
        if (buf[l++] < 128) break varint;
        usz += (buf[l] & 127) * Math.pow(2, 42);
        ++l;
        if (buf[l++] < 128) break varint;
    }
    if (ptr) ptr[0] = l;
    return usz;
}
function write_varint49(v) {
    var usz = new Uint8Array(7);
    usz[0] = v & 127;
    var L = 1;
    sz: if (v > 127) {
        usz[L - 1] |= 128;
        usz[L] = v >> 7 & 127;
        ++L;
        if (v <= 16383) break sz;
        usz[L - 1] |= 128;
        usz[L] = v >> 14 & 127;
        ++L;
        if (v <= 2097151) break sz;
        usz[L - 1] |= 128;
        usz[L] = v >> 21 & 127;
        ++L;
        if (v <= 268435455) break sz;
        usz[L - 1] |= 128;
        usz[L] = v / 256 >>> 21 & 127;
        ++L;
        if (v <= 34359738367) break sz;
        usz[L - 1] |= 128;
        usz[L] = v / 65536 >>> 21 & 127;
        ++L;
        if (v <= 4398046511103) break sz;
        usz[L - 1] |= 128;
        usz[L] = v / 16777216 >>> 21 & 127;
        ++L;
    }
    return usz.slice(0, L);
}
function varint_to_i32(buf) {
    var l = 0, i32 = buf[l] & 127;
    varint: if (buf[l++] >= 128) {
        i32 |= (buf[l] & 127) << 7;
        if (buf[l++] < 128) break varint;
        i32 |= (buf[l] & 127) << 14;
        if (buf[l++] < 128) break varint;
        i32 |= (buf[l] & 127) << 21;
        if (buf[l++] < 128) break varint;
        i32 |= (buf[l] & 127) << 28;
    }
    return i32;
}
function parse_shallow(buf) {
    var out = [], ptr = [
        0
    ];
    while(ptr[0] < buf.length){
        var off = ptr[0];
        var num = parse_varint49(buf, ptr);
        var type = num & 7;
        num = Math.floor(num / 8);
        var len = 0;
        var res;
        if (num == 0) break;
        switch(type){
            case 0:
                var l = ptr[0];
                while(buf[ptr[0]++] >= 128);
                res = buf.slice(l, ptr[0]);
                break;
            case 5:
                len = 4;
                res = buf.slice(ptr[0], ptr[0] + len);
                ptr[0] += len;
                break;
            case 1:
                len = 8;
                res = buf.slice(ptr[0], ptr[0] + len);
                ptr[0] += len;
                break;
            case 2:
                len = parse_varint49(buf, ptr);
                res = buf.slice(ptr[0], ptr[0] + len);
                ptr[0] += len;
                break;
            case 3:
            case 4:
            default:
                throw new Error("PB Type ".concat(type, " for Field ").concat(num, " at offset ").concat(off));
        }
        var v = {
            data: res,
            type: type
        };
        if (out[num] == null) out[num] = [
            v
        ];
        else out[num].push(v);
    }
    return out;
}
function write_shallow(proto) {
    var out = [];
    proto.forEach(function(field, idx) {
        field.forEach(function(item) {
            if (!item.data) return;
            out.push(write_varint49(idx * 8 + item.type));
            if (item.type == 2) out.push(write_varint49(item.data.length));
            out.push(item.data);
        });
    });
    return u8concat(out);
}
function mappa(data, cb) {
    return (data == null ? void 0 : data.map(function(d) {
        return cb(d.data);
    })) || [];
}
function parse_iwa_file(buf) {
    var _a;
    var out = [], ptr = [
        0
    ];
    while(ptr[0] < buf.length){
        var len = parse_varint49(buf, ptr);
        var ai = parse_shallow(buf.slice(ptr[0], ptr[0] + len));
        ptr[0] += len;
        var res = {
            id: varint_to_i32(ai[1][0].data),
            messages: []
        };
        ai[2].forEach(function(b) {
            var mi = parse_shallow(b.data);
            var fl = varint_to_i32(mi[3][0].data);
            res.messages.push({
                meta: mi,
                data: buf.slice(ptr[0], ptr[0] + fl)
            });
            ptr[0] += fl;
        });
        if ((_a = ai[3]) == null ? void 0 : _a[0]) res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;
        out.push(res);
    }
    return out;
}
function write_iwa_file(ias) {
    var bufs = [];
    ias.forEach(function(ia) {
        var ai = [];
        ai[1] = [
            {
                data: write_varint49(ia.id),
                type: 0
            }
        ];
        ai[2] = [];
        if (ia.merge != null) ai[3] = [
            {
                data: write_varint49(+!!ia.merge),
                type: 0
            }
        ];
        var midata = [];
        ia.messages.forEach(function(mi) {
            midata.push(mi.data);
            mi.meta[3] = [
                {
                    type: 0,
                    data: write_varint49(mi.data.length)
                }
            ];
            ai[2].push({
                data: write_shallow(mi.meta),
                type: 2
            });
        });
        var aipayload = write_shallow(ai);
        bufs.push(write_varint49(aipayload.length));
        bufs.push(aipayload);
        midata.forEach(function(mid) {
            return bufs.push(mid);
        });
    });
    return u8concat(bufs);
}
function parse_snappy_chunk(type, buf) {
    if (type != 0) throw new Error("Unexpected Snappy chunk type ".concat(type));
    var ptr = [
        0
    ];
    var usz = parse_varint49(buf, ptr);
    var chunks = [];
    while(ptr[0] < buf.length){
        var tag = buf[ptr[0]] & 3;
        if (tag == 0) {
            var len = buf[ptr[0]++] >> 2;
            if (len < 60) ++len;
            else {
                var c = len - 59;
                len = buf[ptr[0]];
                if (c > 1) len |= buf[ptr[0] + 1] << 8;
                if (c > 2) len |= buf[ptr[0] + 2] << 16;
                if (c > 3) len |= buf[ptr[0] + 3] << 24;
                len >>>= 0;
                len++;
                ptr[0] += c;
            }
            chunks.push(buf.slice(ptr[0], ptr[0] + len));
            ptr[0] += len;
            continue;
        } else {
            var offset = 0, length = 0;
            if (tag == 1) {
                length = (buf[ptr[0]] >> 2 & 7) + 4;
                offset = (buf[ptr[0]++] & 224) << 3;
                offset |= buf[ptr[0]++];
            } else {
                length = (buf[ptr[0]++] >> 2) + 1;
                if (tag == 2) {
                    offset = buf[ptr[0]] | buf[ptr[0] + 1] << 8;
                    ptr[0] += 2;
                } else {
                    offset = (buf[ptr[0]] | buf[ptr[0] + 1] << 8 | buf[ptr[0] + 2] << 16 | buf[ptr[0] + 3] << 24) >>> 0;
                    ptr[0] += 4;
                }
            }
            chunks = [
                u8concat(chunks)
            ];
            if (offset == 0) throw new Error("Invalid offset 0");
            if (offset > chunks[0].length) throw new Error("Invalid offset beyond length");
            if (length >= offset) {
                chunks.push(chunks[0].slice(-offset));
                length -= offset;
                while(length >= chunks[chunks.length - 1].length){
                    chunks.push(chunks[chunks.length - 1]);
                    length -= chunks[chunks.length - 1].length;
                }
            }
            chunks.push(chunks[0].slice(-offset, -offset + length));
        }
    }
    var o = u8concat(chunks);
    if (o.length != usz) throw new Error("Unexpected length: ".concat(o.length, " != ").concat(usz));
    return o;
}
function decompress_iwa_file(buf) {
    var out = [];
    var l = 0;
    while(l < buf.length){
        var t = buf[l++];
        var len = buf[l] | buf[l + 1] << 8 | buf[l + 2] << 16;
        l += 3;
        out.push(parse_snappy_chunk(t, buf.slice(l, l + len)));
        l += len;
    }
    if (l !== buf.length) throw new Error("data is not a valid framed stream!");
    return u8concat(out);
}
function compress_iwa_file(buf) {
    var out = [];
    var l = 0;
    while(l < buf.length){
        var c = Math.min(buf.length - l, 268435455);
        var frame = new Uint8Array(4);
        out.push(frame);
        var usz = write_varint49(c);
        var L = usz.length;
        out.push(usz);
        if (c <= 60) {
            L++;
            out.push(new Uint8Array([
                c - 1 << 2
            ]));
        } else if (c <= 256) {
            L += 2;
            out.push(new Uint8Array([
                240,
                c - 1 & 255
            ]));
        } else if (c <= 65536) {
            L += 3;
            out.push(new Uint8Array([
                244,
                c - 1 & 255,
                c - 1 >> 8 & 255
            ]));
        } else if (c <= 16777216) {
            L += 4;
            out.push(new Uint8Array([
                248,
                c - 1 & 255,
                c - 1 >> 8 & 255,
                c - 1 >> 16 & 255
            ]));
        } else if (c <= 4294967296) {
            L += 5;
            out.push(new Uint8Array([
                252,
                c - 1 & 255,
                c - 1 >> 8 & 255,
                c - 1 >> 16 & 255,
                c - 1 >>> 24 & 255
            ]));
        }
        out.push(buf.slice(l, l + c));
        L += c;
        frame[0] = 0;
        frame[1] = L & 255;
        frame[2] = L >> 8 & 255;
        frame[3] = L >> 16 & 255;
        l += c;
    }
    return u8concat(out);
}
function parse_old_storage(buf, sst, rsst, v) {
    var dv = u8_to_dataview(buf);
    var flags = dv.getUint32(4, true);
    var data_offset = (v > 1 ? 12 : 8) + popcnt(flags & (v > 1 ? 3470 : 398)) * 4;
    var ridx = -1, sidx = -1, ieee = NaN, dt = new Date(2001, 0, 1);
    if (flags & 512) {
        ridx = dv.getUint32(data_offset, true);
        data_offset += 4;
    }
    data_offset += popcnt(flags & (v > 1 ? 12288 : 4096)) * 4;
    if (flags & 16) {
        sidx = dv.getUint32(data_offset, true);
        data_offset += 4;
    }
    if (flags & 32) {
        ieee = dv.getFloat64(data_offset, true);
        data_offset += 8;
    }
    if (flags & 64) {
        dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
        data_offset += 8;
    }
    var ret;
    switch(buf[2]){
        case 0:
            break;
        case 2:
            ret = {
                t: "n",
                v: ieee
            };
            break;
        case 3:
            ret = {
                t: "s",
                v: sst[sidx]
            };
            break;
        case 5:
            ret = {
                t: "d",
                v: dt
            };
            break;
        case 6:
            ret = {
                t: "b",
                v: ieee > 0
            };
            break;
        case 7:
            ret = {
                t: "n",
                v: ieee / 86400
            };
            break;
        case 8:
            ret = {
                t: "e",
                v: 0
            };
            break;
        case 9:
            if (ridx > -1) ret = {
                t: "s",
                v: rsst[ridx]
            };
            else if (sidx > -1) ret = {
                t: "s",
                v: sst[sidx]
            };
            else if (!isNaN(ieee)) ret = {
                t: "n",
                v: ieee
            };
            else throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
            break;
        default:
            throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
    }
    return ret;
}
function parse_new_storage(buf, sst, rsst) {
    var dv = u8_to_dataview(buf);
    var flags = dv.getUint32(8, true);
    var data_offset = 12;
    var ridx = -1, sidx = -1, d128 = NaN, ieee = NaN, dt = new Date(2001, 0, 1);
    if (flags & 1) {
        d128 = readDecimal128LE(buf, data_offset);
        data_offset += 16;
    }
    if (flags & 2) {
        ieee = dv.getFloat64(data_offset, true);
        data_offset += 8;
    }
    if (flags & 4) {
        dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
        data_offset += 8;
    }
    if (flags & 8) {
        sidx = dv.getUint32(data_offset, true);
        data_offset += 4;
    }
    if (flags & 16) {
        ridx = dv.getUint32(data_offset, true);
        data_offset += 4;
    }
    var ret;
    switch(buf[1]){
        case 0:
            break;
        case 2:
            ret = {
                t: "n",
                v: d128
            };
            break;
        case 3:
            ret = {
                t: "s",
                v: sst[sidx]
            };
            break;
        case 5:
            ret = {
                t: "d",
                v: dt
            };
            break;
        case 6:
            ret = {
                t: "b",
                v: ieee > 0
            };
            break;
        case 7:
            ret = {
                t: "n",
                v: ieee / 86400
            };
            break;
        case 8:
            ret = {
                t: "e",
                v: 0
            };
            break;
        case 9:
            if (ridx > -1) ret = {
                t: "s",
                v: rsst[ridx]
            };
            else throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
            break;
        case 10:
            ret = {
                t: "n",
                v: d128
            };
            break;
        default:
            throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
    }
    return ret;
}
function write_new_storage(cell, sst) {
    var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, flags = 0;
    out[0] = 5;
    switch(cell.t){
        case "n":
            out[1] = 2;
            writeDecimal128LE(out, l, cell.v);
            flags |= 1;
            l += 16;
            break;
        case "b":
            out[1] = 6;
            dv.setFloat64(l, cell.v ? 1 : 0, true);
            flags |= 2;
            l += 8;
            break;
        case "s":
            if (sst.indexOf(cell.v) == -1) throw new Error("Value ".concat(cell.v, " missing from SST!"));
            out[1] = 3;
            dv.setUint32(l, sst.indexOf(cell.v), true);
            flags |= 8;
            l += 4;
            break;
        default:
            throw "unsupported cell type " + cell.t;
    }
    dv.setUint32(8, flags, true);
    return out.slice(0, l);
}
function write_old_storage(cell, sst) {
    var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, flags = 0;
    out[0] = 3;
    switch(cell.t){
        case "n":
            out[2] = 2;
            dv.setFloat64(l, cell.v, true);
            flags |= 32;
            l += 8;
            break;
        case "b":
            out[2] = 6;
            dv.setFloat64(l, cell.v ? 1 : 0, true);
            flags |= 32;
            l += 8;
            break;
        case "s":
            if (sst.indexOf(cell.v) == -1) throw new Error("Value ".concat(cell.v, " missing from SST!"));
            out[2] = 3;
            dv.setUint32(l, sst.indexOf(cell.v), true);
            flags |= 16;
            l += 4;
            break;
        default:
            throw "unsupported cell type " + cell.t;
    }
    dv.setUint32(4, flags, true);
    return out.slice(0, l);
}
function parse_cell_storage(buf, sst, rsst) {
    switch(buf[0]){
        case 0:
        case 1:
        case 2:
        case 3:
            return parse_old_storage(buf, sst, rsst, buf[0]);
        case 5:
            return parse_new_storage(buf, sst, rsst);
        default:
            throw new Error("Unsupported payload version ".concat(buf[0]));
    }
}
function parse_TSP_Reference(buf) {
    var pb = parse_shallow(buf);
    return parse_varint49(pb[1][0].data);
}
function write_TSP_Reference(idx) {
    var out = [];
    out[1] = [
        {
            type: 0,
            data: write_varint49(idx)
        }
    ];
    return write_shallow(out);
}
function parse_TST_TableDataList(M, root) {
    var pb = parse_shallow(root.data);
    var type = varint_to_i32(pb[1][0].data);
    var entries = pb[3];
    var data = [];
    (entries || []).forEach(function(entry) {
        var le = parse_shallow(entry.data);
        var key = varint_to_i32(le[1][0].data) >>> 0;
        switch(type){
            case 1:
                data[key] = u8str(le[3][0].data);
                break;
            case 8:
                var rt = M[parse_TSP_Reference(le[9][0].data)][0];
                var rtp = parse_shallow(rt.data);
                var rtpref = M[parse_TSP_Reference(rtp[1][0].data)][0];
                var mtype = varint_to_i32(rtpref.meta[1][0].data);
                if (mtype != 2001) throw new Error("2000 unexpected reference to ".concat(mtype));
                var tswpsa = parse_shallow(rtpref.data);
                data[key] = tswpsa[3].map(function(x) {
                    return u8str(x.data);
                }).join("");
                break;
        }
    });
    return data;
}
function parse_TST_TileRowInfo(u8, type) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
    var pb = parse_shallow(u8);
    var R = varint_to_i32(pb[1][0].data) >>> 0;
    var cnt = varint_to_i32(pb[2][0].data) >>> 0;
    var wide_offsets = ((_b = (_a = pb[8]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;
    var used_storage_u8, used_storage;
    if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type != 0) {
        used_storage_u8 = (_f = (_e = pb[7]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data;
        used_storage = (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;
    } else if (((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) && type != 1) {
        used_storage_u8 = (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;
        used_storage = (_n = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n.data;
    } else throw "NUMBERS Tile missing ".concat(type, " cell storage");
    var width = wide_offsets ? 4 : 1;
    var used_storage_offsets = u8_to_dataview(used_storage_u8);
    var offsets = [];
    for(var C = 0; C < used_storage_u8.length / 2; ++C){
        var off = used_storage_offsets.getUint16(C * 2, true);
        if (off < 65535) offsets.push([
            C,
            off
        ]);
    }
    if (offsets.length != cnt) throw "Expected ".concat(cnt, " cells, found ").concat(offsets.length);
    var cells = [];
    for(C = 0; C < offsets.length - 1; ++C)cells[offsets[C][0]] = used_storage.subarray(offsets[C][1] * width, offsets[C + 1][1] * width);
    if (offsets.length >= 1) cells[offsets[offsets.length - 1][0]] = used_storage.subarray(offsets[offsets.length - 1][1] * width);
    return {
        R: R,
        cells: cells
    };
}
function parse_TST_Tile(M, root) {
    var _a;
    var pb = parse_shallow(root.data);
    var storage = ((_a = pb == null ? void 0 : pb[7]) == null ? void 0 : _a[0]) ? varint_to_i32(pb[7][0].data) >>> 0 > 0 ? 1 : 0 : -1;
    var ri = mappa(pb[5], function(u8) {
        return parse_TST_TileRowInfo(u8, storage);
    });
    return {
        nrows: varint_to_i32(pb[4][0].data) >>> 0,
        data: ri.reduce(function(acc, x) {
            if (!acc[x.R]) acc[x.R] = [];
            x.cells.forEach(function(cell, C) {
                if (acc[x.R][C]) throw new Error("Duplicate cell r=".concat(x.R, " c=").concat(C));
                acc[x.R][C] = cell;
            });
            return acc;
        }, [])
    };
}
function parse_TST_TableModelArchive(M, root, ws) {
    var _a;
    var pb = parse_shallow(root.data);
    var range = {
        s: {
            r: 0,
            c: 0
        },
        e: {
            r: 0,
            c: 0
        }
    };
    range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
    if (range.e.r < 0) throw new Error("Invalid row varint ".concat(pb[6][0].data));
    range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
    if (range.e.c < 0) throw new Error("Invalid col varint ".concat(pb[7][0].data));
    ws["!ref"] = encode_range(range);
    var store = parse_shallow(pb[4][0].data);
    var sst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[4][0].data)][0]);
    var rsst = ((_a = store[17]) == null ? void 0 : _a[0]) ? parse_TST_TableDataList(M, M[parse_TSP_Reference(store[17][0].data)][0]) : [];
    var tile = parse_shallow(store[3][0].data);
    var _R = 0;
    tile[1].forEach(function(t) {
        var tl = parse_shallow(t.data);
        var ref = M[parse_TSP_Reference(tl[2][0].data)][0];
        var mtype = varint_to_i32(ref.meta[1][0].data);
        if (mtype != 6002) throw new Error("6001 unexpected reference to ".concat(mtype));
        var _tile = parse_TST_Tile(M, ref);
        _tile.data.forEach(function(row, R) {
            row.forEach(function(buf, C) {
                var addr = encode_cell({
                    r: _R + R,
                    c: C
                });
                var res = parse_cell_storage(buf, sst, rsst);
                if (res) ws[addr] = res;
            });
        });
        _R += _tile.nrows;
    });
}
function parse_TST_TableInfoArchive(M, root) {
    var pb = parse_shallow(root.data);
    var out = {
        "!ref": "A1"
    };
    var tableref = M[parse_TSP_Reference(pb[2][0].data)];
    var mtype = varint_to_i32(tableref[0].meta[1][0].data);
    if (mtype != 6001) throw new Error("6000 unexpected reference to ".concat(mtype));
    parse_TST_TableModelArchive(M, tableref[0], out);
    return out;
}
function parse_TN_SheetArchive(M, root) {
    var _a;
    var pb = parse_shallow(root.data);
    var out = {
        name: ((_a = pb[1]) == null ? void 0 : _a[0]) ? u8str(pb[1][0].data) : "",
        sheets: []
    };
    var shapeoffs = mappa(pb[2], parse_TSP_Reference);
    shapeoffs.forEach(function(off) {
        M[off].forEach(function(m) {
            var mtype = varint_to_i32(m.meta[1][0].data);
            if (mtype == 6e3) out.sheets.push(parse_TST_TableInfoArchive(M, m));
        });
    });
    return out;
}
function parse_TN_DocumentArchive(M, root) {
    var out = book_new();
    var pb = parse_shallow(root.data);
    var sheetoffs = mappa(pb[1], parse_TSP_Reference);
    sheetoffs.forEach(function(off) {
        M[off].forEach(function(m) {
            var mtype = varint_to_i32(m.meta[1][0].data);
            if (mtype == 2) {
                var root2 = parse_TN_SheetArchive(M, m);
                root2.sheets.forEach(function(sheet, idx) {
                    book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + "_" + idx, true);
                });
            }
        });
    });
    if (out.SheetNames.length == 0) throw new Error("Empty NUMBERS file");
    return out;
}
function parse_numbers_iwa(cfb) {
    var _a, _b, _c, _d;
    var M = {}, indices = [];
    cfb.FullPaths.forEach(function(p) {
        if (p.match(/\.iwpv2/)) throw new Error("Unsupported password protection");
    });
    cfb.FileIndex.forEach(function(s) {
        if (!s.name.match(/\.iwa$/)) return;
        var o;
        try {
            o = decompress_iwa_file(s.content);
        } catch (e) {
            return console.log("?? " + s.content.length + " " + (e.message || e));
        }
        var packets;
        try {
            packets = parse_iwa_file(o);
        } catch (e) {
            return console.log("## " + (e.message || e));
        }
        packets.forEach(function(packet) {
            M[packet.id] = packet.messages;
            indices.push(packet.id);
        });
    });
    if (!indices.length) throw new Error("File has no messages");
    var docroot = ((_d = (_c = (_b = (_a = M == null ? void 0 : M[1]) == null ? void 0 : _a[0]) == null ? void 0 : _b.meta) == null ? void 0 : _c[1]) == null ? void 0 : _d[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 1 && M[1][0];
    if (!docroot) indices.forEach(function(idx) {
        M[idx].forEach(function(iwam) {
            var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
            if (mtype == 1) {
                if (!docroot) docroot = iwam;
                else throw new Error("Document has multiple roots");
            }
        });
    });
    if (!docroot) throw new Error("Cannot find Document root");
    return parse_TN_DocumentArchive(M, docroot);
}
function write_tile_row(tri, data, SST) {
    var _a, _b, _c, _d;
    if (!((_a = tri[6]) == null ? void 0 : _a[0]) || !((_b = tri[7]) == null ? void 0 : _b[0])) throw "Mutation only works on post-BNC storages!";
    var wide_offsets = ((_d = (_c = tri[8]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && varint_to_i32(tri[8][0].data) > 0 || false;
    if (wide_offsets) throw "Math only works with normal offsets";
    var cnt = 0;
    var dv = u8_to_dataview(tri[7][0].data), last_offset = 0, cell_storage = [];
    var _dv = u8_to_dataview(tri[4][0].data), _last_offset = 0, _cell_storage = [];
    for(var C = 0; C < data.length; ++C){
        if (data[C] == null) {
            dv.setUint16(C * 2, 65535, true);
            _dv.setUint16(C * 2, 65535);
            continue;
        }
        dv.setUint16(C * 2, last_offset, true);
        _dv.setUint16(C * 2, _last_offset, true);
        var celload, _celload;
        switch(typeof data[C]){
            case "string":
                celload = write_new_storage({
                    t: "s",
                    v: data[C]
                }, SST);
                _celload = write_old_storage({
                    t: "s",
                    v: data[C]
                }, SST);
                break;
            case "number":
                celload = write_new_storage({
                    t: "n",
                    v: data[C]
                }, SST);
                _celload = write_old_storage({
                    t: "n",
                    v: data[C]
                }, SST);
                break;
            case "boolean":
                celload = write_new_storage({
                    t: "b",
                    v: data[C]
                }, SST);
                _celload = write_old_storage({
                    t: "b",
                    v: data[C]
                }, SST);
                break;
            default:
                throw new Error("Unsupported value " + data[C]);
        }
        cell_storage.push(celload);
        last_offset += celload.length;
        _cell_storage.push(_celload);
        _last_offset += _celload.length;
        ++cnt;
    }
    tri[2][0].data = write_varint49(cnt);
    for(; C < tri[7][0].data.length / 2; ++C){
        dv.setUint16(C * 2, 65535, true);
        _dv.setUint16(C * 2, 65535, true);
    }
    tri[6][0].data = u8concat(cell_storage);
    tri[3][0].data = u8concat(_cell_storage);
    return cnt;
}
function write_numbers_iwa(wb, opts) {
    if (!opts || !opts.numbers) throw new Error("Must pass a `numbers` option -- check the README");
    var ws = wb.Sheets[wb.SheetNames[0]];
    if (wb.SheetNames.length > 1) console.error("The Numbers writer currently writes only the first table");
    var range = decode_range(ws["!ref"]);
    range.s.r = range.s.c = 0;
    var trunc = false;
    if (range.e.c > 9) {
        trunc = true;
        range.e.c = 9;
    }
    if (range.e.r > 49) {
        trunc = true;
        range.e.r = 49;
    }
    if (trunc) console.error("The Numbers writer is currently limited to ".concat(encode_range(range)));
    var data = sheet_to_json(ws, {
        range: range,
        header: 1
    });
    var SST = [
        "~Sh33tJ5~"
    ];
    data.forEach(function(row) {
        return row.forEach(function(cell) {
            if (typeof cell == "string") SST.push(cell);
        });
    });
    var dependents = {};
    var indices = [];
    var cfb = CFB.read(opts.numbers, {
        type: "base64"
    });
    cfb.FileIndex.map(function(fi, idx) {
        return [
            fi,
            cfb.FullPaths[idx]
        ];
    }).forEach(function(row) {
        var fi = row[0], fp = row[1];
        if (fi.type != 2) return;
        if (!fi.name.match(/\.iwa/)) return;
        var old_content = fi.content;
        var raw1 = decompress_iwa_file(old_content);
        var x2 = parse_iwa_file(raw1);
        x2.forEach(function(packet2) {
            indices.push(packet2.id);
            dependents[packet2.id] = {
                deps: [],
                location: fp,
                type: varint_to_i32(packet2.messages[0].meta[1][0].data)
            };
        });
    });
    indices.sort(function(x2, y2) {
        return x2 - y2;
    });
    var indices_varint = indices.filter(function(x2) {
        return x2 > 1;
    }).map(function(x2) {
        return [
            x2,
            write_varint49(x2)
        ];
    });
    cfb.FileIndex.map(function(fi, idx) {
        return [
            fi,
            cfb.FullPaths[idx]
        ];
    }).forEach(function(row) {
        var fi = row[0], fp = row[1];
        if (!fi.name.match(/\.iwa/)) return;
        var x2 = parse_iwa_file(decompress_iwa_file(fi.content));
        x2.forEach(function(ia) {
            ia.messages.forEach(function(m) {
                indices_varint.forEach(function(ivi) {
                    if (ia.messages.some(function(mess) {
                        return varint_to_i32(mess.meta[1][0].data) != 11006 && u8contains(mess.data, ivi[1]);
                    })) dependents[ivi[0]].deps.push(ia.id);
                });
            });
        });
    });
    function get_unique_msgid() {
        for(var i = 927262; i < 2e6; ++i)if (!dependents[i]) return i;
        throw new Error("Too many messages");
    }
    var entry = CFB.find(cfb, dependents[1].location);
    var x = parse_iwa_file(decompress_iwa_file(entry.content));
    var docroot;
    for(var xi = 0; xi < x.length; ++xi){
        var packet = x[xi];
        if (packet.id == 1) docroot = packet;
    }
    var sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[1][0].data);
    entry = CFB.find(cfb, dependents[sheetrootref].location);
    x = parse_iwa_file(decompress_iwa_file(entry.content));
    for(xi = 0; xi < x.length; ++xi){
        packet = x[xi];
        if (packet.id == sheetrootref) docroot = packet;
    }
    sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);
    entry = CFB.find(cfb, dependents[sheetrootref].location);
    x = parse_iwa_file(decompress_iwa_file(entry.content));
    for(xi = 0; xi < x.length; ++xi){
        packet = x[xi];
        if (packet.id == sheetrootref) docroot = packet;
    }
    sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);
    entry = CFB.find(cfb, dependents[sheetrootref].location);
    x = parse_iwa_file(decompress_iwa_file(entry.content));
    for(xi = 0; xi < x.length; ++xi){
        packet = x[xi];
        if (packet.id == sheetrootref) docroot = packet;
    }
    var pb = parse_shallow(docroot.messages[0].data);
    pb[6][0].data = write_varint49(range.e.r + 1);
    pb[7][0].data = write_varint49(range.e.c + 1);
    var cruidsref = parse_TSP_Reference(pb[46][0].data);
    var oldbucket = CFB.find(cfb, dependents[cruidsref].location);
    var _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
    for(var j = 0; j < _x.length; ++j){
        if (_x[j].id == cruidsref) break;
    }
    if (_x[j].id != cruidsref) throw "Bad ColumnRowUIDMapArchive";
    var cruids = parse_shallow(_x[j].messages[0].data);
    cruids[1] = [];
    cruids[2] = [], cruids[3] = [];
    for(var C = 0; C <= range.e.c; ++C){
        var uuid = [];
        uuid[1] = uuid[2] = [
            {
                type: 0,
                data: write_varint49(C + 420690)
            }
        ];
        cruids[1].push({
            type: 2,
            data: write_shallow(uuid)
        });
        cruids[2].push({
            type: 0,
            data: write_varint49(C)
        });
        cruids[3].push({
            type: 0,
            data: write_varint49(C)
        });
    }
    cruids[4] = [];
    cruids[5] = [], cruids[6] = [];
    for(var R = 0; R <= range.e.r; ++R){
        uuid = [];
        uuid[1] = uuid[2] = [
            {
                type: 0,
                data: write_varint49(R + 726270)
            }
        ];
        cruids[4].push({
            type: 2,
            data: write_shallow(uuid)
        });
        cruids[5].push({
            type: 0,
            data: write_varint49(R)
        });
        cruids[6].push({
            type: 0,
            data: write_varint49(R)
        });
    }
    _x[j].messages[0].data = write_shallow(cruids);
    oldbucket.content = compress_iwa_file(write_iwa_file(_x));
    oldbucket.size = oldbucket.content.length;
    delete pb[46];
    var store = parse_shallow(pb[4][0].data);
    store[7][0].data = write_varint49(range.e.r + 1);
    var row_headers = parse_shallow(store[1][0].data);
    var row_header_ref = parse_TSP_Reference(row_headers[2][0].data);
    oldbucket = CFB.find(cfb, dependents[row_header_ref].location);
    _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
    if (_x[0].id != row_header_ref) throw "Bad HeaderStorageBucket";
    var base_bucket = parse_shallow(_x[0].messages[0].data);
    for(R = 0; R < data.length; ++R){
        var _bucket = parse_shallow(base_bucket[2][0].data);
        _bucket[1][0].data = write_varint49(R);
        _bucket[4][0].data = write_varint49(data[R].length);
        base_bucket[2][R] = {
            type: base_bucket[2][0].type,
            data: write_shallow(_bucket)
        };
    }
    _x[0].messages[0].data = write_shallow(base_bucket);
    oldbucket.content = compress_iwa_file(write_iwa_file(_x));
    oldbucket.size = oldbucket.content.length;
    var col_header_ref = parse_TSP_Reference(store[2][0].data);
    oldbucket = CFB.find(cfb, dependents[col_header_ref].location);
    _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
    if (_x[0].id != col_header_ref) throw "Bad HeaderStorageBucket";
    base_bucket = parse_shallow(_x[0].messages[0].data);
    for(C = 0; C <= range.e.c; ++C){
        _bucket = parse_shallow(base_bucket[2][0].data);
        _bucket[1][0].data = write_varint49(C);
        _bucket[4][0].data = write_varint49(range.e.r + 1);
        base_bucket[2][C] = {
            type: base_bucket[2][0].type,
            data: write_shallow(_bucket)
        };
    }
    _x[0].messages[0].data = write_shallow(base_bucket);
    oldbucket.content = compress_iwa_file(write_iwa_file(_x));
    oldbucket.size = oldbucket.content.length;
    var sstref = parse_TSP_Reference(store[4][0].data);
    (function() {
        var sentry = CFB.find(cfb, dependents[sstref].location);
        var sx = parse_iwa_file(decompress_iwa_file(sentry.content));
        var sstroot;
        for(var sxi = 0; sxi < sx.length; ++sxi){
            var packet2 = sx[sxi];
            if (packet2.id == sstref) sstroot = packet2;
        }
        var sstdata = parse_shallow(sstroot.messages[0].data);
        sstdata[3] = [];
        var newsst = [];
        SST.forEach(function(str, i) {
            newsst[1] = [
                {
                    type: 0,
                    data: write_varint49(i)
                }
            ];
            newsst[2] = [
                {
                    type: 0,
                    data: write_varint49(1)
                }
            ];
            newsst[3] = [
                {
                    type: 2,
                    data: stru8(str)
                }
            ];
            sstdata[3].push({
                type: 2,
                data: write_shallow(newsst)
            });
        });
        sstroot.messages[0].data = write_shallow(sstdata);
        var sy = write_iwa_file(sx);
        var raw32 = compress_iwa_file(sy);
        sentry.content = raw32;
        sentry.size = sentry.content.length;
    })();
    var tile = parse_shallow(store[3][0].data);
    var t = tile[1][0];
    delete tile[2];
    var tl = parse_shallow(t.data);
    var tileref = parse_TSP_Reference(tl[2][0].data);
    (function() {
        var tentry = CFB.find(cfb, dependents[tileref].location);
        var tx = parse_iwa_file(decompress_iwa_file(tentry.content));
        var tileroot;
        for(var sxi = 0; sxi < tx.length; ++sxi){
            var packet2 = tx[sxi];
            if (packet2.id == tileref) tileroot = packet2;
        }
        var tiledata = parse_shallow(tileroot.messages[0].data);
        delete tiledata[6];
        delete tile[7];
        var rowload = new Uint8Array(tiledata[5][0].data);
        tiledata[5] = [];
        var cnt = 0;
        for(var R2 = 0; R2 <= range.e.r; ++R2){
            var tilerow = parse_shallow(rowload);
            cnt += write_tile_row(tilerow, data[R2], SST);
            tilerow[1][0].data = write_varint49(R2);
            tiledata[5].push({
                data: write_shallow(tilerow),
                type: 2
            });
        }
        tiledata[1] = [
            {
                type: 0,
                data: write_varint49(range.e.c + 1)
            }
        ];
        tiledata[2] = [
            {
                type: 0,
                data: write_varint49(range.e.r + 1)
            }
        ];
        tiledata[3] = [
            {
                type: 0,
                data: write_varint49(cnt)
            }
        ];
        tiledata[4] = [
            {
                type: 0,
                data: write_varint49(range.e.r + 1)
            }
        ];
        tileroot.messages[0].data = write_shallow(tiledata);
        var ty = write_iwa_file(tx);
        var raw32 = compress_iwa_file(ty);
        tentry.content = raw32;
        tentry.size = tentry.content.length;
    })();
    t.data = write_shallow(tl);
    store[3][0].data = write_shallow(tile);
    pb[4][0].data = write_shallow(store);
    docroot.messages[0].data = write_shallow(pb);
    var y = write_iwa_file(x);
    var raw3 = compress_iwa_file(y);
    entry.content = raw3;
    entry.size = entry.content.length;
    return cfb;
}
function fix_opts_func(defaults /*:Array<Array<any> >*/ ) /*:{(o:any):void}*/ {
    return function fix_opts(opts) {
        for(var i = 0; i != defaults.length; ++i){
            var d = defaults[i];
            if (opts[d[0]] === undefined) opts[d[0]] = d[1];
            if (d[2] === "n") opts[d[0]] = Number(opts[d[0]]);
        }
    };
}
function fix_read_opts(opts) {
    fix_opts_func([
        [
            "cellNF",
            false
        ],
        /* emit cell number format string as .z */ [
            "cellHTML",
            true
        ],
        /* emit html string as .h */ [
            "cellFormula",
            true
        ],
        /* emit formulae as .f */ [
            "cellStyles",
            false
        ],
        /* emits style/theme as .s */ [
            "cellText",
            true
        ],
        /* emit formatted text as .w */ [
            "cellDates",
            false
        ],
        /* emit date cells with type `d` */ [
            "sheetStubs",
            false
        ],
        /* emit empty cells */ [
            "sheetRows",
            0,
            "n"
        ],
        /* read n rows (0 = read all rows) */ [
            "bookDeps",
            false
        ],
        /* parse calculation chains */ [
            "bookSheets",
            false
        ],
        /* only try to get sheet names (no Sheets) */ [
            "bookProps",
            false
        ],
        /* only try to get properties (no Sheets) */ [
            "bookFiles",
            false
        ],
        /* include raw file structure (keys, files, cfb) */ [
            "bookVBA",
            false
        ],
        /* include vba raw data (vbaraw) */ [
            "password",
            ""
        ],
        /* password */ [
            "WTF",
            false
        ]
    ])(opts);
}
function fix_write_opts(opts) {
    fix_opts_func([
        [
            "cellDates",
            false
        ],
        /* write date cells with type `d` */ [
            "bookSST",
            false
        ],
        /* Generate Shared String Table */ [
            "bookType",
            "xlsx"
        ],
        /* Type of workbook (xlsx/m/b) */ [
            "compression",
            false
        ],
        /* Use file compression */ [
            "WTF",
            false
        ]
    ])(opts);
}
function get_sheet_type(n /*:string*/ ) /*:string*/ {
    if (RELS.WS.indexOf(n) > -1) return "sheet";
    if (RELS.CS && n == RELS.CS) return "chart";
    if (RELS.DS && n == RELS.DS) return "dialog";
    if (RELS.MS && n == RELS.MS) return "macro";
    return n && n.length ? n : "sheet";
}
function safe_parse_wbrels(wbrels, sheets) {
    if (!wbrels) return 0;
    try {
        wbrels = sheets.map(function pwbr(w) {
            if (!w.id) w.id = w.strRelID;
            return [
                w.name,
                wbrels["!id"][w.id].Target,
                get_sheet_type(wbrels["!id"][w.id].Type)
            ];
        });
    } catch (e) {
        return null;
    }
    return !wbrels || wbrels.length === 0 ? null : wbrels;
}
function safe_parse_sheet(zip, path /*:string*/ , relsPath /*:string*/ , sheet, idx /*:number*/ , sheetRels, sheets, stype /*:string*/ , opts, wb, themes, styles) {
    try {
        sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path);
        var data = getzipdata(zip, path);
        var _ws;
        switch(stype){
            case "sheet":
                _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
                break;
            case "chart":
                _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
                if (!_ws || !_ws["!drawel"]) break;
                var dfile = resolve_path(_ws["!drawel"].Target, path);
                var drelsp = get_rels_path(dfile);
                var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
                var chartp = resolve_path(draw, dfile);
                var crelsp = get_rels_path(chartp);
                _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
                break;
            case "macro":
                _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
                break;
            case "dialog":
                _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
                break;
            default:
                throw new Error("Unrecognized sheet type " + stype);
        }
        sheets[sheet] = _ws;
        /* scan rels for comments and threaded comments */ var tcomments = [];
        if (sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function(n) {
            var dfile = "";
            if (sheetRels[sheet][n].Type == RELS.CMNT) {
                dfile = resolve_path(sheetRels[sheet][n].Target, path);
                var comments = parse_cmnt(getzipdata(zip, dfile, true), dfile, opts);
                if (!comments || !comments.length) return;
                sheet_insert_comments(_ws, comments, false);
            }
            if (sheetRels[sheet][n].Type == RELS.TCMNT) {
                dfile = resolve_path(sheetRels[sheet][n].Target, path);
                tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile, true), opts));
            }
        });
        if (tcomments && tcomments.length) sheet_insert_comments(_ws, tcomments, true, opts.people || []);
    } catch (e) {
        if (opts.WTF) throw e;
    }
}
function strip_front_slash(x /*:string*/ ) /*:string*/ {
    return x.charAt(0) == "/" ? x.slice(1) : x;
}
function parse_zip(zip /*:ZIP*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    make_ssf();
    opts = opts || {};
    fix_read_opts(opts);
    /* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */ if (safegetzipfile(zip, "META-INF/manifest.xml")) return parse_ods(zip, opts);
    /* UOC */ if (safegetzipfile(zip, "objectdata.xml")) return parse_ods(zip, opts);
    /* Numbers */ if (safegetzipfile(zip, "Index/Document.iwa")) {
        if (typeof Uint8Array == "undefined") throw new Error("NUMBERS file parsing requires Uint8Array support");
        if (typeof parse_numbers_iwa != "undefined") {
            if (zip.FileIndex) return parse_numbers_iwa(zip);
            var _zip = CFB.utils.cfb_new();
            zipentries(zip).forEach(function(e) {
                zip_add_file(_zip, e, getzipbin(zip, e));
            });
            return parse_numbers_iwa(_zip);
        }
        throw new Error("Unsupported NUMBERS file");
    }
    if (!safegetzipfile(zip, "[Content_Types].xml")) {
        if (safegetzipfile(zip, "index.xml.gz")) throw new Error("Unsupported NUMBERS 08 file");
        if (safegetzipfile(zip, "index.xml")) throw new Error("Unsupported NUMBERS 09 file");
        throw new Error("Unsupported ZIP file");
    }
    var entries = zipentries(zip);
    var dir = parse_ct(getzipstr(zip, "[Content_Types].xml"));
    var xlsb = false;
    var sheets, binname;
    if (dir.workbooks.length === 0) {
        binname = "xl/workbook.xml";
        if (getzipdata(zip, binname, true)) dir.workbooks.push(binname);
    }
    if (dir.workbooks.length === 0) {
        binname = "xl/workbook.bin";
        if (!getzipdata(zip, binname, true)) throw new Error("Could not find workbook");
        dir.workbooks.push(binname);
        xlsb = true;
    }
    if (dir.workbooks[0].slice(-3) == "bin") xlsb = true;
    var themes = {} /*:any*/ ;
    var styles = {} /*:any*/ ;
    if (!opts.bookSheets && !opts.bookProps) {
        strs = [];
        if (dir.sst) try {
            strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);
        } catch (e) {
            if (opts.WTF) throw e;
        }
        if (opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//, ""), true) || "", dir.themes[0], opts);
        if (dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
    }
    /*var externbooks = */ dir.links.map(function(link) {
        try {
            var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
            return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
        } catch (e) {}
    });
    var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);
    var props = {}, propdata = "";
    if (dir.coreprops.length) {
        propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
        if (propdata) props = parse_core_props(propdata);
        if (dir.extprops.length !== 0) {
            propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
            if (propdata) parse_ext_props(propdata, props, opts);
        }
    }
    var custprops = {};
    if (!opts.bookSheets || opts.bookProps) {
        if (dir.custprops.length !== 0) {
            propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
            if (propdata) custprops = parse_cust_props(propdata, opts);
        }
    }
    var out = {} /*:any*/ ;
    if (opts.bookSheets || opts.bookProps) {
        if (wb.Sheets) sheets = wb.Sheets.map(function pluck(x) {
            return x.name;
        });
        else if (props.Worksheets && props.SheetNames.length > 0) sheets = props.SheetNames;
        if (opts.bookProps) {
            out.Props = props;
            out.Custprops = custprops;
        }
        if (opts.bookSheets && typeof sheets !== "undefined") out.SheetNames = sheets;
        if (opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
    }
    sheets = {};
    var deps = {};
    if (opts.bookDeps && dir.calcchain) deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain, opts);
    var i = 0;
    var sheetRels = {} /*:any*/ ;
    var path, relsPath;
    var wbsheets = wb.Sheets;
    props.Worksheets = wbsheets.length;
    props.SheetNames = [];
    for(var j = 0; j != wbsheets.length; ++j)props.SheetNames[j] = wbsheets[j].name;
    var wbext = xlsb ? "bin" : "xml";
    var wbrelsi = dir.workbooks[0].lastIndexOf("/");
    var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + "_rels/" + dir.workbooks[0].slice(wbrelsi + 1) + ".rels").replace(/^\//, "");
    if (!safegetzipfile(zip, wbrelsfile)) wbrelsfile = "xl/_rels/workbook." + wbext + ".rels";
    var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, "s5s"));
    if ((dir.metadata || []).length >= 1) /* TODO: MDX and other types of metadata */ opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])), dir.metadata[0], opts);
    if ((dir.people || []).length >= 1) opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])), opts);
    if (wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
    /* Numbers iOS hack */ var nmode = getzipdata(zip, "xl/worksheets/sheet.xml", true) ? 1 : 0;
    wsloop: for(i = 0; i != props.Worksheets; ++i){
        var stype = "sheet";
        if (wbrels && wbrels[i]) {
            path = "xl/" + wbrels[i][1].replace(/[\/]?xl\//, "");
            if (!safegetzipfile(zip, path)) path = wbrels[i][1];
            if (!safegetzipfile(zip, path)) path = wbrelsfile.replace(/_rels\/.*$/, "") + wbrels[i][1];
            stype = wbrels[i][2];
        } else {
            path = "xl/worksheets/sheet" + (i + 1 - nmode) + "." + wbext;
            path = path.replace(/sheet0\./, "sheet.");
        }
        relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
        if (opts && opts.sheets != null) switch(typeof opts.sheets){
            case "number":
                if (i != opts.sheets) continue wsloop;
                break;
            case "string":
                if (props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop;
                break;
            default:
                if (Array.isArray && Array.isArray(opts.sheets)) {
                    var snjseen = false;
                    for(var snj = 0; snj != opts.sheets.length; ++snj){
                        if (typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i) snjseen = 1;
                        if (typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase()) snjseen = 1;
                    }
                    if (!snjseen) continue wsloop;
                }
        }
        safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);
    }
    out = {
        Directory: dir,
        Workbook: wb,
        Props: props,
        Custprops: custprops,
        Deps: deps,
        Sheets: sheets,
        SheetNames: props.SheetNames,
        Strings: strs,
        Styles: styles,
        Themes: themes,
        SSF: dup(table_fmt)
    } /*:any*/ ;
    if (opts && opts.bookFiles) {
        if (zip.files) {
            out.keys = entries;
            out.files = zip.files;
        } else {
            out.keys = [];
            out.files = {};
            zip.FullPaths.forEach(function(p, idx) {
                p = p.replace(/^Root Entry[\/]/, "");
                out.keys.push(p);
                out.files[p] = zip.FileIndex[idx];
            });
        }
    }
    if (opts && opts.bookVBA) {
        if (dir.vba.length > 0) out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);
        else if (dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, "xl/vbaProject.bin", true);
    }
    return out;
}
/* [MS-OFFCRYPTO] 2.1.1 */ function parse_xlsxcfb(cfb, _opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    var opts = _opts || {};
    var f = "Workbook", data = CFB.find(cfb, f);
    try {
        f = "/!DataSpaces/Version";
        data = CFB.find(cfb, f);
        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        /*var version = */ parse_DataSpaceVersionInfo(data.content);
        /* 2.3.4.1 */ f = "/!DataSpaces/DataSpaceMap";
        data = CFB.find(cfb, f);
        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        var dsm = parse_DataSpaceMap(data.content);
        if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage") throw new Error("ECMA-376 Encrypted file bad " + f);
        /* 2.3.4.2 */ f = "/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace";
        data = CFB.find(cfb, f);
        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        var seds = parse_DataSpaceDefinition(data.content);
        if (seds.length != 1 || seds[0] != "StrongEncryptionTransform") throw new Error("ECMA-376 Encrypted file bad " + f);
        /* 2.3.4.3 */ f = "/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary";
        data = CFB.find(cfb, f);
        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
        /*var hdr = */ parse_Primary(data.content);
    } catch (e) {}
    f = "/EncryptionInfo";
    data = CFB.find(cfb, f);
    if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    var einfo = parse_EncryptionInfo(data.content);
    /* 2.3.4.4 */ f = "/EncryptedPackage";
    data = CFB.find(cfb, f);
    if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    /*global decrypt_agile */ /*:: declare var decrypt_agile:any; */ if (einfo[0] == 0x04 && typeof decrypt_agile !== "undefined") return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
    /*global decrypt_std76 */ /*:: declare var decrypt_std76:any; */ if (einfo[0] == 0x02 && typeof decrypt_std76 !== "undefined") return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
    throw new Error("File is password-protected");
}
function write_zip(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:ZIP*/ {
    if (opts.bookType == "ods") return write_ods(wb, opts);
    if (opts.bookType == "numbers") return write_numbers_iwa(wb, opts);
    if (opts.bookType == "xlsb") return write_zip_xlsxb(wb, opts);
    return write_zip_xlsx(wb, opts);
}
/* XLSX and XLSB writing are very similar.  Originally they were unified in one
   export function.  This is horrible for tree shaking in the common case (most
   applications need to export files in one format) so this function supports
   both formats while write_zip_xlsx only handles XLSX */ function write_zip_xlsxb(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:ZIP*/ {
    _shapeid = 1024;
    if (wb && !wb.SSF) wb.SSF = dup(table_fmt);
    if (wb && wb.SSF) {
        make_ssf();
        SSF_load_table(wb.SSF);
        // $FlowIgnore
        opts.revssf = evert_num(wb.SSF);
        opts.revssf[wb.SSF[65535]] = 0;
        opts.ssf = wb.SSF;
    }
    opts.rels = {};
    opts.wbrels = {};
    opts.Strings = /*::((*/ [] /*:: :any):SST)*/ ;
    opts.Strings.Count = 0;
    opts.Strings.Unique = 0;
    if (browser_has_Map) opts.revStrings = new Map();
    else {
        opts.revStrings = {};
        opts.revStrings.foo = [];
        delete opts.revStrings.foo;
    }
    var wbext = opts.bookType == "xlsb" ? "bin" : "xml";
    var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
    var ct = new_ct();
    fix_write_opts(opts = opts || {});
    var zip = zip_new();
    var f = "", rId = 0;
    opts.cellXfs = [];
    get_cell_style(opts.cellXfs, {}, {
        revssf: {
            "General": 0
        }
    });
    if (!wb.Props) wb.Props = {};
    f = "docProps/core.xml";
    zip_add_file(zip, f, write_core_props(wb.Props, opts));
    ct.coreprops.push(f);
    add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
    /*::if(!wb.Props) throw "unreachable"; */ f = "docProps/app.xml";
    if (wb.Props && wb.Props.SheetNames) ;
    else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
    else {
        var _sn = [];
        for(var _i = 0; _i < wb.SheetNames.length; ++_i)if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);
        wb.Props.SheetNames = _sn;
    }
    wb.Props.Worksheets = wb.Props.SheetNames.length;
    zip_add_file(zip, f, write_ext_props(wb.Props, opts));
    ct.extprops.push(f);
    add_rels(opts.rels, 3, f, RELS.EXT_PROPS);
    if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
        f = "docProps/custom.xml";
        zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));
        ct.custprops.push(f);
        add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
    }
    for(rId = 1; rId <= wb.SheetNames.length; ++rId){
        var wsrels = {
            "!id": {}
        };
        var ws = wb.Sheets[wb.SheetNames[rId - 1]];
        var _type = (ws || {})["!type"] || "sheet";
        _type;
        f = "xl/worksheets/sheet" + rId + "." + wbext;
        zip_add_file(zip, f, write_ws(rId - 1, f, opts, wb, wsrels));
        ct.sheets.push(f);
        add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
        if (ws) {
            var comments = ws["!comments"];
            var need_vml = false;
            var cf = "";
            if (comments && comments.length > 0) {
                cf = "xl/comments" + rId + "." + wbext;
                zip_add_file(zip, cf, write_cmnt(comments, cf, opts));
                ct.comments.push(cf);
                add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
                need_vml = true;
            }
            if (ws["!legacy"]) {
                if (need_vml) zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_comments_vml(rId, ws["!comments"]));
            }
            delete ws["!comments"];
            delete ws["!legacy"];
        }
        if (wsrels["!id"].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
    }
    if (opts.Strings != null && opts.Strings.length > 0) {
        f = "xl/sharedStrings." + wbext;
        zip_add_file(zip, f, write_sst(opts.Strings, f, opts));
        ct.strs.push(f);
        add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
    }
    f = "xl/workbook." + wbext;
    zip_add_file(zip, f, write_wb(wb, f, opts));
    ct.workbooks.push(f);
    add_rels(opts.rels, 1, f, RELS.WB);
    /* TODO: something more intelligent with themes */ f = "xl/theme/theme1.xml";
    zip_add_file(zip, f, write_theme(wb.Themes, opts));
    ct.themes.push(f);
    add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
    /* TODO: something more intelligent with styles */ f = "xl/styles." + wbext;
    zip_add_file(zip, f, write_sty(wb, f, opts));
    ct.styles.push(f);
    add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
    if (wb.vbaraw && vbafmt) {
        f = "xl/vbaProject.bin";
        zip_add_file(zip, f, wb.vbaraw);
        ct.vba.push(f);
        add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
    }
    f = "xl/metadata." + wbext;
    zip_add_file(zip, f, write_xlmeta(f));
    ct.metadata.push(f);
    add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
    zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
    zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
    zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
    delete opts.revssf;
    delete opts.ssf;
    return zip;
}
function write_zip_xlsx(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:ZIP*/ {
    _shapeid = 1024;
    if (wb && !wb.SSF) wb.SSF = dup(table_fmt);
    if (wb && wb.SSF) {
        make_ssf();
        SSF_load_table(wb.SSF);
        // $FlowIgnore
        opts.revssf = evert_num(wb.SSF);
        opts.revssf[wb.SSF[65535]] = 0;
        opts.ssf = wb.SSF;
    }
    opts.rels = {};
    opts.wbrels = {};
    opts.Strings = /*::((*/ [] /*:: :any):SST)*/ ;
    opts.Strings.Count = 0;
    opts.Strings.Unique = 0;
    if (browser_has_Map) opts.revStrings = new Map();
    else {
        opts.revStrings = {};
        opts.revStrings.foo = [];
        delete opts.revStrings.foo;
    }
    var wbext = "xml";
    var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
    var ct = new_ct();
    fix_write_opts(opts = opts || {});
    var zip = zip_new();
    var f = "", rId = 0;
    opts.cellXfs = [];
    get_cell_style(opts.cellXfs, {}, {
        revssf: {
            "General": 0
        }
    });
    if (!wb.Props) wb.Props = {};
    f = "docProps/core.xml";
    zip_add_file(zip, f, write_core_props(wb.Props, opts));
    ct.coreprops.push(f);
    add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
    /*::if(!wb.Props) throw "unreachable"; */ f = "docProps/app.xml";
    if (wb.Props && wb.Props.SheetNames) ;
    else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
    else {
        var _sn = [];
        for(var _i = 0; _i < wb.SheetNames.length; ++_i)if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);
        wb.Props.SheetNames = _sn;
    }
    wb.Props.Worksheets = wb.Props.SheetNames.length;
    zip_add_file(zip, f, write_ext_props(wb.Props, opts));
    ct.extprops.push(f);
    add_rels(opts.rels, 3, f, RELS.EXT_PROPS);
    if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
        f = "docProps/custom.xml";
        zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));
        ct.custprops.push(f);
        add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
    }
    var people = [
        "SheetJ5"
    ];
    opts.tcid = 0;
    for(rId = 1; rId <= wb.SheetNames.length; ++rId){
        var wsrels = {
            "!id": {}
        };
        var ws = wb.Sheets[wb.SheetNames[rId - 1]];
        var _type = (ws || {})["!type"] || "sheet";
        _type;
        f = "xl/worksheets/sheet" + rId + "." + wbext;
        zip_add_file(zip, f, write_ws_xml(rId - 1, opts, wb, wsrels));
        ct.sheets.push(f);
        add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
        if (ws) {
            var comments = ws["!comments"];
            var need_vml = false;
            var cf = "";
            if (comments && comments.length > 0) {
                var needtc = false;
                comments.forEach(function(carr) {
                    carr[1].forEach(function(c) {
                        if (c.T == true) needtc = true;
                    });
                });
                if (needtc) {
                    cf = "xl/threadedComments/threadedComment" + rId + "." + wbext;
                    zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));
                    ct.threadedcomments.push(cf);
                    add_rels(wsrels, -1, "../threadedComments/threadedComment" + rId + "." + wbext, RELS.TCMNT);
                }
                cf = "xl/comments" + rId + "." + wbext;
                zip_add_file(zip, cf, write_comments_xml(comments, opts));
                ct.comments.push(cf);
                add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
                need_vml = true;
            }
            if (ws["!legacy"]) {
                if (need_vml) zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_comments_vml(rId, ws["!comments"]));
            }
            delete ws["!comments"];
            delete ws["!legacy"];
        }
        if (wsrels["!id"].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
    }
    if (opts.Strings != null && opts.Strings.length > 0) {
        f = "xl/sharedStrings." + wbext;
        zip_add_file(zip, f, write_sst_xml(opts.Strings, opts));
        ct.strs.push(f);
        add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
    }
    f = "xl/workbook." + wbext;
    zip_add_file(zip, f, write_wb_xml(wb, opts));
    ct.workbooks.push(f);
    add_rels(opts.rels, 1, f, RELS.WB);
    /* TODO: something more intelligent with themes */ f = "xl/theme/theme1.xml";
    zip_add_file(zip, f, write_theme(wb.Themes, opts));
    ct.themes.push(f);
    add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
    /* TODO: something more intelligent with styles */ f = "xl/styles." + wbext;
    zip_add_file(zip, f, write_sty_xml(wb, opts));
    ct.styles.push(f);
    add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
    if (wb.vbaraw && vbafmt) {
        f = "xl/vbaProject.bin";
        zip_add_file(zip, f, wb.vbaraw);
        ct.vba.push(f);
        add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
    }
    f = "xl/metadata." + wbext;
    zip_add_file(zip, f, write_xlmeta_xml());
    ct.metadata.push(f);
    add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
    if (people.length > 1) {
        f = "xl/persons/person.xml";
        zip_add_file(zip, f, write_people_xml(people, opts));
        ct.people.push(f);
        add_rels(opts.wbrels, -1, "persons/person.xml", RELS.PEOPLE);
    }
    zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
    zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
    zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
    delete opts.revssf;
    delete opts.ssf;
    return zip;
}
function firstbyte(f /*:RawData*/ , o /*:?TypeOpts*/ ) /*:Array<number>*/ {
    var x = "";
    switch((o || {}).type || "base64"){
        case "buffer":
            return [
                f[0],
                f[1],
                f[2],
                f[3],
                f[4],
                f[5],
                f[6],
                f[7]
            ];
        case "base64":
            x = Base64_decode(f.slice(0, 12));
            break;
        case "binary":
            x = f;
            break;
        case "array":
            return [
                f[0],
                f[1],
                f[2],
                f[3],
                f[4],
                f[5],
                f[6],
                f[7]
            ];
        default:
            throw new Error("Unrecognized type " + (o && o.type || "undefined"));
    }
    return [
        x.charCodeAt(0),
        x.charCodeAt(1),
        x.charCodeAt(2),
        x.charCodeAt(3),
        x.charCodeAt(4),
        x.charCodeAt(5),
        x.charCodeAt(6),
        x.charCodeAt(7)
    ];
}
function read_cfb(cfb /*:CFBContainer*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    if (CFB.find(cfb, "EncryptedPackage")) return parse_xlsxcfb(cfb, opts);
    return parse_xlscfb(cfb, opts);
}
function read_zip(data /*:RawData*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    var zip, d = data;
    var o = opts || {};
    if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
    zip = zip_read(d, o);
    return parse_zip(zip, o);
}
function read_plaintext(data /*:string*/ , o /*:ParseOpts*/ ) /*:Workbook*/ {
    var i = 0;
    main: while(i < data.length)switch(data.charCodeAt(i)){
        case 0x0A:
        case 0x0D:
        case 0x20:
            ++i;
            break;
        case 0x3C:
            return parse_xlml(data.slice(i), o);
        default:
            break main;
    }
    return PRN.to_workbook(data, o);
}
function read_plaintext_raw(data /*:RawData*/ , o /*:ParseOpts*/ ) /*:Workbook*/ {
    var str = "", bytes = firstbyte(data, o);
    switch(o.type){
        case "base64":
            str = Base64_decode(data);
            break;
        case "binary":
            str = data;
            break;
        case "buffer":
            str = data.toString("binary");
            break;
        case "array":
            str = cc2str(data);
            break;
        default:
            throw new Error("Unrecognized type " + o.type);
    }
    if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str);
    o.type = "binary";
    return read_plaintext(str, o);
}
function read_utf16(data /*:RawData*/ , o /*:ParseOpts*/ ) /*:Workbook*/ {
    var d = data;
    if (o.type == "base64") d = Base64_decode(d);
    d = $cptable.utils.decode(1200, d.slice(2), "str");
    o.type = "binary";
    return read_plaintext(d, o);
}
function bstrify(data /*:string*/ ) /*:string*/ {
    return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
}
function read_prn(data, d, o, str) {
    if (str) {
        o.type = "string";
        return PRN.to_workbook(data, o);
    }
    return PRN.to_workbook(d, o);
}
function readSync(data /*:RawData*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    reset_cp();
    var o = opts || {};
    if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), (o = dup(o), o.type = "array", o));
    if (typeof Uint8Array !== "undefined" && data instanceof Uint8Array && !o.type) o.type = typeof Deno !== "undefined" ? "buffer" : "array";
    var d = data, n = [
        0,
        0,
        0,
        0
    ], str = false;
    if (o.cellStyles) {
        o.cellNF = true;
        o.sheetStubs = true;
    }
    _ssfopts = {};
    if (o.dateNF) _ssfopts.dateNF = o.dateNF;
    if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
    if (o.type == "file") {
        o.type = has_buf ? "buffer" : "binary";
        d = read_binary(data);
        if (typeof Uint8Array !== "undefined" && !has_buf) o.type = "array";
    }
    if (o.type == "string") {
        str = true;
        o.type = "binary";
        o.codepage = 65001;
        d = bstrify(data);
    }
    if (o.type == "array" && typeof Uint8Array !== "undefined" && data instanceof Uint8Array && typeof ArrayBuffer !== "undefined") {
        // $FlowIgnore
        var ab = new ArrayBuffer(3), vu = new Uint8Array(ab);
        vu.foo = "bar";
        // $FlowIgnore
        if (!vu.foo) {
            o = dup(o);
            o.type = "array";
            return readSync(ab2a(d), o);
        }
    }
    switch((n = firstbyte(d, o))[0]){
        case 0xD0:
            if (n[1] === 0xCF && n[2] === 0x11 && n[3] === 0xE0 && n[4] === 0xA1 && n[5] === 0xB1 && n[6] === 0x1A && n[7] === 0xE1) return read_cfb(CFB.read(d, o), o);
            break;
        case 0x09:
            if (n[1] <= 0x08) return parse_xlscfb(d, o);
            break;
        case 0x3C:
            return parse_xlml(d, o);
        case 0x49:
            if (n[1] === 0x49 && n[2] === 0x2a && n[3] === 0x00) throw new Error("TIFF Image File is not a spreadsheet");
            if (n[1] === 0x44) return read_wb_ID(d, o);
            break;
        case 0x54:
            if (n[1] === 0x41 && n[2] === 0x42 && n[3] === 0x4C) return DIF.to_workbook(d, o);
            break;
        case 0x50:
            return n[1] === 0x4B && n[2] < 0x09 && n[3] < 0x09 ? read_zip(d, o) : read_prn(data, d, o, str);
        case 0xEF:
            return n[3] === 0x3C ? parse_xlml(d, o) : read_prn(data, d, o, str);
        case 0xFF:
            if (n[1] === 0xFE) return read_utf16(d, o);
            else if (n[1] === 0x00 && n[2] === 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);
            break;
        case 0x00:
            if (n[1] === 0x00) {
                if (n[2] >= 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);
                if (n[2] === 0x00 && (n[3] === 0x08 || n[3] === 0x09)) return WK_.to_workbook(d, o);
            }
            break;
        case 0x03:
        case 0x83:
        case 0x8B:
        case 0x8C:
            return DBF.to_workbook(d, o);
        case 0x7B:
            if (n[1] === 0x5C && n[2] === 0x72 && n[3] === 0x74) return RTF.to_workbook(d, o);
            break;
        case 0x0A:
        case 0x0D:
        case 0x20:
            return read_plaintext_raw(d, o);
        case 0x89:
            if (n[1] === 0x50 && n[2] === 0x4E && n[3] === 0x47) throw new Error("PNG Image File is not a spreadsheet");
            break;
    }
    if (DBF_SUPPORTED_VERSIONS.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);
    return read_prn(data, d, o, str);
}
function readFileSync(filename /*:string*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {
    var o = opts || {};
    o.type = "file";
    return readSync(filename, o);
}
function write_cfb_ctr(cfb /*:CFBContainer*/ , o /*:WriteOpts*/ ) /*:any*/ {
    switch(o.type){
        case "base64":
        case "binary":
            break;
        case "buffer":
        case "array":
            o.type = "";
            break;
        case "file":
            return write_dl(o.file, CFB.write(cfb, {
                type: has_buf ? "buffer" : ""
            }));
        case "string":
            throw new Error("'string' output type invalid for '" + o.bookType + "' files");
        default:
            throw new Error("Unrecognized type " + o.type);
    }
    return CFB.write(cfb, o);
}
/*:: declare var encrypt_agile:any; */ function write_zip_type(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) /*:any*/ {
    var o = dup(opts || {});
    var z = write_zip(wb, o);
    return write_zip_denouement(z, o);
}
function write_zip_typeXLSX(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) /*:any*/ {
    var o = dup(opts || {});
    var z = write_zip_xlsx(wb, o);
    return write_zip_denouement(z, o);
}
function write_zip_denouement(z /*:any*/ , o /*:?WriteOpts*/ ) /*:any*/ {
    var oopts = {};
    var ftype = has_buf ? "nodebuffer" : typeof Uint8Array !== "undefined" ? "array" : "string";
    if (o.compression) oopts.compression = "DEFLATE";
    if (o.password) oopts.type = ftype;
    else switch(o.type){
        case "base64":
            oopts.type = "base64";
            break;
        case "binary":
            oopts.type = "string";
            break;
        case "string":
            throw new Error("'string' output type invalid for '" + o.bookType + "' files");
        case "buffer":
        case "file":
            oopts.type = ftype;
            break;
        default:
            throw new Error("Unrecognized type " + o.type);
    }
    var out = z.FullPaths ? CFB.write(z, {
        fileType: "zip",
        type: /*::(*/ {
            "nodebuffer": "buffer",
            "string": "binary"
        } /*:: :any)*/ [oopts.type] || oopts.type,
        compression: !!o.compression
    }) : z.generate(oopts);
    if (typeof Deno !== "undefined") {
        if (typeof out == "string") {
            if (o.type == "binary" || o.type == "base64") return out;
            out = new Uint8Array(s2ab(out));
        }
    }
    /*jshint -W083 */ if (o.password && typeof encrypt_agile !== "undefined") return write_cfb_ctr(encrypt_agile(out, o.password), o); // eslint-disable-line no-undef
    /*jshint +W083 */ if (o.type === "file") return write_dl(o.file, out);
    return o.type == "string" ? utf8read(/*::(*/ out /*:: :any)*/ ) : out;
}
function write_cfb_type(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) /*:any*/ {
    var o = opts || {};
    var cfb /*:CFBContainer*/  = write_xlscfb(wb, o);
    return write_cfb_ctr(cfb, o);
}
function write_string_type(out /*:string*/ , opts /*:WriteOpts*/ , bom /*:?string*/ ) /*:any*/ {
    if (!bom) bom = "";
    var o = bom + out;
    switch(opts.type){
        case "base64":
            return Base64_encode(utf8write(o));
        case "binary":
            return utf8write(o);
        case "string":
            return out;
        case "file":
            return write_dl(opts.file, o, "utf8");
        case "buffer":
            if (has_buf) return Buffer_from(o, "utf8");
            else if (typeof TextEncoder !== "undefined") return new TextEncoder().encode(o);
            else return write_string_type(o, {
                type: "binary"
            }).split("").map(function(c) {
                return c.charCodeAt(0);
            });
    }
    throw new Error("Unrecognized type " + opts.type);
}
function write_stxt_type(out /*:string*/ , opts /*:WriteOpts*/ ) /*:any*/ {
    switch(opts.type){
        case "base64":
            return Base64_encode(out);
        case "binary":
            return out;
        case "string":
            return out; /* override in sheet_to_txt */ 
        case "file":
            return write_dl(opts.file, out, "binary");
        case "buffer":
            if (has_buf) return Buffer_from(out, "binary");
            else return out.split("").map(function(c) {
                return c.charCodeAt(0);
            });
    }
    throw new Error("Unrecognized type " + opts.type);
}
/* TODO: test consistency */ function write_binary_type(out, opts /*:WriteOpts*/ ) /*:any*/ {
    switch(opts.type){
        case "string":
        case "base64":
        case "binary":
            var bstr = "";
            // $FlowIgnore
            for(var i = 0; i < out.length; ++i)bstr += String.fromCharCode(out[i]);
            return opts.type == "base64" ? Base64_encode(bstr) : opts.type == "string" ? utf8read(bstr) : bstr;
        case "file":
            return write_dl(opts.file, out);
        case "buffer":
            return out;
        default:
            throw new Error("Unrecognized type " + opts.type);
    }
}
function writeSyncXLSX(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) {
    reset_cp();
    check_wb(wb);
    var o = dup(opts || {});
    if (o.cellStyles) {
        o.cellNF = true;
        o.sheetStubs = true;
    }
    if (o.type == "array") {
        o.type = "binary";
        var out /*:string*/  = writeSyncXLSX(wb, o);
        o.type = "array";
        return s2ab(out);
    }
    return write_zip_typeXLSX(wb, o);
}
function writeSync(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) {
    reset_cp();
    check_wb(wb);
    var o = dup(opts || {});
    if (o.cellStyles) {
        o.cellNF = true;
        o.sheetStubs = true;
    }
    if (o.type == "array") {
        o.type = "binary";
        var out /*:string*/  = writeSync(wb, o);
        o.type = "array";
        return s2ab(out);
    }
    var idx = 0;
    if (o.sheet) {
        if (typeof o.sheet == "number") idx = o.sheet;
        else idx = wb.SheetNames.indexOf(o.sheet);
        if (!wb.SheetNames[idx]) throw new Error("Sheet not found: " + o.sheet + " : " + typeof o.sheet);
    }
    switch(o.bookType || "xlsb"){
        case "xml":
        case "xlml":
            return write_string_type(write_xlml(wb, o), o);
        case "slk":
        case "sylk":
            return write_string_type(SYLK.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "htm":
        case "html":
            return write_string_type(sheet_to_html(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "txt":
            return write_stxt_type(sheet_to_txt(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "csv":
            return write_string_type(sheet_to_csv(wb.Sheets[wb.SheetNames[idx]], o), o, "\uFEFF");
        case "dif":
            return write_string_type(DIF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "dbf":
            return write_binary_type(DBF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "prn":
            return write_string_type(PRN.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "rtf":
            return write_string_type(RTF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "eth":
            return write_string_type(ETH.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "fods":
            return write_string_type(write_ods(wb, o), o);
        case "wk1":
            return write_binary_type(WK_.sheet_to_wk1(wb.Sheets[wb.SheetNames[idx]], o), o);
        case "wk3":
            return write_binary_type(WK_.book_to_wk3(wb, o), o);
        case "biff2":
            if (!o.biff) o.biff = 2; /* falls through */ 
        case "biff3":
            if (!o.biff) o.biff = 3; /* falls through */ 
        case "biff4":
            if (!o.biff) o.biff = 4;
            return write_binary_type(write_biff_buf(wb, o), o);
        case "biff5":
            if (!o.biff) o.biff = 5; /* falls through */ 
        case "biff8":
        case "xla":
        case "xls":
            if (!o.biff) o.biff = 8;
            return write_cfb_type(wb, o);
        case "xlsx":
        case "xlsm":
        case "xlam":
        case "xlsb":
        case "numbers":
        case "ods":
            return write_zip_type(wb, o);
        default:
            throw new Error("Unrecognized bookType |" + o.bookType + "|");
    }
}
function resolve_book_type(o /*:WriteFileOpts*/ ) {
    if (o.bookType) return;
    var _BT = {
        "xls": "biff8",
        "htm": "html",
        "slk": "sylk",
        "socialcalc": "eth",
        "Sh33tJS": "WTF"
    };
    var ext = o.file.slice(o.file.lastIndexOf(".")).toLowerCase();
    if (ext.match(/^\.[a-z]+$/)) o.bookType = ext.slice(1);
    o.bookType = _BT[o.bookType] || o.bookType;
}
function writeFileSync(wb /*:Workbook*/ , filename /*:string*/ , opts /*:?WriteFileOpts*/ ) {
    var o = opts || {};
    o.type = "file";
    o.file = filename;
    resolve_book_type(o);
    return writeSync(wb, o);
}
function writeFileSyncXLSX(wb /*:Workbook*/ , filename /*:string*/ , opts /*:?WriteFileOpts*/ ) {
    var o = opts || {};
    o.type = "file";
    o.file = filename;
    resolve_book_type(o);
    return writeSyncXLSX(wb, o);
}
function writeFileAsync(filename /*:string*/ , wb /*:Workbook*/ , opts /*:?WriteFileOpts*/ , cb /*:?(e?:ErrnoError)=>void*/ ) {
    var o = opts || {};
    o.type = "file";
    o.file = filename;
    resolve_book_type(o);
    o.type = "buffer";
    var _cb = cb;
    if (!(_cb instanceof Function)) _cb = opts /*:any*/ ;
    return _fs.writeFile(filename, writeSync(wb, o), _cb);
}
/*::
type MJRObject = {
	row: any;
	isempty: boolean;
};
*/ function make_json_row(sheet /*:Worksheet*/ , r /*:Range*/ , R /*:number*/ , cols /*:Array<string>*/ , header /*:number*/ , hdr /*:Array<any>*/ , dense /*:boolean*/ , o /*:Sheet2JSONOpts*/ ) /*:MJRObject*/ {
    var rr = encode_row(R);
    var defval = o.defval, raw = o.raw || !Object.prototype.hasOwnProperty.call(o, "raw");
    var isempty = true;
    var row /*:any*/  = header === 1 ? [] : {};
    if (header !== 1) {
        if (Object.defineProperty) try {
            Object.defineProperty(row, "__rowNum__", {
                value: R,
                enumerable: false
            });
        } catch (e) {
            row.__rowNum__ = R;
        }
        else row.__rowNum__ = R;
    }
    if (!dense || sheet[R]) for(var C = r.s.c; C <= r.e.c; ++C){
        var val = dense ? sheet[R][C] : sheet[cols[C] + rr];
        if (val === undefined || val.t === undefined) {
            if (defval === undefined) continue;
            if (hdr[C] != null) row[hdr[C]] = defval;
            continue;
        }
        var v = val.v;
        switch(val.t){
            case "z":
                if (v == null) break;
                continue;
            case "e":
                v = v == 0 ? null : void 0;
                break;
            case "s":
            case "d":
            case "b":
            case "n":
                break;
            default:
                throw new Error("unrecognized type " + val.t);
        }
        if (hdr[C] != null) {
            if (v == null) {
                if (val.t == "e" && v === null) row[hdr[C]] = null;
                else if (defval !== undefined) row[hdr[C]] = defval;
                else if (raw && v === null) row[hdr[C]] = null;
                else continue;
            } else row[hdr[C]] = raw && (val.t !== "n" || val.t === "n" && o.rawNumbers !== false) ? v : format_cell(val, v, o);
            if (v != null) isempty = false;
        }
    }
    return {
        row: row,
        isempty: isempty
    };
}
function sheet_to_json(sheet /*:Worksheet*/ , opts /*:?Sheet2JSONOpts*/ ) {
    if (sheet == null || sheet["!ref"] == null) return [];
    var val = {
        t: "n",
        v: 0
    }, header = 0, offset = 1, hdr /*:Array<any>*/  = [], v = 0, vv = "";
    var r = {
        s: {
            r: 0,
            c: 0
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var o = opts || {};
    var range = o.range != null ? o.range : sheet["!ref"];
    if (o.header === 1) header = 1;
    else if (o.header === "A") header = 2;
    else if (Array.isArray(o.header)) header = 3;
    else if (o.header == null) header = 0;
    switch(typeof range){
        case "string":
            r = safe_decode_range(range);
            break;
        case "number":
            r = safe_decode_range(sheet["!ref"]);
            r.s.r = range;
            break;
        default:
            r = range;
    }
    if (header > 0) offset = 0;
    var rr = encode_row(r.s.r);
    var cols /*:Array<string>*/  = [];
    var out /*:Array<any>*/  = [];
    var outi = 0, counter = 0;
    var dense = Array.isArray(sheet);
    var R = r.s.r, C = 0;
    var header_cnt = {};
    if (dense && !sheet[R]) sheet[R] = [];
    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!cols"] || [];
    var rowinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!rows"] || [];
    for(C = r.s.c; C <= r.e.c; ++C){
        if ((colinfo[C] || {}).hidden) continue;
        cols[C] = encode_col(C);
        val = dense ? sheet[R][C] : sheet[cols[C] + rr];
        switch(header){
            case 1:
                hdr[C] = C - r.s.c;
                break;
            case 2:
                hdr[C] = cols[C];
                break;
            case 3:
                hdr[C] = o.header[C - r.s.c];
                break;
            default:
                if (val == null) val = {
                    w: "__EMPTY",
                    t: "s"
                };
                vv = v = format_cell(val, null, o);
                counter = header_cnt[v] || 0;
                if (!counter) header_cnt[v] = 1;
                else {
                    do vv = v + "_" + counter++;
                    while (header_cnt[vv]);
                    header_cnt[v] = counter;
                    header_cnt[vv] = 1;
                }
                hdr[C] = vv;
        }
    }
    for(R = r.s.r + offset; R <= r.e.r; ++R){
        if ((rowinfo[R] || {}).hidden) continue;
        var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
        if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row.row;
    }
    out.length = outi;
    return out;
}
var qreg = /"/g;
function make_csv_row(sheet /*:Worksheet*/ , r /*:Range*/ , R /*:number*/ , cols /*:Array<string>*/ , fs /*:number*/ , rs /*:number*/ , FS /*:string*/ , o /*:Sheet2CSVOpts*/ ) /*:?string*/ {
    var isempty = true;
    var row /*:Array<string>*/  = [], txt = "", rr = encode_row(R);
    for(var C = r.s.c; C <= r.e.c; ++C){
        if (!cols[C]) continue;
        var val = o.dense ? (sheet[R] || [])[C] : sheet[cols[C] + rr];
        if (val == null) txt = "";
        else if (val.v != null) {
            isempty = false;
            txt = "" + (o.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o));
            for(var i = 0, cc = 0; i !== txt.length; ++i)if ((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34 || o.forceQuotes) {
                txt = '"' + txt.replace(qreg, '""') + '"';
                break;
            }
            if (txt == "ID") txt = '"ID"';
        } else if (val.f != null && !val.F) {
            isempty = false;
            txt = "=" + val.f;
            if (txt.indexOf(",") >= 0) txt = '"' + txt.replace(qreg, '""') + '"';
        } else txt = "";
        /* NOTE: Excel CSV does not support array formulae */ row.push(txt);
    }
    if (o.blankrows === false && isempty) return null;
    return row.join(FS);
}
function sheet_to_csv(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) /*:string*/ {
    var out /*:Array<string>*/  = [];
    var o = opts == null ? {} : opts;
    if (sheet == null || sheet["!ref"] == null) return "";
    var r = safe_decode_range(sheet["!ref"]);
    var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
    var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
    var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
    var row = "", cols /*:Array<string>*/  = [];
    o.dense = Array.isArray(sheet);
    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!cols"] || [];
    var rowinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!rows"] || [];
    for(var C = r.s.c; C <= r.e.c; ++C)if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);
    var w = 0;
    for(var R = r.s.r; R <= r.e.r; ++R){
        if ((rowinfo[R] || {}).hidden) continue;
        row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);
        if (row == null) continue;
        if (o.strip) row = row.replace(endregex, "");
        if (row || o.blankrows !== false) out.push((w++ ? RS : "") + row);
    }
    delete o.dense;
    return out.join("");
}
function sheet_to_txt(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) {
    if (!opts) opts = {};
    opts.FS = "	";
    opts.RS = "\n";
    var s = sheet_to_csv(sheet, opts);
    if (typeof $cptable == "undefined" || opts.type == "string") return s;
    var o = $cptable.utils.encode(1200, s, "str");
    return String.fromCharCode(255) + String.fromCharCode(254) + o;
}
function sheet_to_formulae(sheet /*:Worksheet*/ ) /*:Array<string>*/ {
    var y = "", x, val = "";
    if (sheet == null || sheet["!ref"] == null) return [];
    var r = safe_decode_range(sheet["!ref"]), rr = "", cols /*:Array<string>*/  = [], C;
    var cmds /*:Array<string>*/  = [];
    var dense = Array.isArray(sheet);
    for(C = r.s.c; C <= r.e.c; ++C)cols[C] = encode_col(C);
    for(var R = r.s.r; R <= r.e.r; ++R){
        rr = encode_row(R);
        for(C = r.s.c; C <= r.e.c; ++C){
            y = cols[C] + rr;
            x = dense ? (sheet[R] || [])[C] : sheet[y];
            val = "";
            if (x === undefined) continue;
            else if (x.F != null) {
                y = x.F;
                if (!x.f) continue;
                val = x.f;
                if (y.indexOf(":") == -1) y = y + ":" + y;
            }
            if (x.f != null) val = x.f;
            else if (x.t == "z") continue;
            else if (x.t == "n" && x.v != null) val = "" + x.v;
            else if (x.t == "b") val = x.v ? "TRUE" : "FALSE";
            else if (x.w !== undefined) val = "'" + x.w;
            else if (x.v === undefined) continue;
            else if (x.t == "s") val = "'" + x.v;
            else val = "" + x.v;
            cmds[cmds.length] = y + "=" + val;
        }
    }
    return cmds;
}
function sheet_add_json(_ws /*:?Worksheet*/ , js /*:Array<any>*/ , opts) /*:Worksheet*/ {
    var o = opts || {};
    var offset = +!o.skipHeader;
    var ws /*:Worksheet*/  = _ws || {} /*:any*/ ;
    var _R = 0, _C = 0;
    if (ws && o.origin != null) {
        if (typeof o.origin == "number") _R = o.origin;
        else {
            var _origin /*:CellAddress*/  = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
            _R = _origin.r;
            _C = _origin.c;
        }
    }
    var cell /*:Cell*/ ;
    var range /*:Range*/  = {
        s: {
            c: 0,
            r: 0
        },
        e: {
            c: _C,
            r: _R + js.length - 1 + offset
        }
    } /*:any*/ ;
    if (ws["!ref"]) {
        var _range = safe_decode_range(ws["!ref"]);
        range.e.c = Math.max(range.e.c, _range.e.c);
        range.e.r = Math.max(range.e.r, _range.e.r);
        if (_R == -1) {
            _R = _range.e.r + 1;
            range.e.r = _R + js.length - 1 + offset;
        }
    } else if (_R == -1) {
        _R = 0;
        range.e.r = js.length - 1 + offset;
    }
    var hdr /*:Array<string>*/  = o.header || [], C = 0;
    js.forEach(function(JS, R /*:number*/ ) {
        keys(JS).forEach(function(k) {
            if ((C = hdr.indexOf(k)) == -1) hdr[C = hdr.length] = k;
            var v = JS[k];
            var t = "z";
            var z = "";
            var ref = encode_cell({
                c: _C + C,
                r: _R + R + offset
            });
            cell = ws_get_cell_stub(ws, ref);
            if (v && typeof v === "object" && !(v instanceof Date)) ws[ref] = v;
            else {
                if (typeof v == "number") t = "n";
                else if (typeof v == "boolean") t = "b";
                else if (typeof v == "string") t = "s";
                else if (v instanceof Date) {
                    t = "d";
                    if (!o.cellDates) {
                        t = "n";
                        v = datenum(v);
                    }
                    z = o.dateNF || table_fmt[14];
                } else if (v === null && o.nullError) {
                    t = "e";
                    v = 0;
                }
                if (!cell) ws[ref] = cell = {
                    t: t,
                    v: v
                } /*:any*/ ;
                else {
                    cell.t = t;
                    cell.v = v;
                    delete cell.w;
                    delete cell.R;
                    if (z) cell.z = z;
                }
                if (z) cell.z = z;
            }
        });
    });
    range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
    var __R = encode_row(_R);
    if (offset) for(C = 0; C < hdr.length; ++C)ws[encode_col(C + _C) + __R] = {
        t: "s",
        v: hdr[C]
    };
    ws["!ref"] = encode_range(range);
    return ws;
}
function json_to_sheet(js /*:Array<any>*/ , opts) /*:Worksheet*/ {
    return sheet_add_json(null, js, opts);
}
/* get cell, creating a stub if necessary */ function ws_get_cell_stub(ws /*:Worksheet*/ , R, C /*:?number*/ ) /*:Cell*/ {
    /* A1 cell address */ if (typeof R == "string") {
        /* dense */ if (Array.isArray(ws)) {
            var RC = decode_cell(R);
            if (!ws[RC.r]) ws[RC.r] = [];
            return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = {
                t: "z"
            });
        }
        return ws[R] || (ws[R] = {
            t: "z"
        });
    }
    /* cell address object */ if (typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R));
    /* R and C are 0-based indices */ return ws_get_cell_stub(ws, encode_cell({
        r: R,
        c: C || 0
    }));
}
/* find sheet index for given name / validate index */ function wb_sheet_idx(wb /*:Workbook*/ , sh /*:number|string*/ ) {
    if (typeof sh == "number") {
        if (sh >= 0 && wb.SheetNames.length > sh) return sh;
        throw new Error("Cannot find sheet # " + sh);
    } else if (typeof sh == "string") {
        var idx = wb.SheetNames.indexOf(sh);
        if (idx > -1) return idx;
        throw new Error("Cannot find sheet name |" + sh + "|");
    } else throw new Error("Cannot find sheet |" + sh + "|");
}
/* simple blank workbook object */ function book_new() /*:Workbook*/ {
    return {
        SheetNames: [],
        Sheets: {}
    };
}
/* add a worksheet to the end of a given workbook */ function book_append_sheet(wb /*:Workbook*/ , ws /*:Worksheet*/ , name /*:?string*/ , roll /*:?boolean*/ ) /*:string*/ {
    var i = 1;
    if (!name) {
        for(; i <= 0xFFFF; ++i, name = undefined)if (wb.SheetNames.indexOf(name = "Sheet" + i) == -1) break;
    }
    if (!name || wb.SheetNames.length >= 0xFFFF) throw new Error("Too many worksheets");
    if (roll && wb.SheetNames.indexOf(name) >= 0) {
        var m = name.match(/(^.*?)(\d+)$/);
        i = m && +m[2] || 0;
        var root = m && m[1] || name;
        for(++i; i <= 0xFFFF; ++i)if (wb.SheetNames.indexOf(name = root + i) == -1) break;
    }
    check_ws_name(name);
    if (wb.SheetNames.indexOf(name) >= 0) throw new Error("Worksheet with name |" + name + "| already exists!");
    wb.SheetNames.push(name);
    wb.Sheets[name] = ws;
    return name;
}
/* set sheet visibility (visible/hidden/very hidden) */ function book_set_sheet_visibility(wb /*:Workbook*/ , sh /*:number|string*/ , vis /*:number*/ ) {
    if (!wb.Workbook) wb.Workbook = {};
    if (!wb.Workbook.Sheets) wb.Workbook.Sheets = [];
    var idx = wb_sheet_idx(wb, sh);
    // $FlowIgnore
    if (!wb.Workbook.Sheets[idx]) wb.Workbook.Sheets[idx] = {};
    switch(vis){
        case 0:
        case 1:
        case 2:
            break;
        default:
            throw new Error("Bad sheet visibility setting " + vis);
    }
    // $FlowIgnore
    wb.Workbook.Sheets[idx].Hidden = vis;
}
/* set number format */ function cell_set_number_format(cell /*:Cell*/ , fmt /*:string|number*/ ) {
    cell.z = fmt;
    return cell;
}
/* set cell hyperlink */ function cell_set_hyperlink(cell /*:Cell*/ , target /*:string*/ , tooltip /*:?string*/ ) {
    if (!target) delete cell.l;
    else {
        cell.l = {
            Target: target
        } /*:Hyperlink*/ ;
        if (tooltip) cell.l.Tooltip = tooltip;
    }
    return cell;
}
function cell_set_internal_link(cell /*:Cell*/ , range /*:string*/ , tooltip /*:?string*/ ) {
    return cell_set_hyperlink(cell, "#" + range, tooltip);
}
/* add to cell comments */ function cell_add_comment(cell /*:Cell*/ , text /*:string*/ , author /*:?string*/ ) {
    if (!cell.c) cell.c = [];
    cell.c.push({
        t: text,
        a: author || "SheetJS"
    });
}
/* set array formula and flush related cells */ function sheet_set_array_formula(ws /*:Worksheet*/ , range, formula /*:string*/ , dynamic /*:boolean*/ ) {
    var rng = typeof range != "string" ? range : safe_decode_range(range);
    var rngstr = typeof range == "string" ? range : encode_range(range);
    for(var R = rng.s.r; R <= rng.e.r; ++R)for(var C = rng.s.c; C <= rng.e.c; ++C){
        var cell = ws_get_cell_stub(ws, R, C);
        cell.t = "n";
        cell.F = rngstr;
        delete cell.v;
        if (R == rng.s.r && C == rng.s.c) {
            cell.f = formula;
            if (dynamic) cell.D = true;
        }
    }
    return ws;
}
var utils /*:any*/  = {
    encode_col: encode_col,
    encode_row: encode_row,
    encode_cell: encode_cell,
    encode_range: encode_range,
    decode_col: decode_col,
    decode_row: decode_row,
    split_cell: split_cell,
    decode_cell: decode_cell,
    decode_range: decode_range,
    format_cell: format_cell,
    sheet_add_aoa: sheet_add_aoa,
    sheet_add_json: sheet_add_json,
    sheet_add_dom: sheet_add_dom,
    aoa_to_sheet: aoa_to_sheet,
    json_to_sheet: json_to_sheet,
    table_to_sheet: parse_dom_table,
    table_to_book: table_to_book,
    sheet_to_csv: sheet_to_csv,
    sheet_to_txt: sheet_to_txt,
    sheet_to_json: sheet_to_json,
    sheet_to_html: sheet_to_html,
    sheet_to_formulae: sheet_to_formulae,
    sheet_to_row_object_array: sheet_to_json,
    sheet_get_cell: ws_get_cell_stub,
    book_new: book_new,
    book_append_sheet: book_append_sheet,
    book_set_sheet_visibility: book_set_sheet_visibility,
    cell_set_number_format: cell_set_number_format,
    cell_set_hyperlink: cell_set_hyperlink,
    cell_set_internal_link: cell_set_internal_link,
    cell_add_comment: cell_add_comment,
    sheet_set_array_formula: sheet_set_array_formula,
    consts: {
        SHEET_VISIBLE: 0,
        SHEET_HIDDEN: 1,
        SHEET_VERY_HIDDEN: 2
    }
};
var _Readable;
function set_readable(R) {
    _Readable = R;
}
function write_csv_stream(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) {
    var stream = _Readable();
    var o = opts == null ? {} : opts;
    if (sheet == null || sheet["!ref"] == null) {
        stream.push(null);
        return stream;
    }
    var r = safe_decode_range(sheet["!ref"]);
    var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
    var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
    var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
    var row /*:?string*/  = "", cols /*:Array<string>*/  = [];
    o.dense = Array.isArray(sheet);
    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!cols"] || [];
    var rowinfo /*:Array<RowInfo>*/  = o.skipHidden && sheet["!rows"] || [];
    for(var C = r.s.c; C <= r.e.c; ++C)if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);
    var R = r.s.r;
    var BOM = false, w = 0;
    stream._read = function() {
        if (!BOM) {
            BOM = true;
            return stream.push("\uFEFF");
        }
        while(R <= r.e.r){
            ++R;
            if ((rowinfo[R - 1] || {}).hidden) continue;
            row = make_csv_row(sheet, r, R - 1, cols, fs, rs, FS, o);
            if (row != null) {
                if (o.strip) row = row.replace(endregex, "");
                if (row || o.blankrows !== false) return stream.push((w++ ? RS : "") + row);
            }
        }
        return stream.push(null);
    };
    return stream;
}
function write_html_stream(ws /*:Worksheet*/ , opts /*:?Sheet2HTMLOpts*/ ) {
    var stream = _Readable();
    var o = opts || {};
    var header = o.header != null ? o.header : HTML_BEGIN;
    var footer = o.footer != null ? o.footer : HTML_END;
    stream.push(header);
    var r = decode_range(ws["!ref"]);
    o.dense = Array.isArray(ws);
    stream.push(make_html_preamble(ws, r, o));
    var R = r.s.r;
    var end = false;
    stream._read = function() {
        if (R > r.e.r) {
            if (!end) {
                end = true;
                stream.push("</table>" + footer);
            }
            return stream.push(null);
        }
        while(R <= r.e.r){
            stream.push(make_html_row(ws, r, R, o));
            ++R;
            break;
        }
    };
    return stream;
}
function write_json_stream(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) {
    var stream = _Readable({
        objectMode: true
    });
    if (sheet == null || sheet["!ref"] == null) {
        stream.push(null);
        return stream;
    }
    var val = {
        t: "n",
        v: 0
    }, header = 0, offset = 1, hdr /*:Array<any>*/  = [], v = 0, vv = "";
    var r = {
        s: {
            r: 0,
            c: 0
        },
        e: {
            r: 0,
            c: 0
        }
    };
    var o = opts || {};
    var range = o.range != null ? o.range : sheet["!ref"];
    if (o.header === 1) header = 1;
    else if (o.header === "A") header = 2;
    else if (Array.isArray(o.header)) header = 3;
    switch(typeof range){
        case "string":
            r = safe_decode_range(range);
            break;
        case "number":
            r = safe_decode_range(sheet["!ref"]);
            r.s.r = range;
            break;
        default:
            r = range;
    }
    if (header > 0) offset = 0;
    var rr = encode_row(r.s.r);
    var cols /*:Array<string>*/  = [];
    var counter = 0;
    var dense = Array.isArray(sheet);
    var R = r.s.r, C = 0;
    var header_cnt = {};
    if (dense && !sheet[R]) sheet[R] = [];
    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet["!cols"] || [];
    var rowinfo /*:Array<RowInfo>*/  = o.skipHidden && sheet["!rows"] || [];
    for(C = r.s.c; C <= r.e.c; ++C){
        if ((colinfo[C] || {}).hidden) continue;
        cols[C] = encode_col(C);
        val = dense ? sheet[R][C] : sheet[cols[C] + rr];
        switch(header){
            case 1:
                hdr[C] = C - r.s.c;
                break;
            case 2:
                hdr[C] = cols[C];
                break;
            case 3:
                hdr[C] = o.header[C - r.s.c];
                break;
            default:
                if (val == null) val = {
                    w: "__EMPTY",
                    t: "s"
                };
                vv = v = format_cell(val, null, o);
                counter = header_cnt[v] || 0;
                if (!counter) header_cnt[v] = 1;
                else {
                    do vv = v + "_" + counter++;
                    while (header_cnt[vv]);
                    header_cnt[v] = counter;
                    header_cnt[vv] = 1;
                }
                hdr[C] = vv;
        }
    }
    R = r.s.r + offset;
    stream._read = function() {
        while(R <= r.e.r){
            if ((rowinfo[R - 1] || {}).hidden) continue;
            var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
            ++R;
            if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) {
                stream.push(row.row);
                return;
            }
        }
        return stream.push(null);
    };
    return stream;
}
var __stream = {
    to_json: write_json_stream,
    to_html: write_html_stream,
    to_csv: write_csv_stream,
    set_readable: set_readable
};
const version = XLSX.version;

},{"f481c164bc92069e":"jhUEF","1e1b0fdaf6fdd859":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"aSnAl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "controlFileLoaded", ()=>controlFileLoaded);
parcelHelpers.export(exports, "controlRemoveFile", ()=>controlRemoveFile);
parcelHelpers.export(exports, "controlSubmit", ()=>controlSubmit);
parcelHelpers.export(exports, "controlDownloadPDF", ()=>controlDownloadPDF);
parcelHelpers.export(exports, "controlPreviewResults", ()=>controlPreviewResults);
parcelHelpers.export(exports, "controlSelectPreview", ()=>controlSelectPreview);
parcelHelpers.export(exports, "controlClosePreview", ()=>controlClosePreview);
var _modelJs = require("../models/model.js");
var _deviceModelJs = require("../models/deviceModel.js");
var _userModelJs = require("../models/userModel.js");
var _eventModelJs = require("../models/eventModel.js");
var _excelModelJs = require("../models/excelModel.js");
var _pdfFormModelJs = require("../models/pdfFormModel.js");
var _helpersJs = require("../../utilities/helpers.js");
var _configJs = require("../../utilities/config.js");
var _registerDeviceViewJs = require("../forms/registerDeviceView.js");
var _registerDeviceViewJsDefault = parcelHelpers.interopDefault(_registerDeviceViewJs);
var _registerModelViewJs = require("../forms/registerModelView.js");
var _registerModelViewJsDefault = parcelHelpers.interopDefault(_registerModelViewJs);
var _createUserViewJs = require("../forms/createUserView.js");
var _createUserViewJsDefault = parcelHelpers.interopDefault(_createUserViewJs);
var _removeUserViewJs = require("../forms/removeUserView.js");
var _removeUserViewJsDefault = parcelHelpers.interopDefault(_removeUserViewJs);
var _loanDeviceViewJs = require("../forms/loanDeviceView.js");
var _loanDeviceViewJsDefault = parcelHelpers.interopDefault(_loanDeviceViewJs);
var _returnedDeviceViewJs = require("../forms/returnedDeviceView.js");
var _returnedDeviceViewJsDefault = parcelHelpers.interopDefault(_returnedDeviceViewJs);
var _condemnedDeviceViewJs = require("../forms/condemnedDeviceView.js");
var _condemnedDeviceViewJsDefault = parcelHelpers.interopDefault(_condemnedDeviceViewJs);
var _onboardViewJs = require("../forms/onboardView.js");
var _onboardViewJsDefault = parcelHelpers.interopDefault(_onboardViewJs);
const controlExportExcel = async function() {
    try {
        await _excelModelJs.exportExcel();
    } catch (err) {
        throw err;
    }
};
const controlNormal = function(viewObject) {
    _modelJs.state.rawFormInputs = [];
    _modelJs.state.excel = false;
    viewObject.renderNormal();
};
// RENDERING EXCEL FOR REGISTERING, CONDEMN DEVICE, NEW USER, REMOVE USER
const controlExcel = function(viewObject) {
    _modelJs.state.excel = true;
    _modelJs.state.rawFormInputs = [];
    viewObject.renderExcel();
};
const controlFileLoaded = function(viewObject, file) {
    try {
        _modelJs.state.fileLoaded = true;
        viewObject.renderFileName(_modelJs.state.fileLoaded, file.name);
        // PDF types
        if (_modelJs.state.page === "loan device" || _modelJs.state.page === "returned device") _modelJs.state.pdfFile = file;
        else {
            console.log("hello");
            _modelJs.state.excelFile = file;
        }
    } catch (err) {
        console.log(err);
        _modelJs.state.fileLoaded = false;
        viewObject.renderFileName(_modelJs.state.fileLoaded, file.name);
    }
};
const controlRemoveFile = function(viewObject) {
    if (_modelJs.state.excel) {
        _modelJs.state.excelFile = {};
        _modelJs.state.fileLoaded = false;
        viewObject.renderFileName(_modelJs.state.fileLoaded);
    } else {
        // hide file name for PDF, but do not reset rawFormInputs
        viewObject.renderFileName(false);
        _modelJs.state.pdfFile = {};
    }
};
const controlConfirmation = async function() {
    try {
        if (_modelJs.state.fileLoaded !== true || !_modelJs.state.excelFile.name) throw Error("No file selected");
        const excelData = await _excelModelJs.readExcel(_modelJs.state.excelFile);
        console.log(excelData);
        console.log((0, _onboardViewJsDefault.default));
        // form inputs immediately
        const clientData = (0, _onboardViewJsDefault.default).getFileData(excelData);
        if (!clientData) {
            (0, _onboardViewJsDefault.default).renderError("Something went wrong when submitting data, please check you did not amend the headers");
            return;
        }
        _modelJs.state.formInputs = clientData[0];
        (0, _onboardViewJsDefault.default).renderSpinner();
        const serverData = await _excelModelJs.getOnboardConfirmation(clientData.flat());
        console.log(serverData);
        (0, _onboardViewJsDefault.default).renderConfirmationPage(_modelJs.state.formInputs, serverData);
    } catch (err) {
        console.log(err);
        (0, _onboardViewJsDefault.default).renderError(err.message);
    }
};
const controlSubmit = async function(viewObject) {
    // let data;
    try {
        if (_modelJs.state.page === "onboard") {
            viewObject.renderSpinner();
            console.log(_modelJs.state.formInputs);
            await _modelJs.uploadData();
            return;
        }
        _modelJs.state.rawFormInputs = [];
        // const type = viewObject.type
        let data;
        if (_modelJs.state.excel === true) {
            if (!_modelJs.state.excelFile.name) throw Error("No file selected");
            const excelData = await _excelModelJs.readExcel(_modelJs.state.excelFile);
            console.log(excelData);
            // raw form inputs is still needed for PDF forms
            _modelJs.state.rawFormInputs = await viewObject.getFileData(excelData);
            if (!_modelJs.state.rawFormInputs) return;
            data = [
                ..._modelJs.state.rawFormInputs
            ];
            if (!data) return;
            data.unshift(true);
        } else {
            console.log("not using excel");
            // need to also save raw form inputs from non excel submissions
            _modelJs.state.rawFormInputs = viewObject.getData();
            if (!_modelJs.state.rawFormInputs) return;
            // loan device and returned device will never use excel, but returned device can make use of this switch to remove the previous file
            if (_modelJs.state.page !== "loan device" && _modelJs.state.page !== "returned device") {
                data = [
                    ..._modelJs.state.rawFormInputs
                ];
                data.unshift(false);
            // loan and return will be deconstructed in pdfFormModel
            } else if (_modelJs.state.page === "returned device") _modelJs.state.rawFormInputs.unshift(viewObject._eventId);
        }
        _modelJs.state.formInputs = data;
        // upload data
        if (_modelJs.state.page !== "loan device" && _modelJs.state.page !== "returned device") {
            viewObject.renderSpinner();
            await _modelJs.uploadData();
        } else {
            console.log("rendering pdf form");
            viewObject.renderPDFForm(_modelJs.state.page);
            _modelJs.state.object = viewObject.getFormDetails();
        }
    } catch (err) {
        viewObject.renderError(err);
        console.log(err);
    }
};
const controlCreatePDF = function() {
    _pdfFormModelJs.generatePDF();
};
const controlDownloadPDF = async function(eventId) {
    try {
        await _pdfFormModelJs.downloadPDF(eventId);
    } catch (err) {
        console.log(err);
    }
};
const controlPDFSubmit = async function(viewObject, bypass = false) {
    try {
        if (!_modelJs.state.rawFormInputs) {
            viewObject.renderError("Something went wrong!");
            return;
        }
        console.log(_modelJs.state.rawFormInputs);
        viewObject.renderSpinner();
        const assetId = await _pdfFormModelJs.submitPDF(bypass);
        viewObject.renderResubmit(assetId, _modelJs.state.page, window.location.href, (0, _configJs.ASSET_HOMEPAGE_URL));
    } catch (err) {
        viewObject.renderError(err);
        console.log(err);
    }
};
const controlPreviewResults = async function(viewObject, dataType) {
    try {
        const query = viewObject.getPreviewQuery();
        // query is blank: hide preview
        if (!query) (0, _helpersJs.transparentEl)(viewObject._previewWindowEl);
        else {
            (0, _helpersJs.opaqueEl)(viewObject._previewWindowEl);
            console.log(query, dataType);
            const results = await _modelJs.loadPreviewResults(query, dataType);
            viewObject.renderPreviewResults(results);
        }
    } catch (err) {
        console.log(err);
    }
};
const controlSelectPreview = function(viewObject, clickedEl) {
    if (_modelJs.state.page !== "devices" && _modelJs.state.page !== "history") viewObject.renderPreview(clickedEl);
    else viewObject.renderBasicPreview(clickedEl);
};
const controlClosePreview = function(viewObject) {
    _modelJs.state.object = {}; // to find out why... i forgot
    viewObject.closePreview();
};
const controlGenerateUserPreview = async function(assetId) {
    const user = await _modelJs.getPreviewUser(assetId);
    (0, _returnedDeviceViewJsDefault.default).renderUser(user);
};
// SET THE FORMS WHEN ID IN URL CHANGES
const controlGetIds = async function(action) {
    let assetId = "", userId = "", params = [];
    var queryParams = new URLSearchParams(window.location.search);
    if (queryParams.has("asset-tag")) assetId = queryParams.get("asset-tag");
    if (queryParams.has("user-name")) userId = queryParams.get("user-name");
    params.push(assetId, userId);
    if (assetId !== "") {
        await _deviceModelJs.getDevice(assetId);
        switch(action){
            case "loan":
                (0, _loanDeviceViewJsDefault.default).renderAutoDevicePreview(_modelJs.state.object.details);
                console.log("rendering");
                break;
            case "returned":
                (0, _returnedDeviceViewJsDefault.default).renderAutoDevicePreview(_modelJs.state.object.details);
                break;
            case "condemned":
                (0, _condemnedDeviceViewJsDefault.default).renderAutoDevicePreview(_modelJs.state.object.details);
                console.log("rendering");
                break;
            default:
                break;
        }
    }
    if (userId !== "") {
        console.log(userId);
        await _userModelJs.getUser(userId);
        switch(action){
            case "loan":
                (0, _loanDeviceViewJsDefault.default).renderAutoUserPreview(_modelJs.state.object.details);
                break;
            case "remove":
                console.log(_modelJs.state.object);
                (0, _removeUserViewJsDefault.default).renderAutoUserPreview(_modelJs.state.object.details);
                break;
        }
    }
    if (assetId === "" && userId === "") switch(action){
        case "loan":
            (0, _loanDeviceViewJsDefault.default).removePreviews();
            (0, _loanDeviceViewJsDefault.default).showInputPreviews();
            break;
        case "returned":
            (0, _returnedDeviceViewJsDefault.default).removePreviews();
            (0, _returnedDeviceViewJsDefault.default).showInputPreviews();
            break;
        case "condemned":
            (0, _condemnedDeviceViewJsDefault.default).removePreviews();
            (0, _condemnedDeviceViewJsDefault.default).showInputPreviews();
            break;
        default:
            break;
    }
};
const init = function() {
    [
        "hashchange",
        "load",
        "popstate"
    ].forEach((ev)=>window.addEventListener(ev, ()=>initializePage(ev)));
};
const initializePage = async function(ev) {
    // debugger;
    const previewHandlers = [
        controlPreviewResults,
        controlSelectPreview,
        controlClosePreview
    ];
    switch(window.location.pathname){
        case `/asset/forms/onboard`:
            console.log("hello");
            _modelJs.state.excel = true;
            _modelJs.state.page = "onboard";
            (0, _onboardViewJsDefault.default).initialize();
            (0, _onboardViewJsDefault.default).addHandlerFileTemplate(controlExportExcel);
            (0, _onboardViewJsDefault.default).addHandlerUploadFile();
            (0, _onboardViewJsDefault.default).addHandlerFileLoaded(controlFileLoaded);
            (0, _onboardViewJsDefault.default).addHandlerRemoveFile(controlRemoveFile);
            (0, _onboardViewJsDefault.default).addHandlerConfirm(controlConfirmation);
            (0, _onboardViewJsDefault.default).addHandlerSubmit(controlSubmit);
            break;
        // CREATE DEVICE
        case `/asset/forms/register_model`:
            // user creates device
            console.log("hello");
            _modelJs.state.page = "register model";
            (0, _registerModelViewJsDefault.default).initialize();
            (0, _registerModelViewJsDefault.default).addHandlerSubmit(controlSubmit);
            break;
        // REGISTER DEVICE
        case `/asset/forms/register_device`:
            _modelJs.state.page = "register device";
            console.log((0, _registerDeviceViewJsDefault.default)._overlayEl);
            (0, _registerDeviceViewJsDefault.default).initialize(previewHandlers);
            // user wants to use excel or normal
            (0, _registerDeviceViewJsDefault.default).addHandlerExcelOption(controlExcel);
            (0, _registerDeviceViewJsDefault.default).addHandlerFileTemplate(controlExportExcel);
            (0, _registerDeviceViewJsDefault.default).addHandlerUploadFile();
            (0, _registerDeviceViewJsDefault.default).addHandlerFileLoaded(controlFileLoaded);
            (0, _registerDeviceViewJsDefault.default).addHandlerRemoveFile(controlRemoveFile);
            (0, _registerDeviceViewJsDefault.default).addHandlerNormalOption(controlNormal);
            (0, _registerDeviceViewJsDefault.default).addHandlerSubmit(controlSubmit);
            break;
        // LOAN DEVICE
        case `/asset/forms/loan_device`:
            if (ev === "load") {
                _modelJs.state.page = "loan device";
                (0, _loanDeviceViewJsDefault.default).initialize(previewHandlers);
                (0, _loanDeviceViewJsDefault.default).addHandlerSubmit(controlSubmit);
                (0, _loanDeviceViewJsDefault.default).addHandlerFileTemplate(controlCreatePDF);
                (0, _loanDeviceViewJsDefault.default).addHandlerUploadFile();
                // file loaded will not be checked, just display the file name
                (0, _loanDeviceViewJsDefault.default).addHandlerFileLoaded(controlFileLoaded);
                (0, _loanDeviceViewJsDefault.default).addHandlerRemoveFile(controlRemoveFile);
                (0, _loanDeviceViewJsDefault.default).addHandlerSubmitPDF(controlPDFSubmit);
            }
            console.log("hii");
            await controlGetIds("loan");
            break;
        // RETURN DEVICE
        case `/asset/forms/returned_device`:
            if (ev === "load") {
                _modelJs.state.page = "returned device";
                (0, _returnedDeviceViewJsDefault.default).initialize(previewHandlers);
                (0, _returnedDeviceViewJsDefault.default).addHandlerGetUser(controlGenerateUserPreview);
                (0, _returnedDeviceViewJsDefault.default).addHandlerSubmit(controlSubmit);
                (0, _loanDeviceViewJsDefault.default).addHandlerFileTemplate(controlCreatePDF);
                (0, _returnedDeviceViewJsDefault.default).addHandlerDownloadFile(controlDownloadPDF);
                (0, _returnedDeviceViewJsDefault.default).addHandlerUploadFile();
                (0, _returnedDeviceViewJsDefault.default).addHandlerFileLoaded(controlFileLoaded);
                (0, _returnedDeviceViewJsDefault.default).addHandlerRemoveFile(controlRemoveFile);
                (0, _returnedDeviceViewJsDefault.default).addHandlerSubmitPDF(controlPDFSubmit);
            }
            await controlGetIds("returned");
            break;
        // CONDEMN DEVICE
        case `/asset/forms/condemned_device`:
            if (ev === "load") {
                _modelJs.state.page = "condemned device";
                (0, _condemnedDeviceViewJsDefault.default).initialize(previewHandlers);
                // user wants to use excel or normal
                (0, _condemnedDeviceViewJsDefault.default).addHandlerExcelOption(controlExcel);
                (0, _condemnedDeviceViewJsDefault.default).addHandlerFileTemplate(controlExportExcel);
                (0, _condemnedDeviceViewJsDefault.default).addHandlerUploadFile();
                (0, _condemnedDeviceViewJsDefault.default).addHandlerFileLoaded(controlFileLoaded);
                (0, _condemnedDeviceViewJsDefault.default).addHandlerRemoveFile(controlRemoveFile);
                (0, _condemnedDeviceViewJsDefault.default).addHandlerNormalOption(controlNormal);
                // user condemns device TODO
                (0, _condemnedDeviceViewJsDefault.default).addHandlerSubmit(controlSubmit);
            }
            await controlGetIds("condemned");
            console.log("hello");
            break;
        // CREATE USER
        case `/asset/forms/create_user`:
            _modelJs.state.page = "create user";
            (0, _createUserViewJsDefault.default).initialize();
            (0, _createUserViewJsDefault.default).addHandlerExcelOption(controlExcel);
            (0, _createUserViewJsDefault.default).addHandlerFileTemplate(controlExportExcel);
            (0, _createUserViewJsDefault.default).addHandlerUploadFile();
            (0, _createUserViewJsDefault.default).addHandlerFileLoaded(controlFileLoaded);
            (0, _createUserViewJsDefault.default).addHandlerRemoveFile(controlRemoveFile);
            (0, _createUserViewJsDefault.default).addHandlerNormalOption(controlNormal);
            (0, _createUserViewJsDefault.default).addHandlerSubmit(controlSubmit);
            break;
        case `/asset/forms/remove_user`:
            if (ev === "load") {
                _modelJs.state.page = "remove user";
                (0, _removeUserViewJsDefault.default).initialize(previewHandlers);
                (0, _removeUserViewJsDefault.default).addHandlerExcelOption(controlExcel);
                (0, _removeUserViewJsDefault.default).addHandlerFileTemplate(controlExportExcel);
                (0, _removeUserViewJsDefault.default).addHandlerUploadFile();
                (0, _removeUserViewJsDefault.default).addHandlerFileLoaded(controlFileLoaded);
                (0, _removeUserViewJsDefault.default).addHandlerRemoveFile(controlRemoveFile);
                (0, _removeUserViewJsDefault.default).addHandlerNormalOption(controlNormal);
                (0, _removeUserViewJsDefault.default).addHandlerSubmit(controlSubmit);
            }
            controlGetIds("remove");
            break;
    }
};
init();

},{"../models/model.js":"1nwSQ","../models/deviceModel.js":"eVjfs","../models/userModel.js":"2rh01","../models/eventModel.js":"l6zea","../models/excelModel.js":"k6kDZ","../models/pdfFormModel.js":"g27Rm","../../utilities/helpers.js":"ePVjH","../../utilities/config.js":"4wtf3","../forms/registerDeviceView.js":"8IKr0","../forms/registerModelView.js":"ftH7g","../forms/createUserView.js":"bJKil","../forms/removeUserView.js":"fXE8Z","../forms/loanDeviceView.js":"i7CJd","../forms/returnedDeviceView.js":"jl9qX","../forms/condemnedDeviceView.js":"aRPVi","../forms/onboardView.js":"jZJJg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g27Rm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generatePDF", ()=>generatePDF);
parcelHelpers.export(exports, "submitPDF", ()=>submitPDF);
parcelHelpers.export(exports, "downloadPDF", ()=>downloadPDF);
var _jspdf = require("jspdf");
var _modelJs = require("./model.js");
var _helpersJs = require("../../utilities/helpers.js");
var _config = require("../../utilities/config");
const getFileName = function() {
    // Get the current date
    const currentDate = new Date();
    // Get the day, month, and year from the current date
    const day = String(currentDate.getDate()).padStart(2, "0");
    const month = String(currentDate.getMonth() + 1).padStart(2, "0");
    const year = currentDate.getFullYear();
    // Render the date as a string in the format "ddmmyyyy"
    const formattedDate = `${day}${month}${year}`;
    const formattedName = (0, _modelJs.state).object.userName.split(" ").join("-");
    return `${(0, _modelJs.state).object.assetTag}_${formattedName}_${formattedDate}_${(0, _modelJs.state).page === "loan device" ? "L" : "R"}.pdf`.replace(/[<>:"\/\\|?*]+/g, "");
};
const generatePDF = function() {
    console.log("bye");
    const doc = new (0, _jspdf.jsPDF)();
    const pageWidth = 160;
    const inputLeft = 22;
    const inputRight = 130;
    const lineHeight = 10;
    const loanSigHeight = 217;
    const returnSigHeight = 246;
    const userSig = 74;
    const itSig = 130;
    const boxHeight = 15;
    const officialWidth = 30;
    doc.addImage("../../static/img/gos-badge.png", "PNG", 170, 5, 26, 20);
    doc.setFont("Helvetica", "bold");
    doc.setFontSize(30);
    doc.text("Equipment Loan Form", 40, 22);
    doc.setFontSize(15);
    doc.text("Particulars", 20, 35);
    doc.text("Item to loan", 20, 65);
    doc.setTextColor(255, 0, 0).text("For Return Use", 20, 213 + lineHeight * 2);
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(12);
    doc.text("THE FOLLOWING GUIDELINES APPLY TO EQUIPMENT ON LOAN TO EMPLOYEE:", 20, 146);
    doc.setFontSize(11);
    doc.text("Date\nof loan: ", 20, loanSigHeight - 2);
    doc.text("Signature:", userSig, loanSigHeight);
    doc.text("Authorizing\nSignature:", itSig, loanSigHeight - 2);
    doc.text("Date\nof return: ", 20, returnSigHeight - 2);
    doc.text("Signature:", userSig, returnSigHeight);
    doc.text("Authorizing\nSignature:", itSig, returnSigHeight - 2);
    doc.setFont("Helvetica", "normal");
    doc.text(`Name: ${(0, _modelJs.state).object.userName}`, inputLeft, 42);
    doc.text("Email: __________________________________", inputLeft, 42 + lineHeight);
    doc.text(`Designation: ${(0, _modelJs.state).object.deptName}`, inputRight, 42);
    doc.text("Mobile No: _______________", inputRight, 42 + lineHeight);
    doc.text(`Model: ${(0, _modelJs.state).object.modelName}`, inputLeft, 72);
    doc.text("Hostname: _______________________________", inputLeft, 72 + lineHeight);
    doc.text(`Serial Number: ${(0, _modelJs.state).object.serialNumber}`, inputRight, 72);
    doc.text(`Asset Tag: ${(0, _modelJs.state).object.assetTag}`, inputRight, 72 + lineHeight);
    doc.text("Loan details:", inputLeft, 72 + lineHeight * 2);
    doc.text("Purpose of loan:", inputLeft, 72 + lineHeight * 2 + 25);
    doc.text("Return details:", inputLeft, returnSigHeight + lineHeight + 2);
    doc.setLineWidth(0.5);
    doc.line(20, loanSigHeight + lineHeight, 190, loanSigHeight + lineHeight);
    doc.rect(40, loanSigHeight - 9, officialWidth, boxHeight);
    doc.rect(userSig + 21, loanSigHeight - 9, officialWidth, boxHeight);
    doc.rect(itSig + 23, loanSigHeight - 9, officialWidth, boxHeight);
    doc.rect(40, returnSigHeight - 9, officialWidth, boxHeight);
    doc.rect(userSig + 21, returnSigHeight - 9, officialWidth, boxHeight);
    doc.rect(itSig + 23, returnSigHeight - 9, officialWidth, boxHeight);
    doc.rect(inputLeft, 72 + lineHeight * 2 + 3, pageWidth, boxHeight);
    doc.rect(inputLeft, 72 + lineHeight * 2 + 28, pageWidth, boxHeight);
    doc.rect(inputLeft, returnSigHeight + lineHeight + 5, pageWidth, boxHeight);
    doc.setFontSize(10);
    text = "• The undersigned must agree to accept financial responsibility for loss or damage of any equipment provided by Grace Orchard School.\n• The equipment is to be used for Grace Orchard School’s work-related activities.\n• The employee is responsible for safeguarding the equipment while it is in his or her possession. If the equipment is missing due to the negligence of the staff, the person will have to pay for the replacement equipment.\n• If the equipment is stolen, immediately notify your Reporting Officer (RO) & the person in charge of the loan.\n• The staff will have to make a police report regarding the theft within 48 hours.\n• The equipment should be returned to the custody of Grace Orchard School once the purpose for its loan has been completed or should the employee terminate employment with Grace Orchard School.\n• The employee is required to respond to the yearly inventory check by Corporate Office.\n• Any other software to be downloaded into the school laptop issued to you must be approved by IT department.\n";
    // splitTextToSize takes your string and turns it in to an array of strings,
    // each of which can be displayed within the specified maxLineWidth.
    const textLines = doc.splitTextToSize(text, pageWidth);
    // doc.text can now add those lines easily; otherwise, it would have run text off the screen!
    doc.text(textLines, inputLeft, 151);
    const pdfBlob = doc.output("blob");
    // Create a download link and simulate click event to trigger download
    const url = URL.createObjectURL(pdfBlob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${getFileName()}`;
    a.click();
    URL.revokeObjectURL(url);
};
function renameFile(originalFile, newName) {
    return new File([
        originalFile
    ], newName, {
        type: originalFile.type,
        lastModified: originalFile.lastModified
    });
}
const submitPDF = async function(bypass) {
    const originalPage = [
        ...(0, _modelJs.state).page
    ];
    try {
        if (!(0, _modelJs.state).rawFormInputs) return;
        // amend pdf file name, leave this here as it relies on the page
        const newFileName = getFileName();
        // required in case file name is appended multiple times
        const data = [
            ...(0, _modelJs.state).rawFormInputs
        ];
        if (bypass === true) data.unshift(false);
        else data.unshift(newFileName);
        (0, _modelJs.state).formInputs = data;
        // send the filepath to the server
        console.log((0, _modelJs.state).formInputs);
        assetId = await (0, _modelJs.uploadData)() // this uploads state.formInputs
        ;
        if (bypass) return assetId;
        // rename file if it got corrupted
        if ((0, _modelJs.state).pdfFile.name !== newFileName) (0, _modelJs.state).pdfFile = renameFile((0, _modelJs.state).pdfFile, newFileName);
        // CHANGE THE PAGE
        const originalPage = (0, _modelJs.state).page;
        (0, _modelJs.state).page = "upload pdf";
        const formData = new FormData();
        formData.append("pdf_file", (0, _modelJs.state).pdfFile);
        await (0, _modelJs.uploadData)(formData);
        (0, _modelJs.state).page = originalPage;
        return assetId;
    } catch (err) {
        (0, _modelJs.state).page = originalPage;
        throw err;
    }
};
const downloadPDF = async function(eventId) {
    try {
        let filename;
        if ((0, _modelJs.state).page === "returned device") {
            filename = getFileName();
            console.log(filename);
        } else {
            filename = await (0, _helpersJs.AJAX)(`${(0, _config.ASSET_HOMEPAGE_URL)}api/get_filename`, eventId);
            console.log(filename);
        }
        const blob = await (0, _helpersJs.AJAX)(`${(0, _config.ASSET_HOMEPAGE_URL)}api/download_pdf`, eventId, true, true);
        console.log(blob);
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `${filename}`; // You can specify a custom file name here
        a.click();
        URL.revokeObjectURL(url);
    } catch (err) {
        throw err;
    }
};

},{"./model.js":"1nwSQ","../../utilities/helpers.js":"ePVjH","../../utilities/config":"4wtf3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","jspdf":"22HlH"}],"22HlH":[function(require,module,exports) {
/** @license
 *
 * jsPDF - PDF Document creation from JavaScript
 * Version 2.5.1 Built on 2022-01-28T15:37:57.791Z
 *                      CommitID 00000000
 *
 * Copyright (c) 2010-2021 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF
 *               2015-2021 yWorks GmbH, http://www.yworks.com
 *               2015-2021 Lukas Holländer <lukas.hollaender@yworks.com>, https://github.com/HackbrettXXX
 *               2016-2018 Aras Abbasi <aras.abbasi@gmail.com>
 *               2010 Aaron Spike, https://github.com/acspike
 *               2012 Willow Systems Corporation, https://github.com/willowsystems
 *               2012 Pablo Hess, https://github.com/pablohess
 *               2012 Florian Jenett, https://github.com/fjenett
 *               2013 Warren Weckesser, https://github.com/warrenweckesser
 *               2013 Youssef Beddad, https://github.com/lifof
 *               2013 Lee Driscoll, https://github.com/lsdriscoll
 *               2013 Stefan Slonevskiy, https://github.com/stefslon
 *               2013 Jeremy Morel, https://github.com/jmorel
 *               2013 Christoph Hartmann, https://github.com/chris-rock
 *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
 *               2014 James Makes, https://github.com/dollaruw
 *               2014 Diego Casorran, https://github.com/diegocr
 *               2014 Steven Spungin, https://github.com/Flamenco
 *               2014 Kenneth Glassey, https://github.com/Gavvers
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Contributor(s):
 *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,
 *    kim3er, mfo, alnorth, Flamenco
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AcroForm", ()=>St);
parcelHelpers.export(exports, "AcroFormAppearance", ()=>At);
parcelHelpers.export(exports, "AcroFormButton", ()=>mt);
parcelHelpers.export(exports, "AcroFormCheckBox", ()=>wt);
parcelHelpers.export(exports, "AcroFormChoiceField", ()=>ft);
parcelHelpers.export(exports, "AcroFormComboBox", ()=>pt);
parcelHelpers.export(exports, "AcroFormEditBox", ()=>gt);
parcelHelpers.export(exports, "AcroFormListBox", ()=>dt);
parcelHelpers.export(exports, "AcroFormPasswordField", ()=>Lt);
parcelHelpers.export(exports, "AcroFormPushButton", ()=>vt);
parcelHelpers.export(exports, "AcroFormRadioButton", ()=>bt);
parcelHelpers.export(exports, "AcroFormTextField", ()=>Nt);
parcelHelpers.export(exports, "GState", ()=>j);
parcelHelpers.export(exports, "ShadingPattern", ()=>B);
parcelHelpers.export(exports, "TilingPattern", ()=>M);
parcelHelpers.export(exports, "jsPDF", ()=>E);
var _typeof = require("@babel/runtime/helpers/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _fflate = require("fflate");
var global = arguments[3];
var n = function() {
    return "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this;
}();
function i() {
    n.console && "function" == typeof n.console.log && n.console.log.apply(n.console, arguments);
}
var a = {
    log: i,
    warn: function(t) {
        n.console && ("function" == typeof n.console.warn ? n.console.warn.apply(n.console, arguments) : i.call(null, arguments));
    },
    error: function(t) {
        n.console && ("function" == typeof n.console.error ? n.console.error.apply(n.console, arguments) : i(t));
    }
};
function o(t, e, r) {
    var n = new XMLHttpRequest;
    n.open("GET", t), n.responseType = "blob", n.onload = function() {
        l(n.response, e, r);
    }, n.onerror = function() {
        a.error("could not download file");
    }, n.send();
}
function s(t) {
    var e = new XMLHttpRequest;
    e.open("HEAD", t, !1);
    try {
        e.send();
    } catch (t) {}
    return e.status >= 200 && e.status <= 299;
}
function c(t) {
    try {
        t.dispatchEvent(new MouseEvent("click"));
    } catch (r) {
        var e = document.createEvent("MouseEvents");
        e.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), t.dispatchEvent(e);
    }
}
var u, h, l = n.saveAs || ("object" !== ("undefined" == typeof window ? "undefined" : (0, _typeofDefault.default)(window)) || window !== n ? function() {} : "undefined" != typeof HTMLAnchorElement && "download" in HTMLAnchorElement.prototype ? function(t, e, r) {
    var i = n.URL || n.webkitURL, a = document.createElement("a");
    e = e || t.name || "download", a.download = e, a.rel = "noopener", "string" == typeof t ? (a.href = t, a.origin !== location.origin ? s(a.href) ? o(t, e, r) : c(a, a.target = "_blank") : c(a)) : (a.href = i.createObjectURL(t), setTimeout(function() {
        i.revokeObjectURL(a.href);
    }, 4e4), setTimeout(function() {
        c(a);
    }, 0));
} : "msSaveOrOpenBlob" in navigator ? function(e, r, n) {
    if (r = r || e.name || "download", "string" == typeof e) {
        if (s(e)) o(e, r, n);
        else {
            var i = document.createElement("a");
            i.href = e, i.target = "_blank", setTimeout(function() {
                c(i);
            });
        }
    } else navigator.msSaveOrOpenBlob(function(e, r) {
        return void 0 === r ? r = {
            autoBom: !1
        } : "object" !== (0, _typeofDefault.default)(r) && (a.warn("Deprecated: Expected third argument to be a object"), r = {
            autoBom: !r
        }), r.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type) ? new Blob([
            String.fromCharCode(65279),
            e
        ], {
            type: e.type
        }) : e;
    }(e, n), r);
} : function(e, r, i, a) {
    if ((a = a || open("", "_blank")) && (a.document.title = a.document.body.innerText = "downloading..."), "string" == typeof e) return o(e, r, i);
    var s = "application/octet-stream" === e.type, c = /constructor/i.test(n.HTMLElement) || n.safari, u = /CriOS\/[\d]+/.test(navigator.userAgent);
    if ((u || s && c) && "object" === ("undefined" == typeof FileReader ? "undefined" : (0, _typeofDefault.default)(FileReader))) {
        var h = new FileReader;
        h.onloadend = function() {
            var t = h.result;
            t = u ? t : t.replace(/^data:[^;]*;/, "data:attachment/file;"), a ? a.location.href = t : location = t, a = null;
        }, h.readAsDataURL(e);
    } else {
        var l = n.URL || n.webkitURL, f = l.createObjectURL(e);
        a ? a.location = f : location.href = f, a = null, setTimeout(function() {
            l.revokeObjectURL(f);
        }, 4e4);
    }
});
/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}
 * @license Use it if you like it
 */ function f(t) {
    var e;
    t = t || "", this.ok = !1, "#" == t.charAt(0) && (t = t.substr(1, 6));
    t = ({
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "00ffff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000000",
        blanchedalmond: "ffebcd",
        blue: "0000ff",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "00ffff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dodgerblue: "1e90ff",
        feldspar: "d19275",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "ff00ff",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgrey: "d3d3d3",
        lightgreen: "90ee90",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslateblue: "8470ff",
        lightslategray: "778899",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "00ff00",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "ff00ff",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370d8",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "d87093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        red: "ff0000",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        violetred: "d02090",
        wheat: "f5deb3",
        white: "ffffff",
        whitesmoke: "f5f5f5",
        yellow: "ffff00",
        yellowgreen: "9acd32"
    })[t = (t = t.replace(/ /g, "")).toLowerCase()] || t;
    for(var r = [
        {
            re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
            example: [
                "rgb(123, 234, 45)",
                "rgb(255,234,245)"
            ],
            process: function(t) {
                return [
                    parseInt(t[1]),
                    parseInt(t[2]),
                    parseInt(t[3])
                ];
            }
        },
        {
            re: /^(\w{2})(\w{2})(\w{2})$/,
            example: [
                "#00ff00",
                "336699"
            ],
            process: function(t) {
                return [
                    parseInt(t[1], 16),
                    parseInt(t[2], 16),
                    parseInt(t[3], 16)
                ];
            }
        },
        {
            re: /^(\w{1})(\w{1})(\w{1})$/,
            example: [
                "#fb0",
                "f0f"
            ],
            process: function(t) {
                return [
                    parseInt(t[1] + t[1], 16),
                    parseInt(t[2] + t[2], 16),
                    parseInt(t[3] + t[3], 16)
                ];
            }
        }
    ], n = 0; n < r.length; n++){
        var i = r[n].re, a = r[n].process, o = i.exec(t);
        o && (e = a(o), this.r = e[0], this.g = e[1], this.b = e[2], this.ok = !0);
    }
    this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r, this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g, this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b, this.toRGB = function() {
        return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
    }, this.toHex = function() {
        var t = this.r.toString(16), e = this.g.toString(16), r = this.b.toString(16);
        return 1 == t.length && (t = "0" + t), 1 == e.length && (e = "0" + e), 1 == r.length && (r = "0" + r), "#" + t + e + r;
    };
}
/**
 * @license
 * Joseph Myers does not specify a particular license for his work.
 *
 * Author: Joseph Myers
 * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js
 *
 * Modified by: Owen Leong
 */ function d(t, e) {
    var r = t[0], n = t[1], i = t[2], a = t[3];
    r = g(r, n, i, a, e[0], 7, -680876936), a = g(a, r, n, i, e[1], 12, -389564586), i = g(i, a, r, n, e[2], 17, 606105819), n = g(n, i, a, r, e[3], 22, -1044525330), r = g(r, n, i, a, e[4], 7, -176418897), a = g(a, r, n, i, e[5], 12, 1200080426), i = g(i, a, r, n, e[6], 17, -1473231341), n = g(n, i, a, r, e[7], 22, -45705983), r = g(r, n, i, a, e[8], 7, 1770035416), a = g(a, r, n, i, e[9], 12, -1958414417), i = g(i, a, r, n, e[10], 17, -42063), n = g(n, i, a, r, e[11], 22, -1990404162), r = g(r, n, i, a, e[12], 7, 1804603682), a = g(a, r, n, i, e[13], 12, -40341101), i = g(i, a, r, n, e[14], 17, -1502002290), r = m(r, n = g(n, i, a, r, e[15], 22, 1236535329), i, a, e[1], 5, -165796510), a = m(a, r, n, i, e[6], 9, -1069501632), i = m(i, a, r, n, e[11], 14, 643717713), n = m(n, i, a, r, e[0], 20, -373897302), r = m(r, n, i, a, e[5], 5, -701558691), a = m(a, r, n, i, e[10], 9, 38016083), i = m(i, a, r, n, e[15], 14, -660478335), n = m(n, i, a, r, e[4], 20, -405537848), r = m(r, n, i, a, e[9], 5, 568446438), a = m(a, r, n, i, e[14], 9, -1019803690), i = m(i, a, r, n, e[3], 14, -187363961), n = m(n, i, a, r, e[8], 20, 1163531501), r = m(r, n, i, a, e[13], 5, -1444681467), a = m(a, r, n, i, e[2], 9, -51403784), i = m(i, a, r, n, e[7], 14, 1735328473), r = v(r, n = m(n, i, a, r, e[12], 20, -1926607734), i, a, e[5], 4, -378558), a = v(a, r, n, i, e[8], 11, -2022574463), i = v(i, a, r, n, e[11], 16, 1839030562), n = v(n, i, a, r, e[14], 23, -35309556), r = v(r, n, i, a, e[1], 4, -1530992060), a = v(a, r, n, i, e[4], 11, 1272893353), i = v(i, a, r, n, e[7], 16, -155497632), n = v(n, i, a, r, e[10], 23, -1094730640), r = v(r, n, i, a, e[13], 4, 681279174), a = v(a, r, n, i, e[0], 11, -358537222), i = v(i, a, r, n, e[3], 16, -722521979), n = v(n, i, a, r, e[6], 23, 76029189), r = v(r, n, i, a, e[9], 4, -640364487), a = v(a, r, n, i, e[12], 11, -421815835), i = v(i, a, r, n, e[15], 16, 530742520), r = b(r, n = v(n, i, a, r, e[2], 23, -995338651), i, a, e[0], 6, -198630844), a = b(a, r, n, i, e[7], 10, 1126891415), i = b(i, a, r, n, e[14], 15, -1416354905), n = b(n, i, a, r, e[5], 21, -57434055), r = b(r, n, i, a, e[12], 6, 1700485571), a = b(a, r, n, i, e[3], 10, -1894986606), i = b(i, a, r, n, e[10], 15, -1051523), n = b(n, i, a, r, e[1], 21, -2054922799), r = b(r, n, i, a, e[8], 6, 1873313359), a = b(a, r, n, i, e[15], 10, -30611744), i = b(i, a, r, n, e[6], 15, -1560198380), n = b(n, i, a, r, e[13], 21, 1309151649), r = b(r, n, i, a, e[4], 6, -145523070), a = b(a, r, n, i, e[11], 10, -1120210379), i = b(i, a, r, n, e[2], 15, 718787259), n = b(n, i, a, r, e[9], 21, -343485551), t[0] = _(r, t[0]), t[1] = _(n, t[1]), t[2] = _(i, t[2]), t[3] = _(a, t[3]);
}
function p(t, e, r, n, i, a) {
    return e = _(_(e, t), _(n, a)), _(e << i | e >>> 32 - i, r);
}
function g(t, e, r, n, i, a, o) {
    return p(e & r | ~e & n, t, e, i, a, o);
}
function m(t, e, r, n, i, a, o) {
    return p(e & n | r & ~n, t, e, i, a, o);
}
function v(t, e, r, n, i, a, o) {
    return p(e ^ r ^ n, t, e, i, a, o);
}
function b(t, e, r, n, i, a, o) {
    return p(r ^ (e | ~n), t, e, i, a, o);
}
function y(t) {
    var e, r = t.length, n = [
        1732584193,
        -271733879,
        -1732584194,
        271733878
    ];
    for(e = 64; e <= t.length; e += 64)d(n, w(t.substring(e - 64, e)));
    t = t.substring(e - 64);
    var i = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ];
    for(e = 0; e < t.length; e++)i[e >> 2] |= t.charCodeAt(e) << (e % 4 << 3);
    if (i[e >> 2] |= 128 << (e % 4 << 3), e > 55) for(d(n, i), e = 0; e < 16; e++)i[e] = 0;
    return i[14] = 8 * r, d(n, i), n;
}
function w(t) {
    var e, r = [];
    for(e = 0; e < 64; e += 4)r[e >> 2] = t.charCodeAt(e) + (t.charCodeAt(e + 1) << 8) + (t.charCodeAt(e + 2) << 16) + (t.charCodeAt(e + 3) << 24);
    return r;
}
u = n.atob.bind(n), h = n.btoa.bind(n);
var N = "0123456789abcdef".split("");
function L(t) {
    for(var e = "", r = 0; r < 4; r++)e += N[t >> 8 * r + 4 & 15] + N[t >> 8 * r & 15];
    return e;
}
function A(t) {
    return String.fromCharCode((255 & t) >> 0, (65280 & t) >> 8, (16711680 & t) >> 16, (4278190080 & t) >> 24);
}
function x(t) {
    return y(t).map(A).join("");
}
var S = "5d41402abc4b2a76b9719d911017c592" != function(t) {
    for(var e = 0; e < t.length; e++)t[e] = L(t[e]);
    return t.join("");
}(y("hello"));
function _(t, e) {
    if (S) {
        var r = (65535 & t) + (65535 & e);
        return (t >> 16) + (e >> 16) + (r >> 16) << 16 | 65535 & r;
    }
    return t + e & 4294967295;
}
/**
 * @license
 * FPDF is released under a permissive license: there is no usage restriction.
 * You may embed it freely in your application (commercial or not), with or
 * without modifications.
 *
 * Reference: http://www.fpdf.org/en/script/script37.php
 */ function P(t, e) {
    var r, n, i, a;
    if (t !== r) {
        for(var o = (i = t, a = 1 + (256 / t.length >> 0), new Array(a + 1).join(i)), s = [], c = 0; c < 256; c++)s[c] = c;
        var u = 0;
        for(c = 0; c < 256; c++){
            var h = s[c];
            u = (u + h + o.charCodeAt(c)) % 256, s[c] = s[u], s[u] = h;
        }
        r = t, n = s;
    } else s = n;
    var l = e.length, f = 0, d = 0, p = "";
    for(c = 0; c < l; c++)d = (d + (h = s[f = (f + 1) % 256])) % 256, s[f] = s[d], s[d] = h, o = s[(s[f] + s[d]) % 256], p += String.fromCharCode(e.charCodeAt(c) ^ o);
    return p;
}
/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 * Author: Owen Leong (@owenl131)
 * Date: 15 Oct 2020
 * References:
 * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt
 * https://github.com/foliojs/pdfkit/blob/master/lib/security.js
 * http://www.fpdf.org/en/script/script37.php
 */ var k = {
    print: 4,
    modify: 8,
    copy: 16,
    "annot-forms": 32
};
function I(t, e, r, n) {
    this.v = 1, this.r = 2;
    var i = 192;
    t.forEach(function(t) {
        if (void 0 !== k.perm) throw new Error("Invalid permission: " + t);
        i += k[t];
    }), this.padding = "(\xbfN^Nu\x8aAd\x00NV\xff\xfa\x01\b..\x00\xb6\xd0h>\x80/\f\xa9\xfedSiz";
    var a = (e + this.padding).substr(0, 32), o = (r + this.padding).substr(0, 32);
    this.O = this.processOwnerPassword(a, o), this.P = -(1 + (255 ^ i)), this.encryptionKey = x(a + this.O + this.lsbFirstWord(this.P) + this.hexToBytes(n)).substr(0, 5), this.U = P(this.encryptionKey, this.padding);
}
function F(t) {
    if (/[^\u0000-\u00ff]/.test(t)) throw new Error("Invalid PDF Name Object: " + t + ", Only accept ASCII characters.");
    for(var e = "", r = t.length, n = 0; n < r; n++){
        var i = t.charCodeAt(n);
        if (i < 33 || 35 === i || 37 === i || 40 === i || 41 === i || 47 === i || 60 === i || 62 === i || 91 === i || 93 === i || 123 === i || 125 === i || i > 126) e += "#" + ("0" + i.toString(16)).slice(-2);
        else e += t[n];
    }
    return e;
}
function C(e) {
    if ("object" !== (0, _typeofDefault.default)(e)) throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");
    var r = {};
    this.subscribe = function(t, e, n) {
        if (n = n || !1, "string" != typeof t || "function" != typeof e || "boolean" != typeof n) throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");
        r.hasOwnProperty(t) || (r[t] = {});
        var i = Math.random().toString(35);
        return r[t][i] = [
            e,
            !!n
        ], i;
    }, this.unsubscribe = function(t) {
        for(var e in r)if (r[e][t]) return delete r[e][t], 0 === Object.keys(r[e]).length && delete r[e], !0;
        return !1;
    }, this.publish = function(t) {
        if (r.hasOwnProperty(t)) {
            var i = Array.prototype.slice.call(arguments, 1), o = [];
            for(var s in r[t]){
                var c = r[t][s];
                try {
                    c[0].apply(e, i);
                } catch (t) {
                    n.console && a.error("jsPDF PubSub Error", t.message, t);
                }
                c[1] && o.push(s);
            }
            o.length && o.forEach(this.unsubscribe);
        }
    }, this.getTopics = function() {
        return r;
    };
}
function j(t) {
    if (!(this instanceof j)) return new j(t);
    var e = "opacity,stroke-opacity".split(",");
    for(var r in t)t.hasOwnProperty(r) && e.indexOf(r) >= 0 && (this[r] = t[r]);
    this.id = "", this.objectNumber = -1;
}
function O(t, e) {
    this.gState = t, this.matrix = e, this.id = "", this.objectNumber = -1;
}
function B(t, e, r, n, i) {
    if (!(this instanceof B)) return new B(t, e, r, n, i);
    this.type = "axial" === t ? 2 : 3, this.coords = e, this.colors = r, O.call(this, n, i);
}
function M(t, e, r, n, i) {
    if (!(this instanceof M)) return new M(t, e, r, n, i);
    this.boundingBox = t, this.xStep = e, this.yStep = r, this.stream = "", this.cloneIndex = 0, O.call(this, n, i);
}
function E(e) {
    var r, i = "string" == typeof arguments[0] ? arguments[0] : "p", o = arguments[1], s = arguments[2], c = arguments[3], u = [], d = 1, p = 16, g = "S", m = null;
    "object" === (0, _typeofDefault.default)(e = e || {}) && (i = e.orientation, o = e.unit || o, s = e.format || s, c = e.compress || e.compressPdf || c, null !== (m = e.encryption || null) && (m.userPassword = m.userPassword || "", m.ownerPassword = m.ownerPassword || "", m.userPermissions = m.userPermissions || []), d = "number" == typeof e.userUnit ? Math.abs(e.userUnit) : 1, void 0 !== e.precision && (r = e.precision), void 0 !== e.floatPrecision && (p = e.floatPrecision), g = e.defaultPathOperation || "S"), u = e.filters || (!0 === c ? [
        "FlateEncode"
    ] : u), o = o || "mm", i = ("" + (i || "P")).toLowerCase();
    var v = e.putOnlyUsedFonts || !1, b = {}, y = {
        internal: {},
        __private__: {}
    };
    y.__private__.PubSub = C;
    var w = "1.3", N = y.__private__.getPdfVersion = function() {
        return w;
    };
    y.__private__.setPdfVersion = function(t) {
        w = t;
    };
    var L = {
        a0: [
            2383.94,
            3370.39
        ],
        a1: [
            1683.78,
            2383.94
        ],
        a2: [
            1190.55,
            1683.78
        ],
        a3: [
            841.89,
            1190.55
        ],
        a4: [
            595.28,
            841.89
        ],
        a5: [
            419.53,
            595.28
        ],
        a6: [
            297.64,
            419.53
        ],
        a7: [
            209.76,
            297.64
        ],
        a8: [
            147.4,
            209.76
        ],
        a9: [
            104.88,
            147.4
        ],
        a10: [
            73.7,
            104.88
        ],
        b0: [
            2834.65,
            4008.19
        ],
        b1: [
            2004.09,
            2834.65
        ],
        b2: [
            1417.32,
            2004.09
        ],
        b3: [
            1000.63,
            1417.32
        ],
        b4: [
            708.66,
            1000.63
        ],
        b5: [
            498.9,
            708.66
        ],
        b6: [
            354.33,
            498.9
        ],
        b7: [
            249.45,
            354.33
        ],
        b8: [
            175.75,
            249.45
        ],
        b9: [
            124.72,
            175.75
        ],
        b10: [
            87.87,
            124.72
        ],
        c0: [
            2599.37,
            3676.54
        ],
        c1: [
            1836.85,
            2599.37
        ],
        c2: [
            1298.27,
            1836.85
        ],
        c3: [
            918.43,
            1298.27
        ],
        c4: [
            649.13,
            918.43
        ],
        c5: [
            459.21,
            649.13
        ],
        c6: [
            323.15,
            459.21
        ],
        c7: [
            229.61,
            323.15
        ],
        c8: [
            161.57,
            229.61
        ],
        c9: [
            113.39,
            161.57
        ],
        c10: [
            79.37,
            113.39
        ],
        dl: [
            311.81,
            623.62
        ],
        letter: [
            612,
            792
        ],
        "government-letter": [
            576,
            756
        ],
        legal: [
            612,
            1008
        ],
        "junior-legal": [
            576,
            360
        ],
        ledger: [
            1224,
            792
        ],
        tabloid: [
            792,
            1224
        ],
        "credit-card": [
            153,
            243
        ]
    };
    y.__private__.getPageFormats = function() {
        return L;
    };
    var A = y.__private__.getPageFormat = function(t) {
        return L[t];
    };
    s = s || "a4";
    var x = {
        COMPAT: "compat",
        ADVANCED: "advanced"
    }, S = x.COMPAT;
    function _() {
        this.saveGraphicsState(), lt(new Vt(_t, 0, 0, -_t, 0, Rr() * _t).toString() + " cm"), this.setFontSize(this.getFontSize() / _t), g = "n", S = x.ADVANCED;
    }
    function P() {
        this.restoreGraphicsState(), g = "S", S = x.COMPAT;
    }
    var k = y.__private__.combineFontStyleAndFontWeight = function(t, e) {
        if ("bold" == t && "normal" == e || "bold" == t && 400 == e || "normal" == t && "italic" == e || "bold" == t && "italic" == e) throw new Error("Invalid Combination of fontweight and fontstyle");
        return e && (t = 400 == e || "normal" === e ? "italic" === t ? "italic" : "normal" : 700 != e && "bold" !== e || "normal" !== t ? (700 == e ? "bold" : e) + "" + t : "bold"), t;
    };
    y.advancedAPI = function(t) {
        var e = S === x.COMPAT;
        return e && _.call(this), "function" != typeof t || (t(this), e && P.call(this)), this;
    }, y.compatAPI = function(t) {
        var e = S === x.ADVANCED;
        return e && P.call(this), "function" != typeof t || (t(this), e && _.call(this)), this;
    }, y.isAdvancedAPI = function() {
        return S === x.ADVANCED;
    };
    var O, q = function(t) {
        if (S !== x.ADVANCED) throw new Error(t + " is only available in 'advanced' API mode. You need to call advancedAPI() first.");
    }, D = y.roundToPrecision = y.__private__.roundToPrecision = function(t, e) {
        var n = r || e;
        if (isNaN(t) || isNaN(n)) throw new Error("Invalid argument passed to jsPDF.roundToPrecision");
        return t.toFixed(n).replace(/0+$/, "");
    };
    O = y.hpf = y.__private__.hpf = "number" == typeof p ? function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
        return D(t, p);
    } : "smart" === p ? function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
        return D(t, t > -1 && t < 1 ? 16 : 5);
    } : function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
        return D(t, 16);
    };
    var R = y.f2 = y.__private__.f2 = function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f2");
        return D(t, 2);
    }, T = y.__private__.f3 = function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f3");
        return D(t, 3);
    }, U = y.scale = y.__private__.scale = function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.scale");
        return S === x.COMPAT ? t * _t : S === x.ADVANCED ? t : void 0;
    }, z = function(t) {
        return S === x.COMPAT ? Rr() - t : S === x.ADVANCED ? t : void 0;
    }, H = function(t) {
        return U(z(t));
    };
    y.__private__.setPrecision = y.setPrecision = function(t) {
        "number" == typeof parseInt(t, 10) && (r = parseInt(t, 10));
    };
    var W, V = "00000000000000000000000000000000", G = y.__private__.getFileId = function() {
        return V;
    }, Y = y.__private__.setFileId = function(t) {
        return V = void 0 !== t && /^[a-fA-F0-9]{32}$/.test(t) ? t.toUpperCase() : V.split("").map(function() {
            return "ABCDEF0123456789".charAt(Math.floor(16 * Math.random()));
        }).join(""), null !== m && (Ye = new I(m.userPermissions, m.userPassword, m.ownerPassword, V)), V;
    };
    y.setFileId = function(t) {
        return Y(t), this;
    }, y.getFileId = function() {
        return G();
    };
    var J = y.__private__.convertDateToPDFDate = function(t) {
        var e = t.getTimezoneOffset(), r = e < 0 ? "+" : "-", n = Math.floor(Math.abs(e / 60)), i = Math.abs(e % 60), a = [
            r,
            Q(n),
            "'",
            Q(i),
            "'"
        ].join("");
        return [
            "D:",
            t.getFullYear(),
            Q(t.getMonth() + 1),
            Q(t.getDate()),
            Q(t.getHours()),
            Q(t.getMinutes()),
            Q(t.getSeconds()),
            a
        ].join("");
    }, X = y.__private__.convertPDFDateToDate = function(t) {
        var e = parseInt(t.substr(2, 4), 10), r = parseInt(t.substr(6, 2), 10) - 1, n = parseInt(t.substr(8, 2), 10), i = parseInt(t.substr(10, 2), 10), a = parseInt(t.substr(12, 2), 10), o = parseInt(t.substr(14, 2), 10);
        return new Date(e, r, n, i, a, o, 0);
    }, K = y.__private__.setCreationDate = function(t) {
        var e;
        if (void 0 === t && (t = new Date), t instanceof Date) e = J(t);
        else {
            if (!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t)) throw new Error("Invalid argument passed to jsPDF.setCreationDate");
            e = t;
        }
        return W = e;
    }, Z = y.__private__.getCreationDate = function(t) {
        var e = W;
        return "jsDate" === t && (e = X(W)), e;
    };
    y.setCreationDate = function(t) {
        return K(t), this;
    }, y.getCreationDate = function(t) {
        return Z(t);
    };
    var $, Q = y.__private__.padd2 = function(t) {
        return ("0" + parseInt(t)).slice(-2);
    }, tt = y.__private__.padd2Hex = function(t) {
        return ("00" + (t = t.toString())).substr(t.length);
    }, et = 0, rt = [], nt = [], it = 0, at = [], ot = [], st = !1, ct = nt, ut = function() {
        et = 0, it = 0, nt = [], rt = [], at = [], Qt = Kt(), te = Kt();
    };
    y.__private__.setCustomOutputDestination = function(t) {
        st = !0, ct = t;
    };
    var ht = function(t) {
        st || (ct = t);
    };
    y.__private__.resetCustomOutputDestination = function() {
        st = !1, ct = nt;
    };
    var lt = y.__private__.out = function(t) {
        return t = t.toString(), it += t.length + 1, ct.push(t), ct;
    }, ft = y.__private__.write = function(t) {
        return lt(1 === arguments.length ? t.toString() : Array.prototype.join.call(arguments, " "));
    }, dt = y.__private__.getArrayBuffer = function(t) {
        for(var e = t.length, r = new ArrayBuffer(e), n = new Uint8Array(r); e--;)n[e] = t.charCodeAt(e);
        return r;
    }, pt = [
        [
            "Helvetica",
            "helvetica",
            "normal",
            "WinAnsiEncoding"
        ],
        [
            "Helvetica-Bold",
            "helvetica",
            "bold",
            "WinAnsiEncoding"
        ],
        [
            "Helvetica-Oblique",
            "helvetica",
            "italic",
            "WinAnsiEncoding"
        ],
        [
            "Helvetica-BoldOblique",
            "helvetica",
            "bolditalic",
            "WinAnsiEncoding"
        ],
        [
            "Courier",
            "courier",
            "normal",
            "WinAnsiEncoding"
        ],
        [
            "Courier-Bold",
            "courier",
            "bold",
            "WinAnsiEncoding"
        ],
        [
            "Courier-Oblique",
            "courier",
            "italic",
            "WinAnsiEncoding"
        ],
        [
            "Courier-BoldOblique",
            "courier",
            "bolditalic",
            "WinAnsiEncoding"
        ],
        [
            "Times-Roman",
            "times",
            "normal",
            "WinAnsiEncoding"
        ],
        [
            "Times-Bold",
            "times",
            "bold",
            "WinAnsiEncoding"
        ],
        [
            "Times-Italic",
            "times",
            "italic",
            "WinAnsiEncoding"
        ],
        [
            "Times-BoldItalic",
            "times",
            "bolditalic",
            "WinAnsiEncoding"
        ],
        [
            "ZapfDingbats",
            "zapfdingbats",
            "normal",
            null
        ],
        [
            "Symbol",
            "symbol",
            "normal",
            null
        ]
    ];
    y.__private__.getStandardFonts = function() {
        return pt;
    };
    var gt = e.fontSize || 16;
    y.__private__.setFontSize = y.setFontSize = function(t) {
        return gt = S === x.ADVANCED ? t / _t : t, this;
    };
    var mt, vt = y.__private__.getFontSize = y.getFontSize = function() {
        return S === x.COMPAT ? gt : gt * _t;
    }, bt = e.R2L || !1;
    y.__private__.setR2L = y.setR2L = function(t) {
        return bt = t, this;
    }, y.__private__.getR2L = y.getR2L = function() {
        return bt;
    };
    var yt, wt = y.__private__.setZoomMode = function(t) {
        var e = [
            void 0,
            null,
            "fullwidth",
            "fullheight",
            "fullpage",
            "original"
        ];
        if (/^(?:\d+\.\d*|\d*\.\d+|\d+)%$/.test(t)) mt = t;
        else if (isNaN(t)) {
            if (-1 === e.indexOf(t)) throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "' + t + '" is not recognized.');
            mt = t;
        } else mt = parseInt(t, 10);
    };
    y.__private__.getZoomMode = function() {
        return mt;
    };
    var Nt, Lt = y.__private__.setPageMode = function(t) {
        if (-1 == [
            void 0,
            null,
            "UseNone",
            "UseOutlines",
            "UseThumbs",
            "FullScreen"
        ].indexOf(t)) throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "' + t + '" is not recognized.');
        yt = t;
    };
    y.__private__.getPageMode = function() {
        return yt;
    };
    var At = y.__private__.setLayoutMode = function(t) {
        if (-1 == [
            void 0,
            null,
            "continuous",
            "single",
            "twoleft",
            "tworight",
            "two"
        ].indexOf(t)) throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "' + t + '" is not recognized.');
        Nt = t;
    };
    y.__private__.getLayoutMode = function() {
        return Nt;
    }, y.__private__.setDisplayMode = y.setDisplayMode = function(t, e, r) {
        return wt(t), At(e), Lt(r), this;
    };
    var xt = {
        title: "",
        subject: "",
        author: "",
        keywords: "",
        creator: ""
    };
    y.__private__.getDocumentProperty = function(t) {
        if (-1 === Object.keys(xt).indexOf(t)) throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");
        return xt[t];
    }, y.__private__.getDocumentProperties = function() {
        return xt;
    }, y.__private__.setDocumentProperties = y.setProperties = y.setDocumentProperties = function(t) {
        for(var e in xt)xt.hasOwnProperty(e) && t[e] && (xt[e] = t[e]);
        return this;
    }, y.__private__.setDocumentProperty = function(t, e) {
        if (-1 === Object.keys(xt).indexOf(t)) throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");
        return xt[t] = e;
    };
    var St, _t, Pt, kt, It, Ft = {}, Ct = {}, jt = [], Ot = {}, Bt = {}, Mt = {}, Et = {}, qt = null, Dt = 0, Rt = [], Tt = new C(y), Ut = e.hotfixes || [], zt = {}, Ht = {}, Wt = [], Vt = function t(e, r, n, i, a, o) {
        if (!(this instanceof t)) return new t(e, r, n, i, a, o);
        isNaN(e) && (e = 1), isNaN(r) && (r = 0), isNaN(n) && (n = 0), isNaN(i) && (i = 1), isNaN(a) && (a = 0), isNaN(o) && (o = 0), this._matrix = [
            e,
            r,
            n,
            i,
            a,
            o
        ];
    };
    Object.defineProperty(Vt.prototype, "sx", {
        get: function() {
            return this._matrix[0];
        },
        set: function(t) {
            this._matrix[0] = t;
        }
    }), Object.defineProperty(Vt.prototype, "shy", {
        get: function() {
            return this._matrix[1];
        },
        set: function(t) {
            this._matrix[1] = t;
        }
    }), Object.defineProperty(Vt.prototype, "shx", {
        get: function() {
            return this._matrix[2];
        },
        set: function(t) {
            this._matrix[2] = t;
        }
    }), Object.defineProperty(Vt.prototype, "sy", {
        get: function() {
            return this._matrix[3];
        },
        set: function(t) {
            this._matrix[3] = t;
        }
    }), Object.defineProperty(Vt.prototype, "tx", {
        get: function() {
            return this._matrix[4];
        },
        set: function(t) {
            this._matrix[4] = t;
        }
    }), Object.defineProperty(Vt.prototype, "ty", {
        get: function() {
            return this._matrix[5];
        },
        set: function(t) {
            this._matrix[5] = t;
        }
    }), Object.defineProperty(Vt.prototype, "a", {
        get: function() {
            return this._matrix[0];
        },
        set: function(t) {
            this._matrix[0] = t;
        }
    }), Object.defineProperty(Vt.prototype, "b", {
        get: function() {
            return this._matrix[1];
        },
        set: function(t) {
            this._matrix[1] = t;
        }
    }), Object.defineProperty(Vt.prototype, "c", {
        get: function() {
            return this._matrix[2];
        },
        set: function(t) {
            this._matrix[2] = t;
        }
    }), Object.defineProperty(Vt.prototype, "d", {
        get: function() {
            return this._matrix[3];
        },
        set: function(t) {
            this._matrix[3] = t;
        }
    }), Object.defineProperty(Vt.prototype, "e", {
        get: function() {
            return this._matrix[4];
        },
        set: function(t) {
            this._matrix[4] = t;
        }
    }), Object.defineProperty(Vt.prototype, "f", {
        get: function() {
            return this._matrix[5];
        },
        set: function(t) {
            this._matrix[5] = t;
        }
    }), Object.defineProperty(Vt.prototype, "rotation", {
        get: function() {
            return Math.atan2(this.shx, this.sx);
        }
    }), Object.defineProperty(Vt.prototype, "scaleX", {
        get: function() {
            return this.decompose().scale.sx;
        }
    }), Object.defineProperty(Vt.prototype, "scaleY", {
        get: function() {
            return this.decompose().scale.sy;
        }
    }), Object.defineProperty(Vt.prototype, "isIdentity", {
        get: function() {
            return 1 === this.sx && 0 === this.shy && 0 === this.shx && 1 === this.sy && 0 === this.tx && 0 === this.ty;
        }
    }), Vt.prototype.join = function(t) {
        return [
            this.sx,
            this.shy,
            this.shx,
            this.sy,
            this.tx,
            this.ty
        ].map(O).join(t);
    }, Vt.prototype.multiply = function(t) {
        var e = t.sx * this.sx + t.shy * this.shx, r = t.sx * this.shy + t.shy * this.sy, n = t.shx * this.sx + t.sy * this.shx, i = t.shx * this.shy + t.sy * this.sy, a = t.tx * this.sx + t.ty * this.shx + this.tx, o = t.tx * this.shy + t.ty * this.sy + this.ty;
        return new Vt(e, r, n, i, a, o);
    }, Vt.prototype.decompose = function() {
        var t = this.sx, e = this.shy, r = this.shx, n = this.sy, i = this.tx, a = this.ty, o = Math.sqrt(t * t + e * e), s = (t /= o) * r + (e /= o) * n;
        r -= t * s, n -= e * s;
        var c = Math.sqrt(r * r + n * n);
        return s /= c, t * (n /= c) < e * (r /= c) && (t = -t, e = -e, s = -s, o = -o), {
            scale: new Vt(o, 0, 0, c, 0, 0),
            translate: new Vt(1, 0, 0, 1, i, a),
            rotate: new Vt(t, e, -e, t, 0, 0),
            skew: new Vt(1, 0, s, 1, 0, 0)
        };
    }, Vt.prototype.toString = function(t) {
        return this.join(" ");
    }, Vt.prototype.inversed = function() {
        var t = this.sx, e = this.shy, r = this.shx, n = this.sy, i = this.tx, a = this.ty, o = 1 / (t * n - e * r), s = n * o, c = -e * o, u = -r * o, h = t * o;
        return new Vt(s, c, u, h, -s * i - u * a, -c * i - h * a);
    }, Vt.prototype.applyToPoint = function(t) {
        var e = t.x * this.sx + t.y * this.shx + this.tx, r = t.x * this.shy + t.y * this.sy + this.ty;
        return new Cr(e, r);
    }, Vt.prototype.applyToRectangle = function(t) {
        var e = this.applyToPoint(t), r = this.applyToPoint(new Cr(t.x + t.w, t.y + t.h));
        return new jr(e.x, e.y, r.x - e.x, r.y - e.y);
    }, Vt.prototype.clone = function() {
        var t = this.sx, e = this.shy, r = this.shx, n = this.sy, i = this.tx, a = this.ty;
        return new Vt(t, e, r, n, i, a);
    }, y.Matrix = Vt;
    var Gt = y.matrixMult = function(t, e) {
        return e.multiply(t);
    }, Yt = new Vt(1, 0, 0, 1, 0, 0);
    y.unitMatrix = y.identityMatrix = Yt;
    var Jt = function(t, e) {
        if (!Bt[t]) {
            var r = (e instanceof B ? "Sh" : "P") + (Object.keys(Ot).length + 1).toString(10);
            e.id = r, Bt[t] = r, Ot[r] = e, Tt.publish("addPattern", e);
        }
    };
    y.ShadingPattern = B, y.TilingPattern = M, y.addShadingPattern = function(t, e) {
        return q("addShadingPattern()"), Jt(t, e), this;
    }, y.beginTilingPattern = function(t) {
        q("beginTilingPattern()"), Br(t.boundingBox[0], t.boundingBox[1], t.boundingBox[2] - t.boundingBox[0], t.boundingBox[3] - t.boundingBox[1], t.matrix);
    }, y.endTilingPattern = function(t, e) {
        q("endTilingPattern()"), e.stream = ot[$].join("\n"), Jt(t, e), Tt.publish("endTilingPattern", e), Wt.pop().restore();
    };
    var Xt = y.__private__.newObject = function() {
        var t = Kt();
        return Zt(t, !0), t;
    }, Kt = y.__private__.newObjectDeferred = function() {
        return et++, rt[et] = function() {
            return it;
        }, et;
    }, Zt = function(t, e) {
        return e = "boolean" == typeof e && e, rt[t] = it, e && lt(t + " 0 obj"), t;
    }, $t = y.__private__.newAdditionalObject = function() {
        var t = {
            objId: Kt(),
            content: ""
        };
        return at.push(t), t;
    }, Qt = Kt(), te = Kt(), ee = y.__private__.decodeColorString = function(t) {
        var e = t.split(" ");
        if (2 !== e.length || "g" !== e[1] && "G" !== e[1]) {
            if (5 === e.length && ("k" === e[4] || "K" === e[4])) e = [
                (1 - e[0]) * (1 - e[3]),
                (1 - e[1]) * (1 - e[3]),
                (1 - e[2]) * (1 - e[3]),
                "r"
            ];
        } else {
            var r = parseFloat(e[0]);
            e = [
                r,
                r,
                r,
                "r"
            ];
        }
        for(var n = "#", i = 0; i < 3; i++)n += ("0" + Math.floor(255 * parseFloat(e[i])).toString(16)).slice(-2);
        return n;
    }, re = y.__private__.encodeColorString = function(e) {
        var r;
        "string" == typeof e && (e = {
            ch1: e
        });
        var n = e.ch1, i = e.ch2, a = e.ch3, o = e.ch4, s = "draw" === e.pdfColorType ? [
            "G",
            "RG",
            "K"
        ] : [
            "g",
            "rg",
            "k"
        ];
        if ("string" == typeof n && "#" !== n.charAt(0)) {
            var c = new f(n);
            if (c.ok) n = c.toHex();
            else if (!/^\d*\.?\d*$/.test(n)) throw new Error('Invalid color "' + n + '" passed to jsPDF.encodeColorString.');
        }
        if ("string" == typeof n && /^#[0-9A-Fa-f]{3}$/.test(n) && (n = "#" + n[1] + n[1] + n[2] + n[2] + n[3] + n[3]), "string" == typeof n && /^#[0-9A-Fa-f]{6}$/.test(n)) {
            var u = parseInt(n.substr(1), 16);
            n = u >> 16 & 255, i = u >> 8 & 255, a = 255 & u;
        }
        if (void 0 === i || void 0 === o && n === i && i === a) {
            if ("string" == typeof n) r = n + " " + s[0];
            else switch(e.precision){
                case 2:
                    r = R(n / 255) + " " + s[0];
                    break;
                case 3:
                default:
                    r = T(n / 255) + " " + s[0];
            }
        } else if (void 0 === o || "object" === (0, _typeofDefault.default)(o)) {
            if (o && !isNaN(o.a) && 0 === o.a) return r = [
                "1.",
                "1.",
                "1.",
                s[1]
            ].join(" ");
            if ("string" == typeof n) r = [
                n,
                i,
                a,
                s[1]
            ].join(" ");
            else switch(e.precision){
                case 2:
                    r = [
                        R(n / 255),
                        R(i / 255),
                        R(a / 255),
                        s[1]
                    ].join(" ");
                    break;
                default:
                case 3:
                    r = [
                        T(n / 255),
                        T(i / 255),
                        T(a / 255),
                        s[1]
                    ].join(" ");
            }
        } else if ("string" == typeof n) r = [
            n,
            i,
            a,
            o,
            s[2]
        ].join(" ");
        else switch(e.precision){
            case 2:
                r = [
                    R(n),
                    R(i),
                    R(a),
                    R(o),
                    s[2]
                ].join(" ");
                break;
            case 3:
            default:
                r = [
                    T(n),
                    T(i),
                    T(a),
                    T(o),
                    s[2]
                ].join(" ");
        }
        return r;
    }, ne = y.__private__.getFilters = function() {
        return u;
    }, ie = y.__private__.putStream = function(t) {
        var e = (t = t || {}).data || "", r = t.filters || ne(), n = t.alreadyAppliedFilters || [], i = t.addLength1 || !1, a = e.length, o = t.objectId, s = function(t) {
            return t;
        };
        if (null !== m && void 0 === o) throw new Error("ObjectId must be passed to putStream for file encryption");
        null !== m && (s = Ye.encryptor(o, 0));
        var c = {};
        !0 === r && (r = [
            "FlateEncode"
        ]);
        var u = t.additionalKeyValues || [], h = (c = void 0 !== E.API.processDataByFilters ? E.API.processDataByFilters(e, r) : {
            data: e,
            reverseChain: []
        }).reverseChain + (Array.isArray(n) ? n.join(" ") : n.toString());
        if (0 !== c.data.length && (u.push({
            key: "Length",
            value: c.data.length
        }), !0 === i && u.push({
            key: "Length1",
            value: a
        })), 0 != h.length) {
            if (h.split("/").length - 1 == 1) u.push({
                key: "Filter",
                value: h
            });
            else {
                u.push({
                    key: "Filter",
                    value: "[" + h + "]"
                });
                for(var l = 0; l < u.length; l += 1)if ("DecodeParms" === u[l].key) {
                    for(var f = [], d = 0; d < c.reverseChain.split("/").length - 1; d += 1)f.push("null");
                    f.push(u[l].value), u[l].value = "[" + f.join(" ") + "]";
                }
            }
        }
        lt("<<");
        for(var p = 0; p < u.length; p++)lt("/" + u[p].key + " " + u[p].value);
        lt(">>"), 0 !== c.data.length && (lt("stream"), lt(s(c.data)), lt("endstream"));
    }, ae = y.__private__.putPage = function(t) {
        var e = t.number, r = t.data, n = t.objId, i = t.contentsObjId;
        Zt(n, !0), lt("<</Type /Page"), lt("/Parent " + t.rootDictionaryObjId + " 0 R"), lt("/Resources " + t.resourceDictionaryObjId + " 0 R"), lt("/MediaBox [" + parseFloat(O(t.mediaBox.bottomLeftX)) + " " + parseFloat(O(t.mediaBox.bottomLeftY)) + " " + O(t.mediaBox.topRightX) + " " + O(t.mediaBox.topRightY) + "]"), null !== t.cropBox && lt("/CropBox [" + O(t.cropBox.bottomLeftX) + " " + O(t.cropBox.bottomLeftY) + " " + O(t.cropBox.topRightX) + " " + O(t.cropBox.topRightY) + "]"), null !== t.bleedBox && lt("/BleedBox [" + O(t.bleedBox.bottomLeftX) + " " + O(t.bleedBox.bottomLeftY) + " " + O(t.bleedBox.topRightX) + " " + O(t.bleedBox.topRightY) + "]"), null !== t.trimBox && lt("/TrimBox [" + O(t.trimBox.bottomLeftX) + " " + O(t.trimBox.bottomLeftY) + " " + O(t.trimBox.topRightX) + " " + O(t.trimBox.topRightY) + "]"), null !== t.artBox && lt("/ArtBox [" + O(t.artBox.bottomLeftX) + " " + O(t.artBox.bottomLeftY) + " " + O(t.artBox.topRightX) + " " + O(t.artBox.topRightY) + "]"), "number" == typeof t.userUnit && 1 !== t.userUnit && lt("/UserUnit " + t.userUnit), Tt.publish("putPage", {
            objId: n,
            pageContext: Rt[e],
            pageNumber: e,
            page: r
        }), lt("/Contents " + i + " 0 R"), lt(">>"), lt("endobj");
        var a = r.join("\n");
        return S === x.ADVANCED && (a += "\nQ"), Zt(i, !0), ie({
            data: a,
            filters: ne(),
            objectId: i
        }), lt("endobj"), n;
    }, oe = y.__private__.putPages = function() {
        var t, e, r = [];
        for(t = 1; t <= Dt; t++)Rt[t].objId = Kt(), Rt[t].contentsObjId = Kt();
        for(t = 1; t <= Dt; t++)r.push(ae({
            number: t,
            data: ot[t],
            objId: Rt[t].objId,
            contentsObjId: Rt[t].contentsObjId,
            mediaBox: Rt[t].mediaBox,
            cropBox: Rt[t].cropBox,
            bleedBox: Rt[t].bleedBox,
            trimBox: Rt[t].trimBox,
            artBox: Rt[t].artBox,
            userUnit: Rt[t].userUnit,
            rootDictionaryObjId: Qt,
            resourceDictionaryObjId: te
        }));
        Zt(Qt, !0), lt("<</Type /Pages");
        var n = "/Kids [";
        for(e = 0; e < Dt; e++)n += r[e] + " 0 R ";
        lt(n + "]"), lt("/Count " + Dt), lt(">>"), lt("endobj"), Tt.publish("postPutPages");
    }, se = function(t) {
        Tt.publish("putFont", {
            font: t,
            out: lt,
            newObject: Xt,
            putStream: ie
        }), !0 !== t.isAlreadyPutted && (t.objectNumber = Xt(), lt("<<"), lt("/Type /Font"), lt("/BaseFont /" + F(t.postScriptName)), lt("/Subtype /Type1"), "string" == typeof t.encoding && lt("/Encoding /" + t.encoding), lt("/FirstChar 32"), lt("/LastChar 255"), lt(">>"), lt("endobj"));
    }, ce = function() {
        for(var t in Ft)Ft.hasOwnProperty(t) && (!1 === v || !0 === v && b.hasOwnProperty(t)) && se(Ft[t]);
    }, ue = function(t) {
        t.objectNumber = Xt();
        var e = [];
        e.push({
            key: "Type",
            value: "/XObject"
        }), e.push({
            key: "Subtype",
            value: "/Form"
        }), e.push({
            key: "BBox",
            value: "[" + [
                O(t.x),
                O(t.y),
                O(t.x + t.width),
                O(t.y + t.height)
            ].join(" ") + "]"
        }), e.push({
            key: "Matrix",
            value: "[" + t.matrix.toString() + "]"
        });
        var r = t.pages[1].join("\n");
        ie({
            data: r,
            additionalKeyValues: e,
            objectId: t.objectNumber
        }), lt("endobj");
    }, he = function() {
        for(var t in zt)zt.hasOwnProperty(t) && ue(zt[t]);
    }, le = function(t, e) {
        var r, n = [], i = 1 / (e - 1);
        for(r = 0; r < 1; r += i)n.push(r);
        if (n.push(1), 0 != t[0].offset) {
            var a = {
                offset: 0,
                color: t[0].color
            };
            t.unshift(a);
        }
        if (1 != t[t.length - 1].offset) {
            var o = {
                offset: 1,
                color: t[t.length - 1].color
            };
            t.push(o);
        }
        for(var s = "", c = 0, u = 0; u < n.length; u++){
            for(r = n[u]; r > t[c + 1].offset;)c++;
            var h = t[c].offset, l = (r - h) / (t[c + 1].offset - h), f = t[c].color, d = t[c + 1].color;
            s += tt(Math.round((1 - l) * f[0] + l * d[0]).toString(16)) + tt(Math.round((1 - l) * f[1] + l * d[1]).toString(16)) + tt(Math.round((1 - l) * f[2] + l * d[2]).toString(16));
        }
        return s.trim();
    }, fe = function(t, e) {
        e || (e = 21);
        var r = Xt(), n = le(t.colors, e), i = [];
        i.push({
            key: "FunctionType",
            value: "0"
        }), i.push({
            key: "Domain",
            value: "[0.0 1.0]"
        }), i.push({
            key: "Size",
            value: "[" + e + "]"
        }), i.push({
            key: "BitsPerSample",
            value: "8"
        }), i.push({
            key: "Range",
            value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
        }), i.push({
            key: "Decode",
            value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
        }), ie({
            data: n,
            additionalKeyValues: i,
            alreadyAppliedFilters: [
                "/ASCIIHexDecode"
            ],
            objectId: r
        }), lt("endobj"), t.objectNumber = Xt(), lt("<< /ShadingType " + t.type), lt("/ColorSpace /DeviceRGB");
        var a = "/Coords [" + O(parseFloat(t.coords[0])) + " " + O(parseFloat(t.coords[1])) + " ";
        2 === t.type ? a += O(parseFloat(t.coords[2])) + " " + O(parseFloat(t.coords[3])) : a += O(parseFloat(t.coords[2])) + " " + O(parseFloat(t.coords[3])) + " " + O(parseFloat(t.coords[4])) + " " + O(parseFloat(t.coords[5])), lt(a += "]"), t.matrix && lt("/Matrix [" + t.matrix.toString() + "]"), lt("/Function " + r + " 0 R"), lt("/Extend [true true]"), lt(">>"), lt("endobj");
    }, de = function(t, e) {
        var r = Kt(), n = Xt();
        e.push({
            resourcesOid: r,
            objectOid: n
        }), t.objectNumber = n;
        var i = [];
        i.push({
            key: "Type",
            value: "/Pattern"
        }), i.push({
            key: "PatternType",
            value: "1"
        }), i.push({
            key: "PaintType",
            value: "1"
        }), i.push({
            key: "TilingType",
            value: "1"
        }), i.push({
            key: "BBox",
            value: "[" + t.boundingBox.map(O).join(" ") + "]"
        }), i.push({
            key: "XStep",
            value: O(t.xStep)
        }), i.push({
            key: "YStep",
            value: O(t.yStep)
        }), i.push({
            key: "Resources",
            value: r + " 0 R"
        }), t.matrix && i.push({
            key: "Matrix",
            value: "[" + t.matrix.toString() + "]"
        }), ie({
            data: t.stream,
            additionalKeyValues: i,
            objectId: t.objectNumber
        }), lt("endobj");
    }, pe = function(t) {
        var e;
        for(e in Ot)Ot.hasOwnProperty(e) && (Ot[e] instanceof B ? fe(Ot[e]) : Ot[e] instanceof M && de(Ot[e], t));
    }, ge = function(t) {
        for(var e in t.objectNumber = Xt(), lt("<<"), t)switch(e){
            case "opacity":
                lt("/ca " + R(t[e]));
                break;
            case "stroke-opacity":
                lt("/CA " + R(t[e]));
        }
        lt(">>"), lt("endobj");
    }, me = function() {
        var t;
        for(t in Mt)Mt.hasOwnProperty(t) && ge(Mt[t]);
    }, ve = function() {
        for(var t in lt("/XObject <<"), zt)zt.hasOwnProperty(t) && zt[t].objectNumber >= 0 && lt("/" + t + " " + zt[t].objectNumber + " 0 R");
        Tt.publish("putXobjectDict"), lt(">>");
    }, be = function() {
        Ye.oid = Xt(), lt("<<"), lt("/Filter /Standard"), lt("/V " + Ye.v), lt("/R " + Ye.r), lt("/U <" + Ye.toHexString(Ye.U) + ">"), lt("/O <" + Ye.toHexString(Ye.O) + ">"), lt("/P " + Ye.P), lt(">>"), lt("endobj");
    }, ye = function() {
        for(var t in lt("/Font <<"), Ft)Ft.hasOwnProperty(t) && (!1 === v || !0 === v && b.hasOwnProperty(t)) && lt("/" + t + " " + Ft[t].objectNumber + " 0 R");
        lt(">>");
    }, we = function() {
        if (Object.keys(Ot).length > 0) {
            for(var t in lt("/Shading <<"), Ot)Ot.hasOwnProperty(t) && Ot[t] instanceof B && Ot[t].objectNumber >= 0 && lt("/" + t + " " + Ot[t].objectNumber + " 0 R");
            Tt.publish("putShadingPatternDict"), lt(">>");
        }
    }, Ne = function(t) {
        if (Object.keys(Ot).length > 0) {
            for(var e in lt("/Pattern <<"), Ot)Ot.hasOwnProperty(e) && Ot[e] instanceof y.TilingPattern && Ot[e].objectNumber >= 0 && Ot[e].objectNumber < t && lt("/" + e + " " + Ot[e].objectNumber + " 0 R");
            Tt.publish("putTilingPatternDict"), lt(">>");
        }
    }, Le = function() {
        if (Object.keys(Mt).length > 0) {
            var t;
            for(t in lt("/ExtGState <<"), Mt)Mt.hasOwnProperty(t) && Mt[t].objectNumber >= 0 && lt("/" + t + " " + Mt[t].objectNumber + " 0 R");
            Tt.publish("putGStateDict"), lt(">>");
        }
    }, Ae = function(t) {
        Zt(t.resourcesOid, !0), lt("<<"), lt("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"), ye(), we(), Ne(t.objectOid), Le(), ve(), lt(">>"), lt("endobj");
    }, xe = function() {
        var t = [];
        ce(), me(), he(), pe(t), Tt.publish("putResources"), t.forEach(Ae), Ae({
            resourcesOid: te,
            objectOid: Number.MAX_SAFE_INTEGER
        }), Tt.publish("postPutResources");
    }, Se = function() {
        Tt.publish("putAdditionalObjects");
        for(var t = 0; t < at.length; t++){
            var e = at[t];
            Zt(e.objId, !0), lt(e.content), lt("endobj");
        }
        Tt.publish("postPutAdditionalObjects");
    }, _e = function(t) {
        Ct[t.fontName] = Ct[t.fontName] || {}, Ct[t.fontName][t.fontStyle] = t.id;
    }, Pe = function(t, e, r, n, i) {
        var a = {
            id: "F" + (Object.keys(Ft).length + 1).toString(10),
            postScriptName: t,
            fontName: e,
            fontStyle: r,
            encoding: n,
            isStandardFont: i || !1,
            metadata: {}
        };
        return Tt.publish("addFont", {
            font: a,
            instance: this
        }), Ft[a.id] = a, _e(a), a.id;
    }, ke = function(t) {
        for(var e = 0, r = pt.length; e < r; e++){
            var n = Pe.call(this, t[e][0], t[e][1], t[e][2], pt[e][3], !0);
            !1 === v && (b[n] = !0);
            var i = t[e][0].split("-");
            _e({
                id: n,
                fontName: i[0],
                fontStyle: i[1] || ""
            });
        }
        Tt.publish("addFonts", {
            fonts: Ft,
            dictionary: Ct
        });
    }, Ie = function(t) {
        return t.foo = function() {
            try {
                return t.apply(this, arguments);
            } catch (t) {
                var e = t.stack || "";
                ~e.indexOf(" at ") && (e = e.split(" at ")[1]);
                var r = "Error in function " + e.split("\n")[0].split("<")[0] + ": " + t.message;
                if (!n.console) throw new Error(r);
                n.console.error(r, t), n.alert && alert(r);
            }
        }, t.foo.bar = t, t.foo;
    }, Fe = function(t, e) {
        var r, n, i, a, o, s, c, u, h;
        if (i = (e = e || {}).sourceEncoding || "Unicode", o = e.outputEncoding, (e.autoencode || o) && Ft[St].metadata && Ft[St].metadata[i] && Ft[St].metadata[i].encoding && (a = Ft[St].metadata[i].encoding, !o && Ft[St].encoding && (o = Ft[St].encoding), !o && a.codePages && (o = a.codePages[0]), "string" == typeof o && (o = a[o]), o)) {
            for(c = !1, s = [], r = 0, n = t.length; r < n; r++)(u = o[t.charCodeAt(r)]) ? s.push(String.fromCharCode(u)) : s.push(t[r]), s[r].charCodeAt(0) >> 8 && (c = !0);
            t = s.join("");
        }
        for(r = t.length; void 0 === c && 0 !== r;)t.charCodeAt(r - 1) >> 8 && (c = !0), r--;
        if (!c) return t;
        for(s = e.noBOM ? [] : [
            254,
            255
        ], r = 0, n = t.length; r < n; r++){
            if ((h = (u = t.charCodeAt(r)) >> 8) >> 8) throw new Error("Character at position " + r + " of string '" + t + "' exceeds 16bits. Cannot be encoded into UCS-2 BE");
            s.push(h), s.push(u - (h << 8));
        }
        return String.fromCharCode.apply(void 0, s);
    }, Ce = y.__private__.pdfEscape = y.pdfEscape = function(t, e) {
        return Fe(t, e).replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
    }, je = y.__private__.beginPage = function(t) {
        ot[++Dt] = [], Rt[Dt] = {
            objId: 0,
            contentsObjId: 0,
            userUnit: Number(d),
            artBox: null,
            bleedBox: null,
            cropBox: null,
            trimBox: null,
            mediaBox: {
                bottomLeftX: 0,
                bottomLeftY: 0,
                topRightX: Number(t[0]),
                topRightY: Number(t[1])
            }
        }, Me(Dt), ht(ot[$]);
    }, Oe = function(t, e) {
        var r, n, o;
        switch(i = e || i, "string" == typeof t && (r = A(t.toLowerCase()), Array.isArray(r) && (n = r[0], o = r[1])), Array.isArray(t) && (n = t[0] * _t, o = t[1] * _t), isNaN(n) && (n = s[0], o = s[1]), (n > 14400 || o > 14400) && (a.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"), n = Math.min(14400, n), o = Math.min(14400, o)), s = [
            n,
            o
        ], i.substr(0, 1)){
            case "l":
                o > n && (s = [
                    o,
                    n
                ]);
                break;
            case "p":
                n > o && (s = [
                    o,
                    n
                ]);
        }
        je(s), pr(fr), lt(Lr), 0 !== kr && lt(kr + " J"), 0 !== Ir && lt(Ir + " j"), Tt.publish("addPage", {
            pageNumber: Dt
        });
    }, Be = function(t) {
        t > 0 && t <= Dt && (ot.splice(t, 1), Rt.splice(t, 1), Dt--, $ > Dt && ($ = Dt), this.setPage($));
    }, Me = function(t) {
        t > 0 && t <= Dt && ($ = t);
    }, Ee = y.__private__.getNumberOfPages = y.getNumberOfPages = function() {
        return ot.length - 1;
    }, qe = function(t, e, r) {
        var n, i = void 0;
        return r = r || {}, t = void 0 !== t ? t : Ft[St].fontName, e = void 0 !== e ? e : Ft[St].fontStyle, n = t.toLowerCase(), void 0 !== Ct[n] && void 0 !== Ct[n][e] ? i = Ct[n][e] : void 0 !== Ct[t] && void 0 !== Ct[t][e] ? i = Ct[t][e] : !1 === r.disableWarning && a.warn("Unable to look up font label for font '" + t + "', '" + e + "'. Refer to getFontList() for available fonts."), i || r.noFallback || null == (i = Ct.times[e]) && (i = Ct.times.normal), i;
    }, De = y.__private__.putInfo = function() {
        var t = Xt(), e = function(t) {
            return t;
        };
        for(var r in null !== m && (e = Ye.encryptor(t, 0)), lt("<<"), lt("/Producer (" + Ce(e("jsPDF " + E.version)) + ")"), xt)xt.hasOwnProperty(r) && xt[r] && lt("/" + r.substr(0, 1).toUpperCase() + r.substr(1) + " (" + Ce(e(xt[r])) + ")");
        lt("/CreationDate (" + Ce(e(W)) + ")"), lt(">>"), lt("endobj");
    }, Re = y.__private__.putCatalog = function(t) {
        var e = (t = t || {}).rootDictionaryObjId || Qt;
        switch(Xt(), lt("<<"), lt("/Type /Catalog"), lt("/Pages " + e + " 0 R"), mt || (mt = "fullwidth"), mt){
            case "fullwidth":
                lt("/OpenAction [3 0 R /FitH null]");
                break;
            case "fullheight":
                lt("/OpenAction [3 0 R /FitV null]");
                break;
            case "fullpage":
                lt("/OpenAction [3 0 R /Fit]");
                break;
            case "original":
                lt("/OpenAction [3 0 R /XYZ null null 1]");
                break;
            default:
                var r = "" + mt;
                "%" === r.substr(r.length - 1) && (mt = parseInt(mt) / 100), "number" == typeof mt && lt("/OpenAction [3 0 R /XYZ null null " + R(mt) + "]");
        }
        switch(Nt || (Nt = "continuous"), Nt){
            case "continuous":
                lt("/PageLayout /OneColumn");
                break;
            case "single":
                lt("/PageLayout /SinglePage");
                break;
            case "two":
            case "twoleft":
                lt("/PageLayout /TwoColumnLeft");
                break;
            case "tworight":
                lt("/PageLayout /TwoColumnRight");
        }
        yt && lt("/PageMode /" + yt), Tt.publish("putCatalog"), lt(">>"), lt("endobj");
    }, Te = y.__private__.putTrailer = function() {
        lt("trailer"), lt("<<"), lt("/Size " + (et + 1)), lt("/Root " + et + " 0 R"), lt("/Info " + (et - 1) + " 0 R"), null !== m && lt("/Encrypt " + Ye.oid + " 0 R"), lt("/ID [ <" + V + "> <" + V + "> ]"), lt(">>");
    }, Ue = y.__private__.putHeader = function() {
        lt("%PDF-" + w), lt("%\xba\xdf\xac\xe0");
    }, ze = y.__private__.putXRef = function() {
        var t = "0000000000";
        lt("xref"), lt("0 " + (et + 1)), lt("0000000000 65535 f ");
        for(var e = 1; e <= et; e++)"function" == typeof rt[e] ? lt((t + rt[e]()).slice(-10) + " 00000 n ") : void 0 !== rt[e] ? lt((t + rt[e]).slice(-10) + " 00000 n ") : lt("0000000000 00000 n ");
    }, He = y.__private__.buildDocument = function() {
        ut(), ht(nt), Tt.publish("buildDocument"), Ue(), oe(), Se(), xe(), null !== m && be(), De(), Re();
        var t = it;
        return ze(), Te(), lt("startxref"), lt("" + t), lt("%%EOF"), ht(ot[$]), nt.join("\n");
    }, We = y.__private__.getBlob = function(t) {
        return new Blob([
            dt(t)
        ], {
            type: "application/pdf"
        });
    }, Ve = y.output = y.__private__.output = Ie(function(t, e) {
        switch("string" == typeof (e = e || {}) ? e = {
            filename: e
        } : e.filename = e.filename || "generated.pdf", t){
            case void 0:
                return He();
            case "save":
                y.save(e.filename);
                break;
            case "arraybuffer":
                return dt(He());
            case "blob":
                return We(He());
            case "bloburi":
            case "bloburl":
                if (void 0 !== n.URL && "function" == typeof n.URL.createObjectURL) return n.URL && n.URL.createObjectURL(We(He())) || void 0;
                a.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");
                break;
            case "datauristring":
            case "dataurlstring":
                var r = "", i = He();
                try {
                    r = h(i);
                } catch (t) {
                    r = h(unescape(encodeURIComponent(i)));
                }
                return "data:application/pdf;filename=" + e.filename + ";base64," + r;
            case "pdfobjectnewwindow":
                if ("[object Window]" === Object.prototype.toString.call(n)) {
                    var o = "https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js", s = ' integrity="sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==" crossorigin="anonymous"';
                    e.pdfObjectUrl && (o = e.pdfObjectUrl, s = "");
                    var c = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="' + o + '"' + s + '></script><script >PDFObject.embed("' + this.output("dataurlstring") + '", ' + JSON.stringify(e) + ");</script></body></html>", u = n.open();
                    return null !== u && u.document.write(c), u;
                }
                throw new Error("The option pdfobjectnewwindow just works in a browser-environment.");
            case "pdfjsnewwindow":
                if ("[object Window]" === Object.prototype.toString.call(n)) {
                    var l = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id="pdfViewer" src="' + (e.pdfJsUrl || "examples/PDF.js/web/viewer.html") + "?file=&downloadName=" + e.filename + '" width="500px" height="400px" /></body></html>', f = n.open();
                    if (null !== f) {
                        f.document.write(l);
                        var d = this;
                        f.document.documentElement.querySelector("#pdfViewer").onload = function() {
                            f.document.title = e.filename, f.document.documentElement.querySelector("#pdfViewer").contentWindow.PDFViewerApplication.open(d.output("bloburl"));
                        };
                    }
                    return f;
                }
                throw new Error("The option pdfjsnewwindow just works in a browser-environment.");
            case "dataurlnewwindow":
                if ("[object Window]" !== Object.prototype.toString.call(n)) throw new Error("The option dataurlnewwindow just works in a browser-environment.");
                var p = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="' + this.output("datauristring", e) + '"></iframe></body></html>', g = n.open();
                if (null !== g && (g.document.write(p), g.document.title = e.filename), g || "undefined" == typeof safari) return g;
                break;
            case "datauri":
            case "dataurl":
                return n.document.location.href = this.output("datauristring", e);
            default:
                return null;
        }
    }), Ge = function(t) {
        return !0 === Array.isArray(Ut) && Ut.indexOf(t) > -1;
    };
    switch(o){
        case "pt":
            _t = 1;
            break;
        case "mm":
            _t = 72 / 25.4;
            break;
        case "cm":
            _t = 72 / 2.54;
            break;
        case "in":
            _t = 72;
            break;
        case "px":
            _t = 1 == Ge("px_scaling") ? .75 : 96 / 72;
            break;
        case "pc":
        case "em":
            _t = 12;
            break;
        case "ex":
            _t = 6;
            break;
        default:
            if ("number" != typeof o) throw new Error("Invalid unit: " + o);
            _t = o;
    }
    var Ye = null;
    K(), Y();
    var Je = function(t) {
        return null !== m ? Ye.encryptor(t, 0) : function(t) {
            return t;
        };
    }, Xe = y.__private__.getPageInfo = y.getPageInfo = function(t) {
        if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfo");
        return {
            objId: Rt[t].objId,
            pageNumber: t,
            pageContext: Rt[t]
        };
    }, Ke = y.__private__.getPageInfoByObjId = function(t) {
        if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");
        for(var e in Rt)if (Rt[e].objId === t) break;
        return Xe(e);
    }, Ze = y.__private__.getCurrentPageInfo = y.getCurrentPageInfo = function() {
        return {
            objId: Rt[$].objId,
            pageNumber: $,
            pageContext: Rt[$]
        };
    };
    y.addPage = function() {
        return Oe.apply(this, arguments), this;
    }, y.setPage = function() {
        return Me.apply(this, arguments), ht.call(this, ot[$]), this;
    }, y.insertPage = function(t) {
        return this.addPage(), this.movePage($, t), this;
    }, y.movePage = function(t, e) {
        var r, n;
        if (t > e) {
            r = ot[t], n = Rt[t];
            for(var i = t; i > e; i--)ot[i] = ot[i - 1], Rt[i] = Rt[i - 1];
            ot[e] = r, Rt[e] = n, this.setPage(e);
        } else if (t < e) {
            r = ot[t], n = Rt[t];
            for(var a = t; a < e; a++)ot[a] = ot[a + 1], Rt[a] = Rt[a + 1];
            ot[e] = r, Rt[e] = n, this.setPage(e);
        }
        return this;
    }, y.deletePage = function() {
        return Be.apply(this, arguments), this;
    }, y.__private__.text = y.text = function(e, r, n, i, a) {
        var o, s, c, u, h, l, f, d, p, g = (i = i || {}).scope || this;
        if ("number" == typeof e && "number" == typeof r && ("string" == typeof n || Array.isArray(n))) {
            var m = n;
            n = r, r = e, e = m;
        }
        if (arguments[3] instanceof Vt == !1 ? (c = arguments[4], u = arguments[5], "object" === (0, _typeofDefault.default)(f = arguments[3]) && null !== f || ("string" == typeof c && (u = c, c = null), "string" == typeof f && (u = f, f = null), "number" == typeof f && (c = f, f = null), i = {
            flags: f,
            angle: c,
            align: u
        })) : (q("The transform parameter of text() with a Matrix value"), p = a), isNaN(r) || isNaN(n) || null == e) throw new Error("Invalid arguments passed to jsPDF.text");
        if (0 === e.length) return g;
        var v = "", y = !1, w = "number" == typeof i.lineHeightFactor ? i.lineHeightFactor : lr, N = g.internal.scaleFactor;
        function L(t) {
            return t = t.split("	").join(Array(i.TabLen || 9).join(" ")), Ce(t, f);
        }
        function A(t) {
            for(var e, r = t.concat(), n = [], i = r.length; i--;)"string" == typeof (e = r.shift()) ? n.push(e) : Array.isArray(t) && (1 === e.length || void 0 === e[1] && void 0 === e[2]) ? n.push(e[0]) : n.push([
                e[0],
                e[1],
                e[2]
            ]);
            return n;
        }
        function _(t, e) {
            var r;
            if ("string" == typeof t) r = e(t)[0];
            else if (Array.isArray(t)) {
                for(var n, i, a = t.concat(), o = [], s = a.length; s--;)"string" == typeof (n = a.shift()) ? o.push(e(n)[0]) : Array.isArray(n) && "string" == typeof n[0] && (i = e(n[0], n[1], n[2]), o.push([
                    i[0],
                    i[1],
                    i[2]
                ]));
                r = o;
            }
            return r;
        }
        var P = !1, k = !0;
        if ("string" == typeof e) P = !0;
        else if (Array.isArray(e)) {
            var I = e.concat();
            s = [];
            for(var F, C = I.length; C--;)("string" != typeof (F = I.shift()) || Array.isArray(F) && "string" != typeof F[0]) && (k = !1);
            P = k;
        }
        if (!1 === P) throw new Error('Type of text must be string or Array. "' + e + '" is not recognized.');
        "string" == typeof e && (e = e.match(/[\r?\n]/) ? e.split(/\r\n|\r|\n/g) : [
            e
        ]);
        var j = gt / g.internal.scaleFactor, B = j * (w - 1);
        switch(i.baseline){
            case "bottom":
                n -= B;
                break;
            case "top":
                n += j - B;
                break;
            case "hanging":
                n += j - 2 * B;
                break;
            case "middle":
                n += j / 2 - B;
        }
        if ((l = i.maxWidth || 0) > 0 && ("string" == typeof e ? e = g.splitTextToSize(e, l) : "[object Array]" === Object.prototype.toString.call(e) && (e = e.reduce(function(t, e) {
            return t.concat(g.splitTextToSize(e, l));
        }, []))), o = {
            text: e,
            x: r,
            y: n,
            options: i,
            mutex: {
                pdfEscape: Ce,
                activeFontKey: St,
                fonts: Ft,
                activeFontSize: gt
            }
        }, Tt.publish("preProcessText", o), e = o.text, c = (i = o.options).angle, p instanceof Vt == !1 && c && "number" == typeof c) {
            c *= Math.PI / 180, 0 === i.rotationDirection && (c = -c), S === x.ADVANCED && (c = -c);
            var M = Math.cos(c), E = Math.sin(c);
            p = new Vt(M, E, -E, M, 0, 0);
        } else c && c instanceof Vt && (p = c);
        S !== x.ADVANCED || p || (p = Yt), void 0 !== (h = i.charSpace || _r) && (v += O(U(h)) + " Tc\n", this.setCharSpace(this.getCharSpace() || 0)), void 0 !== (d = i.horizontalScale) && (v += O(100 * d) + " Tz\n");
        i.lang;
        var D = -1, R = void 0 !== i.renderingMode ? i.renderingMode : i.stroke, T = g.internal.getCurrentPageInfo().pageContext;
        switch(R){
            case 0:
            case !1:
            case "fill":
                D = 0;
                break;
            case 1:
            case !0:
            case "stroke":
                D = 1;
                break;
            case 2:
            case "fillThenStroke":
                D = 2;
                break;
            case 3:
            case "invisible":
                D = 3;
                break;
            case 4:
            case "fillAndAddForClipping":
                D = 4;
                break;
            case 5:
            case "strokeAndAddPathForClipping":
                D = 5;
                break;
            case 6:
            case "fillThenStrokeAndAddToPathForClipping":
                D = 6;
                break;
            case 7:
            case "addToPathForClipping":
                D = 7;
        }
        var z = void 0 !== T.usedRenderingMode ? T.usedRenderingMode : -1;
        -1 !== D ? v += D + " Tr\n" : -1 !== z && (v += "0 Tr\n"), -1 !== D && (T.usedRenderingMode = D), u = i.align || "left";
        var H, W = gt * w, V = g.internal.pageSize.getWidth(), G = Ft[St];
        h = i.charSpace || _r, l = i.maxWidth || 0, f = Object.assign({
            autoencode: !0,
            noBOM: !0
        }, i.flags);
        var Y = [];
        if ("[object Array]" === Object.prototype.toString.call(e)) {
            var J;
            s = A(e), "left" !== u && (H = s.map(function(t) {
                return g.getStringUnitWidth(t, {
                    font: G,
                    charSpace: h,
                    fontSize: gt,
                    doKerning: !1
                }) * gt / N;
            }));
            var X, K = 0;
            if ("right" === u) {
                r -= H[0], e = [], C = s.length;
                for(var Z = 0; Z < C; Z++)0 === Z ? (X = br(r), J = yr(n)) : (X = U(K - H[Z]), J = -W), e.push([
                    s[Z],
                    X,
                    J
                ]), K = H[Z];
            } else if ("center" === u) {
                r -= H[0] / 2, e = [], C = s.length;
                for(var $ = 0; $ < C; $++)0 === $ ? (X = br(r), J = yr(n)) : (X = U((K - H[$]) / 2), J = -W), e.push([
                    s[$],
                    X,
                    J
                ]), K = H[$];
            } else if ("left" === u) {
                e = [], C = s.length;
                for(var Q = 0; Q < C; Q++)e.push(s[Q]);
            } else {
                if ("justify" !== u) throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');
                e = [], C = s.length, l = 0 !== l ? l : V;
                for(var tt = 0; tt < C; tt++)J = 0 === tt ? yr(n) : -W, X = 0 === tt ? br(r) : 0, tt < C - 1 ? Y.push(O(U((l - H[tt]) / (s[tt].split(" ").length - 1)))) : Y.push(0), e.push([
                    s[tt],
                    X,
                    J
                ]);
            }
        }
        var et = "boolean" == typeof i.R2L ? i.R2L : bt;
        !0 === et && (e = _(e, function(t, e, r) {
            return [
                t.split("").reverse().join(""),
                e,
                r
            ];
        })), o = {
            text: e,
            x: r,
            y: n,
            options: i,
            mutex: {
                pdfEscape: Ce,
                activeFontKey: St,
                fonts: Ft,
                activeFontSize: gt
            }
        }, Tt.publish("postProcessText", o), e = o.text, y = o.mutex.isHex || !1;
        var rt = Ft[St].encoding;
        "WinAnsiEncoding" !== rt && "StandardEncoding" !== rt || (e = _(e, function(t, e, r) {
            return [
                L(t),
                e,
                r
            ];
        })), s = A(e), e = [];
        for(var nt, it, at, ot = 0, st = 1, ct = Array.isArray(s[0]) ? st : ot, ut = "", ht = function(t, e, r) {
            var n = "";
            return r instanceof Vt ? (r = "number" == typeof i.angle ? Gt(r, new Vt(1, 0, 0, 1, t, e)) : Gt(new Vt(1, 0, 0, 1, t, e), r), S === x.ADVANCED && (r = Gt(new Vt(1, 0, 0, -1, 0, 0), r)), n = r.join(" ") + " Tm\n") : n = O(t) + " " + O(e) + " Td\n", n;
        }, ft = 0; ft < s.length; ft++){
            switch(ut = "", ct){
                case st:
                    at = (y ? "<" : "(") + s[ft][0] + (y ? ">" : ")"), nt = parseFloat(s[ft][1]), it = parseFloat(s[ft][2]);
                    break;
                case ot:
                    at = (y ? "<" : "(") + s[ft] + (y ? ">" : ")"), nt = br(r), it = yr(n);
            }
            void 0 !== Y && void 0 !== Y[ft] && (ut = Y[ft] + " Tw\n"), 0 === ft ? e.push(ut + ht(nt, it, p) + at) : ct === ot ? e.push(ut + at) : ct === st && e.push(ut + ht(nt, it, p) + at);
        }
        e = ct === ot ? e.join(" Tj\nT* ") : e.join(" Tj\n"), e += " Tj\n";
        var dt = "BT\n/";
        return dt += St + " " + gt + " Tf\n", dt += O(gt * w) + " TL\n", dt += xr + "\n", dt += v, dt += e, lt(dt += "ET"), b[St] = !0, g;
    };
    var $e = y.__private__.clip = y.clip = function(t) {
        return lt("evenodd" === t ? "W*" : "W"), this;
    };
    y.clipEvenOdd = function() {
        return $e("evenodd");
    }, y.__private__.discardPath = y.discardPath = function() {
        return lt("n"), this;
    };
    var Qe = y.__private__.isValidStyle = function(t) {
        var e = !1;
        return -1 !== [
            void 0,
            null,
            "S",
            "D",
            "F",
            "DF",
            "FD",
            "f",
            "f*",
            "B",
            "B*",
            "n"
        ].indexOf(t) && (e = !0), e;
    };
    y.__private__.setDefaultPathOperation = y.setDefaultPathOperation = function(t) {
        return Qe(t) && (g = t), this;
    };
    var tr = y.__private__.getStyle = y.getStyle = function(t) {
        var e = g;
        switch(t){
            case "D":
            case "S":
                e = "S";
                break;
            case "F":
                e = "f";
                break;
            case "FD":
            case "DF":
                e = "B";
                break;
            case "f":
            case "f*":
            case "B":
            case "B*":
                e = t;
        }
        return e;
    }, er = y.close = function() {
        return lt("h"), this;
    };
    y.stroke = function() {
        return lt("S"), this;
    }, y.fill = function(t) {
        return rr("f", t), this;
    }, y.fillEvenOdd = function(t) {
        return rr("f*", t), this;
    }, y.fillStroke = function(t) {
        return rr("B", t), this;
    }, y.fillStrokeEvenOdd = function(t) {
        return rr("B*", t), this;
    };
    var rr = function(e, r) {
        "object" === (0, _typeofDefault.default)(r) ? ar(r, e) : lt(e);
    }, nr = function(t) {
        null === t || S === x.ADVANCED && void 0 === t || (t = tr(t), lt(t));
    };
    function ir(t, e, r, n, i) {
        var a = new M(e || this.boundingBox, r || this.xStep, n || this.yStep, this.gState, i || this.matrix);
        a.stream = this.stream;
        var o = t + "$$" + this.cloneIndex++ + "$$";
        return Jt(o, a), a;
    }
    var ar = function(t, e) {
        var r = Bt[t.key], n = Ot[r];
        if (n instanceof B) lt("q"), lt(or(e)), n.gState && y.setGState(n.gState), lt(t.matrix.toString() + " cm"), lt("/" + r + " sh"), lt("Q");
        else if (n instanceof M) {
            var i = new Vt(1, 0, 0, -1, 0, Rr());
            t.matrix && (i = i.multiply(t.matrix || Yt), r = ir.call(n, t.key, t.boundingBox, t.xStep, t.yStep, i).id), lt("q"), lt("/Pattern cs"), lt("/" + r + " scn"), n.gState && y.setGState(n.gState), lt(e), lt("Q");
        }
    }, or = function(t) {
        switch(t){
            case "f":
            case "F":
                return "W n";
            case "f*":
                return "W* n";
            case "B":
                return "W S";
            case "B*":
                return "W* S";
            case "S":
                return "W S";
            case "n":
                return "W n";
        }
    }, sr = y.moveTo = function(t, e) {
        return lt(O(U(t)) + " " + O(H(e)) + " m"), this;
    }, cr = y.lineTo = function(t, e) {
        return lt(O(U(t)) + " " + O(H(e)) + " l"), this;
    }, ur = y.curveTo = function(t, e, r, n, i, a) {
        return lt([
            O(U(t)),
            O(H(e)),
            O(U(r)),
            O(H(n)),
            O(U(i)),
            O(H(a)),
            "c"
        ].join(" ")), this;
    };
    y.__private__.line = y.line = function(t, e, r, n, i) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i)) throw new Error("Invalid arguments passed to jsPDF.line");
        return S === x.COMPAT ? this.lines([
            [
                r - t,
                n - e
            ]
        ], t, e, [
            1,
            1
        ], i || "S") : this.lines([
            [
                r - t,
                n - e
            ]
        ], t, e, [
            1,
            1
        ]).stroke();
    }, y.__private__.lines = y.lines = function(t, e, r, n, i, a) {
        var o, s, c, u, h, l, f, d, p, g, m, v;
        if ("number" == typeof t && (v = r, r = e, e = t, t = v), n = n || [
            1,
            1
        ], a = a || !1, isNaN(e) || isNaN(r) || !Array.isArray(t) || !Array.isArray(n) || !Qe(i) || "boolean" != typeof a) throw new Error("Invalid arguments passed to jsPDF.lines");
        for(sr(e, r), o = n[0], s = n[1], u = t.length, g = e, m = r, c = 0; c < u; c++)2 === (h = t[c]).length ? (g = h[0] * o + g, m = h[1] * s + m, cr(g, m)) : (l = h[0] * o + g, f = h[1] * s + m, d = h[2] * o + g, p = h[3] * s + m, g = h[4] * o + g, m = h[5] * s + m, ur(l, f, d, p, g, m));
        return a && er(), nr(i), this;
    }, y.path = function(t) {
        for(var e = 0; e < t.length; e++){
            var r = t[e], n = r.c;
            switch(r.op){
                case "m":
                    sr(n[0], n[1]);
                    break;
                case "l":
                    cr(n[0], n[1]);
                    break;
                case "c":
                    ur.apply(this, n);
                    break;
                case "h":
                    er();
            }
        }
        return this;
    }, y.__private__.rect = y.rect = function(t, e, r, n, i) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i)) throw new Error("Invalid arguments passed to jsPDF.rect");
        return S === x.COMPAT && (n = -n), lt([
            O(U(t)),
            O(H(e)),
            O(U(r)),
            O(U(n)),
            "re"
        ].join(" ")), nr(i), this;
    }, y.__private__.triangle = y.triangle = function(t, e, r, n, i, a, o) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(a) || !Qe(o)) throw new Error("Invalid arguments passed to jsPDF.triangle");
        return this.lines([
            [
                r - t,
                n - e
            ],
            [
                i - r,
                a - n
            ],
            [
                t - i,
                e - a
            ]
        ], t, e, [
            1,
            1
        ], o, !0), this;
    }, y.__private__.roundedRect = y.roundedRect = function(t, e, r, n, i, a, o) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(a) || !Qe(o)) throw new Error("Invalid arguments passed to jsPDF.roundedRect");
        var s = 4 / 3 * (Math.SQRT2 - 1);
        return i = Math.min(i, .5 * r), a = Math.min(a, .5 * n), this.lines([
            [
                r - 2 * i,
                0
            ],
            [
                i * s,
                0,
                i,
                a - a * s,
                i,
                a
            ],
            [
                0,
                n - 2 * a
            ],
            [
                0,
                a * s,
                -i * s,
                a,
                -i,
                a
            ],
            [
                2 * i - r,
                0
            ],
            [
                -i * s,
                0,
                -i,
                -a * s,
                -i,
                -a
            ],
            [
                0,
                2 * a - n
            ],
            [
                0,
                -a * s,
                i * s,
                -a,
                i,
                -a
            ]
        ], t + i, e, [
            1,
            1
        ], o, !0), this;
    }, y.__private__.ellipse = y.ellipse = function(t, e, r, n, i) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i)) throw new Error("Invalid arguments passed to jsPDF.ellipse");
        var a = 4 / 3 * (Math.SQRT2 - 1) * r, o = 4 / 3 * (Math.SQRT2 - 1) * n;
        return sr(t + r, e), ur(t + r, e - o, t + a, e - n, t, e - n), ur(t - a, e - n, t - r, e - o, t - r, e), ur(t - r, e + o, t - a, e + n, t, e + n), ur(t + a, e + n, t + r, e + o, t + r, e), nr(i), this;
    }, y.__private__.circle = y.circle = function(t, e, r, n) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || !Qe(n)) throw new Error("Invalid arguments passed to jsPDF.circle");
        return this.ellipse(t, e, r, r, n);
    }, y.setFont = function(t, e, r) {
        return r && (e = k(e, r)), St = qe(t, e, {
            disableWarning: !1
        }), this;
    };
    var hr = y.__private__.getFont = y.getFont = function() {
        return Ft[qe.apply(y, arguments)];
    };
    y.__private__.getFontList = y.getFontList = function() {
        var t, e, r = {};
        for(t in Ct)if (Ct.hasOwnProperty(t)) for(e in r[t] = [], Ct[t])Ct[t].hasOwnProperty(e) && r[t].push(e);
        return r;
    }, y.addFont = function(t, e, r, n, i) {
        var a = [
            "StandardEncoding",
            "MacRomanEncoding",
            "Identity-H",
            "WinAnsiEncoding"
        ];
        return arguments[3] && -1 !== a.indexOf(arguments[3]) ? i = arguments[3] : arguments[3] && -1 == a.indexOf(arguments[3]) && (r = k(r, n)), i = i || "Identity-H", Pe.call(this, t, e, r, i);
    };
    var lr, fr = e.lineWidth || .200025, dr = y.__private__.getLineWidth = y.getLineWidth = function() {
        return fr;
    }, pr = y.__private__.setLineWidth = y.setLineWidth = function(t) {
        return fr = t, lt(O(U(t)) + " w"), this;
    };
    y.__private__.setLineDash = E.API.setLineDash = E.API.setLineDashPattern = function(t, e) {
        if (t = t || [], e = e || 0, isNaN(e) || !Array.isArray(t)) throw new Error("Invalid arguments passed to jsPDF.setLineDash");
        return t = t.map(function(t) {
            return O(U(t));
        }).join(" "), e = O(U(e)), lt("[" + t + "] " + e + " d"), this;
    };
    var gr = y.__private__.getLineHeight = y.getLineHeight = function() {
        return gt * lr;
    };
    y.__private__.getLineHeight = y.getLineHeight = function() {
        return gt * lr;
    };
    var mr = y.__private__.setLineHeightFactor = y.setLineHeightFactor = function(t) {
        return "number" == typeof (t = t || 1.15) && (lr = t), this;
    }, vr = y.__private__.getLineHeightFactor = y.getLineHeightFactor = function() {
        return lr;
    };
    mr(e.lineHeight);
    var br = y.__private__.getHorizontalCoordinate = function(t) {
        return U(t);
    }, yr = y.__private__.getVerticalCoordinate = function(t) {
        return S === x.ADVANCED ? t : Rt[$].mediaBox.topRightY - Rt[$].mediaBox.bottomLeftY - U(t);
    }, wr = y.__private__.getHorizontalCoordinateString = y.getHorizontalCoordinateString = function(t) {
        return O(br(t));
    }, Nr = y.__private__.getVerticalCoordinateString = y.getVerticalCoordinateString = function(t) {
        return O(yr(t));
    }, Lr = e.strokeColor || "0 G";
    y.__private__.getStrokeColor = y.getDrawColor = function() {
        return ee(Lr);
    }, y.__private__.setStrokeColor = y.setDrawColor = function(t, e, r, n) {
        return Lr = re({
            ch1: t,
            ch2: e,
            ch3: r,
            ch4: n,
            pdfColorType: "draw",
            precision: 2
        }), lt(Lr), this;
    };
    var Ar = e.fillColor || "0 g";
    y.__private__.getFillColor = y.getFillColor = function() {
        return ee(Ar);
    }, y.__private__.setFillColor = y.setFillColor = function(t, e, r, n) {
        return Ar = re({
            ch1: t,
            ch2: e,
            ch3: r,
            ch4: n,
            pdfColorType: "fill",
            precision: 2
        }), lt(Ar), this;
    };
    var xr = e.textColor || "0 g", Sr = y.__private__.getTextColor = y.getTextColor = function() {
        return ee(xr);
    };
    y.__private__.setTextColor = y.setTextColor = function(t, e, r, n) {
        return xr = re({
            ch1: t,
            ch2: e,
            ch3: r,
            ch4: n,
            pdfColorType: "text",
            precision: 3
        }), this;
    };
    var _r = e.charSpace, Pr = y.__private__.getCharSpace = y.getCharSpace = function() {
        return parseFloat(_r || 0);
    };
    y.__private__.setCharSpace = y.setCharSpace = function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setCharSpace");
        return _r = t, this;
    };
    var kr = 0;
    y.CapJoinStyles = {
        0: 0,
        butt: 0,
        but: 0,
        miter: 0,
        1: 1,
        round: 1,
        rounded: 1,
        circle: 1,
        2: 2,
        projecting: 2,
        project: 2,
        square: 2,
        bevel: 2
    }, y.__private__.setLineCap = y.setLineCap = function(t) {
        var e = y.CapJoinStyles[t];
        if (void 0 === e) throw new Error("Line cap style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
        return kr = e, lt(e + " J"), this;
    };
    var Ir = 0;
    y.__private__.setLineJoin = y.setLineJoin = function(t) {
        var e = y.CapJoinStyles[t];
        if (void 0 === e) throw new Error("Line join style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
        return Ir = e, lt(e + " j"), this;
    }, y.__private__.setLineMiterLimit = y.__private__.setMiterLimit = y.setLineMiterLimit = y.setMiterLimit = function(t) {
        if (t = t || 0, isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setLineMiterLimit");
        return lt(O(U(t)) + " M"), this;
    }, y.GState = j, y.setGState = function(t) {
        (t = "string" == typeof t ? Mt[Et[t]] : Fr(null, t)).equals(qt) || (lt("/" + t.id + " gs"), qt = t);
    };
    var Fr = function(t, e) {
        if (!t || !Et[t]) {
            var r = !1;
            for(var n in Mt)if (Mt.hasOwnProperty(n) && Mt[n].equals(e)) {
                r = !0;
                break;
            }
            if (r) e = Mt[n];
            else {
                var i = "GS" + (Object.keys(Mt).length + 1).toString(10);
                Mt[i] = e, e.id = i;
            }
            return t && (Et[t] = e.id), Tt.publish("addGState", e), e;
        }
    };
    y.addGState = function(t, e) {
        return Fr(t, e), this;
    }, y.saveGraphicsState = function() {
        return lt("q"), jt.push({
            key: St,
            size: gt,
            color: xr
        }), this;
    }, y.restoreGraphicsState = function() {
        lt("Q");
        var t = jt.pop();
        return St = t.key, gt = t.size, xr = t.color, qt = null, this;
    }, y.setCurrentTransformationMatrix = function(t) {
        return lt(t.toString() + " cm"), this;
    }, y.comment = function(t) {
        return lt("#" + t), this;
    };
    var Cr = function(t, e) {
        var r = t || 0;
        Object.defineProperty(this, "x", {
            enumerable: !0,
            get: function() {
                return r;
            },
            set: function(t) {
                isNaN(t) || (r = parseFloat(t));
            }
        });
        var n = e || 0;
        Object.defineProperty(this, "y", {
            enumerable: !0,
            get: function() {
                return n;
            },
            set: function(t) {
                isNaN(t) || (n = parseFloat(t));
            }
        });
        var i = "pt";
        return Object.defineProperty(this, "type", {
            enumerable: !0,
            get: function() {
                return i;
            },
            set: function(t) {
                i = t.toString();
            }
        }), this;
    }, jr = function(t, e, r, n) {
        Cr.call(this, t, e), this.type = "rect";
        var i = r || 0;
        Object.defineProperty(this, "w", {
            enumerable: !0,
            get: function() {
                return i;
            },
            set: function(t) {
                isNaN(t) || (i = parseFloat(t));
            }
        });
        var a = n || 0;
        return Object.defineProperty(this, "h", {
            enumerable: !0,
            get: function() {
                return a;
            },
            set: function(t) {
                isNaN(t) || (a = parseFloat(t));
            }
        }), this;
    }, Or = function() {
        this.page = Dt, this.currentPage = $, this.pages = ot.slice(0), this.pagesContext = Rt.slice(0), this.x = Pt, this.y = kt, this.matrix = It, this.width = qr($), this.height = Rr($), this.outputDestination = ct, this.id = "", this.objectNumber = -1;
    };
    Or.prototype.restore = function() {
        Dt = this.page, $ = this.currentPage, Rt = this.pagesContext, ot = this.pages, Pt = this.x, kt = this.y, It = this.matrix, Dr($, this.width), Tr($, this.height), ct = this.outputDestination;
    };
    var Br = function(t, e, r, n, i) {
        Wt.push(new Or), Dt = $ = 0, ot = [], Pt = t, kt = e, It = i, je([
            r,
            n
        ]);
    }, Mr = function(t) {
        if (Ht[t]) Wt.pop().restore();
        else {
            var e = new Or, r = "Xo" + (Object.keys(zt).length + 1).toString(10);
            e.id = r, Ht[t] = r, zt[r] = e, Tt.publish("addFormObject", e), Wt.pop().restore();
        }
    };
    for(var Er in y.beginFormObject = function(t, e, r, n, i) {
        return Br(t, e, r, n, i), this;
    }, y.endFormObject = function(t) {
        return Mr(t), this;
    }, y.doFormObject = function(t, e) {
        var r = zt[Ht[t]];
        return lt("q"), lt(e.toString() + " cm"), lt("/" + r.id + " Do"), lt("Q"), this;
    }, y.getFormObject = function(t) {
        var e = zt[Ht[t]];
        return {
            x: e.x,
            y: e.y,
            width: e.width,
            height: e.height,
            matrix: e.matrix
        };
    }, y.save = function(t, e) {
        return t = t || "generated.pdf", (e = e || {}).returnPromise = e.returnPromise || !1, !1 === e.returnPromise ? (l(We(He()), t), "function" == typeof l.unload && n.setTimeout && setTimeout(l.unload, 911), this) : new Promise(function(e, r) {
            try {
                var i = l(We(He()), t);
                "function" == typeof l.unload && n.setTimeout && setTimeout(l.unload, 911), e(i);
            } catch (t) {
                r(t.message);
            }
        });
    }, E.API)E.API.hasOwnProperty(Er) && ("events" === Er && E.API.events.length ? function(t, e) {
        var r, n, i;
        for(i = e.length - 1; -1 !== i; i--)r = e[i][0], n = e[i][1], t.subscribe.apply(t, [
            r
        ].concat("function" == typeof n ? [
            n
        ] : n));
    }(Tt, E.API.events) : y[Er] = E.API[Er]);
    var qr = y.getPageWidth = function(t) {
        return (Rt[t = t || $].mediaBox.topRightX - Rt[t].mediaBox.bottomLeftX) / _t;
    }, Dr = y.setPageWidth = function(t, e) {
        Rt[t].mediaBox.topRightX = e * _t + Rt[t].mediaBox.bottomLeftX;
    }, Rr = y.getPageHeight = function(t) {
        return (Rt[t = t || $].mediaBox.topRightY - Rt[t].mediaBox.bottomLeftY) / _t;
    }, Tr = y.setPageHeight = function(t, e) {
        Rt[t].mediaBox.topRightY = e * _t + Rt[t].mediaBox.bottomLeftY;
    };
    return y.internal = {
        pdfEscape: Ce,
        getStyle: tr,
        getFont: hr,
        getFontSize: vt,
        getCharSpace: Pr,
        getTextColor: Sr,
        getLineHeight: gr,
        getLineHeightFactor: vr,
        getLineWidth: dr,
        write: ft,
        getHorizontalCoordinate: br,
        getVerticalCoordinate: yr,
        getCoordinateString: wr,
        getVerticalCoordinateString: Nr,
        collections: {},
        newObject: Xt,
        newAdditionalObject: $t,
        newObjectDeferred: Kt,
        newObjectDeferredBegin: Zt,
        getFilters: ne,
        putStream: ie,
        events: Tt,
        scaleFactor: _t,
        pageSize: {
            getWidth: function() {
                return qr($);
            },
            setWidth: function(t) {
                Dr($, t);
            },
            getHeight: function() {
                return Rr($);
            },
            setHeight: function(t) {
                Tr($, t);
            }
        },
        encryptionOptions: m,
        encryption: Ye,
        getEncryptor: Je,
        output: Ve,
        getNumberOfPages: Ee,
        pages: ot,
        out: lt,
        f2: R,
        f3: T,
        getPageInfo: Xe,
        getPageInfoByObjId: Ke,
        getCurrentPageInfo: Ze,
        getPDFVersion: N,
        Point: Cr,
        Rectangle: jr,
        Matrix: Vt,
        hasHotfix: Ge
    }, Object.defineProperty(y.internal.pageSize, "width", {
        get: function() {
            return qr($);
        },
        set: function(t) {
            Dr($, t);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(y.internal.pageSize, "height", {
        get: function() {
            return Rr($);
        },
        set: function(t) {
            Tr($, t);
        },
        enumerable: !0,
        configurable: !0
    }), ke.call(y, pt), St = "F1", Oe(s, i), Tt.publish("initialized"), y;
}
I.prototype.lsbFirstWord = function(t) {
    return String.fromCharCode(t >> 0 & 255, t >> 8 & 255, t >> 16 & 255, t >> 24 & 255);
}, I.prototype.toHexString = function(t) {
    return t.split("").map(function(t) {
        return ("0" + (255 & t.charCodeAt(0)).toString(16)).slice(-2);
    }).join("");
}, I.prototype.hexToBytes = function(t) {
    for(var e = [], r = 0; r < t.length; r += 2)e.push(String.fromCharCode(parseInt(t.substr(r, 2), 16)));
    return e.join("");
}, I.prototype.processOwnerPassword = function(t, e) {
    return P(x(e).substr(0, 5), t);
}, I.prototype.encryptor = function(t, e) {
    var r = x(this.encryptionKey + String.fromCharCode(255 & t, t >> 8 & 255, t >> 16 & 255, 255 & e, e >> 8 & 255)).substr(0, 10);
    return function(t) {
        return P(r, t);
    };
}, j.prototype.equals = function(e) {
    var r, n = "id,objectNumber,equals";
    if (!e || (0, _typeofDefault.default)(e) !== (0, _typeofDefault.default)(this)) return !1;
    var i = 0;
    for(r in this)if (!(n.indexOf(r) >= 0)) {
        if (this.hasOwnProperty(r) && !e.hasOwnProperty(r)) return !1;
        if (this[r] !== e[r]) return !1;
        i++;
    }
    for(r in e)e.hasOwnProperty(r) && n.indexOf(r) < 0 && i--;
    return 0 === i;
}, E.API = {
    events: []
}, E.version = "2.5.1";
var q = E.API, D = 1, R = function(t) {
    return t.replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
}, T = function(t) {
    return t.replace(/\\\\/g, "\\").replace(/\\\(/g, "(").replace(/\\\)/g, ")");
}, U = function(t) {
    return t.toFixed(2);
}, z = function(t) {
    return t.toFixed(5);
};
q.__acroform__ = {};
var H = function(t, e) {
    t.prototype = Object.create(e.prototype), t.prototype.constructor = t;
}, W = function(t) {
    return t * D;
}, V = function(t) {
    var e = new ut, r = At.internal.getHeight(t) || 0, n = At.internal.getWidth(t) || 0;
    return e.BBox = [
        0,
        0,
        Number(U(n)),
        Number(U(r))
    ], e;
}, G = q.__acroform__.setBit = function(t, e) {
    if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");
    return t |= 1 << e;
}, Y = q.__acroform__.clearBit = function(t, e) {
    if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");
    return t &= ~(1 << e);
}, J = q.__acroform__.getBit = function(t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");
    return 0 == (t & 1 << e) ? 0 : 1;
}, X = q.__acroform__.getBitForPdf = function(t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");
    return J(t, e - 1);
}, K = q.__acroform__.setBitForPdf = function(t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");
    return G(t, e - 1);
}, Z = q.__acroform__.clearBitForPdf = function(t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");
    return Y(t, e - 1);
}, $ = q.__acroform__.calculateCoordinates = function(t, e) {
    var r = e.internal.getHorizontalCoordinate, n = e.internal.getVerticalCoordinate, i = t[0], a = t[1], o = t[2], s = t[3], c = {};
    return c.lowerLeft_X = r(i) || 0, c.lowerLeft_Y = n(a + s) || 0, c.upperRight_X = r(i + o) || 0, c.upperRight_Y = n(a) || 0, [
        Number(U(c.lowerLeft_X)),
        Number(U(c.lowerLeft_Y)),
        Number(U(c.upperRight_X)),
        Number(U(c.upperRight_Y))
    ];
}, Q = function(t) {
    if (t.appearanceStreamContent) return t.appearanceStreamContent;
    if (t.V || t.DV) {
        var e = [], r = t._V || t.DV, n = tt(t, r), i = t.scope.internal.getFont(t.fontName, t.fontStyle).id;
        e.push("/Tx BMC"), e.push("q"), e.push("BT"), e.push(t.scope.__private__.encodeColorString(t.color)), e.push("/" + i + " " + U(n.fontSize) + " Tf"), e.push("1 0 0 1 0 0 Tm"), e.push(n.text), e.push("ET"), e.push("Q"), e.push("EMC");
        var a = V(t);
        return a.scope = t.scope, a.stream = e.join("\n"), a;
    }
}, tt = function(t, e) {
    var r = 0 === t.fontSize ? t.maxFontSize : t.fontSize, n = {
        text: "",
        fontSize: ""
    }, i = (e = ")" == (e = "(" == e.substr(0, 1) ? e.substr(1) : e).substr(e.length - 1) ? e.substr(0, e.length - 1) : e).split(" ");
    i = t.multiline ? i.map(function(t) {
        return t.split("\n");
    }) : i.map(function(t) {
        return [
            t
        ];
    });
    var a = r, o = At.internal.getHeight(t) || 0;
    o = o < 0 ? -o : o;
    var s = At.internal.getWidth(t) || 0;
    s = s < 0 ? -s : s;
    var c = function(e, r, n) {
        if (e + 1 < i.length) {
            var a = r + " " + i[e + 1][0];
            return et(a, t, n).width <= s - 4;
        }
        return !1;
    };
    a++;
    t: for(; a > 0;){
        e = "", a--;
        var u, h, l = et("3", t, a).height, f = t.multiline ? o - a : (o - l) / 2, d = f += 2, p = 0, g = 0, m = 0;
        if (a <= 0) {
            e = "(...) Tj\n", e += "% Width of Text: " + et(e, t, a = 12).width + ", FieldWidth:" + s + "\n";
            break;
        }
        for(var v = "", b = 0, y = 0; y < i.length; y++)if (i.hasOwnProperty(y)) {
            var w = !1;
            if (1 !== i[y].length && m !== i[y].length - 1) {
                if ((l + 2) * (b + 2) + 2 > o) continue t;
                v += i[y][m], w = !0, g = y, y--;
            } else {
                v = " " == (v += i[y][m] + " ").substr(v.length - 1) ? v.substr(0, v.length - 1) : v;
                var N = parseInt(y), L = c(N, v, a), A = y >= i.length - 1;
                if (L && !A) {
                    v += " ", m = 0;
                    continue;
                }
                if (L || A) {
                    if (A) g = N;
                    else if (t.multiline && (l + 2) * (b + 2) + 2 > o) continue t;
                } else {
                    if (!t.multiline) continue t;
                    if ((l + 2) * (b + 2) + 2 > o) continue t;
                    g = N;
                }
            }
            for(var x = "", S = p; S <= g; S++){
                var _ = i[S];
                if (t.multiline) {
                    if (S === g) {
                        x += _[m] + " ", m = (m + 1) % _.length;
                        continue;
                    }
                    if (S === p) {
                        x += _[_.length - 1] + " ";
                        continue;
                    }
                }
                x += _[0] + " ";
            }
            switch(x = " " == x.substr(x.length - 1) ? x.substr(0, x.length - 1) : x, h = et(x, t, a).width, t.textAlign){
                case "right":
                    u = s - h - 2;
                    break;
                case "center":
                    u = (s - h) / 2;
                    break;
                case "left":
                default:
                    u = 2;
            }
            e += U(u) + " " + U(d) + " Td\n", e += "(" + R(x) + ") Tj\n", e += -U(u) + " 0 Td\n", d = -(a + 2), h = 0, p = w ? g : g + 1, b++, v = "";
        }
        break;
    }
    return n.text = e, n.fontSize = a, n;
}, et = function(t, e, r) {
    var n = e.scope.internal.getFont(e.fontName, e.fontStyle), i = e.scope.getStringUnitWidth(t, {
        font: n,
        fontSize: parseFloat(r),
        charSpace: 0
    }) * parseFloat(r);
    return {
        height: e.scope.getStringUnitWidth("3", {
            font: n,
            fontSize: parseFloat(r),
            charSpace: 0
        }) * parseFloat(r) * 1.5,
        width: i
    };
}, rt = {
    fields: [],
    xForms: [],
    acroFormDictionaryRoot: null,
    printedOut: !1,
    internal: null,
    isInitialized: !1
}, nt = function(t, e) {
    var r = {
        type: "reference",
        object: t
    };
    void 0 === e.internal.getPageInfo(t.page).pageContext.annotations.find(function(t) {
        return t.type === r.type && t.object === r.object;
    }) && e.internal.getPageInfo(t.page).pageContext.annotations.push(r);
}, it = function(e, r) {
    for(var n in e)if (e.hasOwnProperty(n)) {
        var i = n, a = e[n];
        r.internal.newObjectDeferredBegin(a.objId, !0), "object" === (0, _typeofDefault.default)(a) && "function" == typeof a.putStream && a.putStream(), delete e[i];
    }
}, at = function(e, r) {
    if (r.scope = e, void 0 !== e.internal && (void 0 === e.internal.acroformPlugin || !1 === e.internal.acroformPlugin.isInitialized)) {
        if (lt.FieldNum = 0, e.internal.acroformPlugin = JSON.parse(JSON.stringify(rt)), e.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("Exception while creating AcroformDictionary");
        D = e.internal.scaleFactor, e.internal.acroformPlugin.acroFormDictionaryRoot = new ht, e.internal.acroformPlugin.acroFormDictionaryRoot.scope = e, e.internal.acroformPlugin.acroFormDictionaryRoot._eventID = e.internal.events.subscribe("postPutResources", function() {
            !function(t) {
                t.internal.events.unsubscribe(t.internal.acroformPlugin.acroFormDictionaryRoot._eventID), delete t.internal.acroformPlugin.acroFormDictionaryRoot._eventID, t.internal.acroformPlugin.printedOut = !0;
            }(e);
        }), e.internal.events.subscribe("buildDocument", function() {
            !function(t) {
                t.internal.acroformPlugin.acroFormDictionaryRoot.objId = void 0;
                var e = t.internal.acroformPlugin.acroFormDictionaryRoot.Fields;
                for(var r in e)if (e.hasOwnProperty(r)) {
                    var n = e[r];
                    n.objId = void 0, n.hasAnnotation && nt(n, t);
                }
            }(e);
        }), e.internal.events.subscribe("putCatalog", function() {
            !function(t) {
                if (void 0 === t.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("putCatalogCallback: Root missing.");
                t.internal.write("/AcroForm " + t.internal.acroformPlugin.acroFormDictionaryRoot.objId + " 0 R");
            }(e);
        }), e.internal.events.subscribe("postPutPages", function(r) {
            !function(e, r) {
                var n = !e;
                for(var i in e || (r.internal.newObjectDeferredBegin(r.internal.acroformPlugin.acroFormDictionaryRoot.objId, !0), r.internal.acroformPlugin.acroFormDictionaryRoot.putStream()), e = e || r.internal.acroformPlugin.acroFormDictionaryRoot.Kids)if (e.hasOwnProperty(i)) {
                    var a = e[i], o = [], s = a.Rect;
                    if (a.Rect && (a.Rect = $(a.Rect, r)), r.internal.newObjectDeferredBegin(a.objId, !0), a.DA = At.createDefaultAppearanceStream(a), "object" === (0, _typeofDefault.default)(a) && "function" == typeof a.getKeyValueListForStream && (o = a.getKeyValueListForStream()), a.Rect = s, a.hasAppearanceStream && !a.appearanceStreamContent) {
                        var c = Q(a);
                        o.push({
                            key: "AP",
                            value: "<</N " + c + ">>"
                        }), r.internal.acroformPlugin.xForms.push(c);
                    }
                    if (a.appearanceStreamContent) {
                        var u = "";
                        for(var h in a.appearanceStreamContent)if (a.appearanceStreamContent.hasOwnProperty(h)) {
                            var l = a.appearanceStreamContent[h];
                            if (u += "/" + h + " ", u += "<<", Object.keys(l).length >= 1 || Array.isArray(l)) {
                                for(var i in l)if (l.hasOwnProperty(i)) {
                                    var f = l[i];
                                    "function" == typeof f && (f = f.call(r, a)), u += "/" + i + " " + f + " ", r.internal.acroformPlugin.xForms.indexOf(f) >= 0 || r.internal.acroformPlugin.xForms.push(f);
                                }
                            } else "function" == typeof (f = l) && (f = f.call(r, a)), u += "/" + i + " " + f, r.internal.acroformPlugin.xForms.indexOf(f) >= 0 || r.internal.acroformPlugin.xForms.push(f);
                            u += ">>";
                        }
                        o.push({
                            key: "AP",
                            value: "<<\n" + u + ">>"
                        });
                    }
                    r.internal.putStream({
                        additionalKeyValues: o,
                        objectId: a.objId
                    }), r.internal.out("endobj");
                }
                n && it(r.internal.acroformPlugin.xForms, r);
            }(r, e);
        }), e.internal.acroformPlugin.isInitialized = !0;
    }
}, ot = q.__acroform__.arrayToPdfArray = function(e, r, n) {
    var i = function(t) {
        return t;
    };
    if (Array.isArray(e)) {
        for(var a = "[", o = 0; o < e.length; o++)switch(0 !== o && (a += " "), (0, _typeofDefault.default)(e[o])){
            case "boolean":
            case "number":
            case "object":
                a += e[o].toString();
                break;
            case "string":
                "/" !== e[o].substr(0, 1) ? (void 0 !== r && n && (i = n.internal.getEncryptor(r)), a += "(" + R(i(e[o].toString())) + ")") : a += e[o].toString();
        }
        return a += "]";
    }
    throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray");
};
var st = function(t, e, r) {
    var n = function(t) {
        return t;
    };
    return void 0 !== e && r && (n = r.internal.getEncryptor(e)), (t = t || "").toString(), t = "(" + R(n(t)) + ")";
}, ct = function() {
    this._objId = void 0, this._scope = void 0, Object.defineProperty(this, "objId", {
        get: function() {
            if (void 0 === this._objId) {
                if (void 0 === this.scope) return;
                this._objId = this.scope.internal.newObjectDeferred();
            }
            return this._objId;
        },
        set: function(t) {
            this._objId = t;
        }
    }), Object.defineProperty(this, "scope", {
        value: this._scope,
        writable: !0
    });
};
ct.prototype.toString = function() {
    return this.objId + " 0 R";
}, ct.prototype.putStream = function() {
    var t = this.getKeyValueListForStream();
    this.scope.internal.putStream({
        data: this.stream,
        additionalKeyValues: t,
        objectId: this.objId
    }), this.scope.internal.out("endobj");
}, ct.prototype.getKeyValueListForStream = function() {
    var t = [], e = Object.getOwnPropertyNames(this).filter(function(t) {
        return "content" != t && "appearanceStreamContent" != t && "scope" != t && "objId" != t && "_" != t.substring(0, 1);
    });
    for(var r in e)if (!1 === Object.getOwnPropertyDescriptor(this, e[r]).configurable) {
        var n = e[r], i = this[n];
        i && (Array.isArray(i) ? t.push({
            key: n,
            value: ot(i, this.objId, this.scope)
        }) : i instanceof ct ? (i.scope = this.scope, t.push({
            key: n,
            value: i.objId + " 0 R"
        })) : "function" != typeof i && t.push({
            key: n,
            value: i
        }));
    }
    return t;
};
var ut = function() {
    ct.call(this), Object.defineProperty(this, "Type", {
        value: "/XObject",
        configurable: !1,
        writable: !0
    }), Object.defineProperty(this, "Subtype", {
        value: "/Form",
        configurable: !1,
        writable: !0
    }), Object.defineProperty(this, "FormType", {
        value: 1,
        configurable: !1,
        writable: !0
    });
    var t, e = [];
    Object.defineProperty(this, "BBox", {
        configurable: !1,
        get: function() {
            return e;
        },
        set: function(t) {
            e = t;
        }
    }), Object.defineProperty(this, "Resources", {
        value: "2 0 R",
        configurable: !1,
        writable: !0
    }), Object.defineProperty(this, "stream", {
        enumerable: !1,
        configurable: !0,
        set: function(e) {
            t = e.trim();
        },
        get: function() {
            return t || null;
        }
    });
};
H(ut, ct);
var ht = function() {
    ct.call(this);
    var t, e = [];
    Object.defineProperty(this, "Kids", {
        enumerable: !1,
        configurable: !0,
        get: function() {
            return e.length > 0 ? e : void 0;
        }
    }), Object.defineProperty(this, "Fields", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return e;
        }
    }), Object.defineProperty(this, "DA", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            if (t) {
                var e = function(t) {
                    return t;
                };
                return this.scope && (e = this.scope.internal.getEncryptor(this.objId)), "(" + R(e(t)) + ")";
            }
        },
        set: function(e) {
            t = e;
        }
    });
};
H(ht, ct);
var lt = function t() {
    ct.call(this);
    var e = 4;
    Object.defineProperty(this, "F", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return e;
        },
        set: function(t) {
            if (isNaN(t)) throw new Error('Invalid value "' + t + '" for attribute F supplied.');
            e = t;
        }
    }), Object.defineProperty(this, "showWhenPrinted", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(e, 3));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.F = K(e, 3) : this.F = Z(e, 3);
        }
    });
    var r = 0;
    Object.defineProperty(this, "Ff", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return r;
        },
        set: function(t) {
            if (isNaN(t)) throw new Error('Invalid value "' + t + '" for attribute Ff supplied.');
            r = t;
        }
    });
    var n = [];
    Object.defineProperty(this, "Rect", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            if (0 !== n.length) return n;
        },
        set: function(t) {
            n = void 0 !== t ? t : [];
        }
    }), Object.defineProperty(this, "x", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return !n || isNaN(n[0]) ? 0 : n[0];
        },
        set: function(t) {
            n[0] = t;
        }
    }), Object.defineProperty(this, "y", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return !n || isNaN(n[1]) ? 0 : n[1];
        },
        set: function(t) {
            n[1] = t;
        }
    }), Object.defineProperty(this, "width", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return !n || isNaN(n[2]) ? 0 : n[2];
        },
        set: function(t) {
            n[2] = t;
        }
    }), Object.defineProperty(this, "height", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return !n || isNaN(n[3]) ? 0 : n[3];
        },
        set: function(t) {
            n[3] = t;
        }
    });
    var i = "";
    Object.defineProperty(this, "FT", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return i;
        },
        set: function(t) {
            switch(t){
                case "/Btn":
                case "/Tx":
                case "/Ch":
                case "/Sig":
                    i = t;
                    break;
                default:
                    throw new Error('Invalid value "' + t + '" for attribute FT supplied.');
            }
        }
    });
    var a = null;
    Object.defineProperty(this, "T", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            if (!a || a.length < 1) {
                if (this instanceof yt) return;
                a = "FieldObject" + t.FieldNum++;
            }
            var e = function(t) {
                return t;
            };
            return this.scope && (e = this.scope.internal.getEncryptor(this.objId)), "(" + R(e(a)) + ")";
        },
        set: function(t) {
            a = t.toString();
        }
    }), Object.defineProperty(this, "fieldName", {
        configurable: !0,
        enumerable: !0,
        get: function() {
            return a;
        },
        set: function(t) {
            a = t;
        }
    });
    var o = "helvetica";
    Object.defineProperty(this, "fontName", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return o;
        },
        set: function(t) {
            o = t;
        }
    });
    var s = "normal";
    Object.defineProperty(this, "fontStyle", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return s;
        },
        set: function(t) {
            s = t;
        }
    });
    var c = 0;
    Object.defineProperty(this, "fontSize", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return c;
        },
        set: function(t) {
            c = t;
        }
    });
    var u = void 0;
    Object.defineProperty(this, "maxFontSize", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return void 0 === u ? 50 / D : u;
        },
        set: function(t) {
            u = t;
        }
    });
    var h = "black";
    Object.defineProperty(this, "color", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return h;
        },
        set: function(t) {
            h = t;
        }
    });
    var l = "/F1 0 Tf 0 g";
    Object.defineProperty(this, "DA", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            if (!(!l || this instanceof yt || this instanceof Nt)) return st(l, this.objId, this.scope);
        },
        set: function(t) {
            t = t.toString(), l = t;
        }
    });
    var f = null;
    Object.defineProperty(this, "DV", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            if (f) return this instanceof mt == !1 ? st(f, this.objId, this.scope) : f;
        },
        set: function(t) {
            t = t.toString(), f = this instanceof mt == !1 ? "(" === t.substr(0, 1) ? T(t.substr(1, t.length - 2)) : T(t) : t;
        }
    }), Object.defineProperty(this, "defaultValue", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return this instanceof mt == !0 ? T(f.substr(1, f.length - 1)) : f;
        },
        set: function(t) {
            t = t.toString(), f = this instanceof mt == !0 ? "/" + t : t;
        }
    });
    var d = null;
    Object.defineProperty(this, "_V", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            if (d) return d;
        },
        set: function(t) {
            this.V = t;
        }
    }), Object.defineProperty(this, "V", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            if (d) return this instanceof mt == !1 ? st(d, this.objId, this.scope) : d;
        },
        set: function(t) {
            t = t.toString(), d = this instanceof mt == !1 ? "(" === t.substr(0, 1) ? T(t.substr(1, t.length - 2)) : T(t) : t;
        }
    }), Object.defineProperty(this, "value", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return this instanceof mt == !0 ? T(d.substr(1, d.length - 1)) : d;
        },
        set: function(t) {
            t = t.toString(), d = this instanceof mt == !0 ? "/" + t : t;
        }
    }), Object.defineProperty(this, "hasAnnotation", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return this.Rect;
        }
    }), Object.defineProperty(this, "Type", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return this.hasAnnotation ? "/Annot" : null;
        }
    }), Object.defineProperty(this, "Subtype", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return this.hasAnnotation ? "/Widget" : null;
        }
    });
    var p, g = !1;
    Object.defineProperty(this, "hasAppearanceStream", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return g;
        },
        set: function(t) {
            t = Boolean(t), g = t;
        }
    }), Object.defineProperty(this, "page", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            if (p) return p;
        },
        set: function(t) {
            p = t;
        }
    }), Object.defineProperty(this, "readOnly", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 1));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 1) : this.Ff = Z(this.Ff, 1);
        }
    }), Object.defineProperty(this, "required", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 2));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 2) : this.Ff = Z(this.Ff, 2);
        }
    }), Object.defineProperty(this, "noExport", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 3));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 3) : this.Ff = Z(this.Ff, 3);
        }
    });
    var m = null;
    Object.defineProperty(this, "Q", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            if (null !== m) return m;
        },
        set: function(t) {
            if (-1 === [
                0,
                1,
                2
            ].indexOf(t)) throw new Error('Invalid value "' + t + '" for attribute Q supplied.');
            m = t;
        }
    }), Object.defineProperty(this, "textAlign", {
        get: function() {
            var t;
            switch(m){
                case 0:
                default:
                    t = "left";
                    break;
                case 1:
                    t = "center";
                    break;
                case 2:
                    t = "right";
            }
            return t;
        },
        configurable: !0,
        enumerable: !0,
        set: function(t) {
            switch(t){
                case "right":
                case 2:
                    m = 2;
                    break;
                case "center":
                case 1:
                    m = 1;
                    break;
                case "left":
                case 0:
                default:
                    m = 0;
            }
        }
    });
};
H(lt, ct);
var ft = function() {
    lt.call(this), this.FT = "/Ch", this.V = "()", this.fontName = "zapfdingbats";
    var t = 0;
    Object.defineProperty(this, "TI", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return t;
        },
        set: function(e) {
            t = e;
        }
    }), Object.defineProperty(this, "topIndex", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return t;
        },
        set: function(e) {
            t = e;
        }
    });
    var e = [];
    Object.defineProperty(this, "Opt", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return ot(e, this.objId, this.scope);
        },
        set: function(t) {
            var r, n;
            n = [], "string" == typeof (r = t) && (n = function(t, e, r) {
                r || (r = 1);
                for(var n, i = []; n = e.exec(t);)i.push(n[r]);
                return i;
            }(r, /\((.*?)\)/g)), e = n;
        }
    }), this.getOptions = function() {
        return e;
    }, this.setOptions = function(t) {
        e = t, this.sort && e.sort();
    }, this.addOption = function(t) {
        t = (t = t || "").toString(), e.push(t), this.sort && e.sort();
    }, this.removeOption = function(t, r) {
        for(r = r || !1, t = (t = t || "").toString(); -1 !== e.indexOf(t) && (e.splice(e.indexOf(t), 1), !1 !== r););
    }, Object.defineProperty(this, "combo", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 18));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 18) : this.Ff = Z(this.Ff, 18);
        }
    }), Object.defineProperty(this, "edit", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 19));
        },
        set: function(t) {
            !0 === this.combo && (!0 === Boolean(t) ? this.Ff = K(this.Ff, 19) : this.Ff = Z(this.Ff, 19));
        }
    }), Object.defineProperty(this, "sort", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 20));
        },
        set: function(t) {
            !0 === Boolean(t) ? (this.Ff = K(this.Ff, 20), e.sort()) : this.Ff = Z(this.Ff, 20);
        }
    }), Object.defineProperty(this, "multiSelect", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 22));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 22) : this.Ff = Z(this.Ff, 22);
        }
    }), Object.defineProperty(this, "doNotSpellCheck", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 23));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 23) : this.Ff = Z(this.Ff, 23);
        }
    }), Object.defineProperty(this, "commitOnSelChange", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 27));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 27) : this.Ff = Z(this.Ff, 27);
        }
    }), this.hasAppearanceStream = !1;
};
H(ft, lt);
var dt = function() {
    ft.call(this), this.fontName = "helvetica", this.combo = !1;
};
H(dt, ft);
var pt = function() {
    dt.call(this), this.combo = !0;
};
H(pt, dt);
var gt = function() {
    pt.call(this), this.edit = !0;
};
H(gt, pt);
var mt = function() {
    lt.call(this), this.FT = "/Btn", Object.defineProperty(this, "noToggleToOff", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 15));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 15) : this.Ff = Z(this.Ff, 15);
        }
    }), Object.defineProperty(this, "radio", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 16));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 16) : this.Ff = Z(this.Ff, 16);
        }
    }), Object.defineProperty(this, "pushButton", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 17));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 17) : this.Ff = Z(this.Ff, 17);
        }
    }), Object.defineProperty(this, "radioIsUnison", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 26));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 26) : this.Ff = Z(this.Ff, 26);
        }
    });
    var e, r = {};
    Object.defineProperty(this, "MK", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            var t = function(t) {
                return t;
            };
            if (this.scope && (t = this.scope.internal.getEncryptor(this.objId)), 0 !== Object.keys(r).length) {
                var e, n = [];
                for(e in n.push("<<"), r)n.push("/" + e + " (" + R(t(r[e])) + ")");
                return n.push(">>"), n.join("\n");
            }
        },
        set: function(e) {
            "object" === (0, _typeofDefault.default)(e) && (r = e);
        }
    }), Object.defineProperty(this, "caption", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return r.CA || "";
        },
        set: function(t) {
            "string" == typeof t && (r.CA = t);
        }
    }), Object.defineProperty(this, "AS", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return e;
        },
        set: function(t) {
            e = t;
        }
    }), Object.defineProperty(this, "appearanceState", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return e.substr(1, e.length - 1);
        },
        set: function(t) {
            e = "/" + t;
        }
    });
};
H(mt, lt);
var vt = function() {
    mt.call(this), this.pushButton = !0;
};
H(vt, mt);
var bt = function() {
    mt.call(this), this.radio = !0, this.pushButton = !1;
    var t = [];
    Object.defineProperty(this, "Kids", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return t;
        },
        set: function(e) {
            t = void 0 !== e ? e : [];
        }
    });
};
H(bt, mt);
var yt = function() {
    var e, r;
    lt.call(this), Object.defineProperty(this, "Parent", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return e;
        },
        set: function(t) {
            e = t;
        }
    }), Object.defineProperty(this, "optionName", {
        enumerable: !1,
        configurable: !0,
        get: function() {
            return r;
        },
        set: function(t) {
            r = t;
        }
    });
    var n, i = {};
    Object.defineProperty(this, "MK", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            var t = function(t) {
                return t;
            };
            this.scope && (t = this.scope.internal.getEncryptor(this.objId));
            var e, r = [];
            for(e in r.push("<<"), i)r.push("/" + e + " (" + R(t(i[e])) + ")");
            return r.push(">>"), r.join("\n");
        },
        set: function(e) {
            "object" === (0, _typeofDefault.default)(e) && (i = e);
        }
    }), Object.defineProperty(this, "caption", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return i.CA || "";
        },
        set: function(t) {
            "string" == typeof t && (i.CA = t);
        }
    }), Object.defineProperty(this, "AS", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return n;
        },
        set: function(t) {
            n = t;
        }
    }), Object.defineProperty(this, "appearanceState", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return n.substr(1, n.length - 1);
        },
        set: function(t) {
            n = "/" + t;
        }
    }), this.caption = "l", this.appearanceState = "Off", this._AppearanceType = At.RadioButton.Circle, this.appearanceStreamContent = this._AppearanceType.createAppearanceStream(this.optionName);
};
H(yt, lt), bt.prototype.setAppearance = function(t) {
    if (!("createAppearanceStream" in t) || !("getCA" in t)) throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");
    for(var e in this.Kids)if (this.Kids.hasOwnProperty(e)) {
        var r = this.Kids[e];
        r.appearanceStreamContent = t.createAppearanceStream(r.optionName), r.caption = t.getCA();
    }
}, bt.prototype.createOption = function(t) {
    var e = new yt;
    return e.Parent = this, e.optionName = t, this.Kids.push(e), xt.call(this.scope, e), e;
};
var wt = function() {
    mt.call(this), this.fontName = "zapfdingbats", this.caption = "3", this.appearanceState = "On", this.value = "On", this.textAlign = "center", this.appearanceStreamContent = At.CheckBox.createAppearanceStream();
};
H(wt, mt);
var Nt = function() {
    lt.call(this), this.FT = "/Tx", Object.defineProperty(this, "multiline", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 13));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 13) : this.Ff = Z(this.Ff, 13);
        }
    }), Object.defineProperty(this, "fileSelect", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 21));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 21) : this.Ff = Z(this.Ff, 21);
        }
    }), Object.defineProperty(this, "doNotSpellCheck", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 23));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 23) : this.Ff = Z(this.Ff, 23);
        }
    }), Object.defineProperty(this, "doNotScroll", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 24));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 24) : this.Ff = Z(this.Ff, 24);
        }
    }), Object.defineProperty(this, "comb", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 25));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 25) : this.Ff = Z(this.Ff, 25);
        }
    }), Object.defineProperty(this, "richText", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 26));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 26) : this.Ff = Z(this.Ff, 26);
        }
    });
    var t = null;
    Object.defineProperty(this, "MaxLen", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return t;
        },
        set: function(e) {
            t = e;
        }
    }), Object.defineProperty(this, "maxLength", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return t;
        },
        set: function(e) {
            Number.isInteger(e) && (t = e);
        }
    }), Object.defineProperty(this, "hasAppearanceStream", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return this.V || this.DV;
        }
    });
};
H(Nt, lt);
var Lt = function() {
    Nt.call(this), Object.defineProperty(this, "password", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 14));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 14) : this.Ff = Z(this.Ff, 14);
        }
    }), this.password = !0;
};
H(Lt, Nt);
var At = {
    CheckBox: {
        createAppearanceStream: function() {
            return {
                N: {
                    On: At.CheckBox.YesNormal
                },
                D: {
                    On: At.CheckBox.YesPushDown,
                    Off: At.CheckBox.OffPushDown
                }
            };
        },
        YesPushDown: function(t) {
            var e = V(t);
            e.scope = t.scope;
            var r = [], n = t.scope.internal.getFont(t.fontName, t.fontStyle).id, i = t.scope.__private__.encodeColorString(t.color), a = tt(t, t.caption);
            return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), r.push("BMC"), r.push("q"), r.push("0 0 1 rg"), r.push("/" + n + " " + U(a.fontSize) + " Tf " + i), r.push("BT"), r.push(a.text), r.push("ET"), r.push("Q"), r.push("EMC"), e.stream = r.join("\n"), e;
        },
        YesNormal: function(t) {
            var e = V(t);
            e.scope = t.scope;
            var r = t.scope.internal.getFont(t.fontName, t.fontStyle).id, n = t.scope.__private__.encodeColorString(t.color), i = [], a = At.internal.getHeight(t), o = At.internal.getWidth(t), s = tt(t, t.caption);
            return i.push("1 g"), i.push("0 0 " + U(o) + " " + U(a) + " re"), i.push("f"), i.push("q"), i.push("0 0 1 rg"), i.push("0 0 " + U(o - 1) + " " + U(a - 1) + " re"), i.push("W"), i.push("n"), i.push("0 g"), i.push("BT"), i.push("/" + r + " " + U(s.fontSize) + " Tf " + n), i.push(s.text), i.push("ET"), i.push("Q"), e.stream = i.join("\n"), e;
        },
        OffPushDown: function(t) {
            var e = V(t);
            e.scope = t.scope;
            var r = [];
            return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), e.stream = r.join("\n"), e;
        }
    },
    RadioButton: {
        Circle: {
            createAppearanceStream: function(t) {
                var e = {
                    D: {
                        Off: At.RadioButton.Circle.OffPushDown
                    },
                    N: {}
                };
                return e.N[t] = At.RadioButton.Circle.YesNormal, e.D[t] = At.RadioButton.Circle.YesPushDown, e;
            },
            getCA: function() {
                return "l";
            },
            YesNormal: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = [], n = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
                n = Number((.9 * n).toFixed(5));
                var i = At.internal.Bezier_C, a = Number((n * i).toFixed(5));
                return r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(n + " 0 m"), r.push(n + " " + a + " " + a + " " + n + " 0 " + n + " c"), r.push("-" + a + " " + n + " -" + n + " " + a + " -" + n + " 0 c"), r.push("-" + n + " -" + a + " -" + a + " -" + n + " 0 -" + n + " c"), r.push(a + " -" + n + " " + n + " -" + a + " " + n + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
            },
            YesPushDown: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = [], n = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
                n = Number((.9 * n).toFixed(5));
                var i = Number((2 * n).toFixed(5)), a = Number((i * At.internal.Bezier_C).toFixed(5)), o = Number((n * At.internal.Bezier_C).toFixed(5));
                return r.push("0.749023 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(i + " 0 m"), r.push(i + " " + a + " " + a + " " + i + " 0 " + i + " c"), r.push("-" + a + " " + i + " -" + i + " " + a + " -" + i + " 0 c"), r.push("-" + i + " -" + a + " -" + a + " -" + i + " 0 -" + i + " c"), r.push(a + " -" + i + " " + i + " -" + a + " " + i + " 0 c"), r.push("f"), r.push("Q"), r.push("0 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(n + " 0 m"), r.push(n + " " + o + " " + o + " " + n + " 0 " + n + " c"), r.push("-" + o + " " + n + " -" + n + " " + o + " -" + n + " 0 c"), r.push("-" + n + " -" + o + " -" + o + " -" + n + " 0 -" + n + " c"), r.push(o + " -" + n + " " + n + " -" + o + " " + n + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
            },
            OffPushDown: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = [], n = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
                n = Number((.9 * n).toFixed(5));
                var i = Number((2 * n).toFixed(5)), a = Number((i * At.internal.Bezier_C).toFixed(5));
                return r.push("0.749023 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(i + " 0 m"), r.push(i + " " + a + " " + a + " " + i + " 0 " + i + " c"), r.push("-" + a + " " + i + " -" + i + " " + a + " -" + i + " 0 c"), r.push("-" + i + " -" + a + " -" + a + " -" + i + " 0 -" + i + " c"), r.push(a + " -" + i + " " + i + " -" + a + " " + i + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
            }
        },
        Cross: {
            createAppearanceStream: function(t) {
                var e = {
                    D: {
                        Off: At.RadioButton.Cross.OffPushDown
                    },
                    N: {}
                };
                return e.N[t] = At.RadioButton.Cross.YesNormal, e.D[t] = At.RadioButton.Cross.YesPushDown, e;
            },
            getCA: function() {
                return "8";
            },
            YesNormal: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = [], n = At.internal.calculateCross(t);
                return r.push("q"), r.push("1 1 " + U(At.internal.getWidth(t) - 2) + " " + U(At.internal.getHeight(t) - 2) + " re"), r.push("W"), r.push("n"), r.push(U(n.x1.x) + " " + U(n.x1.y) + " m"), r.push(U(n.x2.x) + " " + U(n.x2.y) + " l"), r.push(U(n.x4.x) + " " + U(n.x4.y) + " m"), r.push(U(n.x3.x) + " " + U(n.x3.y) + " l"), r.push("s"), r.push("Q"), e.stream = r.join("\n"), e;
            },
            YesPushDown: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = At.internal.calculateCross(t), n = [];
                return n.push("0.749023 g"), n.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), n.push("f"), n.push("q"), n.push("1 1 " + U(At.internal.getWidth(t) - 2) + " " + U(At.internal.getHeight(t) - 2) + " re"), n.push("W"), n.push("n"), n.push(U(r.x1.x) + " " + U(r.x1.y) + " m"), n.push(U(r.x2.x) + " " + U(r.x2.y) + " l"), n.push(U(r.x4.x) + " " + U(r.x4.y) + " m"), n.push(U(r.x3.x) + " " + U(r.x3.y) + " l"), n.push("s"), n.push("Q"), e.stream = n.join("\n"), e;
            },
            OffPushDown: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = [];
                return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), e.stream = r.join("\n"), e;
            }
        }
    },
    createDefaultAppearanceStream: function(t) {
        var e = t.scope.internal.getFont(t.fontName, t.fontStyle).id, r = t.scope.__private__.encodeColorString(t.color);
        return "/" + e + " " + t.fontSize + " Tf " + r;
    }
};
At.internal = {
    Bezier_C: .551915024494,
    calculateCross: function(t) {
        var e = At.internal.getWidth(t), r = At.internal.getHeight(t), n = Math.min(e, r);
        return {
            x1: {
                x: (e - n) / 2,
                y: (r - n) / 2 + n
            },
            x2: {
                x: (e - n) / 2 + n,
                y: (r - n) / 2
            },
            x3: {
                x: (e - n) / 2,
                y: (r - n) / 2
            },
            x4: {
                x: (e - n) / 2 + n,
                y: (r - n) / 2 + n
            }
        };
    }
}, At.internal.getWidth = function(e) {
    var r = 0;
    return "object" === (0, _typeofDefault.default)(e) && (r = W(e.Rect[2])), r;
}, At.internal.getHeight = function(e) {
    var r = 0;
    return "object" === (0, _typeofDefault.default)(e) && (r = W(e.Rect[3])), r;
};
var xt = q.addField = function(t) {
    if (at(this, t), !(t instanceof lt)) throw new Error("Invalid argument passed to jsPDF.addField.");
    var e;
    return (e = t).scope.internal.acroformPlugin.printedOut && (e.scope.internal.acroformPlugin.printedOut = !1, e.scope.internal.acroformPlugin.acroFormDictionaryRoot = null), e.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e), t.page = t.scope.internal.getCurrentPageInfo().pageNumber, this;
};
q.AcroFormChoiceField = ft, q.AcroFormListBox = dt, q.AcroFormComboBox = pt, q.AcroFormEditBox = gt, q.AcroFormButton = mt, q.AcroFormPushButton = vt, q.AcroFormRadioButton = bt, q.AcroFormCheckBox = wt, q.AcroFormTextField = Nt, q.AcroFormPasswordField = Lt, q.AcroFormAppearance = At, q.AcroForm = {
    ChoiceField: ft,
    ListBox: dt,
    ComboBox: pt,
    EditBox: gt,
    Button: mt,
    PushButton: vt,
    RadioButton: bt,
    CheckBox: wt,
    TextField: Nt,
    PasswordField: Lt,
    Appearance: At
}, E.AcroForm = {
    ChoiceField: ft,
    ListBox: dt,
    ComboBox: pt,
    EditBox: gt,
    Button: mt,
    PushButton: vt,
    RadioButton: bt,
    CheckBox: wt,
    TextField: Nt,
    PasswordField: Lt,
    Appearance: At
};
var St = E.AcroForm;
function _t(t) {
    return t.reduce(function(t, e, r) {
        return t[e] = r, t;
    }, {});
}
!function(e) {
    e.__addimage__ = {};
    var r = "UNKNOWN", n = {
        PNG: [
            [
                137,
                80,
                78,
                71
            ]
        ],
        TIFF: [
            [
                77,
                77,
                0,
                42
            ],
            [
                73,
                73,
                42,
                0
            ]
        ],
        JPEG: [
            [
                255,
                216,
                255,
                224,
                void 0,
                void 0,
                74,
                70,
                73,
                70,
                0
            ],
            [
                255,
                216,
                255,
                225,
                void 0,
                void 0,
                69,
                120,
                105,
                102,
                0,
                0
            ],
            [
                255,
                216,
                255,
                219
            ],
            [
                255,
                216,
                255,
                238
            ]
        ],
        JPEG2000: [
            [
                0,
                0,
                0,
                12,
                106,
                80,
                32,
                32
            ]
        ],
        GIF87a: [
            [
                71,
                73,
                70,
                56,
                55,
                97
            ]
        ],
        GIF89a: [
            [
                71,
                73,
                70,
                56,
                57,
                97
            ]
        ],
        WEBP: [
            [
                82,
                73,
                70,
                70,
                void 0,
                void 0,
                void 0,
                void 0,
                87,
                69,
                66,
                80
            ]
        ],
        BMP: [
            [
                66,
                77
            ],
            [
                66,
                65
            ],
            [
                67,
                73
            ],
            [
                67,
                80
            ],
            [
                73,
                67
            ],
            [
                80,
                84
            ]
        ]
    }, i = e.__addimage__.getImageFileTypeByImageData = function(t, e) {
        var i, a, o, s, c, u = r;
        if ("RGBA" === (e = e || r) || void 0 !== t.data && t.data instanceof Uint8ClampedArray && "height" in t && "width" in t) return "RGBA";
        if (x(t)) for(c in n)for(o = n[c], i = 0; i < o.length; i += 1){
            for(s = !0, a = 0; a < o[i].length; a += 1)if (void 0 !== o[i][a] && o[i][a] !== t[a]) {
                s = !1;
                break;
            }
            if (!0 === s) {
                u = c;
                break;
            }
        }
        else for(c in n)for(o = n[c], i = 0; i < o.length; i += 1){
            for(s = !0, a = 0; a < o[i].length; a += 1)if (void 0 !== o[i][a] && o[i][a] !== t.charCodeAt(a)) {
                s = !1;
                break;
            }
            if (!0 === s) {
                u = c;
                break;
            }
        }
        return u === r && e !== r && (u = e), u;
    }, a = function t(e) {
        for(var r = this.internal.write, n = this.internal.putStream, i = (0, this.internal.getFilters)(); -1 !== i.indexOf("FlateEncode");)i.splice(i.indexOf("FlateEncode"), 1);
        e.objectId = this.internal.newObject();
        var a = [];
        if (a.push({
            key: "Type",
            value: "/XObject"
        }), a.push({
            key: "Subtype",
            value: "/Image"
        }), a.push({
            key: "Width",
            value: e.width
        }), a.push({
            key: "Height",
            value: e.height
        }), e.colorSpace === b.INDEXED ? a.push({
            key: "ColorSpace",
            value: "[/Indexed /DeviceRGB " + (e.palette.length / 3 - 1) + " " + ("sMask" in e && void 0 !== e.sMask ? e.objectId + 2 : e.objectId + 1) + " 0 R]"
        }) : (a.push({
            key: "ColorSpace",
            value: "/" + e.colorSpace
        }), e.colorSpace === b.DEVICE_CMYK && a.push({
            key: "Decode",
            value: "[1 0 1 0 1 0 1 0]"
        })), a.push({
            key: "BitsPerComponent",
            value: e.bitsPerComponent
        }), "decodeParameters" in e && void 0 !== e.decodeParameters && a.push({
            key: "DecodeParms",
            value: "<<" + e.decodeParameters + ">>"
        }), "transparency" in e && Array.isArray(e.transparency)) {
            for(var o = "", s = 0, c = e.transparency.length; s < c; s++)o += e.transparency[s] + " " + e.transparency[s] + " ";
            a.push({
                key: "Mask",
                value: "[" + o + "]"
            });
        }
        void 0 !== e.sMask && a.push({
            key: "SMask",
            value: e.objectId + 1 + " 0 R"
        });
        var u = void 0 !== e.filter ? [
            "/" + e.filter
        ] : void 0;
        if (n({
            data: e.data,
            additionalKeyValues: a,
            alreadyAppliedFilters: u,
            objectId: e.objectId
        }), r("endobj"), "sMask" in e && void 0 !== e.sMask) {
            var h = "/Predictor " + e.predictor + " /Colors 1 /BitsPerComponent " + e.bitsPerComponent + " /Columns " + e.width, l = {
                width: e.width,
                height: e.height,
                colorSpace: "DeviceGray",
                bitsPerComponent: e.bitsPerComponent,
                decodeParameters: h,
                data: e.sMask
            };
            "filter" in e && (l.filter = e.filter), t.call(this, l);
        }
        if (e.colorSpace === b.INDEXED) {
            var f = this.internal.newObject();
            n({
                data: _(new Uint8Array(e.palette)),
                objectId: f
            }), r("endobj");
        }
    }, o = function() {
        var t = this.internal.collections.addImage_images;
        for(var e in t)a.call(this, t[e]);
    }, s = function() {
        var t, e = this.internal.collections.addImage_images, r = this.internal.write;
        for(var n in e)r("/I" + (t = e[n]).index, t.objectId, "0", "R");
    }, c = function() {
        this.internal.collections.addImage_images || (this.internal.collections.addImage_images = {}, this.internal.events.subscribe("putResources", o), this.internal.events.subscribe("putXobjectDict", s));
    }, h = function() {
        var t = this.internal.collections.addImage_images;
        return c.call(this), t;
    }, l = function() {
        return Object.keys(this.internal.collections.addImage_images).length;
    }, f = function(t) {
        return "function" == typeof e["process" + t.toUpperCase()];
    }, d = function(e) {
        return "object" === (0, _typeofDefault.default)(e) && 1 === e.nodeType;
    }, p = function(t, r) {
        if ("IMG" === t.nodeName && t.hasAttribute("src")) {
            var n = "" + t.getAttribute("src");
            if (0 === n.indexOf("data:image/")) return u(unescape(n).split("base64,").pop());
            var i = e.loadFile(n, !0);
            if (void 0 !== i) return i;
        }
        if ("CANVAS" === t.nodeName) {
            if (0 === t.width || 0 === t.height) throw new Error("Given canvas must have data. Canvas width: " + t.width + ", height: " + t.height);
            var a;
            switch(r){
                case "PNG":
                    a = "image/png";
                    break;
                case "WEBP":
                    a = "image/webp";
                    break;
                case "JPEG":
                case "JPG":
                default:
                    a = "image/jpeg";
            }
            return u(t.toDataURL(a, 1).split("base64,").pop());
        }
    }, g = function(t) {
        var e = this.internal.collections.addImage_images;
        if (e) {
            for(var r in e)if (t === e[r].alias) return e[r];
        }
    }, m = function(t, e, r) {
        return t || e || (t = -96, e = -96), t < 0 && (t = -1 * r.width * 72 / t / this.internal.scaleFactor), e < 0 && (e = -1 * r.height * 72 / e / this.internal.scaleFactor), 0 === t && (t = e * r.width / r.height), 0 === e && (e = t * r.height / r.width), [
            t,
            e
        ];
    }, v = function(t, e, r, n, i, a) {
        var o = m.call(this, r, n, i), s = this.internal.getCoordinateString, c = this.internal.getVerticalCoordinateString, u = h.call(this);
        if (r = o[0], n = o[1], u[i.index] = i, a) {
            a *= Math.PI / 180;
            var l = Math.cos(a), f = Math.sin(a), d = function(t) {
                return t.toFixed(4);
            }, p = [
                d(l),
                d(f),
                d(-1 * f),
                d(l),
                0,
                0,
                "cm"
            ];
        }
        this.internal.write("q"), a ? (this.internal.write([
            1,
            "0",
            "0",
            1,
            s(t),
            c(e + n),
            "cm"
        ].join(" ")), this.internal.write(p.join(" ")), this.internal.write([
            s(r),
            "0",
            "0",
            s(n),
            "0",
            "0",
            "cm"
        ].join(" "))) : this.internal.write([
            s(r),
            "0",
            "0",
            s(n),
            s(t),
            c(e + n),
            "cm"
        ].join(" ")), this.isAdvancedAPI() && this.internal.write([
            1,
            0,
            0,
            -1,
            0,
            0,
            "cm"
        ].join(" ")), this.internal.write("/I" + i.index + " Do"), this.internal.write("Q");
    }, b = e.color_spaces = {
        DEVICE_RGB: "DeviceRGB",
        DEVICE_GRAY: "DeviceGray",
        DEVICE_CMYK: "DeviceCMYK",
        CAL_GREY: "CalGray",
        CAL_RGB: "CalRGB",
        LAB: "Lab",
        ICC_BASED: "ICCBased",
        INDEXED: "Indexed",
        PATTERN: "Pattern",
        SEPARATION: "Separation",
        DEVICE_N: "DeviceN"
    };
    e.decode = {
        DCT_DECODE: "DCTDecode",
        FLATE_DECODE: "FlateDecode",
        LZW_DECODE: "LZWDecode",
        JPX_DECODE: "JPXDecode",
        JBIG2_DECODE: "JBIG2Decode",
        ASCII85_DECODE: "ASCII85Decode",
        ASCII_HEX_DECODE: "ASCIIHexDecode",
        RUN_LENGTH_DECODE: "RunLengthDecode",
        CCITT_FAX_DECODE: "CCITTFaxDecode"
    };
    var y = e.image_compression = {
        NONE: "NONE",
        FAST: "FAST",
        MEDIUM: "MEDIUM",
        SLOW: "SLOW"
    }, w = e.__addimage__.sHashCode = function(t) {
        var e, r, n = 0;
        if ("string" == typeof t) for(r = t.length, e = 0; e < r; e++)n = (n << 5) - n + t.charCodeAt(e), n |= 0;
        else if (x(t)) for(r = t.byteLength / 2, e = 0; e < r; e++)n = (n << 5) - n + t[e], n |= 0;
        return n;
    }, N = e.__addimage__.validateStringAsBase64 = function(t) {
        (t = t || "").toString().trim();
        var e = !0;
        return 0 === t.length && (e = !1), t.length % 4 != 0 && (e = !1), !1 === /^[A-Za-z0-9+/]+$/.test(t.substr(0, t.length - 2)) && (e = !1), !1 === /^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t.substr(-2)) && (e = !1), e;
    }, L = e.__addimage__.extractImageFromDataUrl = function(t) {
        var e = (t = t || "").split("base64,"), r = null;
        if (2 === e.length) {
            var n = /^data:(\w*\/\w*);*(charset=(?!charset=)[\w=-]*)*;*$/.exec(e[0]);
            Array.isArray(n) && (r = {
                mimeType: n[1],
                charset: n[2],
                data: e[1]
            });
        }
        return r;
    }, A = e.__addimage__.supportsArrayBuffer = function() {
        return "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array;
    };
    e.__addimage__.isArrayBuffer = function(t) {
        return A() && t instanceof ArrayBuffer;
    };
    var x = e.__addimage__.isArrayBufferView = function(t) {
        return A() && "undefined" != typeof Uint32Array && (t instanceof Int8Array || t instanceof Uint8Array || "undefined" != typeof Uint8ClampedArray && t instanceof Uint8ClampedArray || t instanceof Int16Array || t instanceof Uint16Array || t instanceof Int32Array || t instanceof Uint32Array || t instanceof Float32Array || t instanceof Float64Array);
    }, S = e.__addimage__.binaryStringToUint8Array = function(t) {
        for(var e = t.length, r = new Uint8Array(e), n = 0; n < e; n++)r[n] = t.charCodeAt(n);
        return r;
    }, _ = e.__addimage__.arrayBufferToBinaryString = function(t) {
        for(var e = "", r = x(t) ? t : new Uint8Array(t), n = 0; n < r.length; n += 8192)e += String.fromCharCode.apply(null, r.subarray(n, n + 8192));
        return e;
    };
    e.addImage = function() {
        var e, n, i, a, o, s, u, h, l;
        if ("number" == typeof arguments[1] ? (n = r, i = arguments[1], a = arguments[2], o = arguments[3], s = arguments[4], u = arguments[5], h = arguments[6], l = arguments[7]) : (n = arguments[1], i = arguments[2], a = arguments[3], o = arguments[4], s = arguments[5], u = arguments[6], h = arguments[7], l = arguments[8]), "object" === (0, _typeofDefault.default)(e = arguments[0]) && !d(e) && "imageData" in e) {
            var f = e;
            e = f.imageData, n = f.format || n || r, i = f.x || i || 0, a = f.y || a || 0, o = f.w || f.width || o, s = f.h || f.height || s, u = f.alias || u, h = f.compression || h, l = f.rotation || f.angle || l;
        }
        var p = this.internal.getFilters();
        if (void 0 === h && -1 !== p.indexOf("FlateEncode") && (h = "SLOW"), isNaN(i) || isNaN(a)) throw new Error("Invalid coordinates passed to jsPDF.addImage");
        c.call(this);
        var g = P.call(this, e, n, u, h);
        return v.call(this, i, a, o, s, g, l), this;
    };
    var P = function(t, n, a, o) {
        var s, c, u;
        if ("string" == typeof t && i(t) === r) {
            t = unescape(t);
            var h = k(t, !1);
            ("" !== h || void 0 !== (h = e.loadFile(t, !0))) && (t = h);
        }
        if (d(t) && (t = p(t, n)), n = i(t, n), !f(n)) throw new Error("addImage does not support files of type '" + n + "', please ensure that a plugin for '" + n + "' support is added.");
        if ((null == (u = a) || 0 === u.length) && (a = function(t) {
            return "string" == typeof t || x(t) ? w(t) : x(t.data) ? w(t.data) : null;
        }(t)), (s = g.call(this, a)) || (A() && (t instanceof Uint8Array || "RGBA" === n || (c = t, t = S(t))), s = this["process" + n.toUpperCase()](t, l.call(this), a, function(t) {
            return t && "string" == typeof t && (t = t.toUpperCase()), t in e.image_compression ? t : y.NONE;
        }(o), c)), !s) throw new Error("An unknown error occurred whilst processing the image.");
        return s;
    }, k = e.__addimage__.convertBase64ToBinaryString = function(t, e) {
        var r;
        e = "boolean" != typeof e || e;
        var n, i = "";
        if ("string" == typeof t) {
            n = null !== (r = L(t)) ? r.data : t;
            try {
                i = u(n);
            } catch (t) {
                if (e) throw N(n) ? new Error("atob-Error in jsPDF.convertBase64ToBinaryString " + t.message) : new Error("Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ");
            }
        }
        return i;
    };
    e.getImageProperties = function(t) {
        var n, a, o = "";
        if (d(t) && (t = p(t)), "string" == typeof t && i(t) === r && ("" === (o = k(t, !1)) && (o = e.loadFile(t) || ""), t = o), a = i(t), !f(a)) throw new Error("addImage does not support files of type '" + a + "', please ensure that a plugin for '" + a + "' support is added.");
        if (!A() || t instanceof Uint8Array || (t = S(t)), !(n = this["process" + a.toUpperCase()](t))) throw new Error("An unknown error occurred whilst processing the image");
        return n.fileType = a, n;
    };
}(E.API), /**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    var e = function(t) {
        if (void 0 !== t && "" != t) return !0;
    };
    E.API.events.push([
        "addPage",
        function(t) {
            this.internal.getPageInfo(t.pageNumber).pageContext.annotations = [];
        }
    ]), t.events.push([
        "putPage",
        function(t) {
            for(var r, n, i, a = this.internal.getCoordinateString, o = this.internal.getVerticalCoordinateString, s = this.internal.getPageInfoByObjId(t.objId), c = t.pageContext.annotations, u = !1, h = 0; h < c.length && !u; h++)switch((r = c[h]).type){
                case "link":
                    (e(r.options.url) || e(r.options.pageNumber)) && (u = !0);
                    break;
                case "reference":
                case "text":
                case "freetext":
                    u = !0;
            }
            if (0 != u) {
                this.internal.write("/Annots [");
                for(var l = 0; l < c.length; l++){
                    r = c[l];
                    var f = this.internal.pdfEscape, d = this.internal.getEncryptor(t.objId);
                    switch(r.type){
                        case "reference":
                            this.internal.write(" " + r.object.objId + " 0 R ");
                            break;
                        case "text":
                            var p = this.internal.newAdditionalObject(), g = this.internal.newAdditionalObject(), m = this.internal.getEncryptor(p.objId), v = r.title || "Note";
                            i = "<</Type /Annot /Subtype /Text " + (n = "/Rect [" + a(r.bounds.x) + " " + o(r.bounds.y + r.bounds.h) + " " + a(r.bounds.x + r.bounds.w) + " " + o(r.bounds.y) + "] ") + "/Contents (" + f(m(r.contents)) + ")", i += " /Popup " + g.objId + " 0 R", i += " /P " + s.objId + " 0 R", i += " /T (" + f(m(v)) + ") >>", p.content = i;
                            var b = p.objId + " 0 R";
                            i = "<</Type /Annot /Subtype /Popup " + (n = "/Rect [" + a(r.bounds.x + 30) + " " + o(r.bounds.y + r.bounds.h) + " " + a(r.bounds.x + r.bounds.w + 30) + " " + o(r.bounds.y) + "] ") + " /Parent " + b, r.open && (i += " /Open true"), i += " >>", g.content = i, this.internal.write(p.objId, "0 R", g.objId, "0 R");
                            break;
                        case "freetext":
                            n = "/Rect [" + a(r.bounds.x) + " " + o(r.bounds.y) + " " + a(r.bounds.x + r.bounds.w) + " " + o(r.bounds.y + r.bounds.h) + "] ";
                            var y = r.color || "#000000";
                            i = "<</Type /Annot /Subtype /FreeText " + n + "/Contents (" + f(d(r.contents)) + ")", i += " /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#" + y + ")", i += " /Border [0 0 0]", i += " >>", this.internal.write(i);
                            break;
                        case "link":
                            if (r.options.name) {
                                var w = this.annotations._nameMap[r.options.name];
                                r.options.pageNumber = w.page, r.options.top = w.y;
                            } else r.options.top || (r.options.top = 0);
                            if (n = "/Rect [" + r.finalBounds.x + " " + r.finalBounds.y + " " + r.finalBounds.w + " " + r.finalBounds.h + "] ", i = "", r.options.url) i = "<</Type /Annot /Subtype /Link " + n + "/Border [0 0 0] /A <</S /URI /URI (" + f(d(r.options.url)) + ") >>";
                            else if (r.options.pageNumber) switch(i = "<</Type /Annot /Subtype /Link " + n + "/Border [0 0 0] /Dest [" + this.internal.getPageInfo(r.options.pageNumber).objId + " 0 R", r.options.magFactor = r.options.magFactor || "XYZ", r.options.magFactor){
                                case "Fit":
                                    i += " /Fit]";
                                    break;
                                case "FitH":
                                    i += " /FitH " + r.options.top + "]";
                                    break;
                                case "FitV":
                                    r.options.left = r.options.left || 0, i += " /FitV " + r.options.left + "]";
                                    break;
                                case "XYZ":
                                default:
                                    var N = o(r.options.top);
                                    r.options.left = r.options.left || 0, void 0 === r.options.zoom && (r.options.zoom = 0), i += " /XYZ " + r.options.left + " " + N + " " + r.options.zoom + "]";
                            }
                            "" != i && (i += " >>", this.internal.write(i));
                    }
                }
                this.internal.write("]");
            }
        }
    ]), t.createAnnotation = function(t) {
        var e = this.internal.getCurrentPageInfo();
        switch(t.type){
            case "link":
                this.link(t.bounds.x, t.bounds.y, t.bounds.w, t.bounds.h, t);
                break;
            case "text":
            case "freetext":
                e.pageContext.annotations.push(t);
        }
    }, t.link = function(t, e, r, n, i) {
        var a = this.internal.getCurrentPageInfo(), o = this.internal.getCoordinateString, s = this.internal.getVerticalCoordinateString;
        a.pageContext.annotations.push({
            finalBounds: {
                x: o(t),
                y: s(e),
                w: o(t + r),
                h: s(e + n)
            },
            options: i,
            type: "link"
        });
    }, t.textWithLink = function(t, e, r, n) {
        var i, a, o = this.getTextWidth(t), s = this.internal.getLineHeight() / this.internal.scaleFactor;
        if (void 0 !== n.maxWidth) {
            a = n.maxWidth;
            var c = this.splitTextToSize(t, a).length;
            i = Math.ceil(s * c);
        } else a = o, i = s;
        return this.text(t, e, r, n), r += .2 * s, "center" === n.align && (e -= o / 2), "right" === n.align && (e -= o), this.link(e, r - s, a, i, n), o;
    }, t.getTextWidth = function(t) {
        var e = this.internal.getFontSize();
        return this.getStringUnitWidth(t) * e / this.internal.scaleFactor;
    };
}(E.API), /**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    var e = {
        1569: [
            65152
        ],
        1570: [
            65153,
            65154
        ],
        1571: [
            65155,
            65156
        ],
        1572: [
            65157,
            65158
        ],
        1573: [
            65159,
            65160
        ],
        1574: [
            65161,
            65162,
            65163,
            65164
        ],
        1575: [
            65165,
            65166
        ],
        1576: [
            65167,
            65168,
            65169,
            65170
        ],
        1577: [
            65171,
            65172
        ],
        1578: [
            65173,
            65174,
            65175,
            65176
        ],
        1579: [
            65177,
            65178,
            65179,
            65180
        ],
        1580: [
            65181,
            65182,
            65183,
            65184
        ],
        1581: [
            65185,
            65186,
            65187,
            65188
        ],
        1582: [
            65189,
            65190,
            65191,
            65192
        ],
        1583: [
            65193,
            65194
        ],
        1584: [
            65195,
            65196
        ],
        1585: [
            65197,
            65198
        ],
        1586: [
            65199,
            65200
        ],
        1587: [
            65201,
            65202,
            65203,
            65204
        ],
        1588: [
            65205,
            65206,
            65207,
            65208
        ],
        1589: [
            65209,
            65210,
            65211,
            65212
        ],
        1590: [
            65213,
            65214,
            65215,
            65216
        ],
        1591: [
            65217,
            65218,
            65219,
            65220
        ],
        1592: [
            65221,
            65222,
            65223,
            65224
        ],
        1593: [
            65225,
            65226,
            65227,
            65228
        ],
        1594: [
            65229,
            65230,
            65231,
            65232
        ],
        1601: [
            65233,
            65234,
            65235,
            65236
        ],
        1602: [
            65237,
            65238,
            65239,
            65240
        ],
        1603: [
            65241,
            65242,
            65243,
            65244
        ],
        1604: [
            65245,
            65246,
            65247,
            65248
        ],
        1605: [
            65249,
            65250,
            65251,
            65252
        ],
        1606: [
            65253,
            65254,
            65255,
            65256
        ],
        1607: [
            65257,
            65258,
            65259,
            65260
        ],
        1608: [
            65261,
            65262
        ],
        1609: [
            65263,
            65264,
            64488,
            64489
        ],
        1610: [
            65265,
            65266,
            65267,
            65268
        ],
        1649: [
            64336,
            64337
        ],
        1655: [
            64477
        ],
        1657: [
            64358,
            64359,
            64360,
            64361
        ],
        1658: [
            64350,
            64351,
            64352,
            64353
        ],
        1659: [
            64338,
            64339,
            64340,
            64341
        ],
        1662: [
            64342,
            64343,
            64344,
            64345
        ],
        1663: [
            64354,
            64355,
            64356,
            64357
        ],
        1664: [
            64346,
            64347,
            64348,
            64349
        ],
        1667: [
            64374,
            64375,
            64376,
            64377
        ],
        1668: [
            64370,
            64371,
            64372,
            64373
        ],
        1670: [
            64378,
            64379,
            64380,
            64381
        ],
        1671: [
            64382,
            64383,
            64384,
            64385
        ],
        1672: [
            64392,
            64393
        ],
        1676: [
            64388,
            64389
        ],
        1677: [
            64386,
            64387
        ],
        1678: [
            64390,
            64391
        ],
        1681: [
            64396,
            64397
        ],
        1688: [
            64394,
            64395
        ],
        1700: [
            64362,
            64363,
            64364,
            64365
        ],
        1702: [
            64366,
            64367,
            64368,
            64369
        ],
        1705: [
            64398,
            64399,
            64400,
            64401
        ],
        1709: [
            64467,
            64468,
            64469,
            64470
        ],
        1711: [
            64402,
            64403,
            64404,
            64405
        ],
        1713: [
            64410,
            64411,
            64412,
            64413
        ],
        1715: [
            64406,
            64407,
            64408,
            64409
        ],
        1722: [
            64414,
            64415
        ],
        1723: [
            64416,
            64417,
            64418,
            64419
        ],
        1726: [
            64426,
            64427,
            64428,
            64429
        ],
        1728: [
            64420,
            64421
        ],
        1729: [
            64422,
            64423,
            64424,
            64425
        ],
        1733: [
            64480,
            64481
        ],
        1734: [
            64473,
            64474
        ],
        1735: [
            64471,
            64472
        ],
        1736: [
            64475,
            64476
        ],
        1737: [
            64482,
            64483
        ],
        1739: [
            64478,
            64479
        ],
        1740: [
            64508,
            64509,
            64510,
            64511
        ],
        1744: [
            64484,
            64485,
            64486,
            64487
        ],
        1746: [
            64430,
            64431
        ],
        1747: [
            64432,
            64433
        ]
    }, r = {
        65247: {
            65154: 65269,
            65156: 65271,
            65160: 65273,
            65166: 65275
        },
        65248: {
            65154: 65270,
            65156: 65272,
            65160: 65274,
            65166: 65276
        },
        65165: {
            65247: {
                65248: {
                    65258: 65010
                }
            }
        },
        1617: {
            1612: 64606,
            1613: 64607,
            1614: 64608,
            1615: 64609,
            1616: 64610
        }
    }, n = {
        1612: 64606,
        1613: 64607,
        1614: 64608,
        1615: 64609,
        1616: 64610
    }, i = [
        1570,
        1571,
        1573,
        1575
    ];
    t.__arabicParser__ = {};
    var a = t.__arabicParser__.isInArabicSubstitutionA = function(t) {
        return void 0 !== e[t.charCodeAt(0)];
    }, o = t.__arabicParser__.isArabicLetter = function(t) {
        return "string" == typeof t && /^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t);
    }, s = t.__arabicParser__.isArabicEndLetter = function(t) {
        return o(t) && a(t) && e[t.charCodeAt(0)].length <= 2;
    }, c = t.__arabicParser__.isArabicAlfLetter = function(t) {
        return o(t) && i.indexOf(t.charCodeAt(0)) >= 0;
    };
    t.__arabicParser__.arabicLetterHasIsolatedForm = function(t) {
        return o(t) && a(t) && e[t.charCodeAt(0)].length >= 1;
    };
    var u = t.__arabicParser__.arabicLetterHasFinalForm = function(t) {
        return o(t) && a(t) && e[t.charCodeAt(0)].length >= 2;
    };
    t.__arabicParser__.arabicLetterHasInitialForm = function(t) {
        return o(t) && a(t) && e[t.charCodeAt(0)].length >= 3;
    };
    var h = t.__arabicParser__.arabicLetterHasMedialForm = function(t) {
        return o(t) && a(t) && 4 == e[t.charCodeAt(0)].length;
    }, l = t.__arabicParser__.resolveLigatures = function(t) {
        var e = 0, n = r, i = "", a = 0;
        for(e = 0; e < t.length; e += 1)void 0 !== n[t.charCodeAt(e)] ? (a++, "number" == typeof (n = n[t.charCodeAt(e)]) && (i += String.fromCharCode(n), n = r, a = 0), e === t.length - 1 && (n = r, i += t.charAt(e - (a - 1)), e -= a - 1, a = 0)) : (n = r, i += t.charAt(e - a), e -= a, a = 0);
        return i;
    };
    t.__arabicParser__.isArabicDiacritic = function(t) {
        return void 0 !== t && void 0 !== n[t.charCodeAt(0)];
    };
    var f = t.__arabicParser__.getCorrectForm = function(t, e, r) {
        return o(t) ? !1 === a(t) ? -1 : !u(t) || !o(e) && !o(r) || !o(r) && s(e) || s(t) && !o(e) || s(t) && c(e) || s(t) && s(e) ? 0 : h(t) && o(e) && !s(e) && o(r) && u(r) ? 3 : s(t) || !o(r) ? 1 : 2 : -1;
    }, d = function(t) {
        var r = 0, n = 0, i = 0, a = "", s = "", c = "", u = (t = t || "").split("\\s+"), h = [];
        for(r = 0; r < u.length; r += 1){
            for(h.push(""), n = 0; n < u[r].length; n += 1)a = u[r][n], s = u[r][n - 1], c = u[r][n + 1], o(a) ? (i = f(a, s, c), h[r] += -1 !== i ? String.fromCharCode(e[a.charCodeAt(0)][i]) : a) : h[r] += a;
            h[r] = l(h[r]);
        }
        return h.join(" ");
    }, p = t.__arabicParser__.processArabic = t.processArabic = function() {
        var t, e = "string" == typeof arguments[0] ? arguments[0] : arguments[0].text, r = [];
        if (Array.isArray(e)) {
            var n = 0;
            for(r = [], n = 0; n < e.length; n += 1)Array.isArray(e[n]) ? r.push([
                d(e[n][0]),
                e[n][1],
                e[n][2]
            ]) : r.push([
                d(e[n])
            ]);
            t = r;
        } else t = d(e);
        return "string" == typeof arguments[0] ? t : (arguments[0].text = t, arguments[0]);
    };
    t.events.push([
        "preProcessText",
        p
    ]);
}(E.API), E.API.autoPrint = function(t) {
    var e;
    switch((t = t || {}).variant = t.variant || "non-conform", t.variant){
        case "javascript":
            this.addJS("print({});");
            break;
        case "non-conform":
        default:
            this.internal.events.subscribe("postPutResources", function() {
                e = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /Named"), this.internal.out("/Type /Action"), this.internal.out("/N /Print"), this.internal.out(">>"), this.internal.out("endobj");
            }), this.internal.events.subscribe("putCatalog", function() {
                this.internal.out("/OpenAction " + e + " 0 R");
            });
    }
    return this;
}, /**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    var e = function() {
        var t = void 0;
        Object.defineProperty(this, "pdf", {
            get: function() {
                return t;
            },
            set: function(e) {
                t = e;
            }
        });
        var e = 150;
        Object.defineProperty(this, "width", {
            get: function() {
                return e;
            },
            set: function(t) {
                e = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 150 : t, this.getContext("2d").pageWrapXEnabled && (this.getContext("2d").pageWrapX = e + 1);
            }
        });
        var r = 300;
        Object.defineProperty(this, "height", {
            get: function() {
                return r;
            },
            set: function(t) {
                r = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 300 : t, this.getContext("2d").pageWrapYEnabled && (this.getContext("2d").pageWrapY = r + 1);
            }
        });
        var n = [];
        Object.defineProperty(this, "childNodes", {
            get: function() {
                return n;
            },
            set: function(t) {
                n = t;
            }
        });
        var i = {};
        Object.defineProperty(this, "style", {
            get: function() {
                return i;
            },
            set: function(t) {
                i = t;
            }
        }), Object.defineProperty(this, "parentNode", {});
    };
    e.prototype.getContext = function(t, e) {
        var r;
        if ("2d" !== (t = t || "2d")) return null;
        for(r in e)this.pdf.context2d.hasOwnProperty(r) && (this.pdf.context2d[r] = e[r]);
        return this.pdf.context2d._canvas = this, this.pdf.context2d;
    }, e.prototype.toDataURL = function() {
        throw new Error("toDataURL is not implemented.");
    }, t.events.push([
        "initialized",
        function() {
            this.canvas = new e, this.canvas.pdf = this;
        }
    ]);
}(E.API), function(e) {
    var r = {
        left: 0,
        top: 0,
        bottom: 0,
        right: 0
    }, n = !1, i = function() {
        void 0 === this.internal.__cell__ && (this.internal.__cell__ = {}, this.internal.__cell__.padding = 3, this.internal.__cell__.headerFunction = void 0, this.internal.__cell__.margins = Object.assign({}, r), this.internal.__cell__.margins.width = this.getPageWidth(), a.call(this));
    }, a = function() {
        this.internal.__cell__.lastCell = new o, this.internal.__cell__.pages = 1;
    }, o = function() {
        var t = arguments[0];
        Object.defineProperty(this, "x", {
            enumerable: !0,
            get: function() {
                return t;
            },
            set: function(e) {
                t = e;
            }
        });
        var e = arguments[1];
        Object.defineProperty(this, "y", {
            enumerable: !0,
            get: function() {
                return e;
            },
            set: function(t) {
                e = t;
            }
        });
        var r = arguments[2];
        Object.defineProperty(this, "width", {
            enumerable: !0,
            get: function() {
                return r;
            },
            set: function(t) {
                r = t;
            }
        });
        var n = arguments[3];
        Object.defineProperty(this, "height", {
            enumerable: !0,
            get: function() {
                return n;
            },
            set: function(t) {
                n = t;
            }
        });
        var i = arguments[4];
        Object.defineProperty(this, "text", {
            enumerable: !0,
            get: function() {
                return i;
            },
            set: function(t) {
                i = t;
            }
        });
        var a = arguments[5];
        Object.defineProperty(this, "lineNumber", {
            enumerable: !0,
            get: function() {
                return a;
            },
            set: function(t) {
                a = t;
            }
        });
        var o = arguments[6];
        return Object.defineProperty(this, "align", {
            enumerable: !0,
            get: function() {
                return o;
            },
            set: function(t) {
                o = t;
            }
        }), this;
    };
    o.prototype.clone = function() {
        return new o(this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align);
    }, o.prototype.toArray = function() {
        return [
            this.x,
            this.y,
            this.width,
            this.height,
            this.text,
            this.lineNumber,
            this.align
        ];
    }, e.setHeaderFunction = function(t) {
        return i.call(this), this.internal.__cell__.headerFunction = "function" == typeof t ? t : void 0, this;
    }, e.getTextDimensions = function(t, e) {
        i.call(this);
        var r = (e = e || {}).fontSize || this.getFontSize(), n = e.font || this.getFont(), a = e.scaleFactor || this.internal.scaleFactor, o = 0, s = 0, c = 0, u = this;
        if (!Array.isArray(t) && "string" != typeof t) {
            if ("number" != typeof t) throw new Error("getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.");
            t = String(t);
        }
        var h = e.maxWidth;
        h > 0 ? "string" == typeof t ? t = this.splitTextToSize(t, h) : "[object Array]" === Object.prototype.toString.call(t) && (t = t.reduce(function(t, e) {
            return t.concat(u.splitTextToSize(e, h));
        }, [])) : t = Array.isArray(t) ? t : [
            t
        ];
        for(var l = 0; l < t.length; l++)o < (c = this.getStringUnitWidth(t[l], {
            font: n
        }) * r) && (o = c);
        return 0 !== o && (s = t.length), {
            w: o /= a,
            h: Math.max((s * r * this.getLineHeightFactor() - r * (this.getLineHeightFactor() - 1)) / a, 0)
        };
    }, e.cellAddPage = function() {
        i.call(this), this.addPage();
        var t = this.internal.__cell__.margins || r;
        return this.internal.__cell__.lastCell = new o(t.left, t.top, void 0, void 0), this.internal.__cell__.pages += 1, this;
    };
    var s = e.cell = function() {
        var t;
        t = arguments[0] instanceof o ? arguments[0] : new o(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]), i.call(this);
        var e = this.internal.__cell__.lastCell, a = this.internal.__cell__.padding, s = this.internal.__cell__.margins || r, c = this.internal.__cell__.tableHeaderRow, u = this.internal.__cell__.printHeaders;
        return void 0 !== e.lineNumber && (e.lineNumber === t.lineNumber ? (t.x = (e.x || 0) + (e.width || 0), t.y = e.y || 0) : e.y + e.height + t.height + s.bottom > this.getPageHeight() ? (this.cellAddPage(), t.y = s.top, u && c && (this.printHeaderRow(t.lineNumber, !0), t.y += c[0].height)) : t.y = e.y + e.height || t.y), void 0 !== t.text[0] && (this.rect(t.x, t.y, t.width, t.height, !0 === n ? "FD" : void 0), "right" === t.align ? this.text(t.text, t.x + t.width - a, t.y + a, {
            align: "right",
            baseline: "top"
        }) : "center" === t.align ? this.text(t.text, t.x + t.width / 2, t.y + a, {
            align: "center",
            baseline: "top",
            maxWidth: t.width - a - a
        }) : this.text(t.text, t.x + a, t.y + a, {
            align: "left",
            baseline: "top",
            maxWidth: t.width - a - a
        })), this.internal.__cell__.lastCell = t, this;
    };
    e.table = function(e, n, u, h, l) {
        if (i.call(this), !u) throw new Error("No data for PDF table.");
        var f, d, p, g, m = [], v = [], b = [], y = {}, w = {}, N = [], L = [], A = (l = l || {}).autoSize || !1, x = !1 !== l.printHeaders, S = l.css && void 0 !== l.css["font-size"] ? 16 * l.css["font-size"] : l.fontSize || 12, _ = l.margins || Object.assign({
            width: this.getPageWidth()
        }, r), P = "number" == typeof l.padding ? l.padding : 3, k = l.headerBackgroundColor || "#c8c8c8", I = l.headerTextColor || "#000";
        if (a.call(this), this.internal.__cell__.printHeaders = x, this.internal.__cell__.margins = _, this.internal.__cell__.table_font_size = S, this.internal.__cell__.padding = P, this.internal.__cell__.headerBackgroundColor = k, this.internal.__cell__.headerTextColor = I, this.setFontSize(S), null == h) v = m = Object.keys(u[0]), b = m.map(function() {
            return "left";
        });
        else if (Array.isArray(h) && "object" === (0, _typeofDefault.default)(h[0])) for(m = h.map(function(t) {
            return t.name;
        }), v = h.map(function(t) {
            return t.prompt || t.name || "";
        }), b = h.map(function(t) {
            return t.align || "left";
        }), f = 0; f < h.length; f += 1)w[h[f].name] = h[f].width * (19.049976 / 25.4);
        else Array.isArray(h) && "string" == typeof h[0] && (v = m = h, b = m.map(function() {
            return "left";
        }));
        if (A || Array.isArray(h) && "string" == typeof h[0]) for(f = 0; f < m.length; f += 1){
            for(y[g = m[f]] = u.map(function(t) {
                return t[g];
            }), this.setFont(void 0, "bold"), N.push(this.getTextDimensions(v[f], {
                fontSize: this.internal.__cell__.table_font_size,
                scaleFactor: this.internal.scaleFactor
            }).w), d = y[g], this.setFont(void 0, "normal"), p = 0; p < d.length; p += 1)N.push(this.getTextDimensions(d[p], {
                fontSize: this.internal.__cell__.table_font_size,
                scaleFactor: this.internal.scaleFactor
            }).w);
            w[g] = Math.max.apply(null, N) + P + P, N = [];
        }
        if (x) {
            var F = {};
            for(f = 0; f < m.length; f += 1)F[m[f]] = {}, F[m[f]].text = v[f], F[m[f]].align = b[f];
            var C = c.call(this, F, w);
            L = m.map(function(t) {
                return new o(e, n, w[t], C, F[t].text, void 0, F[t].align);
            }), this.setTableHeaderRow(L), this.printHeaderRow(1, !1);
        }
        var j = h.reduce(function(t, e) {
            return t[e.name] = e.align, t;
        }, {});
        for(f = 0; f < u.length; f += 1){
            "rowStart" in l && l.rowStart instanceof Function && l.rowStart({
                row: f,
                data: u[f]
            }, this);
            var O = c.call(this, u[f], w);
            for(p = 0; p < m.length; p += 1){
                var B = u[f][m[p]];
                "cellStart" in l && l.cellStart instanceof Function && l.cellStart({
                    row: f,
                    col: p,
                    data: B
                }, this), s.call(this, new o(e, n, w[m[p]], O, B, f + 2, j[m[p]]));
            }
        }
        return this.internal.__cell__.table_x = e, this.internal.__cell__.table_y = n, this;
    };
    var c = function(t, e) {
        var r = this.internal.__cell__.padding, n = this.internal.__cell__.table_font_size, i = this.internal.scaleFactor;
        return Object.keys(t).map(function(n) {
            var i = t[n];
            return this.splitTextToSize(i.hasOwnProperty("text") ? i.text : i, e[n] - r - r);
        }, this).map(function(t) {
            return this.getLineHeightFactor() * t.length * n / i + r + r;
        }, this).reduce(function(t, e) {
            return Math.max(t, e);
        }, 0);
    };
    e.setTableHeaderRow = function(t) {
        i.call(this), this.internal.__cell__.tableHeaderRow = t;
    }, e.printHeaderRow = function(t, e) {
        if (i.call(this), !this.internal.__cell__.tableHeaderRow) throw new Error("Property tableHeaderRow does not exist.");
        var r;
        if (n = !0, "function" == typeof this.internal.__cell__.headerFunction) {
            var a = this.internal.__cell__.headerFunction(this, this.internal.__cell__.pages);
            this.internal.__cell__.lastCell = new o(a[0], a[1], a[2], a[3], void 0, -1);
        }
        this.setFont(void 0, "bold");
        for(var c = [], u = 0; u < this.internal.__cell__.tableHeaderRow.length; u += 1){
            r = this.internal.__cell__.tableHeaderRow[u].clone(), e && (r.y = this.internal.__cell__.margins.top || 0, c.push(r)), r.lineNumber = t;
            var h = this.getTextColor();
            this.setTextColor(this.internal.__cell__.headerTextColor), this.setFillColor(this.internal.__cell__.headerBackgroundColor), s.call(this, r), this.setTextColor(h);
        }
        c.length > 0 && this.setTableHeaderRow(c), this.setFont(void 0, "normal"), n = !1;
    };
}(E.API);
var Pt = {
    italic: [
        "italic",
        "oblique",
        "normal"
    ],
    oblique: [
        "oblique",
        "italic",
        "normal"
    ],
    normal: [
        "normal",
        "oblique",
        "italic"
    ]
}, kt = [
    "ultra-condensed",
    "extra-condensed",
    "condensed",
    "semi-condensed",
    "normal",
    "semi-expanded",
    "expanded",
    "extra-expanded",
    "ultra-expanded"
], It = _t(kt), Ft = [
    100,
    200,
    300,
    400,
    500,
    600,
    700,
    800,
    900
], Ct = _t(Ft);
function jt(t) {
    var e = t.family.replace(/"|'/g, "").toLowerCase(), r = function(t) {
        return Pt[t = t || "normal"] ? t : "normal";
    }(t.style), n = function(t) {
        if (!t) return 400;
        if ("number" == typeof t) return t >= 100 && t <= 900 && t % 100 == 0 ? t : 400;
        if (/^\d00$/.test(t)) return parseInt(t);
        switch(t){
            case "bold":
                return 700;
            case "normal":
            default:
                return 400;
        }
    }(t.weight), i = function(t) {
        return "number" == typeof It[t = t || "normal"] ? t : "normal";
    }(t.stretch);
    return {
        family: e,
        style: r,
        weight: n,
        stretch: i,
        src: t.src || [],
        ref: t.ref || {
            name: e,
            style: [
                i,
                r,
                n
            ].join(" ")
        }
    };
}
function Ot(t, e, r, n) {
    var i;
    for(i = r; i >= 0 && i < e.length; i += n)if (t[e[i]]) return t[e[i]];
    for(i = r; i >= 0 && i < e.length; i -= n)if (t[e[i]]) return t[e[i]];
}
var Bt = {
    "sans-serif": "helvetica",
    fixed: "courier",
    monospace: "courier",
    terminal: "courier",
    cursive: "times",
    fantasy: "times",
    serif: "times"
}, Mt = {
    caption: "times",
    icon: "times",
    menu: "times",
    "message-box": "times",
    "small-caption": "times",
    "status-bar": "times"
};
function Et(t) {
    return [
        t.stretch,
        t.style,
        t.weight,
        t.family
    ].join(" ");
}
function qt(t, e, r) {
    for(var n = (r = r || {}).defaultFontFamily || "times", i = Object.assign({}, Bt, r.genericFontFamilies || {}), a = null, o = null, s = 0; s < e.length; ++s)if (i[(a = jt(e[s])).family] && (a.family = i[a.family]), t.hasOwnProperty(a.family)) {
        o = t[a.family];
        break;
    }
    if (!(o = o || t[n])) throw new Error("Could not find a font-family for the rule '" + Et(a) + "' and default family '" + n + "'.");
    if (o = function(t, e) {
        if (e[t]) return e[t];
        var r = It[t], n = r <= It.normal ? -1 : 1, i = Ot(e, kt, r, n);
        if (!i) throw new Error("Could not find a matching font-stretch value for " + t);
        return i;
    }(a.stretch, o), o = function(t, e) {
        if (e[t]) return e[t];
        for(var r = Pt[t], n = 0; n < r.length; ++n)if (e[r[n]]) return e[r[n]];
        throw new Error("Could not find a matching font-style for " + t);
    }(a.style, o), !(o = function(t, e) {
        if (e[t]) return e[t];
        if (400 === t && e[500]) return e[500];
        if (500 === t && e[400]) return e[400];
        var r = Ct[t], n = Ot(e, Ft, r, t < 400 ? -1 : 1);
        if (!n) throw new Error("Could not find a matching font-weight for value " + t);
        return n;
    }(a.weight, o))) throw new Error("Failed to resolve a font for the rule '" + Et(a) + "'.");
    return o;
}
function Dt(t) {
    return t.trimLeft();
}
function Rt(t, e) {
    for(var r = 0; r < t.length;){
        if (t.charAt(r) === e) return [
            t.substring(0, r),
            t.substring(r + 1)
        ];
        r += 1;
    }
    return null;
}
function Tt(t) {
    var e = t.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);
    return null === e ? null : [
        e[0],
        t.substring(e[0].length)
    ];
}
var Ut, zt, Ht, Wt = [
    "times"
];
!function(e) {
    var r, n, i, o, s, c, u, h, l, d = function(t) {
        return t = t || {}, this.isStrokeTransparent = t.isStrokeTransparent || !1, this.strokeOpacity = t.strokeOpacity || 1, this.strokeStyle = t.strokeStyle || "#000000", this.fillStyle = t.fillStyle || "#000000", this.isFillTransparent = t.isFillTransparent || !1, this.fillOpacity = t.fillOpacity || 1, this.font = t.font || "10px sans-serif", this.textBaseline = t.textBaseline || "alphabetic", this.textAlign = t.textAlign || "left", this.lineWidth = t.lineWidth || 1, this.lineJoin = t.lineJoin || "miter", this.lineCap = t.lineCap || "butt", this.path = t.path || [], this.transform = void 0 !== t.transform ? t.transform.clone() : new h, this.globalCompositeOperation = t.globalCompositeOperation || "normal", this.globalAlpha = t.globalAlpha || 1, this.clip_path = t.clip_path || [], this.currentPoint = t.currentPoint || new c, this.miterLimit = t.miterLimit || 10, this.lastPoint = t.lastPoint || new c, this.lineDashOffset = t.lineDashOffset || 0, this.lineDash = t.lineDash || [], this.margin = t.margin || [
            0,
            0,
            0,
            0
        ], this.prevPageLastElemOffset = t.prevPageLastElemOffset || 0, this.ignoreClearRect = "boolean" != typeof t.ignoreClearRect || t.ignoreClearRect, this;
    };
    e.events.push([
        "initialized",
        function() {
            this.context2d = new p(this), r = this.internal.f2, n = this.internal.getCoordinateString, i = this.internal.getVerticalCoordinateString, o = this.internal.getHorizontalCoordinate, s = this.internal.getVerticalCoordinate, c = this.internal.Point, u = this.internal.Rectangle, h = this.internal.Matrix, l = new d;
        }
    ]);
    var p = function(t) {
        Object.defineProperty(this, "canvas", {
            get: function() {
                return {
                    parentNode: !1,
                    style: !1
                };
            }
        });
        var e = t;
        Object.defineProperty(this, "pdf", {
            get: function() {
                return e;
            }
        });
        var r = !1;
        Object.defineProperty(this, "pageWrapXEnabled", {
            get: function() {
                return r;
            },
            set: function(t) {
                r = Boolean(t);
            }
        });
        var n = !1;
        Object.defineProperty(this, "pageWrapYEnabled", {
            get: function() {
                return n;
            },
            set: function(t) {
                n = Boolean(t);
            }
        });
        var i = 0;
        Object.defineProperty(this, "posX", {
            get: function() {
                return i;
            },
            set: function(t) {
                isNaN(t) || (i = t);
            }
        });
        var a = 0;
        Object.defineProperty(this, "posY", {
            get: function() {
                return a;
            },
            set: function(t) {
                isNaN(t) || (a = t);
            }
        }), Object.defineProperty(this, "margin", {
            get: function() {
                return l.margin;
            },
            set: function(t) {
                var e;
                "number" == typeof t ? e = [
                    t,
                    t,
                    t,
                    t
                ] : ((e = new Array(4))[0] = t[0], e[1] = t.length >= 2 ? t[1] : e[0], e[2] = t.length >= 3 ? t[2] : e[0], e[3] = t.length >= 4 ? t[3] : e[1]), l.margin = e;
            }
        });
        var o = !1;
        Object.defineProperty(this, "autoPaging", {
            get: function() {
                return o;
            },
            set: function(t) {
                o = t;
            }
        });
        var s = 0;
        Object.defineProperty(this, "lastBreak", {
            get: function() {
                return s;
            },
            set: function(t) {
                s = t;
            }
        });
        var c = [];
        Object.defineProperty(this, "pageBreaks", {
            get: function() {
                return c;
            },
            set: function(t) {
                c = t;
            }
        }), Object.defineProperty(this, "ctx", {
            get: function() {
                return l;
            },
            set: function(t) {
                t instanceof d && (l = t);
            }
        }), Object.defineProperty(this, "path", {
            get: function() {
                return l.path;
            },
            set: function(t) {
                l.path = t;
            }
        });
        var u = [];
        Object.defineProperty(this, "ctxStack", {
            get: function() {
                return u;
            },
            set: function(t) {
                u = t;
            }
        }), Object.defineProperty(this, "fillStyle", {
            get: function() {
                return this.ctx.fillStyle;
            },
            set: function(t) {
                var e;
                e = g(t), this.ctx.fillStyle = e.style, this.ctx.isFillTransparent = 0 === e.a, this.ctx.fillOpacity = e.a, this.pdf.setFillColor(e.r, e.g, e.b, {
                    a: e.a
                }), this.pdf.setTextColor(e.r, e.g, e.b, {
                    a: e.a
                });
            }
        }), Object.defineProperty(this, "strokeStyle", {
            get: function() {
                return this.ctx.strokeStyle;
            },
            set: function(t) {
                var e = g(t);
                this.ctx.strokeStyle = e.style, this.ctx.isStrokeTransparent = 0 === e.a, this.ctx.strokeOpacity = e.a, 0 === e.a ? this.pdf.setDrawColor(255, 255, 255) : (e.a, this.pdf.setDrawColor(e.r, e.g, e.b));
            }
        }), Object.defineProperty(this, "lineCap", {
            get: function() {
                return this.ctx.lineCap;
            },
            set: function(t) {
                -1 !== [
                    "butt",
                    "round",
                    "square"
                ].indexOf(t) && (this.ctx.lineCap = t, this.pdf.setLineCap(t));
            }
        }), Object.defineProperty(this, "lineWidth", {
            get: function() {
                return this.ctx.lineWidth;
            },
            set: function(t) {
                isNaN(t) || (this.ctx.lineWidth = t, this.pdf.setLineWidth(t));
            }
        }), Object.defineProperty(this, "lineJoin", {
            get: function() {
                return this.ctx.lineJoin;
            },
            set: function(t) {
                -1 !== [
                    "bevel",
                    "round",
                    "miter"
                ].indexOf(t) && (this.ctx.lineJoin = t, this.pdf.setLineJoin(t));
            }
        }), Object.defineProperty(this, "miterLimit", {
            get: function() {
                return this.ctx.miterLimit;
            },
            set: function(t) {
                isNaN(t) || (this.ctx.miterLimit = t, this.pdf.setMiterLimit(t));
            }
        }), Object.defineProperty(this, "textBaseline", {
            get: function() {
                return this.ctx.textBaseline;
            },
            set: function(t) {
                this.ctx.textBaseline = t;
            }
        }), Object.defineProperty(this, "textAlign", {
            get: function() {
                return this.ctx.textAlign;
            },
            set: function(t) {
                -1 !== [
                    "right",
                    "end",
                    "center",
                    "left",
                    "start"
                ].indexOf(t) && (this.ctx.textAlign = t);
            }
        });
        var h = null;
        function f(t, e) {
            if (null === h) {
                var r = function(t) {
                    var e = [];
                    return Object.keys(t).forEach(function(r) {
                        t[r].forEach(function(t) {
                            var n = null;
                            switch(t){
                                case "bold":
                                    n = {
                                        family: r,
                                        weight: "bold"
                                    };
                                    break;
                                case "italic":
                                    n = {
                                        family: r,
                                        style: "italic"
                                    };
                                    break;
                                case "bolditalic":
                                    n = {
                                        family: r,
                                        weight: "bold",
                                        style: "italic"
                                    };
                                    break;
                                case "":
                                case "normal":
                                    n = {
                                        family: r
                                    };
                            }
                            null !== n && (n.ref = {
                                name: r,
                                style: t
                            }, e.push(n));
                        });
                    }), e;
                }(t.getFontList());
                h = function(t) {
                    for(var e = {}, r = 0; r < t.length; ++r){
                        var n = jt(t[r]), i = n.family, a = n.stretch, o = n.style, s = n.weight;
                        e[i] = e[i] || {}, e[i][a] = e[i][a] || {}, e[i][a][o] = e[i][a][o] || {}, e[i][a][o][s] = n;
                    }
                    return e;
                }(r.concat(e));
            }
            return h;
        }
        var p = null;
        Object.defineProperty(this, "fontFaces", {
            get: function() {
                return p;
            },
            set: function(t) {
                h = null, p = t;
            }
        }), Object.defineProperty(this, "font", {
            get: function() {
                return this.ctx.font;
            },
            set: function(t) {
                var e;
                if (this.ctx.font = t, null !== (e = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t))) {
                    var r = e[1], n = (e[2], e[3]), i = e[4], a = (e[5], e[6]), o = /^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(i)[2];
                    i = "px" === o ? Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor) : "em" === o ? Math.floor(parseFloat(i) * this.pdf.getFontSize()) : Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor), this.pdf.setFontSize(i);
                    var s = function(t) {
                        var e, r, n = [], i = t.trim();
                        if ("" === i) return Wt;
                        if (i in Mt) return [
                            Mt[i]
                        ];
                        for(; "" !== i;){
                            switch(r = null, e = (i = Dt(i)).charAt(0)){
                                case '"':
                                case "'":
                                    r = Rt(i.substring(1), e);
                                    break;
                                default:
                                    r = Tt(i);
                            }
                            if (null === r) return Wt;
                            if (n.push(r[0]), "" !== (i = Dt(r[1])) && "," !== i.charAt(0)) return Wt;
                            i = i.replace(/^,/, "");
                        }
                        return n;
                    }(a);
                    if (this.fontFaces) {
                        var c = qt(f(this.pdf, this.fontFaces), s.map(function(t) {
                            return {
                                family: t,
                                stretch: "normal",
                                weight: n,
                                style: r
                            };
                        }));
                        this.pdf.setFont(c.ref.name, c.ref.style);
                    } else {
                        var u = "";
                        ("bold" === n || parseInt(n, 10) >= 700 || "bold" === r) && (u = "bold"), "italic" === r && (u += "italic"), 0 === u.length && (u = "normal");
                        for(var h = "", l = {
                            arial: "Helvetica",
                            Arial: "Helvetica",
                            verdana: "Helvetica",
                            Verdana: "Helvetica",
                            helvetica: "Helvetica",
                            Helvetica: "Helvetica",
                            "sans-serif": "Helvetica",
                            fixed: "Courier",
                            monospace: "Courier",
                            terminal: "Courier",
                            cursive: "Times",
                            fantasy: "Times",
                            serif: "Times"
                        }, d = 0; d < s.length; d++){
                            if (void 0 !== this.pdf.internal.getFont(s[d], u, {
                                noFallback: !0,
                                disableWarning: !0
                            })) {
                                h = s[d];
                                break;
                            }
                            if ("bolditalic" === u && void 0 !== this.pdf.internal.getFont(s[d], "bold", {
                                noFallback: !0,
                                disableWarning: !0
                            })) h = s[d], u = "bold";
                            else if (void 0 !== this.pdf.internal.getFont(s[d], "normal", {
                                noFallback: !0,
                                disableWarning: !0
                            })) {
                                h = s[d], u = "normal";
                                break;
                            }
                        }
                        if ("" === h) {
                            for(var p = 0; p < s.length; p++)if (l[s[p]]) {
                                h = l[s[p]];
                                break;
                            }
                        }
                        h = "" === h ? "Times" : h, this.pdf.setFont(h, u);
                    }
                }
            }
        }), Object.defineProperty(this, "globalCompositeOperation", {
            get: function() {
                return this.ctx.globalCompositeOperation;
            },
            set: function(t) {
                this.ctx.globalCompositeOperation = t;
            }
        }), Object.defineProperty(this, "globalAlpha", {
            get: function() {
                return this.ctx.globalAlpha;
            },
            set: function(t) {
                this.ctx.globalAlpha = t;
            }
        }), Object.defineProperty(this, "lineDashOffset", {
            get: function() {
                return this.ctx.lineDashOffset;
            },
            set: function(t) {
                this.ctx.lineDashOffset = t, T.call(this);
            }
        }), Object.defineProperty(this, "lineDash", {
            get: function() {
                return this.ctx.lineDash;
            },
            set: function(t) {
                this.ctx.lineDash = t, T.call(this);
            }
        }), Object.defineProperty(this, "ignoreClearRect", {
            get: function() {
                return this.ctx.ignoreClearRect;
            },
            set: function(t) {
                this.ctx.ignoreClearRect = Boolean(t);
            }
        });
    };
    p.prototype.setLineDash = function(t) {
        this.lineDash = t;
    }, p.prototype.getLineDash = function() {
        return this.lineDash.length % 2 ? this.lineDash.concat(this.lineDash) : this.lineDash.slice();
    }, p.prototype.fill = function() {
        A.call(this, "fill", !1);
    }, p.prototype.stroke = function() {
        A.call(this, "stroke", !1);
    }, p.prototype.beginPath = function() {
        this.path = [
            {
                type: "begin"
            }
        ];
    }, p.prototype.moveTo = function(t, e) {
        if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.moveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.moveTo");
        var r = this.ctx.transform.applyToPoint(new c(t, e));
        this.path.push({
            type: "mt",
            x: r.x,
            y: r.y
        }), this.ctx.lastPoint = new c(t, e);
    }, p.prototype.closePath = function() {
        var e = new c(0, 0), r = 0;
        for(r = this.path.length - 1; -1 !== r; r--)if ("begin" === this.path[r].type && "object" === (0, _typeofDefault.default)(this.path[r + 1]) && "number" == typeof this.path[r + 1].x) {
            e = new c(this.path[r + 1].x, this.path[r + 1].y);
            break;
        }
        this.path.push({
            type: "close"
        }), this.ctx.lastPoint = new c(e.x, e.y);
    }, p.prototype.lineTo = function(t, e) {
        if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.lineTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.lineTo");
        var r = this.ctx.transform.applyToPoint(new c(t, e));
        this.path.push({
            type: "lt",
            x: r.x,
            y: r.y
        }), this.ctx.lastPoint = new c(r.x, r.y);
    }, p.prototype.clip = function() {
        this.ctx.clip_path = JSON.parse(JSON.stringify(this.path)), A.call(this, null, !0);
    }, p.prototype.quadraticCurveTo = function(t, e, r, n) {
        if (isNaN(r) || isNaN(n) || isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");
        var i = this.ctx.transform.applyToPoint(new c(r, n)), o = this.ctx.transform.applyToPoint(new c(t, e));
        this.path.push({
            type: "qct",
            x1: o.x,
            y1: o.y,
            x: i.x,
            y: i.y
        }), this.ctx.lastPoint = new c(i.x, i.y);
    }, p.prototype.bezierCurveTo = function(t, e, r, n, i, o) {
        if (isNaN(i) || isNaN(o) || isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.bezierCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");
        var s = this.ctx.transform.applyToPoint(new c(i, o)), u = this.ctx.transform.applyToPoint(new c(t, e)), h = this.ctx.transform.applyToPoint(new c(r, n));
        this.path.push({
            type: "bct",
            x1: u.x,
            y1: u.y,
            x2: h.x,
            y2: h.y,
            x: s.x,
            y: s.y
        }), this.ctx.lastPoint = new c(s.x, s.y);
    }, p.prototype.arc = function(t, e, r, n, i, o) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i)) throw a.error("jsPDF.context2d.arc: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.arc");
        if (o = Boolean(o), !this.ctx.transform.isIdentity) {
            var s = this.ctx.transform.applyToPoint(new c(t, e));
            t = s.x, e = s.y;
            var u = this.ctx.transform.applyToPoint(new c(0, r)), h = this.ctx.transform.applyToPoint(new c(0, 0));
            r = Math.sqrt(Math.pow(u.x - h.x, 2) + Math.pow(u.y - h.y, 2));
        }
        Math.abs(i - n) >= 2 * Math.PI && (n = 0, i = 2 * Math.PI), this.path.push({
            type: "arc",
            x: t,
            y: e,
            radius: r,
            startAngle: n,
            endAngle: i,
            counterclockwise: o
        });
    }, p.prototype.arcTo = function(t, e, r, n, i) {
        throw new Error("arcTo not implemented.");
    }, p.prototype.rect = function(t, e, r, n) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.rect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rect");
        this.moveTo(t, e), this.lineTo(t + r, e), this.lineTo(t + r, e + n), this.lineTo(t, e + n), this.lineTo(t, e), this.lineTo(t + r, e), this.lineTo(t, e);
    }, p.prototype.fillRect = function(t, e, r, n) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.fillRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillRect");
        if (!m.call(this)) {
            var i = {};
            "butt" !== this.lineCap && (i.lineCap = this.lineCap, this.lineCap = "butt"), "miter" !== this.lineJoin && (i.lineJoin = this.lineJoin, this.lineJoin = "miter"), this.beginPath(), this.rect(t, e, r, n), this.fill(), i.hasOwnProperty("lineCap") && (this.lineCap = i.lineCap), i.hasOwnProperty("lineJoin") && (this.lineJoin = i.lineJoin);
        }
    }, p.prototype.strokeRect = function(t, e, r, n) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.strokeRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");
        v.call(this) || (this.beginPath(), this.rect(t, e, r, n), this.stroke());
    }, p.prototype.clearRect = function(t, e, r, n) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.clearRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.clearRect");
        this.ignoreClearRect || (this.fillStyle = "#ffffff", this.fillRect(t, e, r, n));
    }, p.prototype.save = function(t) {
        t = "boolean" != typeof t || t;
        for(var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++)this.pdf.setPage(r + 1), this.pdf.internal.out("q");
        if (this.pdf.setPage(e), t) {
            this.ctx.fontSize = this.pdf.internal.getFontSize();
            var n = new d(this.ctx);
            this.ctxStack.push(this.ctx), this.ctx = n;
        }
    }, p.prototype.restore = function(t) {
        t = "boolean" != typeof t || t;
        for(var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++)this.pdf.setPage(r + 1), this.pdf.internal.out("Q");
        this.pdf.setPage(e), t && 0 !== this.ctxStack.length && (this.ctx = this.ctxStack.pop(), this.fillStyle = this.ctx.fillStyle, this.strokeStyle = this.ctx.strokeStyle, this.font = this.ctx.font, this.lineCap = this.ctx.lineCap, this.lineWidth = this.ctx.lineWidth, this.lineJoin = this.ctx.lineJoin, this.lineDash = this.ctx.lineDash, this.lineDashOffset = this.ctx.lineDashOffset);
    }, p.prototype.toDataURL = function() {
        throw new Error("toDataUrl not implemented.");
    };
    var g = function(t) {
        var e, r, n, i;
        if (!0 === t.isCanvasGradient && (t = t.getColor()), !t) return {
            r: 0,
            g: 0,
            b: 0,
            a: 0,
            style: t
        };
        if (/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t)) e = 0, r = 0, n = 0, i = 0;
        else {
            var a = /rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);
            if (null !== a) e = parseInt(a[1]), r = parseInt(a[2]), n = parseInt(a[3]), i = 1;
            else if (null !== (a = /rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/.exec(t))) e = parseInt(a[1]), r = parseInt(a[2]), n = parseInt(a[3]), i = parseFloat(a[4]);
            else {
                if (i = 1, "string" == typeof t && "#" !== t.charAt(0)) {
                    var o = new f(t);
                    t = o.ok ? o.toHex() : "#000000";
                }
                4 === t.length ? (e = t.substring(1, 2), e += e, r = t.substring(2, 3), r += r, n = t.substring(3, 4), n += n) : (e = t.substring(1, 3), r = t.substring(3, 5), n = t.substring(5, 7)), e = parseInt(e, 16), r = parseInt(r, 16), n = parseInt(n, 16);
            }
        }
        return {
            r: e,
            g: r,
            b: n,
            a: i,
            style: t
        };
    }, m = function() {
        return this.ctx.isFillTransparent || 0 == this.globalAlpha;
    }, v = function() {
        return Boolean(this.ctx.isStrokeTransparent || 0 == this.globalAlpha);
    };
    p.prototype.fillText = function(t, e, r, n) {
        if (isNaN(e) || isNaN(r) || "string" != typeof t) throw a.error("jsPDF.context2d.fillText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillText");
        if (n = isNaN(n) ? void 0 : n, !m.call(this)) {
            var i = q(this.ctx.transform.rotation), o = this.ctx.transform.scaleX;
            C.call(this, {
                text: t,
                x: e,
                y: r,
                scale: o,
                angle: i,
                align: this.textAlign,
                maxWidth: n
            });
        }
    }, p.prototype.strokeText = function(t, e, r, n) {
        if (isNaN(e) || isNaN(r) || "string" != typeof t) throw a.error("jsPDF.context2d.strokeText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeText");
        if (!v.call(this)) {
            n = isNaN(n) ? void 0 : n;
            var i = q(this.ctx.transform.rotation), o = this.ctx.transform.scaleX;
            C.call(this, {
                text: t,
                x: e,
                y: r,
                scale: o,
                renderingMode: "stroke",
                angle: i,
                align: this.textAlign,
                maxWidth: n
            });
        }
    }, p.prototype.measureText = function(t) {
        if ("string" != typeof t) throw a.error("jsPDF.context2d.measureText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.measureText");
        var e = this.pdf, r = this.pdf.internal.scaleFactor, n = e.internal.getFontSize(), i = e.getStringUnitWidth(t) * n / e.internal.scaleFactor, o = function(t) {
            var e = (t = t || {}).width || 0;
            return Object.defineProperty(this, "width", {
                get: function() {
                    return e;
                }
            }), this;
        };
        return new o({
            width: i *= Math.round(96 * r / 72 * 1e4) / 1e4
        });
    }, p.prototype.scale = function(t, e) {
        if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.scale: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.scale");
        var r = new h(t, 0, 0, e, 0, 0);
        this.ctx.transform = this.ctx.transform.multiply(r);
    }, p.prototype.rotate = function(t) {
        if (isNaN(t)) throw a.error("jsPDF.context2d.rotate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rotate");
        var e = new h(Math.cos(t), Math.sin(t), -Math.sin(t), Math.cos(t), 0, 0);
        this.ctx.transform = this.ctx.transform.multiply(e);
    }, p.prototype.translate = function(t, e) {
        if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.translate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.translate");
        var r = new h(1, 0, 0, 1, t, e);
        this.ctx.transform = this.ctx.transform.multiply(r);
    }, p.prototype.transform = function(t, e, r, n, i, o) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(o)) throw a.error("jsPDF.context2d.transform: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.transform");
        var s = new h(t, e, r, n, i, o);
        this.ctx.transform = this.ctx.transform.multiply(s);
    }, p.prototype.setTransform = function(t, e, r, n, i, a) {
        t = isNaN(t) ? 1 : t, e = isNaN(e) ? 0 : e, r = isNaN(r) ? 0 : r, n = isNaN(n) ? 1 : n, i = isNaN(i) ? 0 : i, a = isNaN(a) ? 0 : a, this.ctx.transform = new h(t, e, r, n, i, a);
    };
    var b = function() {
        return this.margin[0] > 0 || this.margin[1] > 0 || this.margin[2] > 0 || this.margin[3] > 0;
    };
    p.prototype.drawImage = function(t, e, r, n, i, a, o, s, c) {
        var l = this.pdf.getImageProperties(t), f = 1, d = 1, p = 1, g = 1;
        void 0 !== n && void 0 !== s && (p = s / n, g = c / i, f = l.width / n * s / n, d = l.height / i * c / i), void 0 === a && (a = e, o = r, e = 0, r = 0), void 0 !== n && void 0 === s && (s = n, c = i), void 0 === n && void 0 === s && (s = l.width, c = l.height);
        for(var m, v = this.ctx.transform.decompose(), w = q(v.rotate.shx), A = new h, S = (A = (A = (A = A.multiply(v.translate)).multiply(v.skew)).multiply(v.scale)).applyToRectangle(new u(a - e * p, o - r * g, n * f, i * d)), _ = y.call(this, S), P = [], k = 0; k < _.length; k += 1)-1 === P.indexOf(_[k]) && P.push(_[k]);
        if (L(P), this.autoPaging) for(var I = P[0], F = P[P.length - 1], C = I; C < F + 1; C++){
            this.pdf.setPage(C);
            var j = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1], O = 1 === C ? this.posY + this.margin[0] : this.margin[0], B = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], M = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2], E = 1 === C ? 0 : B + (C - 2) * M;
            if (0 !== this.ctx.clip_path.length) {
                var D = this.path;
                m = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(m, this.posX + this.margin[3], -E + O + this.ctx.prevPageLastElemOffset), x.call(this, "fill", !0), this.path = D;
            }
            var R = JSON.parse(JSON.stringify(S));
            R = N([
                R
            ], this.posX + this.margin[3], -E + O + this.ctx.prevPageLastElemOffset)[0];
            var T = (C > I || C < F) && b.call(this);
            T && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], j, M, null).clip().discardPath()), this.pdf.addImage(t, "JPEG", R.x, R.y, R.w, R.h, null, null, w), T && this.pdf.restoreGraphicsState();
        }
        else this.pdf.addImage(t, "JPEG", S.x, S.y, S.w, S.h, null, null, w);
    };
    var y = function(t, e, r) {
        var n = [];
        e = e || this.pdf.internal.pageSize.width, r = r || this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2];
        var i = this.posY + this.ctx.prevPageLastElemOffset;
        switch(t.type){
            default:
            case "mt":
            case "lt":
                n.push(Math.floor((t.y + i) / r) + 1);
                break;
            case "arc":
                n.push(Math.floor((t.y + i - t.radius) / r) + 1), n.push(Math.floor((t.y + i + t.radius) / r) + 1);
                break;
            case "qct":
                var a = D(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x, t.y);
                n.push(Math.floor((a.y + i) / r) + 1), n.push(Math.floor((a.y + a.h + i) / r) + 1);
                break;
            case "bct":
                var o = R(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x2, t.y2, t.x, t.y);
                n.push(Math.floor((o.y + i) / r) + 1), n.push(Math.floor((o.y + o.h + i) / r) + 1);
                break;
            case "rect":
                n.push(Math.floor((t.y + i) / r) + 1), n.push(Math.floor((t.y + t.h + i) / r) + 1);
        }
        for(var s = 0; s < n.length; s += 1)for(; this.pdf.internal.getNumberOfPages() < n[s];)w.call(this);
        return n;
    }, w = function() {
        var t = this.fillStyle, e = this.strokeStyle, r = this.font, n = this.lineCap, i = this.lineWidth, a = this.lineJoin;
        this.pdf.addPage(), this.fillStyle = t, this.strokeStyle = e, this.font = r, this.lineCap = n, this.lineWidth = i, this.lineJoin = a;
    }, N = function(t, e, r) {
        for(var n = 0; n < t.length; n++)switch(t[n].type){
            case "bct":
                t[n].x2 += e, t[n].y2 += r;
            case "qct":
                t[n].x1 += e, t[n].y1 += r;
            case "mt":
            case "lt":
            case "arc":
            default:
                t[n].x += e, t[n].y += r;
        }
        return t;
    }, L = function(t) {
        return t.sort(function(t, e) {
            return t - e;
        });
    }, A = function(t, e) {
        for(var r, n, i = this.fillStyle, a = this.strokeStyle, o = this.lineCap, s = this.lineWidth, c = Math.abs(s * this.ctx.transform.scaleX), u = this.lineJoin, h = JSON.parse(JSON.stringify(this.path)), l = JSON.parse(JSON.stringify(this.path)), f = [], d = 0; d < l.length; d++)if (void 0 !== l[d].x) for(var p = y.call(this, l[d]), g = 0; g < p.length; g += 1)-1 === f.indexOf(p[g]) && f.push(p[g]);
        for(var m = 0; m < f.length; m++)for(; this.pdf.internal.getNumberOfPages() < f[m];)w.call(this);
        if (L(f), this.autoPaging) for(var v = f[0], A = f[f.length - 1], S = v; S < A + 1; S++){
            this.pdf.setPage(S), this.fillStyle = i, this.strokeStyle = a, this.lineCap = o, this.lineWidth = c, this.lineJoin = u;
            var _ = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1], P = 1 === S ? this.posY + this.margin[0] : this.margin[0], k = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], I = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2], F = 1 === S ? 0 : k + (S - 2) * I;
            if (0 !== this.ctx.clip_path.length) {
                var C = this.path;
                r = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(r, this.posX + this.margin[3], -F + P + this.ctx.prevPageLastElemOffset), x.call(this, t, !0), this.path = C;
            }
            if (n = JSON.parse(JSON.stringify(h)), this.path = N(n, this.posX + this.margin[3], -F + P + this.ctx.prevPageLastElemOffset), !1 === e || 0 === S) {
                var j = (S > v || S < A) && b.call(this);
                j && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], _, I, null).clip().discardPath()), x.call(this, t, e), j && this.pdf.restoreGraphicsState();
            }
            this.lineWidth = s;
        }
        else this.lineWidth = c, x.call(this, t, e), this.lineWidth = s;
        this.path = h;
    }, x = function(t, e) {
        if (("stroke" !== t || e || !v.call(this)) && ("stroke" === t || e || !m.call(this))) {
            for(var r, n, i = [], a = this.path, o = 0; o < a.length; o++){
                var s = a[o];
                switch(s.type){
                    case "begin":
                        i.push({
                            begin: !0
                        });
                        break;
                    case "close":
                        i.push({
                            close: !0
                        });
                        break;
                    case "mt":
                        i.push({
                            start: s,
                            deltas: [],
                            abs: []
                        });
                        break;
                    case "lt":
                        var c = i.length;
                        if (a[o - 1] && !isNaN(a[o - 1].x) && (r = [
                            s.x - a[o - 1].x,
                            s.y - a[o - 1].y
                        ], c > 0)) {
                            for(; c >= 0; c--)if (!0 !== i[c - 1].close && !0 !== i[c - 1].begin) {
                                i[c - 1].deltas.push(r), i[c - 1].abs.push(s);
                                break;
                            }
                        }
                        break;
                    case "bct":
                        r = [
                            s.x1 - a[o - 1].x,
                            s.y1 - a[o - 1].y,
                            s.x2 - a[o - 1].x,
                            s.y2 - a[o - 1].y,
                            s.x - a[o - 1].x,
                            s.y - a[o - 1].y
                        ], i[i.length - 1].deltas.push(r);
                        break;
                    case "qct":
                        var u = a[o - 1].x + 2 / 3 * (s.x1 - a[o - 1].x), h = a[o - 1].y + 2 / 3 * (s.y1 - a[o - 1].y), l = s.x + 2 / 3 * (s.x1 - s.x), f = s.y + 2 / 3 * (s.y1 - s.y), d = s.x, p = s.y;
                        r = [
                            u - a[o - 1].x,
                            h - a[o - 1].y,
                            l - a[o - 1].x,
                            f - a[o - 1].y,
                            d - a[o - 1].x,
                            p - a[o - 1].y
                        ], i[i.length - 1].deltas.push(r);
                        break;
                    case "arc":
                        i.push({
                            deltas: [],
                            abs: [],
                            arc: !0
                        }), Array.isArray(i[i.length - 1].abs) && i[i.length - 1].abs.push(s);
                }
            }
            n = e ? null : "stroke" === t ? "stroke" : "fill";
            for(var g = !1, b = 0; b < i.length; b++)if (i[b].arc) for(var y = i[b].abs, w = 0; w < y.length; w++){
                var N = y[w];
                "arc" === N.type ? P.call(this, N.x, N.y, N.radius, N.startAngle, N.endAngle, N.counterclockwise, void 0, e, !g) : j.call(this, N.x, N.y), g = !0;
            }
            else if (!0 === i[b].close) this.pdf.internal.out("h"), g = !1;
            else if (!0 !== i[b].begin) {
                var L = i[b].start.x, A = i[b].start.y;
                O.call(this, i[b].deltas, L, A), g = !0;
            }
            n && k.call(this, n), e && I.call(this);
        }
    }, S = function(t) {
        var e = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor, r = e * (this.pdf.internal.getLineHeightFactor() - 1);
        switch(this.ctx.textBaseline){
            case "bottom":
                return t - r;
            case "top":
                return t + e - r;
            case "hanging":
                return t + e - 2 * r;
            case "middle":
                return t + e / 2 - r;
            case "ideographic":
                return t;
            case "alphabetic":
            default:
                return t;
        }
    }, _ = function(t) {
        return t + this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor * (this.pdf.internal.getLineHeightFactor() - 1);
    };
    p.prototype.createLinearGradient = function() {
        var t = function() {};
        return t.colorStops = [], t.addColorStop = function(t, e) {
            this.colorStops.push([
                t,
                e
            ]);
        }, t.getColor = function() {
            return 0 === this.colorStops.length ? "#000000" : this.colorStops[0][1];
        }, t.isCanvasGradient = !0, t;
    }, p.prototype.createPattern = function() {
        return this.createLinearGradient();
    }, p.prototype.createRadialGradient = function() {
        return this.createLinearGradient();
    };
    var P = function(t, e, r, n, i, a, o, s, c) {
        for(var u = M.call(this, r, n, i, a), h = 0; h < u.length; h++){
            var l = u[h];
            0 === h && (c ? F.call(this, l.x1 + t, l.y1 + e) : j.call(this, l.x1 + t, l.y1 + e)), B.call(this, t, e, l.x2, l.y2, l.x3, l.y3, l.x4, l.y4);
        }
        s ? I.call(this) : k.call(this, o);
    }, k = function(t) {
        switch(t){
            case "stroke":
                this.pdf.internal.out("S");
                break;
            case "fill":
                this.pdf.internal.out("f");
        }
    }, I = function() {
        this.pdf.clip(), this.pdf.discardPath();
    }, F = function(t, e) {
        this.pdf.internal.out(n(t) + " " + i(e) + " m");
    }, C = function(t) {
        var e;
        switch(t.align){
            case "right":
            case "end":
                e = "right";
                break;
            case "center":
                e = "center";
                break;
            case "left":
            case "start":
            default:
                e = "left";
        }
        var r = this.pdf.getTextDimensions(t.text), n = S.call(this, t.y), i = _.call(this, n) - r.h, a = this.ctx.transform.applyToPoint(new c(t.x, n)), o = this.ctx.transform.decompose(), s = new h;
        s = (s = (s = s.multiply(o.translate)).multiply(o.skew)).multiply(o.scale);
        for(var l, f, d, p = this.ctx.transform.applyToRectangle(new u(t.x, n, r.w, r.h)), g = s.applyToRectangle(new u(t.x, i, r.w, r.h)), m = y.call(this, g), v = [], w = 0; w < m.length; w += 1)-1 === v.indexOf(m[w]) && v.push(m[w]);
        if (L(v), this.autoPaging) for(var A = v[0], P = v[v.length - 1], k = A; k < P + 1; k++){
            this.pdf.setPage(k);
            var I = 1 === k ? this.posY + this.margin[0] : this.margin[0], F = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], C = this.pdf.internal.pageSize.height - this.margin[2], j = C - this.margin[0], O = this.pdf.internal.pageSize.width - this.margin[1], B = O - this.margin[3], M = 1 === k ? 0 : F + (k - 2) * j;
            if (0 !== this.ctx.clip_path.length) {
                var E = this.path;
                l = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(l, this.posX + this.margin[3], -1 * M + I), x.call(this, "fill", !0), this.path = E;
            }
            var q = N([
                JSON.parse(JSON.stringify(g))
            ], this.posX + this.margin[3], -M + I + this.ctx.prevPageLastElemOffset)[0];
            t.scale >= .01 && (f = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f * t.scale), d = this.lineWidth, this.lineWidth = d * t.scale);
            var D = "text" !== this.autoPaging;
            if (D || q.y + q.h <= C) {
                if (D || q.y >= I && q.x <= O) {
                    var R = D ? t.text : this.pdf.splitTextToSize(t.text, t.maxWidth || O - q.x)[0], T = N([
                        JSON.parse(JSON.stringify(p))
                    ], this.posX + this.margin[3], -M + I + this.ctx.prevPageLastElemOffset)[0], U = D && (k > A || k < P) && b.call(this);
                    U && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], B, j, null).clip().discardPath()), this.pdf.text(R, T.x, T.y, {
                        angle: t.angle,
                        align: e,
                        renderingMode: t.renderingMode
                    }), U && this.pdf.restoreGraphicsState();
                }
            } else q.y < C && (this.ctx.prevPageLastElemOffset += C - q.y);
            t.scale >= .01 && (this.pdf.setFontSize(f), this.lineWidth = d);
        }
        else t.scale >= .01 && (f = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f * t.scale), d = this.lineWidth, this.lineWidth = d * t.scale), this.pdf.text(t.text, a.x + this.posX, a.y + this.posY, {
            angle: t.angle,
            align: e,
            renderingMode: t.renderingMode,
            maxWidth: t.maxWidth
        }), t.scale >= .01 && (this.pdf.setFontSize(f), this.lineWidth = d);
    }, j = function(t, e, r, a) {
        r = r || 0, a = a || 0, this.pdf.internal.out(n(t + r) + " " + i(e + a) + " l");
    }, O = function(t, e, r) {
        return this.pdf.lines(t, e, r, null, null);
    }, B = function(t, e, n, i, a, c, u, h) {
        this.pdf.internal.out([
            r(o(n + t)),
            r(s(i + e)),
            r(o(a + t)),
            r(s(c + e)),
            r(o(u + t)),
            r(s(h + e)),
            "c"
        ].join(" "));
    }, M = function(t, e, r, n) {
        for(var i = 2 * Math.PI, a = Math.PI / 2; e > r;)e -= i;
        var o = Math.abs(r - e);
        o < i && n && (o = i - o);
        for(var s = [], c = n ? -1 : 1, u = e; o > 1e-5;){
            var h = u + c * Math.min(o, a);
            s.push(E.call(this, t, u, h)), o -= Math.abs(h - u), u = h;
        }
        return s;
    }, E = function(t, e, r) {
        var n = (r - e) / 2, i = t * Math.cos(n), a = t * Math.sin(n), o = i, s = -a, c = o * o + s * s, u = c + o * i + s * a, h = 4 / 3 * (Math.sqrt(2 * c * u) - u) / (o * a - s * i), l = o - h * s, f = s + h * o, d = l, p = -f, g = n + e, m = Math.cos(g), v = Math.sin(g);
        return {
            x1: t * Math.cos(e),
            y1: t * Math.sin(e),
            x2: l * m - f * v,
            y2: l * v + f * m,
            x3: d * m - p * v,
            y3: d * v + p * m,
            x4: t * Math.cos(r),
            y4: t * Math.sin(r)
        };
    }, q = function(t) {
        return 180 * t / Math.PI;
    }, D = function(t, e, r, n, i, a) {
        var o = t + .5 * (r - t), s = e + .5 * (n - e), c = i + .5 * (r - i), h = a + .5 * (n - a), l = Math.min(t, i, o, c), f = Math.max(t, i, o, c), d = Math.min(e, a, s, h), p = Math.max(e, a, s, h);
        return new u(l, d, f - l, p - d);
    }, R = function(t, e, r, n, i, a, o, s) {
        var c, h, l, f, d, p, g, m, v, b, y, w, N, L, A = r - t, x = n - e, S = i - r, _ = a - n, P = o - i, k = s - a;
        for(h = 0; h < 41; h++)v = (g = (l = t + (c = h / 40) * A) + c * ((d = r + c * S) - l)) + c * (d + c * (i + c * P - d) - g), b = (m = (f = e + c * x) + c * ((p = n + c * _) - f)) + c * (p + c * (a + c * k - p) - m), 0 == h ? (y = v, w = b, N = v, L = b) : (y = Math.min(y, v), w = Math.min(w, b), N = Math.max(N, v), L = Math.max(L, b));
        return new u(Math.round(y), Math.round(w), Math.round(N - y), Math.round(L - w));
    }, T = function() {
        if (this.prevLineDash || this.ctx.lineDash.length || this.ctx.lineDashOffset) {
            var t, e, r = (t = this.ctx.lineDash, e = this.ctx.lineDashOffset, JSON.stringify({
                lineDash: t,
                lineDashOffset: e
            }));
            this.prevLineDash !== r && (this.pdf.setLineDash(this.ctx.lineDash, this.ctx.lineDashOffset), this.prevLineDash = r);
        }
    };
}(E.API), /**
 * @license
 * jsPDF filters PlugIn
 * Copyright (c) 2014 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    var r = function(t) {
        var e, r, n, i, a, o, s, c, u, h;
        for(/[^\x00-\xFF]/.test(t), r = [], n = 0, i = (t += e = "\x00\x00\x00\x00".slice(t.length % 4 || 4)).length; i > n; n += 4)0 !== (a = (t.charCodeAt(n) << 24) + (t.charCodeAt(n + 1) << 16) + (t.charCodeAt(n + 2) << 8) + t.charCodeAt(n + 3)) ? (o = (a = ((a = ((a = ((a = (a - (h = a % 85)) / 85) - (u = a % 85)) / 85) - (c = a % 85)) / 85) - (s = a % 85)) / 85) % 85, r.push(o + 33, s + 33, c + 33, u + 33, h + 33)) : r.push(122);
        return function(t, e) {
            for(var r = e; r > 0; r--)t.pop();
        }(r, e.length), String.fromCharCode.apply(String, r) + "~>";
    }, n = function(t) {
        var e, r, n, i, a, o = String, s = "length", c = 255, u = "charCodeAt", h = "slice", l = "replace";
        for(t[h](-2), t = t[h](0, -2)[l](/\s/g, "")[l]("z", "!!!!!"), n = [], i = 0, a = (t += e = "uuuuu"[h](t[s] % 5 || 5))[s]; a > i; i += 5)r = 52200625 * (t[u](i) - 33) + 614125 * (t[u](i + 1) - 33) + 7225 * (t[u](i + 2) - 33) + 85 * (t[u](i + 3) - 33) + (t[u](i + 4) - 33), n.push(c & r >> 24, c & r >> 16, c & r >> 8, c & r);
        return function(t, e) {
            for(var r = e; r > 0; r--)t.pop();
        }(n, e[s]), o.fromCharCode.apply(o, n);
    }, i = function(t) {
        var e = new RegExp(/^([0-9A-Fa-f]{2})+$/);
        if (-1 !== (t = t.replace(/\s/g, "")).indexOf(">") && (t = t.substr(0, t.indexOf(">"))), t.length % 2 && (t += "0"), !1 === e.test(t)) return "";
        for(var r = "", n = 0; n < t.length; n += 2)r += String.fromCharCode("0x" + (t[n] + t[n + 1]));
        return r;
    }, a = function(t) {
        for(var r = new Uint8Array(t.length), n = t.length; n--;)r[n] = t.charCodeAt(n);
        return t = (r = (0, _fflate.zlibSync)(r)).reduce(function(t, e) {
            return t + String.fromCharCode(e);
        }, "");
    };
    t.processDataByFilters = function(t, e) {
        var o = 0, s = t || "", c = [];
        for("string" == typeof (e = e || []) && (e = [
            e
        ]), o = 0; o < e.length; o += 1)switch(e[o]){
            case "ASCII85Decode":
            case "/ASCII85Decode":
                s = n(s), c.push("/ASCII85Encode");
                break;
            case "ASCII85Encode":
            case "/ASCII85Encode":
                s = r(s), c.push("/ASCII85Decode");
                break;
            case "ASCIIHexDecode":
            case "/ASCIIHexDecode":
                s = i(s), c.push("/ASCIIHexEncode");
                break;
            case "ASCIIHexEncode":
            case "/ASCIIHexEncode":
                s = s.split("").map(function(t) {
                    return ("0" + t.charCodeAt().toString(16)).slice(-2);
                }).join("") + ">", c.push("/ASCIIHexDecode");
                break;
            case "FlateEncode":
            case "/FlateEncode":
                s = a(s), c.push("/FlateDecode");
                break;
            default:
                throw new Error('The filter: "' + e[o] + '" is not implemented');
        }
        return {
            data: s,
            reverseChain: c.reverse().join(" ")
        };
    };
}(E.API), /**
 * @license
 * jsPDF fileloading PlugIn
 * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    t.loadFile = function(t, e, r) {
        return function(t, e, r) {
            e = !1 !== e, r = "function" == typeof r ? r : function() {};
            var n = void 0;
            try {
                n = function(t, e, r) {
                    var n = new XMLHttpRequest, i = 0, a = function(t) {
                        var e = t.length, r = [], n = String.fromCharCode;
                        for(i = 0; i < e; i += 1)r.push(n(255 & t.charCodeAt(i)));
                        return r.join("");
                    };
                    if (n.open("GET", t, !e), n.overrideMimeType("text/plain; charset=x-user-defined"), !1 === e && (n.onload = function() {
                        200 === n.status ? r(a(this.responseText)) : r(void 0);
                    }), n.send(null), e && 200 === n.status) return a(n.responseText);
                }(t, e, r);
            } catch (t) {}
            return n;
        }(t, e, r);
    }, t.loadImageFile = t.loadFile;
}(E.API), function(e) {
    function r() {
        return (n.html2canvas ? Promise.resolve(n.html2canvas) : require("e35ed7d1af132742")).catch(function(t) {
            return Promise.reject(new Error("Could not load html2canvas: " + t));
        }).then(function(t) {
            return t.default ? t.default : t;
        });
    }
    function i() {
        return (n.DOMPurify ? Promise.resolve(n.DOMPurify) : require("fd4d839f94e36dff")).catch(function(t) {
            return Promise.reject(new Error("Could not load dompurify: " + t));
        }).then(function(t) {
            return t.default ? t.default : t;
        });
    }
    var a = function(e) {
        var r = (0, _typeofDefault.default)(e);
        return "undefined" === r ? "undefined" : "string" === r || e instanceof String ? "string" : "number" === r || e instanceof Number ? "number" : "function" === r || e instanceof Function ? "function" : e && e.constructor === Array ? "array" : e && 1 === e.nodeType ? "element" : "object" === r ? "object" : "unknown";
    }, o = function(t, e) {
        var r = document.createElement(t);
        for(var n in e.className && (r.className = e.className), e.innerHTML && e.dompurify && (r.innerHTML = e.dompurify.sanitize(e.innerHTML)), e.style)r.style[n] = e.style[n];
        return r;
    }, s = function t(e) {
        var r = Object.assign(t.convert(Promise.resolve()), JSON.parse(JSON.stringify(t.template))), n = t.convert(Promise.resolve(), r);
        return n = (n = n.setProgress(1, t, 1, [
            t
        ])).set(e);
    };
    (s.prototype = Object.create(Promise.prototype)).constructor = s, s.convert = function(t, e) {
        return t.__proto__ = e || s.prototype, t;
    }, s.template = {
        prop: {
            src: null,
            container: null,
            overlay: null,
            canvas: null,
            img: null,
            pdf: null,
            pageSize: null,
            callback: function() {}
        },
        progress: {
            val: 0,
            state: null,
            n: 0,
            stack: []
        },
        opt: {
            filename: "file.pdf",
            margin: [
                0,
                0,
                0,
                0
            ],
            enableLinks: !0,
            x: 0,
            y: 0,
            html2canvas: {},
            jsPDF: {},
            backgroundColor: "transparent"
        }
    }, s.prototype.from = function(t, e) {
        return this.then(function() {
            switch(e = e || function(t) {
                switch(a(t)){
                    case "string":
                        return "string";
                    case "element":
                        return "canvas" === t.nodeName.toLowerCase() ? "canvas" : "element";
                    default:
                        return "unknown";
                }
            }(t)){
                case "string":
                    return this.then(i).then(function(e) {
                        return this.set({
                            src: o("div", {
                                innerHTML: t,
                                dompurify: e
                            })
                        });
                    });
                case "element":
                    return this.set({
                        src: t
                    });
                case "canvas":
                    return this.set({
                        canvas: t
                    });
                case "img":
                    return this.set({
                        img: t
                    });
                default:
                    return this.error("Unknown source type.");
            }
        });
    }, s.prototype.to = function(t) {
        switch(t){
            case "container":
                return this.toContainer();
            case "canvas":
                return this.toCanvas();
            case "img":
                return this.toImg();
            case "pdf":
                return this.toPdf();
            default:
                return this.error("Invalid target.");
        }
    }, s.prototype.toContainer = function() {
        return this.thenList([
            function() {
                return this.prop.src || this.error("Cannot duplicate - no source HTML.");
            },
            function() {
                return this.prop.pageSize || this.setPageSize();
            }
        ]).then(function() {
            var t = {
                position: "relative",
                display: "inline-block",
                width: ("number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth) : this.opt.windowWidth) + "px",
                left: 0,
                right: 0,
                top: 0,
                margin: "auto",
                backgroundColor: this.opt.backgroundColor
            }, e = function t(e, r) {
                for(var n = 3 === e.nodeType ? document.createTextNode(e.nodeValue) : e.cloneNode(!1), i = e.firstChild; i; i = i.nextSibling)!0 !== r && 1 === i.nodeType && "SCRIPT" === i.nodeName || n.appendChild(t(i, r));
                return 1 === e.nodeType && ("CANVAS" === e.nodeName ? (n.width = e.width, n.height = e.height, n.getContext("2d").drawImage(e, 0, 0)) : "TEXTAREA" !== e.nodeName && "SELECT" !== e.nodeName || (n.value = e.value), n.addEventListener("load", function() {
                    n.scrollTop = e.scrollTop, n.scrollLeft = e.scrollLeft;
                }, !0)), n;
            }(this.prop.src, this.opt.html2canvas.javascriptEnabled);
            "BODY" === e.tagName && (t.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + "px"), this.prop.overlay = o("div", {
                className: "html2pdf__overlay",
                style: {
                    position: "fixed",
                    overflow: "hidden",
                    zIndex: 1e3,
                    left: "-100000px",
                    right: 0,
                    bottom: 0,
                    top: 0
                }
            }), this.prop.container = o("div", {
                className: "html2pdf__container",
                style: t
            }), this.prop.container.appendChild(e), this.prop.container.firstChild.appendChild(o("div", {
                style: {
                    clear: "both",
                    border: "0 none transparent",
                    margin: 0,
                    padding: 0,
                    height: 0
                }
            })), this.prop.container.style.float = "none", this.prop.overlay.appendChild(this.prop.container), document.body.appendChild(this.prop.overlay), this.prop.container.firstChild.style.position = "relative", this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + "px";
        });
    }, s.prototype.toCanvas = function() {
        var t = [
            function() {
                return document.body.contains(this.prop.container) || this.toContainer();
            }
        ];
        return this.thenList(t).then(r).then(function(t) {
            var e = Object.assign({}, this.opt.html2canvas);
            return delete e.onrendered, t(this.prop.container, e);
        }).then(function(t) {
            (this.opt.html2canvas.onrendered || function() {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
        });
    }, s.prototype.toContext2d = function() {
        var t = [
            function() {
                return document.body.contains(this.prop.container) || this.toContainer();
            }
        ];
        return this.thenList(t).then(r).then(function(t) {
            var e = this.opt.jsPDF, r = this.opt.fontFaces, n = "number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? 1 : this.opt.width / this.opt.windowWidth, i = Object.assign({
                async: !0,
                allowTaint: !0,
                scale: n,
                scrollX: this.opt.scrollX || 0,
                scrollY: this.opt.scrollY || 0,
                backgroundColor: "#ffffff",
                imageTimeout: 15e3,
                logging: !0,
                proxy: null,
                removeContainer: !0,
                foreignObjectRendering: !1,
                useCORS: !1
            }, this.opt.html2canvas);
            if (delete i.onrendered, e.context2d.autoPaging = void 0 === this.opt.autoPaging || this.opt.autoPaging, e.context2d.posX = this.opt.x, e.context2d.posY = this.opt.y, e.context2d.margin = this.opt.margin, e.context2d.fontFaces = r, r) for(var a = 0; a < r.length; ++a){
                var o = r[a], s = o.src.find(function(t) {
                    return "truetype" === t.format;
                });
                s && e.addFont(s.url, o.ref.name, o.ref.style);
            }
            return i.windowHeight = i.windowHeight || 0, i.windowHeight = 0 == i.windowHeight ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : i.windowHeight, e.context2d.save(!0), t(this.prop.container, i);
        }).then(function(t) {
            this.opt.jsPDF.context2d.restore(!0), (this.opt.html2canvas.onrendered || function() {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
        });
    }, s.prototype.toImg = function() {
        return this.thenList([
            function() {
                return this.prop.canvas || this.toCanvas();
            }
        ]).then(function() {
            var t = this.prop.canvas.toDataURL("image/" + this.opt.image.type, this.opt.image.quality);
            this.prop.img = document.createElement("img"), this.prop.img.src = t;
        });
    }, s.prototype.toPdf = function() {
        return this.thenList([
            function() {
                return this.toContext2d();
            }
        ]).then(function() {
            this.prop.pdf = this.prop.pdf || this.opt.jsPDF;
        });
    }, s.prototype.output = function(t, e, r) {
        return "img" === (r = r || "pdf").toLowerCase() || "image" === r.toLowerCase() ? this.outputImg(t, e) : this.outputPdf(t, e);
    }, s.prototype.outputPdf = function(t, e) {
        return this.thenList([
            function() {
                return this.prop.pdf || this.toPdf();
            }
        ]).then(function() {
            return this.prop.pdf.output(t, e);
        });
    }, s.prototype.outputImg = function(t) {
        return this.thenList([
            function() {
                return this.prop.img || this.toImg();
            }
        ]).then(function() {
            switch(t){
                case void 0:
                case "img":
                    return this.prop.img;
                case "datauristring":
                case "dataurlstring":
                    return this.prop.img.src;
                case "datauri":
                case "dataurl":
                    return document.location.href = this.prop.img.src;
                default:
                    throw 'Image output type "' + t + '" is not supported.';
            }
        });
    }, s.prototype.save = function(t) {
        return this.thenList([
            function() {
                return this.prop.pdf || this.toPdf();
            }
        ]).set(t ? {
            filename: t
        } : null).then(function() {
            this.prop.pdf.save(this.opt.filename);
        });
    }, s.prototype.doCallback = function() {
        return this.thenList([
            function() {
                return this.prop.pdf || this.toPdf();
            }
        ]).then(function() {
            this.prop.callback(this.prop.pdf);
        });
    }, s.prototype.set = function(t) {
        if ("object" !== a(t)) return this;
        var e = Object.keys(t || {}).map(function(e) {
            if (e in s.template.prop) return function() {
                this.prop[e] = t[e];
            };
            switch(e){
                case "margin":
                    return this.setMargin.bind(this, t.margin);
                case "jsPDF":
                    return function() {
                        return this.opt.jsPDF = t.jsPDF, this.setPageSize();
                    };
                case "pageSize":
                    return this.setPageSize.bind(this, t.pageSize);
                default:
                    return function() {
                        this.opt[e] = t[e];
                    };
            }
        }, this);
        return this.then(function() {
            return this.thenList(e);
        });
    }, s.prototype.get = function(t, e) {
        return this.then(function() {
            var r = t in s.template.prop ? this.prop[t] : this.opt[t];
            return e ? e(r) : r;
        });
    }, s.prototype.setMargin = function(t) {
        return this.then(function() {
            switch(a(t)){
                case "number":
                    t = [
                        t,
                        t,
                        t,
                        t
                    ];
                case "array":
                    if (2 === t.length && (t = [
                        t[0],
                        t[1],
                        t[0],
                        t[1]
                    ]), 4 === t.length) break;
                default:
                    return this.error("Invalid margin array.");
            }
            this.opt.margin = t;
        }).then(this.setPageSize);
    }, s.prototype.setPageSize = function(t) {
        function e(t, e) {
            return Math.floor(t * e / 72 * 96);
        }
        return this.then(function() {
            (t = t || E.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner") || (t.inner = {
                width: t.width - this.opt.margin[1] - this.opt.margin[3],
                height: t.height - this.opt.margin[0] - this.opt.margin[2]
            }, t.inner.px = {
                width: e(t.inner.width, t.k),
                height: e(t.inner.height, t.k)
            }, t.inner.ratio = t.inner.height / t.inner.width), this.prop.pageSize = t;
        });
    }, s.prototype.setProgress = function(t, e, r, n) {
        return null != t && (this.progress.val = t), null != e && (this.progress.state = e), null != r && (this.progress.n = r), null != n && (this.progress.stack = n), this.progress.ratio = this.progress.val / this.progress.state, this;
    }, s.prototype.updateProgress = function(t, e, r, n) {
        return this.setProgress(t ? this.progress.val + t : null, e || null, r ? this.progress.n + r : null, n ? this.progress.stack.concat(n) : null);
    }, s.prototype.then = function(t, e) {
        var r = this;
        return this.thenCore(t, e, function(t, e) {
            return r.updateProgress(null, null, 1, [
                t
            ]), Promise.prototype.then.call(this, function(e) {
                return r.updateProgress(null, t), e;
            }).then(t, e).then(function(t) {
                return r.updateProgress(1), t;
            });
        });
    }, s.prototype.thenCore = function(t, e, r) {
        r = r || Promise.prototype.then;
        t && (t = t.bind(this)), e && (e = e.bind(this));
        var n = -1 !== Promise.toString().indexOf("[native code]") && "Promise" === Promise.name ? this : s.convert(Object.assign({}, this), Promise.prototype), i = r.call(n, t, e);
        return s.convert(i, this.__proto__);
    }, s.prototype.thenExternal = function(t, e) {
        return Promise.prototype.then.call(this, t, e);
    }, s.prototype.thenList = function(t) {
        var e = this;
        return t.forEach(function(t) {
            e = e.thenCore(t);
        }), e;
    }, s.prototype.catch = function(t) {
        t && (t = t.bind(this));
        var e = Promise.prototype.catch.call(this, t);
        return s.convert(e, this);
    }, s.prototype.catchExternal = function(t) {
        return Promise.prototype.catch.call(this, t);
    }, s.prototype.error = function(t) {
        return this.then(function() {
            throw new Error(t);
        });
    }, s.prototype.using = s.prototype.set, s.prototype.saveAs = s.prototype.save, s.prototype.export = s.prototype.output, s.prototype.run = s.prototype.then, E.getPageSize = function(e, r, n) {
        if ("object" === (0, _typeofDefault.default)(e)) {
            var i = e;
            e = i.orientation, r = i.unit || r, n = i.format || n;
        }
        r = r || "mm", n = n || "a4", e = ("" + (e || "P")).toLowerCase();
        var a, o = ("" + n).toLowerCase(), s = {
            a0: [
                2383.94,
                3370.39
            ],
            a1: [
                1683.78,
                2383.94
            ],
            a2: [
                1190.55,
                1683.78
            ],
            a3: [
                841.89,
                1190.55
            ],
            a4: [
                595.28,
                841.89
            ],
            a5: [
                419.53,
                595.28
            ],
            a6: [
                297.64,
                419.53
            ],
            a7: [
                209.76,
                297.64
            ],
            a8: [
                147.4,
                209.76
            ],
            a9: [
                104.88,
                147.4
            ],
            a10: [
                73.7,
                104.88
            ],
            b0: [
                2834.65,
                4008.19
            ],
            b1: [
                2004.09,
                2834.65
            ],
            b2: [
                1417.32,
                2004.09
            ],
            b3: [
                1000.63,
                1417.32
            ],
            b4: [
                708.66,
                1000.63
            ],
            b5: [
                498.9,
                708.66
            ],
            b6: [
                354.33,
                498.9
            ],
            b7: [
                249.45,
                354.33
            ],
            b8: [
                175.75,
                249.45
            ],
            b9: [
                124.72,
                175.75
            ],
            b10: [
                87.87,
                124.72
            ],
            c0: [
                2599.37,
                3676.54
            ],
            c1: [
                1836.85,
                2599.37
            ],
            c2: [
                1298.27,
                1836.85
            ],
            c3: [
                918.43,
                1298.27
            ],
            c4: [
                649.13,
                918.43
            ],
            c5: [
                459.21,
                649.13
            ],
            c6: [
                323.15,
                459.21
            ],
            c7: [
                229.61,
                323.15
            ],
            c8: [
                161.57,
                229.61
            ],
            c9: [
                113.39,
                161.57
            ],
            c10: [
                79.37,
                113.39
            ],
            dl: [
                311.81,
                623.62
            ],
            letter: [
                612,
                792
            ],
            "government-letter": [
                576,
                756
            ],
            legal: [
                612,
                1008
            ],
            "junior-legal": [
                576,
                360
            ],
            ledger: [
                1224,
                792
            ],
            tabloid: [
                792,
                1224
            ],
            "credit-card": [
                153,
                243
            ]
        };
        switch(r){
            case "pt":
                a = 1;
                break;
            case "mm":
                a = 72 / 25.4;
                break;
            case "cm":
                a = 72 / 2.54;
                break;
            case "in":
                a = 72;
                break;
            case "px":
                a = .75;
                break;
            case "pc":
            case "em":
                a = 12;
                break;
            case "ex":
                a = 6;
                break;
            default:
                throw "Invalid unit: " + r;
        }
        var c, u = 0, h = 0;
        if (s.hasOwnProperty(o)) u = s[o][1] / a, h = s[o][0] / a;
        else try {
            u = n[1], h = n[0];
        } catch (t) {
            throw new Error("Invalid format: " + n);
        }
        if ("p" === e || "portrait" === e) e = "p", h > u && (c = h, h = u, u = c);
        else {
            if ("l" !== e && "landscape" !== e) throw "Invalid orientation: " + e;
            e = "l", u > h && (c = h, h = u, u = c);
        }
        return {
            width: h,
            height: u,
            unit: r,
            k: a,
            orientation: e
        };
    }, e.html = function(t, e) {
        (e = e || {}).callback = e.callback || function() {}, e.html2canvas = e.html2canvas || {}, e.html2canvas.canvas = e.html2canvas.canvas || this.canvas, e.jsPDF = e.jsPDF || this, e.fontFaces = e.fontFaces ? e.fontFaces.map(jt) : null;
        var r = new s(e);
        return e.worker ? r : r.from(t).doCallback();
    };
}(E.API), E.API.addJS = function(t) {
    return Ht = t, this.internal.events.subscribe("postPutResources", function() {
        Ut = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/Names [(EmbeddedJS) " + (Ut + 1) + " 0 R]"), this.internal.out(">>"), this.internal.out("endobj"), zt = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /JavaScript"), this.internal.out("/JS (" + Ht + ")"), this.internal.out(">>"), this.internal.out("endobj");
    }), this.internal.events.subscribe("putCatalog", function() {
        void 0 !== Ut && void 0 !== zt && this.internal.out("/Names <</JavaScript " + Ut + " 0 R>>");
    }), this;
}, /**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    var e;
    t.events.push([
        "postPutResources",
        function() {
            var t = this, r = /^(\d+) 0 obj$/;
            if (this.outline.root.children.length > 0) for(var n = t.outline.render().split(/\r\n/), i = 0; i < n.length; i++){
                var a = n[i], o = r.exec(a);
                if (null != o) {
                    var s = o[1];
                    t.internal.newObjectDeferredBegin(s, !1);
                }
                t.internal.write(a);
            }
            if (this.outline.createNamedDestinations) {
                var c = this.internal.pages.length, u = [];
                for(i = 0; i < c; i++){
                    var h = t.internal.newObject();
                    u.push(h);
                    var l = t.internal.getPageInfo(i + 1);
                    t.internal.write("<< /D[" + l.objId + " 0 R /XYZ null null null]>> endobj");
                }
                var f = t.internal.newObject();
                t.internal.write("<< /Names [ ");
                for(i = 0; i < u.length; i++)t.internal.write("(page_" + (i + 1) + ")" + u[i] + " 0 R");
                t.internal.write(" ] >>", "endobj"), e = t.internal.newObject(), t.internal.write("<< /Dests " + f + " 0 R"), t.internal.write(">>", "endobj");
            }
        }
    ]), t.events.push([
        "putCatalog",
        function() {
            this.outline.root.children.length > 0 && (this.internal.write("/Outlines", this.outline.makeRef(this.outline.root)), this.outline.createNamedDestinations && this.internal.write("/Names " + e + " 0 R"));
        }
    ]), t.events.push([
        "initialized",
        function() {
            var t = this;
            t.outline = {
                createNamedDestinations: !1,
                root: {
                    children: []
                }
            }, t.outline.add = function(t, e, r) {
                var n = {
                    title: e,
                    options: r,
                    children: []
                };
                return null == t && (t = this.root), t.children.push(n), n;
            }, t.outline.render = function() {
                return this.ctx = {}, this.ctx.val = "", this.ctx.pdf = t, this.genIds_r(this.root), this.renderRoot(this.root), this.renderItems(this.root), this.ctx.val;
            }, t.outline.genIds_r = function(e) {
                e.id = t.internal.newObjectDeferred();
                for(var r = 0; r < e.children.length; r++)this.genIds_r(e.children[r]);
            }, t.outline.renderRoot = function(t) {
                this.objStart(t), this.line("/Type /Outlines"), t.children.length > 0 && (this.line("/First " + this.makeRef(t.children[0])), this.line("/Last " + this.makeRef(t.children[t.children.length - 1]))), this.line("/Count " + this.count_r({
                    count: 0
                }, t)), this.objEnd();
            }, t.outline.renderItems = function(e) {
                for(var r = this.ctx.pdf.internal.getVerticalCoordinateString, n = 0; n < e.children.length; n++){
                    var i = e.children[n];
                    this.objStart(i), this.line("/Title " + this.makeString(i.title)), this.line("/Parent " + this.makeRef(e)), n > 0 && this.line("/Prev " + this.makeRef(e.children[n - 1])), n < e.children.length - 1 && this.line("/Next " + this.makeRef(e.children[n + 1])), i.children.length > 0 && (this.line("/First " + this.makeRef(i.children[0])), this.line("/Last " + this.makeRef(i.children[i.children.length - 1])));
                    var a = this.count = this.count_r({
                        count: 0
                    }, i);
                    if (a > 0 && this.line("/Count " + a), i.options && i.options.pageNumber) {
                        var o = t.internal.getPageInfo(i.options.pageNumber);
                        this.line("/Dest [" + o.objId + " 0 R /XYZ 0 " + r(0) + " 0]");
                    }
                    this.objEnd();
                }
                for(var s = 0; s < e.children.length; s++)this.renderItems(e.children[s]);
            }, t.outline.line = function(t) {
                this.ctx.val += t + "\r\n";
            }, t.outline.makeRef = function(t) {
                return t.id + " 0 R";
            }, t.outline.makeString = function(e) {
                return "(" + t.internal.pdfEscape(e) + ")";
            }, t.outline.objStart = function(t) {
                this.ctx.val += "\r\n" + t.id + " 0 obj\r\n<<\r\n";
            }, t.outline.objEnd = function() {
                this.ctx.val += ">> \r\nendobj\r\n";
            }, t.outline.count_r = function(t, e) {
                for(var r = 0; r < e.children.length; r++)t.count++, this.count_r(t, e.children[r]);
                return t.count;
            };
        }
    ]);
}(E.API), /**
 * @license
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    var e = [
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199
    ];
    t.processJPEG = function(t, r, n, i, a, o) {
        var s, c = this.decode.DCT_DECODE, u = null;
        if ("string" == typeof t || this.__addimage__.isArrayBuffer(t) || this.__addimage__.isArrayBufferView(t)) {
            switch(t = a || t, t = this.__addimage__.isArrayBuffer(t) ? new Uint8Array(t) : t, (s = function(t) {
                for(var r, n = 256 * t.charCodeAt(4) + t.charCodeAt(5), i = t.length, a = {
                    width: 0,
                    height: 0,
                    numcomponents: 1
                }, o = 4; o < i; o += 2){
                    if (o += n, -1 !== e.indexOf(t.charCodeAt(o + 1))) {
                        r = 256 * t.charCodeAt(o + 5) + t.charCodeAt(o + 6), a = {
                            width: 256 * t.charCodeAt(o + 7) + t.charCodeAt(o + 8),
                            height: r,
                            numcomponents: t.charCodeAt(o + 9)
                        };
                        break;
                    }
                    n = 256 * t.charCodeAt(o + 2) + t.charCodeAt(o + 3);
                }
                return a;
            }(t = this.__addimage__.isArrayBufferView(t) ? this.__addimage__.arrayBufferToBinaryString(t) : t)).numcomponents){
                case 1:
                    o = this.color_spaces.DEVICE_GRAY;
                    break;
                case 4:
                    o = this.color_spaces.DEVICE_CMYK;
                    break;
                case 3:
                    o = this.color_spaces.DEVICE_RGB;
            }
            u = {
                data: t,
                width: s.width,
                height: s.height,
                colorSpace: o,
                bitsPerComponent: 8,
                filter: c,
                index: r,
                alias: n
            };
        }
        return u;
    };
}(E.API);
var Vt, Gt, Yt, Jt, Xt, Kt = function() {
    var t, e, i;
    function a(t) {
        var e, r, n, i, a, o, s, c, u, h, l, f, d, p;
        for(this.data = t, this.pos = 8, this.palette = [], this.imgData = [], this.transparency = {}, this.animation = null, this.text = {}, o = null;;){
            switch(e = this.readUInt32(), u = (function() {
                var t, e;
                for(e = [], t = 0; t < 4; ++t)e.push(String.fromCharCode(this.data[this.pos++]));
                return e;
            }).call(this).join("")){
                case "IHDR":
                    this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
                    break;
                case "acTL":
                    this.animation = {
                        numFrames: this.readUInt32(),
                        numPlays: this.readUInt32() || 1 / 0,
                        frames: []
                    };
                    break;
                case "PLTE":
                    this.palette = this.read(e);
                    break;
                case "fcTL":
                    o && this.animation.frames.push(o), this.pos += 4, o = {
                        width: this.readUInt32(),
                        height: this.readUInt32(),
                        xOffset: this.readUInt32(),
                        yOffset: this.readUInt32()
                    }, a = this.readUInt16(), i = this.readUInt16() || 100, o.delay = 1e3 * a / i, o.disposeOp = this.data[this.pos++], o.blendOp = this.data[this.pos++], o.data = [];
                    break;
                case "IDAT":
                case "fdAT":
                    for("fdAT" === u && (this.pos += 4, e -= 4), t = (null != o ? o.data : void 0) || this.imgData, f = 0; 0 <= e ? f < e : f > e; 0 <= e ? ++f : --f)t.push(this.data[this.pos++]);
                    break;
                case "tRNS":
                    switch(this.transparency = {}, this.colorType){
                        case 3:
                            if (n = this.palette.length / 3, this.transparency.indexed = this.read(e), this.transparency.indexed.length > n) throw new Error("More transparent colors than palette size");
                            if ((h = n - this.transparency.indexed.length) > 0) for(d = 0; 0 <= h ? d < h : d > h; 0 <= h ? ++d : --d)this.transparency.indexed.push(255);
                            break;
                        case 0:
                            this.transparency.grayscale = this.read(e)[0];
                            break;
                        case 2:
                            this.transparency.rgb = this.read(e);
                    }
                    break;
                case "tEXt":
                    s = (l = this.read(e)).indexOf(0), c = String.fromCharCode.apply(String, l.slice(0, s)), this.text[c] = String.fromCharCode.apply(String, l.slice(s + 1));
                    break;
                case "IEND":
                    return o && this.animation.frames.push(o), this.colors = (function() {
                        switch(this.colorType){
                            case 0:
                            case 3:
                            case 4:
                                return 1;
                            case 2:
                            case 6:
                                return 3;
                        }
                    }).call(this), this.hasAlphaChannel = 4 === (p = this.colorType) || 6 === p, r = this.colors + (this.hasAlphaChannel ? 1 : 0), this.pixelBitlength = this.bits * r, this.colorSpace = (function() {
                        switch(this.colors){
                            case 1:
                                return "DeviceGray";
                            case 3:
                                return "DeviceRGB";
                        }
                    }).call(this), void (this.imgData = new Uint8Array(this.imgData));
                default:
                    this.pos += e;
            }
            if (this.pos += 4, this.pos > this.data.length) throw new Error("Incomplete or corrupt PNG file");
        }
    }
    a.prototype.read = function(t) {
        var e, r;
        for(r = [], e = 0; 0 <= t ? e < t : e > t; 0 <= t ? ++e : --e)r.push(this.data[this.pos++]);
        return r;
    }, a.prototype.readUInt32 = function() {
        return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
    }, a.prototype.readUInt16 = function() {
        return this.data[this.pos++] << 8 | this.data[this.pos++];
    }, a.prototype.decodePixels = function(t) {
        var e = this.pixelBitlength / 8, n = new Uint8Array(this.width * this.height * e), i = 0, a = this;
        if (null == t && (t = this.imgData), 0 === t.length) return new Uint8Array(0);
        function o(r, o, s, c) {
            var u, h, l, f, d, p, g, m, v, b, y, w, N, L, A, x, S, _, P, k, I, F = Math.ceil((a.width - r) / s), C = Math.ceil((a.height - o) / c), j = a.width == F && a.height == C;
            for(L = e * F, w = j ? n : new Uint8Array(L * C), p = t.length, N = 0, h = 0; N < C && i < p;){
                switch(t[i++]){
                    case 0:
                        for(f = S = 0; S < L; f = S += 1)w[h++] = t[i++];
                        break;
                    case 1:
                        for(f = _ = 0; _ < L; f = _ += 1)u = t[i++], d = f < e ? 0 : w[h - e], w[h++] = (u + d) % 256;
                        break;
                    case 2:
                        for(f = P = 0; P < L; f = P += 1)u = t[i++], l = (f - f % e) / e, A = N && w[(N - 1) * L + l * e + f % e], w[h++] = (A + u) % 256;
                        break;
                    case 3:
                        for(f = k = 0; k < L; f = k += 1)u = t[i++], l = (f - f % e) / e, d = f < e ? 0 : w[h - e], A = N && w[(N - 1) * L + l * e + f % e], w[h++] = (u + Math.floor((d + A) / 2)) % 256;
                        break;
                    case 4:
                        for(f = I = 0; I < L; f = I += 1)u = t[i++], l = (f - f % e) / e, d = f < e ? 0 : w[h - e], 0 === N ? A = x = 0 : (A = w[(N - 1) * L + l * e + f % e], x = l && w[(N - 1) * L + (l - 1) * e + f % e]), g = d + A - x, m = Math.abs(g - d), b = Math.abs(g - A), y = Math.abs(g - x), v = m <= b && m <= y ? d : b <= y ? A : x, w[h++] = (u + v) % 256;
                        break;
                    default:
                        throw new Error("Invalid filter algorithm: " + t[i - 1]);
                }
                if (!j) {
                    var O = ((o + N * c) * a.width + r) * e, B = N * L;
                    for(f = 0; f < F; f += 1){
                        for(var M = 0; M < e; M += 1)n[O++] = w[B++];
                        O += (s - 1) * e;
                    }
                }
                N++;
            }
        }
        return t = (0, _fflate.unzlibSync)(t), 1 == a.interlaceMethod ? (o(0, 0, 8, 8), o(4, 0, 8, 8), o(0, 4, 4, 8), o(2, 0, 4, 4), o(0, 2, 2, 4), o(1, 0, 2, 2), o(0, 1, 1, 2)) : o(0, 0, 1, 1), n;
    }, a.prototype.decodePalette = function() {
        var t, e, r, n, i, a, o, s, c;
        for(r = this.palette, a = this.transparency.indexed || [], i = new Uint8Array((a.length || 0) + r.length), n = 0, t = 0, e = o = 0, s = r.length; o < s; e = o += 3)i[n++] = r[e], i[n++] = r[e + 1], i[n++] = r[e + 2], i[n++] = null != (c = a[t++]) ? c : 255;
        return i;
    }, a.prototype.copyToImageData = function(t, e) {
        var r, n, i, a, o, s, c, u, h, l, f;
        if (n = this.colors, h = null, r = this.hasAlphaChannel, this.palette.length && (h = null != (f = this._decodedPalette) ? f : this._decodedPalette = this.decodePalette(), n = 4, r = !0), u = (i = t.data || t).length, o = h || e, a = s = 0, 1 === n) for(; a < u;)c = h ? 4 * e[a / 4] : s, l = o[c++], i[a++] = l, i[a++] = l, i[a++] = l, i[a++] = r ? o[c++] : 255, s = c;
        else for(; a < u;)c = h ? 4 * e[a / 4] : s, i[a++] = o[c++], i[a++] = o[c++], i[a++] = o[c++], i[a++] = r ? o[c++] : 255, s = c;
    }, a.prototype.decode = function() {
        var t;
        return t = new Uint8Array(this.width * this.height * 4), this.copyToImageData(t, this.decodePixels()), t;
    };
    var o = function() {
        if ("[object Window]" === Object.prototype.toString.call(n)) {
            try {
                e = n.document.createElement("canvas"), i = e.getContext("2d");
            } catch (t) {
                return !1;
            }
            return !0;
        }
        return !1;
    };
    return o(), t = function(t) {
        var r;
        if (!0 === o()) return i.width = t.width, i.height = t.height, i.clearRect(0, 0, t.width, t.height), i.putImageData(t, 0, 0), (r = new Image).src = e.toDataURL(), r;
        throw new Error("This method requires a Browser with Canvas-capability.");
    }, a.prototype.decodeFrames = function(e) {
        var r, n, i, a, o, s, c, u;
        if (this.animation) {
            for(u = [], n = o = 0, s = (c = this.animation.frames).length; o < s; n = ++o)r = c[n], i = e.createImageData(r.width, r.height), a = this.decodePixels(new Uint8Array(r.data)), this.copyToImageData(i, a), r.imageData = i, u.push(r.image = t(i));
            return u;
        }
    }, a.prototype.renderFrame = function(t, e) {
        var r, n, i;
        return r = (n = this.animation.frames)[e], i = n[e - 1], 0 === e && t.clearRect(0, 0, this.width, this.height), 1 === (null != i ? i.disposeOp : void 0) ? t.clearRect(i.xOffset, i.yOffset, i.width, i.height) : 2 === (null != i ? i.disposeOp : void 0) && t.putImageData(i.imageData, i.xOffset, i.yOffset), 0 === r.blendOp && t.clearRect(r.xOffset, r.yOffset, r.width, r.height), t.drawImage(r.image, r.xOffset, r.yOffset);
    }, a.prototype.animate = function(t) {
        var e, r, n, i, a, o, s = this;
        return r = 0, o = this.animation, i = o.numFrames, n = o.frames, a = o.numPlays, (e = function() {
            var o, c;
            if (o = r++ % i, c = n[o], s.renderFrame(t, o), i > 1 && r / i < a) return s.animation._timeout = setTimeout(e, c.delay);
        })();
    }, a.prototype.stopAnimation = function() {
        var t;
        return clearTimeout(null != (t = this.animation) ? t._timeout : void 0);
    }, a.prototype.render = function(t) {
        var e, r;
        return t._png && t._png.stopAnimation(), t._png = this, t.width = this.width, t.height = this.height, e = t.getContext("2d"), this.animation ? (this.decodeFrames(e), this.animate(e)) : (r = e.createImageData(this.width, this.height), this.copyToImageData(r, this.decodePixels()), e.putImageData(r, 0, 0));
    }, a;
}();
/**
 * @license
 *
 * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */ /**
 * @license
 * (c) Dean McNamee <dean@gmail.com>, 2013.
 *
 * https://github.com/deanm/omggif
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
 * including animation and compression.  It does not rely on any specific
 * underlying system, so should run in the browser, Node, or Plask.
 */ function Zt(t) {
    var e = 0;
    if (71 !== t[e++] || 73 !== t[e++] || 70 !== t[e++] || 56 !== t[e++] || 56 != (t[e++] + 1 & 253) || 97 !== t[e++]) throw new Error("Invalid GIF 87a/89a header.");
    var r = t[e++] | t[e++] << 8, n = t[e++] | t[e++] << 8, i = t[e++], a = i >> 7, o = 1 << (7 & i) + 1;
    t[e++];
    t[e++];
    var s = null, c = null;
    a && (s = e, c = o, e += 3 * o);
    var u = !0, h = [], l = 0, f = null, d = 0, p = null;
    for(this.width = r, this.height = n; u && e < t.length;)switch(t[e++]){
        case 33:
            switch(t[e++]){
                case 255:
                    if (11 !== t[e] || 78 == t[e + 1] && 69 == t[e + 2] && 84 == t[e + 3] && 83 == t[e + 4] && 67 == t[e + 5] && 65 == t[e + 6] && 80 == t[e + 7] && 69 == t[e + 8] && 50 == t[e + 9] && 46 == t[e + 10] && 48 == t[e + 11] && 3 == t[e + 12] && 1 == t[e + 13] && 0 == t[e + 16]) e += 14, p = t[e++] | t[e++] << 8, e++;
                    else for(e += 12;;){
                        if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
                        if (0 === P) break;
                        e += P;
                    }
                    break;
                case 249:
                    if (4 !== t[e++] || 0 !== t[e + 4]) throw new Error("Invalid graphics extension block.");
                    var g = t[e++];
                    l = t[e++] | t[e++] << 8, f = t[e++], 0 == (1 & g) && (f = null), d = g >> 2 & 7, e++;
                    break;
                case 254:
                    for(;;){
                        if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
                        if (0 === P) break;
                        e += P;
                    }
                    break;
                default:
                    throw new Error("Unknown graphic control label: 0x" + t[e - 1].toString(16));
            }
            break;
        case 44:
            var m = t[e++] | t[e++] << 8, v = t[e++] | t[e++] << 8, b = t[e++] | t[e++] << 8, y = t[e++] | t[e++] << 8, w = t[e++], N = w >> 6 & 1, L = 1 << (7 & w) + 1, A = s, x = c, S = !1;
            if (w >> 7) {
                S = !0;
                A = e, x = L, e += 3 * L;
            }
            var _ = e;
            for(e++;;){
                var P;
                if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
                if (0 === P) break;
                e += P;
            }
            h.push({
                x: m,
                y: v,
                width: b,
                height: y,
                has_local_palette: S,
                palette_offset: A,
                palette_size: x,
                data_offset: _,
                data_length: e - _,
                transparent_index: f,
                interlaced: !!N,
                delay: l,
                disposal: d
            });
            break;
        case 59:
            u = !1;
            break;
        default:
            throw new Error("Unknown gif block: 0x" + t[e - 1].toString(16));
    }
    this.numFrames = function() {
        return h.length;
    }, this.loopCount = function() {
        return p;
    }, this.frameInfo = function(t) {
        if (t < 0 || t >= h.length) throw new Error("Frame index out of range.");
        return h[t];
    }, this.decodeAndBlitFrameBGRA = function(e, n) {
        var i = this.frameInfo(e), a = i.width * i.height, o = new Uint8Array(a);
        $t(t, i.data_offset, o, a);
        var s = i.palette_offset, c = i.transparent_index;
        null === c && (c = 256);
        var u = i.width, h = r - u, l = u, f = 4 * (i.y * r + i.x), d = 4 * ((i.y + i.height) * r + i.x), p = f, g = 4 * h;
        !0 === i.interlaced && (g += 4 * r * 7);
        for(var m = 8, v = 0, b = o.length; v < b; ++v){
            var y = o[v];
            if (0 === l && (l = u, (p += g) >= d && (g = 4 * h + 4 * r * (m - 1), p = f + (u + h) * (m << 1), m >>= 1)), y === c) p += 4;
            else {
                var w = t[s + 3 * y], N = t[s + 3 * y + 1], L = t[s + 3 * y + 2];
                n[p++] = L, n[p++] = N, n[p++] = w, n[p++] = 255;
            }
            --l;
        }
    }, this.decodeAndBlitFrameRGBA = function(e, n) {
        var i = this.frameInfo(e), a = i.width * i.height, o = new Uint8Array(a);
        $t(t, i.data_offset, o, a);
        var s = i.palette_offset, c = i.transparent_index;
        null === c && (c = 256);
        var u = i.width, h = r - u, l = u, f = 4 * (i.y * r + i.x), d = 4 * ((i.y + i.height) * r + i.x), p = f, g = 4 * h;
        !0 === i.interlaced && (g += 4 * r * 7);
        for(var m = 8, v = 0, b = o.length; v < b; ++v){
            var y = o[v];
            if (0 === l && (l = u, (p += g) >= d && (g = 4 * h + 4 * r * (m - 1), p = f + (u + h) * (m << 1), m >>= 1)), y === c) p += 4;
            else {
                var w = t[s + 3 * y], N = t[s + 3 * y + 1], L = t[s + 3 * y + 2];
                n[p++] = w, n[p++] = N, n[p++] = L, n[p++] = 255;
            }
            --l;
        }
    };
}
function $t(t, e, r, n) {
    for(var i = t[e++], o = 1 << i, s = o + 1, c = s + 1, u = i + 1, h = (1 << u) - 1, l = 0, f = 0, d = 0, p = t[e++], g = new Int32Array(4096), m = null;;){
        for(; l < 16 && 0 !== p;)f |= t[e++] << l, l += 8, 1 === p ? p = t[e++] : --p;
        if (l < u) break;
        var v = f & h;
        if (f >>= u, l -= u, v !== o) {
            if (v === s) break;
            for(var b = v < c ? v : m, y = 0, w = b; w > o;)w = g[w] >> 8, ++y;
            var N = w;
            if (d + y + (b !== v ? 1 : 0) > n) return void a.log("Warning, gif stream longer than expected.");
            r[d++] = N;
            var L = d += y;
            for(b !== v && (r[d++] = N), w = b; y--;)w = g[w], r[--L] = 255 & w, w >>= 8;
            null !== m && c < 4096 && (g[c++] = m << 8 | N, c >= h + 1 && u < 12 && (++u, h = h << 1 | 1)), m = v;
        } else c = s + 1, h = (1 << (u = i + 1)) - 1, m = null;
    }
    return d !== n && a.log("Warning, gif stream shorter than expected."), r;
}
/**
 * @license
  Copyright (c) 2008, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ function Qt(t) {
    var e, r, n, i, a, o = Math.floor, s = new Array(64), c = new Array(64), u = new Array(64), h = new Array(64), l = new Array(65535), f = new Array(65535), d = new Array(64), p = new Array(64), g = [], m = 0, v = 7, b = new Array(64), y = new Array(64), w = new Array(64), N = new Array(256), L = new Array(2048), A = [
        0,
        1,
        5,
        6,
        14,
        15,
        27,
        28,
        2,
        4,
        7,
        13,
        16,
        26,
        29,
        42,
        3,
        8,
        12,
        17,
        25,
        30,
        41,
        43,
        9,
        11,
        18,
        24,
        31,
        40,
        44,
        53,
        10,
        19,
        23,
        32,
        39,
        45,
        52,
        54,
        20,
        22,
        33,
        38,
        46,
        51,
        55,
        60,
        21,
        34,
        37,
        47,
        50,
        56,
        59,
        61,
        35,
        36,
        48,
        49,
        57,
        58,
        62,
        63
    ], x = [
        0,
        0,
        1,
        5,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ], S = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
    ], _ = [
        0,
        0,
        2,
        1,
        3,
        3,
        2,
        4,
        3,
        5,
        5,
        4,
        4,
        0,
        0,
        1,
        125
    ], P = [
        1,
        2,
        3,
        0,
        4,
        17,
        5,
        18,
        33,
        49,
        65,
        6,
        19,
        81,
        97,
        7,
        34,
        113,
        20,
        50,
        129,
        145,
        161,
        8,
        35,
        66,
        177,
        193,
        21,
        82,
        209,
        240,
        36,
        51,
        98,
        114,
        130,
        9,
        10,
        22,
        23,
        24,
        25,
        26,
        37,
        38,
        39,
        40,
        41,
        42,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250
    ], k = [
        0,
        0,
        3,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0
    ], I = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
    ], F = [
        0,
        0,
        2,
        1,
        2,
        4,
        4,
        3,
        4,
        7,
        5,
        4,
        4,
        0,
        1,
        2,
        119
    ], C = [
        0,
        1,
        2,
        3,
        17,
        4,
        5,
        33,
        49,
        6,
        18,
        65,
        81,
        7,
        97,
        113,
        19,
        34,
        50,
        129,
        8,
        20,
        66,
        145,
        161,
        177,
        193,
        9,
        35,
        51,
        82,
        240,
        21,
        98,
        114,
        209,
        10,
        22,
        36,
        52,
        225,
        37,
        241,
        23,
        24,
        25,
        26,
        38,
        39,
        40,
        41,
        42,
        53,
        54,
        55,
        56,
        57,
        58,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250
    ];
    function j(t, e) {
        for(var r = 0, n = 0, i = new Array, a = 1; a <= 16; a++){
            for(var o = 1; o <= t[a]; o++)i[e[n]] = [], i[e[n]][0] = r, i[e[n]][1] = a, n++, r++;
            r *= 2;
        }
        return i;
    }
    function O(t) {
        for(var e = t[0], r = t[1] - 1; r >= 0;)e & 1 << r && (m |= 1 << v), r--, --v < 0 && (255 == m ? (B(255), B(0)) : B(m), v = 7, m = 0);
    }
    function B(t) {
        g.push(t);
    }
    function M(t) {
        B(t >> 8 & 255), B(255 & t);
    }
    function E(t, e, r, n, i) {
        for(var a, o = i[0], s = i[240], c = function(t, e) {
            var r, n, i, a, o, s, c, u, h, l, f = 0;
            for(h = 0; h < 8; ++h){
                r = t[f], n = t[f + 1], i = t[f + 2], a = t[f + 3], o = t[f + 4], s = t[f + 5], c = t[f + 6];
                var p = r + (u = t[f + 7]), g = r - u, m = n + c, v = n - c, b = i + s, y = i - s, w = a + o, N = a - o, L = p + w, A = p - w, x = m + b, S = m - b;
                t[f] = L + x, t[f + 4] = L - x;
                var _ = .707106781 * (S + A);
                t[f + 2] = A + _, t[f + 6] = A - _;
                var P = .382683433 * ((L = N + y) - (S = v + g)), k = .5411961 * L + P, I = 1.306562965 * S + P, F = .707106781 * (x = y + v), C = g + F, j = g - F;
                t[f + 5] = j + k, t[f + 3] = j - k, t[f + 1] = C + I, t[f + 7] = C - I, f += 8;
            }
            for(f = 0, h = 0; h < 8; ++h){
                r = t[f], n = t[f + 8], i = t[f + 16], a = t[f + 24], o = t[f + 32], s = t[f + 40], c = t[f + 48];
                var O = r + (u = t[f + 56]), B = r - u, M = n + c, E = n - c, q = i + s, D = i - s, R = a + o, T = a - o, U = O + R, z = O - R, H = M + q, W = M - q;
                t[f] = U + H, t[f + 32] = U - H;
                var V = .707106781 * (W + z);
                t[f + 16] = z + V, t[f + 48] = z - V;
                var G = .382683433 * ((U = T + D) - (W = E + B)), Y = .5411961 * U + G, J = 1.306562965 * W + G, X = .707106781 * (H = D + E), K = B + X, Z = B - X;
                t[f + 40] = Z + Y, t[f + 24] = Z - Y, t[f + 8] = K + J, t[f + 56] = K - J, f++;
            }
            for(h = 0; h < 64; ++h)l = t[h] * e[h], d[h] = l > 0 ? l + .5 | 0 : l - .5 | 0;
            return d;
        }(t, e), u = 0; u < 64; ++u)p[A[u]] = c[u];
        var h = p[0] - r;
        r = p[0], 0 == h ? O(n[0]) : (O(n[f[a = 32767 + h]]), O(l[a]));
        for(var g = 63; g > 0 && 0 == p[g];)g--;
        if (0 == g) return O(o), r;
        for(var m, v = 1; v <= g;){
            for(var b = v; 0 == p[v] && v <= g;)++v;
            var y = v - b;
            if (y >= 16) {
                m = y >> 4;
                for(var w = 1; w <= m; ++w)O(s);
                y &= 15;
            }
            a = 32767 + p[v], O(i[(y << 4) + f[a]]), O(l[a]), v++;
        }
        return 63 != g && O(o), r;
    }
    function q(t) {
        (t = Math.min(Math.max(t, 1), 100), a != t) && (!function(t) {
            for(var e = [
                16,
                11,
                10,
                16,
                24,
                40,
                51,
                61,
                12,
                12,
                14,
                19,
                26,
                58,
                60,
                55,
                14,
                13,
                16,
                24,
                40,
                57,
                69,
                56,
                14,
                17,
                22,
                29,
                51,
                87,
                80,
                62,
                18,
                22,
                37,
                56,
                68,
                109,
                103,
                77,
                24,
                35,
                55,
                64,
                81,
                104,
                113,
                92,
                49,
                64,
                78,
                87,
                103,
                121,
                120,
                101,
                72,
                92,
                95,
                98,
                112,
                100,
                103,
                99
            ], r = 0; r < 64; r++){
                var n = o((e[r] * t + 50) / 100);
                n = Math.min(Math.max(n, 1), 255), s[A[r]] = n;
            }
            for(var i = [
                17,
                18,
                24,
                47,
                99,
                99,
                99,
                99,
                18,
                21,
                26,
                66,
                99,
                99,
                99,
                99,
                24,
                26,
                56,
                99,
                99,
                99,
                99,
                99,
                47,
                66,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99
            ], a = 0; a < 64; a++){
                var l = o((i[a] * t + 50) / 100);
                l = Math.min(Math.max(l, 1), 255), c[A[a]] = l;
            }
            for(var f = [
                1,
                1.387039845,
                1.306562965,
                1.175875602,
                1,
                .785694958,
                .5411961,
                .275899379
            ], d = 0, p = 0; p < 8; p++)for(var g = 0; g < 8; g++)u[d] = 1 / (s[A[d]] * f[p] * f[g] * 8), h[d] = 1 / (c[A[d]] * f[p] * f[g] * 8), d++;
        }(t < 50 ? Math.floor(5e3 / t) : Math.floor(200 - 2 * t)), a = t);
    }
    this.encode = function(t, a) {
        a && q(a), g = new Array, m = 0, v = 7, M(65496), M(65504), M(16), B(74), B(70), B(73), B(70), B(0), B(1), B(1), B(0), M(1), M(1), B(0), B(0), function() {
            M(65499), M(132), B(0);
            for(var t = 0; t < 64; t++)B(s[t]);
            B(1);
            for(var e = 0; e < 64; e++)B(c[e]);
        }(), function(t, e) {
            M(65472), M(17), B(8), M(e), M(t), B(3), B(1), B(17), B(0), B(2), B(17), B(1), B(3), B(17), B(1);
        }(t.width, t.height), function() {
            M(65476), M(418), B(0);
            for(var t = 0; t < 16; t++)B(x[t + 1]);
            for(var e = 0; e <= 11; e++)B(S[e]);
            B(16);
            for(var r = 0; r < 16; r++)B(_[r + 1]);
            for(var n = 0; n <= 161; n++)B(P[n]);
            B(1);
            for(var i = 0; i < 16; i++)B(k[i + 1]);
            for(var a = 0; a <= 11; a++)B(I[a]);
            B(17);
            for(var o = 0; o < 16; o++)B(F[o + 1]);
            for(var s = 0; s <= 161; s++)B(C[s]);
        }(), M(65498), M(12), B(3), B(1), B(0), B(2), B(17), B(3), B(17), B(0), B(63), B(0);
        var o = 0, l = 0, f = 0;
        m = 0, v = 7, this.encode.displayName = "_encode_";
        for(var d, p, N, A, j, D, R, T, U, z = t.data, H = t.width, W = t.height, V = 4 * H, G = 0; G < W;){
            for(d = 0; d < V;){
                for(j = V * G + d, R = -1, T = 0, U = 0; U < 64; U++)D = j + (T = U >> 3) * V + (R = 4 * (7 & U)), G + T >= W && (D -= V * (G + 1 + T - W)), d + R >= V && (D -= d + R - V + 4), p = z[D++], N = z[D++], A = z[D++], b[U] = (L[p] + L[N + 256 >> 0] + L[A + 512 >> 0] >> 16) - 128, y[U] = (L[p + 768 >> 0] + L[N + 1024 >> 0] + L[A + 1280 >> 0] >> 16) - 128, w[U] = (L[p + 1280 >> 0] + L[N + 1536 >> 0] + L[A + 1792 >> 0] >> 16) - 128;
                o = E(b, u, o, e, n), l = E(y, h, l, r, i), f = E(w, h, f, r, i), d += 32;
            }
            G += 8;
        }
        if (v >= 0) {
            var Y = [];
            Y[1] = v + 1, Y[0] = (1 << v + 1) - 1, O(Y);
        }
        return M(65497), new Uint8Array(g);
    }, t = t || 50, function() {
        for(var t = String.fromCharCode, e = 0; e < 256; e++)N[e] = t(e);
    }(), e = j(x, S), r = j(k, I), n = j(_, P), i = j(F, C), function() {
        for(var t = 1, e = 2, r = 1; r <= 15; r++){
            for(var n = t; n < e; n++)f[32767 + n] = r, l[32767 + n] = [], l[32767 + n][1] = r, l[32767 + n][0] = n;
            for(var i = -(e - 1); i <= -t; i++)f[32767 + i] = r, l[32767 + i] = [], l[32767 + i][1] = r, l[32767 + i][0] = e - 1 + i;
            t <<= 1, e <<= 1;
        }
    }(), function() {
        for(var t = 0; t < 256; t++)L[t] = 19595 * t, L[t + 256 >> 0] = 38470 * t, L[t + 512 >> 0] = 7471 * t + 32768, L[t + 768 >> 0] = -11059 * t, L[t + 1024 >> 0] = -21709 * t, L[t + 1280 >> 0] = 32768 * t + 8421375, L[t + 1536 >> 0] = -27439 * t, L[t + 1792 >> 0] = -5329 * t;
    }(), q(t);
}
/**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function te(t, e) {
    if (this.pos = 0, this.buffer = t, this.datav = new DataView(t.buffer), this.is_with_alpha = !!e, this.bottom_up = !0, this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]), this.pos += 2, -1 === [
        "BM",
        "BA",
        "CI",
        "CP",
        "IC",
        "PT"
    ].indexOf(this.flag)) throw new Error("Invalid BMP File");
    this.parseHeader(), this.parseBGR();
}
function ee(t) {
    function e(t) {
        if (!t) throw Error("assert :P");
    }
    function r(t, e, r) {
        for(var n = 0; 4 > n; n++)if (t[e + n] != r.charCodeAt(n)) return !0;
        return !1;
    }
    function n(t, e, r, n, i) {
        for(var a = 0; a < i; a++)t[e + a] = r[n + a];
    }
    function i(t, e, r, n) {
        for(var i = 0; i < n; i++)t[e + i] = r;
    }
    function a(t) {
        return new Int32Array(t);
    }
    function o(t, e) {
        for(var r = [], n = 0; n < t; n++)r.push(new e);
        return r;
    }
    function s(t, e) {
        var r = [];
        return function t(r, n, i) {
            for(var a = i[n], o = 0; o < a && (r.push(i.length > n + 1 ? [] : new e), !(i.length < n + 1)); o++)t(r[o], n + 1, i);
        }(r, 0, t), r;
    }
    var c = function() {
        var t = this;
        function c(t, e) {
            for(var r = 1 << e - 1 >>> 0; t & r;)r >>>= 1;
            return r ? (t & r - 1) + r : t;
        }
        function u(t, r, n, i, a) {
            e(!(i % n));
            do t[r + (i -= n)] = a;
            while (0 < i);
        }
        function h(t, r, n, i, o) {
            if (e(2328 >= o), 512 >= o) var s = a(512);
            else if (null == (s = a(o))) return 0;
            return function(t, r, n, i, o, s) {
                var h, f, d = r, p = 1 << n, g = a(16), m = a(16);
                for(e(0 != o), e(null != i), e(null != t), e(0 < n), f = 0; f < o; ++f){
                    if (15 < i[f]) return 0;
                    ++g[i[f]];
                }
                if (g[0] == o) return 0;
                for(m[1] = 0, h = 1; 15 > h; ++h){
                    if (g[h] > 1 << h) return 0;
                    m[h + 1] = m[h] + g[h];
                }
                for(f = 0; f < o; ++f)h = i[f], 0 < i[f] && (s[m[h]++] = f);
                if (1 == m[15]) return (i = new l).g = 0, i.value = s[0], u(t, d, 1, p, i), p;
                var v, b = -1, y = p - 1, w = 0, N = 1, L = 1, A = 1 << n;
                for(f = 0, h = 1, o = 2; h <= n; ++h, o <<= 1){
                    if (N += L <<= 1, 0 > (L -= g[h])) return 0;
                    for(; 0 < g[h]; --g[h])(i = new l).g = h, i.value = s[f++], u(t, d + w, o, A, i), w = c(w, h);
                }
                for(h = n + 1, o = 2; 15 >= h; ++h, o <<= 1){
                    if (N += L <<= 1, 0 > (L -= g[h])) return 0;
                    for(; 0 < g[h]; --g[h]){
                        if (i = new l, (w & y) != b) {
                            for(d += A, v = 1 << (b = h) - n; 15 > b && !(0 >= (v -= g[b]));)++b, v <<= 1;
                            p += A = 1 << (v = b - n), t[r + (b = w & y)].g = v + n, t[r + b].value = d - r - b;
                        }
                        i.g = h - n, i.value = s[f++], u(t, d + (w >> n), o, A, i), w = c(w, h);
                    }
                }
                return N != 2 * m[15] - 1 ? 0 : p;
            }(t, r, n, i, o, s);
        }
        function l() {
            this.value = this.g = 0;
        }
        function f() {
            this.value = this.g = 0;
        }
        function d() {
            this.G = o(5, l), this.H = a(5), this.jc = this.Qb = this.qb = this.nd = 0, this.pd = o(Dr, f);
        }
        function p(t, r, n, i) {
            e(null != t), e(null != r), e(2147483648 > i), t.Ca = 254, t.I = 0, t.b = -8, t.Ka = 0, t.oa = r, t.pa = n, t.Jd = r, t.Yc = n + i, t.Zc = 4 <= i ? n + i - 4 + 1 : n, _(t);
        }
        function g(t, e) {
            for(var r = 0; 0 < e--;)r |= k(t, 128) << e;
            return r;
        }
        function m(t, e) {
            var r = g(t, e);
            return P(t) ? -r : r;
        }
        function v(t, r, n, i) {
            var a, o = 0;
            for(e(null != t), e(null != r), e(4294967288 > i), t.Sb = i, t.Ra = 0, t.u = 0, t.h = 0, 4 < i && (i = 4), a = 0; a < i; ++a)o += r[n + a] << 8 * a;
            t.Ra = o, t.bb = i, t.oa = r, t.pa = n;
        }
        function b(t) {
            for(; 8 <= t.u && t.bb < t.Sb;)t.Ra >>>= 8, t.Ra += t.oa[t.pa + t.bb] << Ur - 8 >>> 0, ++t.bb, t.u -= 8;
            A(t) && (t.h = 1, t.u = 0);
        }
        function y(t, r) {
            if (e(0 <= r), !t.h && r <= Tr) {
                var n = L(t) & Rr[r];
                return t.u += r, b(t), n;
            }
            return t.h = 1, t.u = 0;
        }
        function w() {
            this.b = this.Ca = this.I = 0, this.oa = [], this.pa = 0, this.Jd = [], this.Yc = 0, this.Zc = [], this.Ka = 0;
        }
        function N() {
            this.Ra = 0, this.oa = [], this.h = this.u = this.bb = this.Sb = this.pa = 0;
        }
        function L(t) {
            return t.Ra >>> (t.u & Ur - 1) >>> 0;
        }
        function A(t) {
            return e(t.bb <= t.Sb), t.h || t.bb == t.Sb && t.u > Ur;
        }
        function x(t, e) {
            t.u = e, t.h = A(t);
        }
        function S(t) {
            t.u >= zr && (e(t.u >= zr), b(t));
        }
        function _(t) {
            e(null != t && null != t.oa), t.pa < t.Zc ? (t.I = (t.oa[t.pa++] | t.I << 8) >>> 0, t.b += 8) : (e(null != t && null != t.oa), t.pa < t.Yc ? (t.b += 8, t.I = t.oa[t.pa++] | t.I << 8) : t.Ka ? t.b = 0 : (t.I <<= 8, t.b += 8, t.Ka = 1));
        }
        function P(t) {
            return g(t, 1);
        }
        function k(t, e) {
            var r = t.Ca;
            0 > t.b && _(t);
            var n = t.b, i = r * e >>> 8, a = (t.I >>> n > i) + 0;
            for(a ? (r -= i, t.I -= i + 1 << n >>> 0) : r = i + 1, n = r, i = 0; 256 <= n;)i += 8, n >>= 8;
            return n = 7 ^ i + Hr[n], t.b -= n, t.Ca = (r << n) - 1, a;
        }
        function I(t, e, r) {
            t[e + 0] = r >> 24 & 255, t[e + 1] = r >> 16 & 255, t[e + 2] = r >> 8 & 255, t[e + 3] = r >> 0 & 255;
        }
        function F(t, e) {
            return t[e + 0] << 0 | t[e + 1] << 8;
        }
        function C(t, e) {
            return F(t, e) | t[e + 2] << 16;
        }
        function j(t, e) {
            return F(t, e) | F(t, e + 2) << 16;
        }
        function O(t, r) {
            var n = 1 << r;
            return e(null != t), e(0 < r), t.X = a(n), null == t.X ? 0 : (t.Mb = 32 - r, t.Xa = r, 1);
        }
        function B(t, r) {
            e(null != t), e(null != r), e(t.Xa == r.Xa), n(r.X, 0, t.X, 0, 1 << r.Xa);
        }
        function M() {
            this.X = [], this.Xa = this.Mb = 0;
        }
        function E(t, r, n, i) {
            e(null != n), e(null != i);
            var a = n[0], o = i[0];
            return 0 == a && (a = (t * o + r / 2) / r), 0 == o && (o = (r * a + t / 2) / t), 0 >= a || 0 >= o ? 0 : (n[0] = a, i[0] = o, 1);
        }
        function q(t, e) {
            return t + (1 << e) - 1 >>> e;
        }
        function D(t, e) {
            return ((4278255360 & t) + (4278255360 & e) >>> 0 & 4278255360) + ((16711935 & t) + (16711935 & e) >>> 0 & 16711935) >>> 0;
        }
        function R(e, r) {
            t[r] = function(r, n, i, a, o, s, c) {
                var u;
                for(u = 0; u < o; ++u){
                    var h = t[e](s[c + u - 1], i, a + u);
                    s[c + u] = D(r[n + u], h);
                }
            };
        }
        function T() {
            this.ud = this.hd = this.jd = 0;
        }
        function U(t, e) {
            return ((4278124286 & (t ^ e)) >>> 1) + (t & e) >>> 0;
        }
        function z(t) {
            return 0 <= t && 256 > t ? t : 0 > t ? 0 : 255 < t ? 255 : void 0;
        }
        function H(t, e) {
            return z(t + (t - e + .5 >> 1));
        }
        function W(t, e, r) {
            return Math.abs(e - r) - Math.abs(t - r);
        }
        function V(t, e, r, n, i, a, o) {
            for(n = a[o - 1], r = 0; r < i; ++r)a[o + r] = n = D(t[e + r], n);
        }
        function G(t, e, r, n, i) {
            var a;
            for(a = 0; a < r; ++a){
                var o = t[e + a], s = o >> 8 & 255, c = 16711935 & (c = (c = 16711935 & o) + ((s << 16) + s));
                n[i + a] = (4278255360 & o) + c >>> 0;
            }
        }
        function Y(t, e) {
            e.jd = t >> 0 & 255, e.hd = t >> 8 & 255, e.ud = t >> 16 & 255;
        }
        function J(t, e, r, n, i, a) {
            var o;
            for(o = 0; o < n; ++o){
                var s = e[r + o], c = s >>> 8, u = s, h = 255 & (h = (h = s >>> 16) + ((t.jd << 24 >> 24) * (c << 24 >> 24) >>> 5));
                u = 255 & (u = (u = u + ((t.hd << 24 >> 24) * (c << 24 >> 24) >>> 5)) + ((t.ud << 24 >> 24) * (h << 24 >> 24) >>> 5));
                i[a + o] = (4278255360 & s) + (h << 16) + u;
            }
        }
        function X(e, r, n, i, a) {
            t[r] = function(t, e, r, n, o, s, c, u, h) {
                for(n = c; n < u; ++n)for(c = 0; c < h; ++c)o[s++] = a(r[i(t[e++])]);
            }, t[e] = function(e, r, o, s, c, u, h) {
                var l = 8 >> e.b, f = e.Ea, d = e.K[0], p = e.w;
                if (8 > l) for(e = (1 << e.b) - 1, p = (1 << l) - 1; r < o; ++r){
                    var g, m = 0;
                    for(g = 0; g < f; ++g)g & e || (m = i(s[c++])), u[h++] = a(d[m & p]), m >>= l;
                }
                else t["VP8LMapColor" + n](s, c, d, p, u, h, r, o, f);
            };
        }
        function K(t, e, r, n, i) {
            for(r = e + r; e < r;){
                var a = t[e++];
                n[i++] = a >> 16 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 0 & 255;
            }
        }
        function Z(t, e, r, n, i) {
            for(r = e + r; e < r;){
                var a = t[e++];
                n[i++] = a >> 16 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 0 & 255, n[i++] = a >> 24 & 255;
            }
        }
        function $(t, e, r, n, i) {
            for(r = e + r; e < r;){
                var a = (o = t[e++]) >> 16 & 240 | o >> 12 & 15, o = o >> 0 & 240 | o >> 28 & 15;
                n[i++] = a, n[i++] = o;
            }
        }
        function Q(t, e, r, n, i) {
            for(r = e + r; e < r;){
                var a = (o = t[e++]) >> 16 & 248 | o >> 13 & 7, o = o >> 5 & 224 | o >> 3 & 31;
                n[i++] = a, n[i++] = o;
            }
        }
        function tt(t, e, r, n, i) {
            for(r = e + r; e < r;){
                var a = t[e++];
                n[i++] = a >> 0 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 16 & 255;
            }
        }
        function et(t, e, r, i, a, o) {
            if (0 == o) for(r = e + r; e < r;)I(i, ((o = t[e++])[0] >> 24 | o[1] >> 8 & 65280 | o[2] << 8 & 16711680 | o[3] << 24) >>> 0), a += 32;
            else n(i, a, t, e, r);
        }
        function rt(e, r) {
            t[r][0] = t[e + "0"], t[r][1] = t[e + "1"], t[r][2] = t[e + "2"], t[r][3] = t[e + "3"], t[r][4] = t[e + "4"], t[r][5] = t[e + "5"], t[r][6] = t[e + "6"], t[r][7] = t[e + "7"], t[r][8] = t[e + "8"], t[r][9] = t[e + "9"], t[r][10] = t[e + "10"], t[r][11] = t[e + "11"], t[r][12] = t[e + "12"], t[r][13] = t[e + "13"], t[r][14] = t[e + "0"], t[r][15] = t[e + "0"];
        }
        function nt(t) {
            return t == Hn || t == Wn || t == Vn || t == Gn;
        }
        function it() {
            this.eb = [], this.size = this.A = this.fb = 0;
        }
        function at() {
            this.y = [], this.f = [], this.ea = [], this.F = [], this.Tc = this.Ed = this.Cd = this.Fd = this.lb = this.Db = this.Ab = this.fa = this.J = this.W = this.N = this.O = 0;
        }
        function ot() {
            this.Rd = this.height = this.width = this.S = 0, this.f = {}, this.f.RGBA = new it, this.f.kb = new at, this.sd = null;
        }
        function st() {
            this.width = [
                0
            ], this.height = [
                0
            ], this.Pd = [
                0
            ], this.Qd = [
                0
            ], this.format = [
                0
            ];
        }
        function ct() {
            this.Id = this.fd = this.Md = this.hb = this.ib = this.da = this.bd = this.cd = this.j = this.v = this.Da = this.Sd = this.ob = 0;
        }
        function ut(t) {
            return alert("todo:WebPSamplerProcessPlane"), t.T;
        }
        function ht(t, e) {
            var r = t.T, i = e.ba.f.RGBA, a = i.eb, o = i.fb + t.ka * i.A, s = vi[e.ba.S], c = t.y, u = t.O, h = t.f, l = t.N, f = t.ea, d = t.W, p = e.cc, g = e.dc, m = e.Mc, v = e.Nc, b = t.ka, y = t.ka + t.T, w = t.U, N = w + 1 >> 1;
            for(0 == b ? s(c, u, null, null, h, l, f, d, h, l, f, d, a, o, null, null, w) : (s(e.ec, e.fc, c, u, p, g, m, v, h, l, f, d, a, o - i.A, a, o, w), ++r); b + 2 < y; b += 2)p = h, g = l, m = f, v = d, l += t.Rc, d += t.Rc, o += 2 * i.A, s(c, (u += 2 * t.fa) - t.fa, c, u, p, g, m, v, h, l, f, d, a, o - i.A, a, o, w);
            return u += t.fa, t.j + y < t.o ? (n(e.ec, e.fc, c, u, w), n(e.cc, e.dc, h, l, N), n(e.Mc, e.Nc, f, d, N), r--) : 1 & y || s(c, u, null, null, h, l, f, d, h, l, f, d, a, o + i.A, null, null, w), r;
        }
        function lt(t, r, n) {
            var i = t.F, a = [
                t.J
            ];
            if (null != i) {
                var o = t.U, s = r.ba.S, c = s == Tn || s == Vn;
                r = r.ba.f.RGBA;
                var u = [
                    0
                ], h = t.ka;
                u[0] = t.T, t.Kb && (0 == h ? --u[0] : (--h, a[0] -= t.width), t.j + t.ka + t.T == t.o && (u[0] = t.o - t.j - h));
                var l = r.eb;
                h = r.fb + h * r.A;
                t = Sn(i, a[0], t.width, o, u, l, h + (c ? 0 : 3), r.A), e(n == u), t && nt(s) && An(l, h, c, o, u, r.A);
            }
            return 0;
        }
        function ft(t) {
            var e = t.ma, r = e.ba.S, n = 11 > r, i = r == qn || r == Rn || r == Tn || r == Un || 12 == r || nt(r);
            if (e.memory = null, e.Ib = null, e.Jb = null, e.Nd = null, !Mr(e.Oa, t, i ? 11 : 12)) return 0;
            if (i && nt(r) && br(), t.da) alert("todo:use_scaling");
            else {
                if (n) {
                    if (e.Ib = ut, t.Kb) {
                        if (r = t.U + 1 >> 1, e.memory = a(t.U + 2 * r), null == e.memory) return 0;
                        e.ec = e.memory, e.fc = 0, e.cc = e.ec, e.dc = e.fc + t.U, e.Mc = e.cc, e.Nc = e.dc + r, e.Ib = ht, br();
                    }
                } else alert("todo:EmitYUV");
                i && (e.Jb = lt, n && mr());
            }
            if (n && !Ci) {
                for(t = 0; 256 > t; ++t)ji[t] = 89858 * (t - 128) + _i >> Si, Mi[t] = -22014 * (t - 128) + _i, Bi[t] = -45773 * (t - 128), Oi[t] = 113618 * (t - 128) + _i >> Si;
                for(t = Pi; t < ki; ++t)e = 76283 * (t - 16) + _i >> Si, Ei[t - Pi] = Vt(e, 255), qi[t - Pi] = Vt(e + 8 >> 4, 15);
                Ci = 1;
            }
            return 1;
        }
        function dt(t) {
            var r = t.ma, n = t.U, i = t.T;
            return e(!(1 & t.ka)), 0 >= n || 0 >= i ? 0 : (n = r.Ib(t, r), null != r.Jb && r.Jb(t, r, n), r.Dc += n, 1);
        }
        function pt(t) {
            t.ma.memory = null;
        }
        function gt(t, e, r, n) {
            return 47 != y(t, 8) ? 0 : (e[0] = y(t, 14) + 1, r[0] = y(t, 14) + 1, n[0] = y(t, 1), 0 != y(t, 3) ? 0 : !t.h);
        }
        function mt(t, e) {
            if (4 > t) return t + 1;
            var r = t - 2 >> 1;
            return (2 + (1 & t) << r) + y(e, r) + 1;
        }
        function vt(t, e) {
            var r;
            return 120 < e ? e - 120 : 1 <= (r = ((r = $n[e - 1]) >> 4) * t + (8 - (15 & r))) ? r : 1;
        }
        function bt(t, e, r) {
            var n = L(r), i = t[e += 255 & n].g - 8;
            return 0 < i && (x(r, r.u + 8), n = L(r), e += t[e].value, e += n & (1 << i) - 1), x(r, r.u + t[e].g), t[e].value;
        }
        function yt(t, r, n) {
            return n.g += t.g, n.value += t.value << r >>> 0, e(8 >= n.g), t.g;
        }
        function wt(t, r, n) {
            var i = t.xc;
            return e((r = 0 == i ? 0 : t.vc[t.md * (n >> i) + (r >> i)]) < t.Wb), t.Ya[r];
        }
        function Nt(t, r, i, a) {
            var o = t.ab, s = t.c * r, c = t.C;
            r = c + r;
            var u = i, h = a;
            for(a = t.Ta, i = t.Ua; 0 < o--;){
                var l = t.gc[o], f = c, d = r, p = u, g = h, m = (h = a, u = i, l.Ea);
                switch(e(f < d), e(d <= l.nc), l.hc){
                    case 2:
                        Gr(p, g, (d - f) * m, h, u);
                        break;
                    case 0:
                        var v = f, b = d, y = h, w = u, N = (_ = l).Ea;
                        0 == v && (Wr(p, g, null, null, 1, y, w), V(p, g + 1, 0, 0, N - 1, y, w + 1), g += N, w += N, ++v);
                        for(var L = 1 << _.b, A = L - 1, x = q(N, _.b), S = _.K, _ = _.w + (v >> _.b) * x; v < b;){
                            var P = S, k = _, I = 1;
                            for(Vr(p, g, y, w - N, 1, y, w); I < N;){
                                var F = (I & ~A) + L;
                                F > N && (F = N), (0, Zr[P[k++] >> 8 & 15])(p, g + +I, y, w + I - N, F - I, y, w + I), I = F;
                            }
                            g += N, w += N, ++v & A || (_ += x);
                        }
                        d != l.nc && n(h, u - m, h, u + (d - f - 1) * m, m);
                        break;
                    case 1:
                        for(m = p, b = g, N = (p = l.Ea) - (w = p & ~(y = (g = 1 << l.b) - 1)), v = q(p, l.b), L = l.K, l = l.w + (f >> l.b) * v; f < d;){
                            for(A = L, x = l, S = new T, _ = b + w, P = b + p; b < _;)Y(A[x++], S), $r(S, m, b, g, h, u), b += g, u += g;
                            b < P && (Y(A[x++], S), $r(S, m, b, N, h, u), b += N, u += N), ++f & y || (l += v);
                        }
                        break;
                    case 3:
                        if (p == h && g == u && 0 < l.b) {
                            for(b = h, p = m = u + (d - f) * m - (w = (d - f) * q(l.Ea, l.b)), g = h, y = u, v = [], w = (N = w) - 1; 0 <= w; --w)v[w] = g[y + w];
                            for(w = N - 1; 0 <= w; --w)b[p + w] = v[w];
                            Yr(l, f, d, h, m, h, u);
                        } else Yr(l, f, d, p, g, h, u);
                }
                u = a, h = i;
            }
            h != i && n(a, i, u, h, s);
        }
        function Lt(t, r) {
            var n = t.V, i = t.Ba + t.c * t.C, a = r - t.C;
            if (e(r <= t.l.o), e(16 >= a), 0 < a) {
                var o = t.l, s = t.Ta, c = t.Ua, u = o.width;
                if (Nt(t, a, n, i), a = c = [
                    c
                ], e((n = t.C) < (i = r)), e(o.v < o.va), i > o.o && (i = o.o), n < o.j) {
                    var h = o.j - n;
                    n = o.j;
                    a[0] += h * u;
                }
                if (n >= i ? n = 0 : (a[0] += 4 * o.v, o.ka = n - o.j, o.U = o.va - o.v, o.T = i - n, n = 1), n) {
                    if (c = c[0], 11 > (n = t.ca).S) {
                        var l = n.f.RGBA, f = (i = n.S, a = o.U, o = o.T, h = l.eb, l.A), d = o;
                        for(l = l.fb + t.Ma * l.A; 0 < d--;){
                            var p = s, g = c, m = a, v = h, b = l;
                            switch(i){
                                case En:
                                    Qr(p, g, m, v, b);
                                    break;
                                case qn:
                                    tn(p, g, m, v, b);
                                    break;
                                case Hn:
                                    tn(p, g, m, v, b), An(v, b, 0, m, 1, 0);
                                    break;
                                case Dn:
                                    nn(p, g, m, v, b);
                                    break;
                                case Rn:
                                    et(p, g, m, v, b, 1);
                                    break;
                                case Wn:
                                    et(p, g, m, v, b, 1), An(v, b, 0, m, 1, 0);
                                    break;
                                case Tn:
                                    et(p, g, m, v, b, 0);
                                    break;
                                case Vn:
                                    et(p, g, m, v, b, 0), An(v, b, 1, m, 1, 0);
                                    break;
                                case Un:
                                    en(p, g, m, v, b);
                                    break;
                                case Gn:
                                    en(p, g, m, v, b), xn(v, b, m, 1, 0);
                                    break;
                                case zn:
                                    rn(p, g, m, v, b);
                                    break;
                                default:
                                    e(0);
                            }
                            c += u, l += f;
                        }
                        t.Ma += o;
                    } else alert("todo:EmitRescaledRowsYUVA");
                    e(t.Ma <= n.height);
                }
            }
            t.C = r, e(t.C <= t.i);
        }
        function At(t) {
            var e;
            if (0 < t.ua) return 0;
            for(e = 0; e < t.Wb; ++e){
                var r = t.Ya[e].G, n = t.Ya[e].H;
                if (0 < r[1][n[1] + 0].g || 0 < r[2][n[2] + 0].g || 0 < r[3][n[3] + 0].g) return 0;
            }
            return 1;
        }
        function xt(t, r, n, i, a, o) {
            if (0 != t.Z) {
                var s = t.qd, c = t.rd;
                for(e(null != mi[t.Z]); r < n; ++r)mi[t.Z](s, c, i, a, i, a, o), s = i, c = a, a += o;
                t.qd = s, t.rd = c;
            }
        }
        function St(t, r) {
            var n = t.l.ma, i = 0 == n.Z || 1 == n.Z ? t.l.j : t.C;
            i = t.C < i ? i : t.C;
            if (e(r <= t.l.o), r > i) {
                var a = t.l.width, o = n.ca, s = n.tb + a * i, c = t.V, u = t.Ba + t.c * i, h = t.gc;
                e(1 == t.ab), e(3 == h[0].hc), Xr(h[0], i, r, c, u, o, s), xt(n, i, r, o, s, a);
            }
            t.C = t.Ma = r;
        }
        function _t(t, r, n, i, a, o, s) {
            var c = t.$ / i, u = t.$ % i, h = t.m, l = t.s, f = n + t.$, d = f;
            a = n + i * a;
            var p = n + i * o, g = 280 + l.ua, m = t.Pb ? c : 16777216, v = 0 < l.ua ? l.Wa : null, b = l.wc, y = f < p ? wt(l, u, c) : null;
            e(t.C < o), e(p <= a);
            var w = !1;
            t: for(;;){
                for(; w || f < p;){
                    var N = 0;
                    if (c >= m) {
                        var _ = f - n;
                        e((m = t).Pb), m.wd = m.m, m.xd = _, 0 < m.s.ua && B(m.s.Wa, m.s.vb), m = c + ti;
                    }
                    if (u & b || (y = wt(l, u, c)), e(null != y), y.Qb && (r[f] = y.qb, w = !0), !w) {
                        if (S(h), y.jc) {
                            N = h, _ = r;
                            var P = f, k = y.pd[L(N) & Dr - 1];
                            e(y.jc), 256 > k.g ? (x(N, N.u + k.g), _[P] = k.value, N = 0) : (x(N, N.u + k.g - 256), e(256 <= k.value), N = k.value), 0 == N && (w = !0);
                        } else N = bt(y.G[0], y.H[0], h);
                    }
                    if (h.h) break;
                    if (w || 256 > N) {
                        if (!w) {
                            if (y.nd) r[f] = (y.qb | N << 8) >>> 0;
                            else {
                                if (S(h), w = bt(y.G[1], y.H[1], h), S(h), _ = bt(y.G[2], y.H[2], h), P = bt(y.G[3], y.H[3], h), h.h) break;
                                r[f] = (P << 24 | w << 16 | N << 8 | _) >>> 0;
                            }
                        }
                        if (w = !1, ++f, ++u >= i && (u = 0, ++c, null != s && c <= o && !(c % 16) && s(t, c), null != v)) for(; d < f;)N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
                    } else if (280 > N) {
                        if (N = mt(N - 256, h), _ = bt(y.G[4], y.H[4], h), S(h), _ = vt(i, _ = mt(_, h)), h.h) break;
                        if (f - n < _ || a - f < N) break t;
                        for(P = 0; P < N; ++P)r[f + P] = r[f + P - _];
                        for(f += N, u += N; u >= i;)u -= i, ++c, null != s && c <= o && !(c % 16) && s(t, c);
                        if (e(f <= a), u & b && (y = wt(l, u, c)), null != v) for(; d < f;)N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
                    } else {
                        if (!(N < g)) break t;
                        for(w = N - 280, e(null != v); d < f;)N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
                        N = f, e(!(w >>> (_ = v).Xa)), r[N] = _.X[w], w = !0;
                    }
                    w || e(h.h == A(h));
                }
                if (t.Pb && h.h && f < a) e(t.m.h), t.a = 5, t.m = t.wd, t.$ = t.xd, 0 < t.s.ua && B(t.s.vb, t.s.Wa);
                else {
                    if (h.h) break t;
                    null != s && s(t, c > o ? o : c), t.a = 0, t.$ = f - n;
                }
                return 1;
            }
            return t.a = 3, 0;
        }
        function Pt(t) {
            e(null != t), t.vc = null, t.yc = null, t.Ya = null;
            var r = t.Wa;
            null != r && (r.X = null), t.vb = null, e(null != t);
        }
        function kt() {
            var e = new or;
            return null == e ? null : (e.a = 0, e.xb = gi, rt("Predictor", "VP8LPredictors"), rt("Predictor", "VP8LPredictors_C"), rt("PredictorAdd", "VP8LPredictorsAdd"), rt("PredictorAdd", "VP8LPredictorsAdd_C"), Gr = G, $r = J, Qr = K, tn = Z, en = $, rn = Q, nn = tt, t.VP8LMapColor32b = Jr, t.VP8LMapColor8b = Kr, e);
        }
        function It(t, r, n, s, c) {
            var u = 1, f = [
                t
            ], p = [
                r
            ], g = s.m, m = s.s, v = null, b = 0;
            t: for(;;){
                if (n) for(; u && y(g, 1);){
                    var w = f, N = p, A = s, _ = 1, P = A.m, k = A.gc[A.ab], I = y(P, 2);
                    if (A.Oc & 1 << I) u = 0;
                    else {
                        switch(A.Oc |= 1 << I, k.hc = I, k.Ea = w[0], k.nc = N[0], k.K = [
                            null
                        ], ++A.ab, e(4 >= A.ab), I){
                            case 0:
                            case 1:
                                k.b = y(P, 3) + 2, _ = It(q(k.Ea, k.b), q(k.nc, k.b), 0, A, k.K), k.K = k.K[0];
                                break;
                            case 3:
                                var F, C = y(P, 8) + 1, j = 16 < C ? 0 : 4 < C ? 1 : 2 < C ? 2 : 3;
                                if (w[0] = q(k.Ea, j), k.b = j, F = _ = It(C, 1, 0, A, k.K)) {
                                    var B, M = C, E = k, R = 1 << (8 >> E.b), T = a(R);
                                    if (null == T) F = 0;
                                    else {
                                        var U = E.K[0], z = E.w;
                                        for(T[0] = E.K[0][0], B = 1; B < 1 * M; ++B)T[B] = D(U[z + B], T[B - 1]);
                                        for(; B < 4 * R; ++B)T[B] = 0;
                                        E.K[0] = null, E.K[0] = T, F = 1;
                                    }
                                }
                                _ = F;
                                break;
                            case 2:
                                break;
                            default:
                                e(0);
                        }
                        u = _;
                    }
                }
                if (f = f[0], p = p[0], u && y(g, 1) && !(u = 1 <= (b = y(g, 4)) && 11 >= b)) {
                    s.a = 3;
                    break t;
                }
                var H;
                if (H = u) e: {
                    var W, V, G, Y = s, J = f, X = p, K = b, Z = n, $ = Y.m, Q = Y.s, tt = [
                        null
                    ], et = 1, rt = 0, nt = Qn[K];
                    r: for(;;){
                        if (Z && y($, 1)) {
                            var it = y($, 3) + 2, at = q(J, it), ot = q(X, it), st = at * ot;
                            if (!It(at, ot, 0, Y, tt)) break r;
                            for(tt = tt[0], Q.xc = it, W = 0; W < st; ++W){
                                var ct = tt[W] >> 8 & 65535;
                                tt[W] = ct, ct >= et && (et = ct + 1);
                            }
                        }
                        if ($.h) break r;
                        for(V = 0; 5 > V; ++V){
                            var ut = Xn[V];
                            !V && 0 < K && (ut += 1 << K), rt < ut && (rt = ut);
                        }
                        var ht = o(et * nt, l), lt = et, ft = o(lt, d);
                        if (null == ft) var dt = null;
                        else e(65536 >= lt), dt = ft;
                        var pt = a(rt);
                        if (null == dt || null == pt || null == ht) {
                            Y.a = 1;
                            break r;
                        }
                        var gt = ht;
                        for(W = G = 0; W < et; ++W){
                            var mt = dt[W], vt = mt.G, bt = mt.H, wt = 0, Nt = 1, Lt = 0;
                            for(V = 0; 5 > V; ++V){
                                ut = Xn[V], vt[V] = gt, bt[V] = G, !V && 0 < K && (ut += 1 << K);
                                n: {
                                    var At, xt = ut, St = Y, kt = pt, Ft = gt, Ct = G, jt = 0, Ot = St.m, Bt = y(Ot, 1);
                                    if (i(kt, 0, 0, xt), Bt) {
                                        var Mt = y(Ot, 1) + 1, Et = y(Ot, 1), qt = y(Ot, 0 == Et ? 1 : 8);
                                        kt[qt] = 1, 2 == Mt && (kt[qt = y(Ot, 8)] = 1);
                                        var Dt = 1;
                                    } else {
                                        var Rt = a(19), Tt = y(Ot, 4) + 4;
                                        if (19 < Tt) {
                                            St.a = 3;
                                            var Ut = 0;
                                            break n;
                                        }
                                        for(At = 0; At < Tt; ++At)Rt[Zn[At]] = y(Ot, 3);
                                        var zt = void 0, Ht = void 0, Wt = St, Vt = Rt, Gt = xt, Yt = kt, Jt = 0, Xt = Wt.m, Kt = 8, Zt = o(128, l);
                                        i: for(; h(Zt, 0, 7, Vt, 19);){
                                            if (y(Xt, 1)) {
                                                var $t = 2 + 2 * y(Xt, 3);
                                                if ((zt = 2 + y(Xt, $t)) > Gt) break i;
                                            } else zt = Gt;
                                            for(Ht = 0; Ht < Gt && zt--;){
                                                S(Xt);
                                                var Qt = Zt[0 + (127 & L(Xt))];
                                                x(Xt, Xt.u + Qt.g);
                                                var te = Qt.value;
                                                if (16 > te) Yt[Ht++] = te, 0 != te && (Kt = te);
                                                else {
                                                    var ee = 16 == te, re = te - 16, ne = Jn[re], ie = y(Xt, Yn[re]) + ne;
                                                    if (Ht + ie > Gt) break i;
                                                    for(var ae = ee ? Kt : 0; 0 < ie--;)Yt[Ht++] = ae;
                                                }
                                            }
                                            Jt = 1;
                                            break i;
                                        }
                                        Jt || (Wt.a = 3), Dt = Jt;
                                    }
                                    (Dt = Dt && !Ot.h) && (jt = h(Ft, Ct, 8, kt, xt)), Dt && 0 != jt ? Ut = jt : (St.a = 3, Ut = 0);
                                }
                                if (0 == Ut) break r;
                                if (Nt && 1 == Kn[V] && (Nt = 0 == gt[G].g), wt += gt[G].g, G += Ut, 3 >= V) {
                                    var oe, se = pt[0];
                                    for(oe = 1; oe < ut; ++oe)pt[oe] > se && (se = pt[oe]);
                                    Lt += se;
                                }
                            }
                            if (mt.nd = Nt, mt.Qb = 0, Nt && (mt.qb = (vt[3][bt[3] + 0].value << 24 | vt[1][bt[1] + 0].value << 16 | vt[2][bt[2] + 0].value) >>> 0, 0 == wt && 256 > vt[0][bt[0] + 0].value && (mt.Qb = 1, mt.qb += vt[0][bt[0] + 0].value << 8)), mt.jc = !mt.Qb && 6 > Lt, mt.jc) {
                                var ce, ue = mt;
                                for(ce = 0; ce < Dr; ++ce){
                                    var he = ce, le = ue.pd[he], fe = ue.G[0][ue.H[0] + he];
                                    256 <= fe.value ? (le.g = fe.g + 256, le.value = fe.value) : (le.g = 0, le.value = 0, he >>= yt(fe, 8, le), he >>= yt(ue.G[1][ue.H[1] + he], 16, le), he >>= yt(ue.G[2][ue.H[2] + he], 0, le), yt(ue.G[3][ue.H[3] + he], 24, le));
                                }
                            }
                        }
                        Q.vc = tt, Q.Wb = et, Q.Ya = dt, Q.yc = ht, H = 1;
                        break e;
                    }
                    H = 0;
                }
                if (!(u = H)) {
                    s.a = 3;
                    break t;
                }
                if (0 < b) {
                    if (m.ua = 1 << b, !O(m.Wa, b)) {
                        s.a = 1, u = 0;
                        break t;
                    }
                } else m.ua = 0;
                var de = s, pe = f, ge = p, me = de.s, ve = me.xc;
                if (de.c = pe, de.i = ge, me.md = q(pe, ve), me.wc = 0 == ve ? -1 : (1 << ve) - 1, n) {
                    s.xb = pi;
                    break t;
                }
                if (null == (v = a(f * p))) {
                    s.a = 1, u = 0;
                    break t;
                }
                u = (u = _t(s, v, 0, f, p, p, null)) && !g.h;
                break t;
            }
            return u ? (null != c ? c[0] = v : (e(null == v), e(n)), s.$ = 0, n || Pt(m)) : Pt(m), u;
        }
        function Ft(t, r) {
            var n = t.c * t.i, i = n + r + 16 * r;
            return e(t.c <= r), t.V = a(i), null == t.V ? (t.Ta = null, t.Ua = 0, t.a = 1, 0) : (t.Ta = t.V, t.Ua = t.Ba + n + r, 1);
        }
        function Ct(t, r) {
            var n = t.C, i = r - n, a = t.V, o = t.Ba + t.c * n;
            for(e(r <= t.l.o); 0 < i;){
                var s = 16 < i ? 16 : i, c = t.l.ma, u = t.l.width, h = u * s, l = c.ca, f = c.tb + u * n, d = t.Ta, p = t.Ua;
                Nt(t, s, a, o), _n(d, p, l, f, h), xt(c, n, n + s, l, f, u), i -= s, a += s * t.c, n += s;
            }
            e(n == r), t.C = t.Ma = r;
        }
        function jt() {
            this.ub = this.yd = this.td = this.Rb = 0;
        }
        function Ot() {
            this.Kd = this.Ld = this.Ud = this.Td = this.i = this.c = 0;
        }
        function Bt() {
            this.Fb = this.Bb = this.Cb = 0, this.Zb = a(4), this.Lb = a(4);
        }
        function Mt() {
            this.Yb = function() {
                var t = [];
                return function t(e, r, n) {
                    for(var i = n[r], a = 0; a < i && (e.push(n.length > r + 1 ? [] : 0), !(n.length < r + 1)); a++)t(e[a], r + 1, n);
                }(t, 0, [
                    3,
                    11
                ]), t;
            }();
        }
        function Et() {
            this.jb = a(3), this.Wc = s([
                4,
                8
            ], Mt), this.Xc = s([
                4,
                17
            ], Mt);
        }
        function qt() {
            this.Pc = this.wb = this.Tb = this.zd = 0, this.vd = new a(4), this.od = new a(4);
        }
        function Dt() {
            this.ld = this.La = this.dd = this.tc = 0;
        }
        function Rt() {
            this.Na = this.la = 0;
        }
        function Tt() {
            this.Sc = [
                0,
                0
            ], this.Eb = [
                0,
                0
            ], this.Qc = [
                0,
                0
            ], this.ia = this.lc = 0;
        }
        function Ut() {
            this.ad = a(384), this.Za = 0, this.Ob = a(16), this.$b = this.Ad = this.ia = this.Gc = this.Hc = this.Dd = 0;
        }
        function zt() {
            this.uc = this.M = this.Nb = 0, this.wa = Array(new Dt), this.Y = 0, this.ya = Array(new Ut), this.aa = 0, this.l = new Gt;
        }
        function Ht() {
            this.y = a(16), this.f = a(8), this.ea = a(8);
        }
        function Wt() {
            this.cb = this.a = 0, this.sc = "", this.m = new w, this.Od = new jt, this.Kc = new Ot, this.ed = new qt, this.Qa = new Bt, this.Ic = this.$c = this.Aa = 0, this.D = new zt, this.Xb = this.Va = this.Hb = this.zb = this.yb = this.Ub = this.za = 0, this.Jc = o(8, w), this.ia = 0, this.pb = o(4, Tt), this.Pa = new Et, this.Bd = this.kc = 0, this.Ac = [], this.Bc = 0, this.zc = [
                0,
                0,
                0,
                0
            ], this.Gd = Array(new Ht), this.Hd = 0, this.rb = Array(new Rt), this.sb = 0, this.wa = Array(new Dt), this.Y = 0, this.oc = [], this.pc = 0, this.sa = [], this.ta = 0, this.qa = [], this.ra = 0, this.Ha = [], this.B = this.R = this.Ia = 0, this.Ec = [], this.M = this.ja = this.Vb = this.Fc = 0, this.ya = Array(new Ut), this.L = this.aa = 0, this.gd = s([
                4,
                2
            ], Dt), this.ga = null, this.Fa = [], this.Cc = this.qc = this.P = 0, this.Gb = [], this.Uc = 0, this.mb = [], this.nb = 0, this.rc = [], this.Ga = this.Vc = 0;
        }
        function Vt(t, e) {
            return 0 > t ? 0 : t > e ? e : t;
        }
        function Gt() {
            this.T = this.U = this.ka = this.height = this.width = 0, this.y = [], this.f = [], this.ea = [], this.Rc = this.fa = this.W = this.N = this.O = 0, this.ma = "void", this.put = "VP8IoPutHook", this.ac = "VP8IoSetupHook", this.bc = "VP8IoTeardownHook", this.ha = this.Kb = 0, this.data = [], this.hb = this.ib = this.da = this.o = this.j = this.va = this.v = this.Da = this.ob = this.w = 0, this.F = [], this.J = 0;
        }
        function Yt() {
            var t = new Wt;
            return null != t && (t.a = 0, t.sc = "OK", t.cb = 0, t.Xb = 0, ni || (ni = Zt)), t;
        }
        function Jt(t, e, r) {
            return 0 == t.a && (t.a = e, t.sc = r, t.cb = 0), 0;
        }
        function Xt(t, e, r) {
            return 3 <= r && 157 == t[e + 0] && 1 == t[e + 1] && 42 == t[e + 2];
        }
        function Kt(t, r) {
            if (null == t) return 0;
            if (t.a = 0, t.sc = "OK", null == r) return Jt(t, 2, "null VP8Io passed to VP8GetHeaders()");
            var n = r.data, a = r.w, o = r.ha;
            if (4 > o) return Jt(t, 7, "Truncated header.");
            var s = n[a + 0] | n[a + 1] << 8 | n[a + 2] << 16, c = t.Od;
            if (c.Rb = !(1 & s), c.td = s >> 1 & 7, c.yd = s >> 4 & 1, c.ub = s >> 5, 3 < c.td) return Jt(t, 3, "Incorrect keyframe parameters.");
            if (!c.yd) return Jt(t, 4, "Frame not displayable.");
            a += 3, o -= 3;
            var u = t.Kc;
            if (c.Rb) {
                if (7 > o) return Jt(t, 7, "cannot parse picture header");
                if (!Xt(n, a, o)) return Jt(t, 3, "Bad code word");
                u.c = 16383 & (n[a + 4] << 8 | n[a + 3]), u.Td = n[a + 4] >> 6, u.i = 16383 & (n[a + 6] << 8 | n[a + 5]), u.Ud = n[a + 6] >> 6, a += 7, o -= 7, t.za = u.c + 15 >> 4, t.Ub = u.i + 15 >> 4, r.width = u.c, r.height = u.i, r.Da = 0, r.j = 0, r.v = 0, r.va = r.width, r.o = r.height, r.da = 0, r.ib = r.width, r.hb = r.height, r.U = r.width, r.T = r.height, i((s = t.Pa).jb, 0, 255, s.jb.length), e(null != (s = t.Qa)), s.Cb = 0, s.Bb = 0, s.Fb = 1, i(s.Zb, 0, 0, s.Zb.length), i(s.Lb, 0, 0, s.Lb);
            }
            if (c.ub > o) return Jt(t, 7, "bad partition length");
            p(s = t.m, n, a, c.ub), a += c.ub, o -= c.ub, c.Rb && (u.Ld = P(s), u.Kd = P(s)), u = t.Qa;
            var h, l = t.Pa;
            if (e(null != s), e(null != u), u.Cb = P(s), u.Cb) {
                if (u.Bb = P(s), P(s)) {
                    for(u.Fb = P(s), h = 0; 4 > h; ++h)u.Zb[h] = P(s) ? m(s, 7) : 0;
                    for(h = 0; 4 > h; ++h)u.Lb[h] = P(s) ? m(s, 6) : 0;
                }
                if (u.Bb) for(h = 0; 3 > h; ++h)l.jb[h] = P(s) ? g(s, 8) : 255;
            } else u.Bb = 0;
            if (s.Ka) return Jt(t, 3, "cannot parse segment header");
            if ((u = t.ed).zd = P(s), u.Tb = g(s, 6), u.wb = g(s, 3), u.Pc = P(s), u.Pc && P(s)) {
                for(l = 0; 4 > l; ++l)P(s) && (u.vd[l] = m(s, 6));
                for(l = 0; 4 > l; ++l)P(s) && (u.od[l] = m(s, 6));
            }
            if (t.L = 0 == u.Tb ? 0 : u.zd ? 1 : 2, s.Ka) return Jt(t, 3, "cannot parse filter header");
            var f = o;
            if (o = h = a, a = h + f, u = f, t.Xb = (1 << g(t.m, 2)) - 1, f < 3 * (l = t.Xb)) n = 7;
            else {
                for(h += 3 * l, u -= 3 * l, f = 0; f < l; ++f){
                    var d = n[o + 0] | n[o + 1] << 8 | n[o + 2] << 16;
                    d > u && (d = u), p(t.Jc[+f], n, h, d), h += d, u -= d, o += 3;
                }
                p(t.Jc[+l], n, h, u), n = h < a ? 0 : 5;
            }
            if (0 != n) return Jt(t, n, "cannot parse partitions");
            for(n = g(h = t.m, 7), o = P(h) ? m(h, 4) : 0, a = P(h) ? m(h, 4) : 0, u = P(h) ? m(h, 4) : 0, l = P(h) ? m(h, 4) : 0, h = P(h) ? m(h, 4) : 0, f = t.Qa, d = 0; 4 > d; ++d){
                if (f.Cb) {
                    var v = f.Zb[d];
                    f.Fb || (v += n);
                } else {
                    if (0 < d) {
                        t.pb[d] = t.pb[0];
                        continue;
                    }
                    v = n;
                }
                var b = t.pb[d];
                b.Sc[0] = ei[Vt(v + o, 127)], b.Sc[1] = ri[Vt(v + 0, 127)], b.Eb[0] = 2 * ei[Vt(v + a, 127)], b.Eb[1] = 101581 * ri[Vt(v + u, 127)] >> 16, 8 > b.Eb[1] && (b.Eb[1] = 8), b.Qc[0] = ei[Vt(v + l, 117)], b.Qc[1] = ri[Vt(v + h, 127)], b.lc = v + h;
            }
            if (!c.Rb) return Jt(t, 4, "Not a key frame.");
            for(P(s), c = t.Pa, n = 0; 4 > n; ++n){
                for(o = 0; 8 > o; ++o)for(a = 0; 3 > a; ++a)for(u = 0; 11 > u; ++u)l = k(s, ui[n][o][a][u]) ? g(s, 8) : si[n][o][a][u], c.Wc[n][o].Yb[a][u] = l;
                for(o = 0; 17 > o; ++o)c.Xc[n][o] = c.Wc[n][hi[o]];
            }
            return t.kc = P(s), t.kc && (t.Bd = g(s, 8)), t.cb = 1;
        }
        function Zt(t, e, r, n, i, a, o) {
            var s = e[i].Yb[r];
            for(r = 0; 16 > i; ++i){
                if (!k(t, s[r + 0])) return i;
                for(; !k(t, s[r + 1]);)if (s = e[++i].Yb[0], r = 0, 16 == i) return 16;
                var c = e[i + 1].Yb;
                if (k(t, s[r + 2])) {
                    var u = t, h = 0;
                    if (k(u, (f = s)[(l = r) + 3])) {
                        if (k(u, f[l + 6])) {
                            for(s = 0, l = 2 * (h = k(u, f[l + 8])) + (f = k(u, f[l + 9 + h])), h = 0, f = ii[l]; f[s]; ++s)h += h + k(u, f[s]);
                            h += 3 + (8 << l);
                        } else k(u, f[l + 7]) ? (h = 7 + 2 * k(u, 165), h += k(u, 145)) : h = 5 + k(u, 159);
                    } else h = k(u, f[l + 4]) ? 3 + k(u, f[l + 5]) : 2;
                    s = c[2];
                } else h = 1, s = c[1];
                c = o + ai[i], 0 > (u = t).b && _(u);
                var l, f = u.b, d = (l = u.Ca >> 1) - (u.I >> f) >> 31;
                --u.b, u.Ca += d, u.Ca |= 1, u.I -= (l + 1 & d) << f, a[c] = ((h ^ d) - d) * n[(0 < i) + 0];
            }
            return 16;
        }
        function $t(t) {
            var e = t.rb[t.sb - 1];
            e.la = 0, e.Na = 0, i(t.zc, 0, 0, t.zc.length), t.ja = 0;
        }
        function Qt(t, r) {
            if (null == t) return 0;
            if (null == r) return Jt(t, 2, "NULL VP8Io parameter in VP8Decode().");
            if (!t.cb && !Kt(t, r)) return 0;
            if (e(t.cb), null == r.ac || r.ac(r)) {
                r.ob && (t.L = 0);
                var s = Ri[t.L];
                if (2 == t.L ? (t.yb = 0, t.zb = 0) : (t.yb = r.v - s >> 4, t.zb = r.j - s >> 4, 0 > t.yb && (t.yb = 0), 0 > t.zb && (t.zb = 0)), t.Va = r.o + 15 + s >> 4, t.Hb = r.va + 15 + s >> 4, t.Hb > t.za && (t.Hb = t.za), t.Va > t.Ub && (t.Va = t.Ub), 0 < t.L) {
                    var c = t.ed;
                    for(s = 0; 4 > s; ++s){
                        var u;
                        if (t.Qa.Cb) {
                            var h = t.Qa.Lb[s];
                            t.Qa.Fb || (h += c.Tb);
                        } else h = c.Tb;
                        for(u = 0; 1 >= u; ++u){
                            var l = t.gd[s][u], f = h;
                            if (c.Pc && (f += c.vd[0], u && (f += c.od[0])), 0 < (f = 0 > f ? 0 : 63 < f ? 63 : f)) {
                                var d = f;
                                0 < c.wb && (d = 4 < c.wb ? d >> 2 : d >> 1) > 9 - c.wb && (d = 9 - c.wb), 1 > d && (d = 1), l.dd = d, l.tc = 2 * f + d, l.ld = 40 <= f ? 2 : 15 <= f ? 1 : 0;
                            } else l.tc = 0;
                            l.La = u;
                        }
                    }
                }
                s = 0;
            } else Jt(t, 6, "Frame setup failed"), s = t.a;
            if (s = 0 == s) {
                if (s) {
                    t.$c = 0, 0 < t.Aa || (t.Ic = Ui);
                    t: {
                        s = t.Ic;
                        c = 4 * (d = t.za);
                        var p = 32 * d, g = d + 1, m = 0 < t.L ? d * (0 < t.Aa ? 2 : 1) : 0, v = (2 == t.Aa ? 2 : 1) * d;
                        if ((l = c + 832 + (u = 3 * (16 * s + Ri[t.L]) / 2 * p) + (h = null != t.Fa && 0 < t.Fa.length ? t.Kc.c * t.Kc.i : 0)) != l) s = 0;
                        else {
                            if (l > t.Vb) {
                                if (t.Vb = 0, t.Ec = a(l), t.Fc = 0, null == t.Ec) {
                                    s = Jt(t, 1, "no memory during frame initialization.");
                                    break t;
                                }
                                t.Vb = l;
                            }
                            l = t.Ec, f = t.Fc, t.Ac = l, t.Bc = f, f += c, t.Gd = o(p, Ht), t.Hd = 0, t.rb = o(g + 1, Rt), t.sb = 1, t.wa = m ? o(m, Dt) : null, t.Y = 0, t.D.Nb = 0, t.D.wa = t.wa, t.D.Y = t.Y, 0 < t.Aa && (t.D.Y += d), e(!0), t.oc = l, t.pc = f, f += 832, t.ya = o(v, Ut), t.aa = 0, t.D.ya = t.ya, t.D.aa = t.aa, 2 == t.Aa && (t.D.aa += d), t.R = 16 * d, t.B = 8 * d, d = (p = Ri[t.L]) * t.R, p = p / 2 * t.B, t.sa = l, t.ta = f + d, t.qa = t.sa, t.ra = t.ta + 16 * s * t.R + p, t.Ha = t.qa, t.Ia = t.ra + 8 * s * t.B + p, t.$c = 0, f += u, t.mb = h ? l : null, t.nb = h ? f : null, e(f + h <= t.Fc + t.Vb), $t(t), i(t.Ac, t.Bc, 0, c), s = 1;
                        }
                    }
                    if (s) {
                        if (r.ka = 0, r.y = t.sa, r.O = t.ta, r.f = t.qa, r.N = t.ra, r.ea = t.Ha, r.Vd = t.Ia, r.fa = t.R, r.Rc = t.B, r.F = null, r.J = 0, !Cn) {
                            for(s = -255; 255 >= s; ++s)Pn[255 + s] = 0 > s ? -s : s;
                            for(s = -1020; 1020 >= s; ++s)kn[1020 + s] = -128 > s ? -128 : 127 < s ? 127 : s;
                            for(s = -112; 112 >= s; ++s)In[112 + s] = -16 > s ? -16 : 15 < s ? 15 : s;
                            for(s = -255; 510 >= s; ++s)Fn[255 + s] = 0 > s ? 0 : 255 < s ? 255 : s;
                            Cn = 1;
                        }
                        an = ue, on = ae, cn = oe, un = se, hn = ce, sn = ie, ln = Je, fn = Xe, dn = $e, pn = Qe, gn = Ke, mn = Ze, vn = tr, bn = er, yn = ze, wn = He, Nn = We, Ln = Ve, fi[0] = xe, fi[1] = le, fi[2] = Le, fi[3] = Ae, fi[4] = Se, fi[5] = Pe, fi[6] = _e, fi[7] = ke, fi[8] = Fe, fi[9] = Ie, li[0] = ve, li[1] = de, li[2] = pe, li[3] = ge, li[4] = be, li[5] = ye, li[6] = we, di[0] = Be, di[1] = fe, di[2] = Ce, di[3] = je, di[4] = Ee, di[5] = Me, di[6] = qe, s = 1;
                    } else s = 0;
                }
                s && (s = function(t, r) {
                    for(t.M = 0; t.M < t.Va; ++t.M){
                        var o, s = t.Jc[t.M & t.Xb], c = t.m, u = t;
                        for(o = 0; o < u.za; ++o){
                            var h = c, l = u, f = l.Ac, d = l.Bc + 4 * o, p = l.zc, g = l.ya[l.aa + o];
                            if (l.Qa.Bb ? g.$b = k(h, l.Pa.jb[0]) ? 2 + k(h, l.Pa.jb[2]) : k(h, l.Pa.jb[1]) : g.$b = 0, l.kc && (g.Ad = k(h, l.Bd)), g.Za = !k(h, 145) + 0, g.Za) {
                                var m = g.Ob, v = 0;
                                for(l = 0; 4 > l; ++l){
                                    var b, y = p[0 + l];
                                    for(b = 0; 4 > b; ++b){
                                        y = ci[f[d + b]][y];
                                        for(var w = oi[k(h, y[0])]; 0 < w;)w = oi[2 * w + k(h, y[w])];
                                        y = -w, f[d + b] = y;
                                    }
                                    n(m, v, f, d, 4), v += 4, p[0 + l] = y;
                                }
                            } else y = k(h, 156) ? k(h, 128) ? 1 : 3 : k(h, 163) ? 2 : 0, g.Ob[0] = y, i(f, d, y, 4), i(p, 0, y, 4);
                            g.Dd = k(h, 142) ? k(h, 114) ? k(h, 183) ? 1 : 3 : 2 : 0;
                        }
                        if (u.m.Ka) return Jt(t, 7, "Premature end-of-partition0 encountered.");
                        for(; t.ja < t.za; ++t.ja){
                            if (u = s, h = (c = t).rb[c.sb - 1], f = c.rb[c.sb + c.ja], o = c.ya[c.aa + c.ja], d = c.kc ? o.Ad : 0) h.la = f.la = 0, o.Za || (h.Na = f.Na = 0), o.Hc = 0, o.Gc = 0, o.ia = 0;
                            else {
                                var N, L;
                                h = f, f = u, d = c.Pa.Xc, p = c.ya[c.aa + c.ja], g = c.pb[p.$b];
                                if (l = p.ad, m = 0, v = c.rb[c.sb - 1], y = b = 0, i(l, m, 0, 384), p.Za) var A = 0, x = d[3];
                                else {
                                    w = a(16);
                                    var S = h.Na + v.Na;
                                    if (S = ni(f, d[1], S, g.Eb, 0, w, 0), h.Na = v.Na = (0 < S) + 0, 1 < S) an(w, 0, l, m);
                                    else {
                                        var _ = w[0] + 3 >> 3;
                                        for(w = 0; 256 > w; w += 16)l[m + w] = _;
                                    }
                                    A = 1, x = d[0];
                                }
                                var P = 15 & h.la, I = 15 & v.la;
                                for(w = 0; 4 > w; ++w){
                                    var F = 1 & I;
                                    for(_ = L = 0; 4 > _; ++_)P = P >> 1 | (F = (S = ni(f, x, S = F + (1 & P), g.Sc, A, l, m)) > A) << 7, L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != l[m + 0]), m += 16;
                                    P >>= 4, I = I >> 1 | F << 7, b = (b << 8 | L) >>> 0;
                                }
                                for(x = P, A = I >> 4, N = 0; 4 > N; N += 2){
                                    for(L = 0, P = h.la >> 4 + N, I = v.la >> 4 + N, w = 0; 2 > w; ++w){
                                        for(F = 1 & I, _ = 0; 2 > _; ++_)S = F + (1 & P), P = P >> 1 | (F = 0 < (S = ni(f, d[2], S, g.Qc, 0, l, m))) << 3, L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != l[m + 0]), m += 16;
                                        P >>= 2, I = I >> 1 | F << 5;
                                    }
                                    y |= L << 4 * N, x |= P << 4 << N, A |= (240 & I) << N;
                                }
                                h.la = x, v.la = A, p.Hc = b, p.Gc = y, p.ia = 43690 & y ? 0 : g.ia, d = !(b | y);
                            }
                            if (0 < c.L && (c.wa[c.Y + c.ja] = c.gd[o.$b][o.Za], c.wa[c.Y + c.ja].La |= !d), u.Ka) return Jt(t, 7, "Premature end-of-file encountered.");
                        }
                        if ($t(t), c = r, u = 1, o = (s = t).D, h = 0 < s.L && s.M >= s.zb && s.M <= s.Va, 0 == s.Aa) t: {
                            if (o.M = s.M, o.uc = h, Or(s, o), u = 1, o = (L = s.D).Nb, h = (y = Ri[s.L]) * s.R, f = y / 2 * s.B, w = 16 * o * s.R, _ = 8 * o * s.B, d = s.sa, p = s.ta - h + w, g = s.qa, l = s.ra - f + _, m = s.Ha, v = s.Ia - f + _, I = 0 == (P = L.M), b = P >= s.Va - 1, 2 == s.Aa && Or(s, L), L.uc) for(F = (S = s).D.M, e(S.D.uc), L = S.yb; L < S.Hb; ++L){
                                A = L, x = F;
                                var C = (j = (U = S).D).Nb;
                                N = U.R;
                                var j = j.wa[j.Y + A], O = U.sa, B = U.ta + 16 * C * N + 16 * A, M = j.dd, E = j.tc;
                                if (0 != E) {
                                    if (e(3 <= E), 1 == U.L) 0 < A && wn(O, B, N, E + 4), j.La && Ln(O, B, N, E), 0 < x && yn(O, B, N, E + 4), j.La && Nn(O, B, N, E);
                                    else {
                                        var q = U.B, D = U.qa, R = U.ra + 8 * C * q + 8 * A, T = U.Ha, U = U.Ia + 8 * C * q + 8 * A;
                                        C = j.ld;
                                        0 < A && (fn(O, B, N, E + 4, M, C), pn(D, R, T, U, q, E + 4, M, C)), j.La && (mn(O, B, N, E, M, C), bn(D, R, T, U, q, E, M, C)), 0 < x && (ln(O, B, N, E + 4, M, C), dn(D, R, T, U, q, E + 4, M, C)), j.La && (gn(O, B, N, E, M, C), vn(D, R, T, U, q, E, M, C));
                                    }
                                }
                            }
                            if (s.ia && alert("todo:DitherRow"), null != c.put) {
                                if (L = 16 * P, P = 16 * (P + 1), I ? (c.y = s.sa, c.O = s.ta + w, c.f = s.qa, c.N = s.ra + _, c.ea = s.Ha, c.W = s.Ia + _) : (L -= y, c.y = d, c.O = p, c.f = g, c.N = l, c.ea = m, c.W = v), b || (P -= y), P > c.o && (P = c.o), c.F = null, c.J = null, null != s.Fa && 0 < s.Fa.length && L < P && (c.J = lr(s, c, L, P - L), c.F = s.mb, null == c.F && 0 == c.F.length)) {
                                    u = Jt(s, 3, "Could not decode alpha data.");
                                    break t;
                                }
                                L < c.j && (y = c.j - L, L = c.j, e(!(1 & y)), c.O += s.R * y, c.N += s.B * (y >> 1), c.W += s.B * (y >> 1), null != c.F && (c.J += c.width * y)), L < P && (c.O += c.v, c.N += c.v >> 1, c.W += c.v >> 1, null != c.F && (c.J += c.v), c.ka = L - c.j, c.U = c.va - c.v, c.T = P - L, u = c.put(c));
                            }
                            o + 1 != s.Ic || b || (n(s.sa, s.ta - h, d, p + 16 * s.R, h), n(s.qa, s.ra - f, g, l + 8 * s.B, f), n(s.Ha, s.Ia - f, m, v + 8 * s.B, f));
                        }
                        if (!u) return Jt(t, 6, "Output aborted.");
                    }
                    return 1;
                }(t, r)), null != r.bc && r.bc(r), s &= 1;
            }
            return s ? (t.cb = 0, s) : 0;
        }
        function te(t, e, r, n, i) {
            i = t[e + r + 32 * n] + (i >> 3), t[e + r + 32 * n] = -256 & i ? 0 > i ? 0 : 255 : i;
        }
        function ee(t, e, r, n, i, a) {
            te(t, e, 0, r, n + i), te(t, e, 1, r, n + a), te(t, e, 2, r, n - a), te(t, e, 3, r, n - i);
        }
        function re(t) {
            return (20091 * t >> 16) + t;
        }
        function ne(t, e, r, n) {
            var i, o = 0, s = a(16);
            for(i = 0; 4 > i; ++i){
                var c = t[e + 0] + t[e + 8], u = t[e + 0] - t[e + 8], h = (35468 * t[e + 4] >> 16) - re(t[e + 12]), l = re(t[e + 4]) + (35468 * t[e + 12] >> 16);
                s[o + 0] = c + l, s[o + 1] = u + h, s[o + 2] = u - h, s[o + 3] = c - l, o += 4, e++;
            }
            for(i = o = 0; 4 > i; ++i)c = (t = s[o + 0] + 4) + s[o + 8], u = t - s[o + 8], h = (35468 * s[o + 4] >> 16) - re(s[o + 12]), te(r, n, 0, 0, c + (l = re(s[o + 4]) + (35468 * s[o + 12] >> 16))), te(r, n, 1, 0, u + h), te(r, n, 2, 0, u - h), te(r, n, 3, 0, c - l), o++, n += 32;
        }
        function ie(t, e, r, n) {
            var i = t[e + 0] + 4, a = 35468 * t[e + 4] >> 16, o = re(t[e + 4]), s = 35468 * t[e + 1] >> 16;
            ee(r, n, 0, i + o, t = re(t[e + 1]), s), ee(r, n, 1, i + a, t, s), ee(r, n, 2, i - a, t, s), ee(r, n, 3, i - o, t, s);
        }
        function ae(t, e, r, n, i) {
            ne(t, e, r, n), i && ne(t, e + 16, r, n + 4);
        }
        function oe(t, e, r, n) {
            on(t, e + 0, r, n, 1), on(t, e + 32, r, n + 128, 1);
        }
        function se(t, e, r, n) {
            var i;
            for(t = t[e + 0] + 4, i = 0; 4 > i; ++i)for(e = 0; 4 > e; ++e)te(r, n, e, i, t);
        }
        function ce(t, e, r, n) {
            t[e + 0] && un(t, e + 0, r, n), t[e + 16] && un(t, e + 16, r, n + 4), t[e + 32] && un(t, e + 32, r, n + 128), t[e + 48] && un(t, e + 48, r, n + 128 + 4);
        }
        function ue(t, e, r, n) {
            var i, o = a(16);
            for(i = 0; 4 > i; ++i){
                var s = t[e + 0 + i] + t[e + 12 + i], c = t[e + 4 + i] + t[e + 8 + i], u = t[e + 4 + i] - t[e + 8 + i], h = t[e + 0 + i] - t[e + 12 + i];
                o[0 + i] = s + c, o[8 + i] = s - c, o[4 + i] = h + u, o[12 + i] = h - u;
            }
            for(i = 0; 4 > i; ++i)s = (t = o[0 + 4 * i] + 3) + o[3 + 4 * i], c = o[1 + 4 * i] + o[2 + 4 * i], u = o[1 + 4 * i] - o[2 + 4 * i], h = t - o[3 + 4 * i], r[n + 0] = s + c >> 3, r[n + 16] = h + u >> 3, r[n + 32] = s - c >> 3, r[n + 48] = h - u >> 3, n += 64;
        }
        function he(t, e, r) {
            var n, i = e - 32, a = Bn, o = 255 - t[i - 1];
            for(n = 0; n < r; ++n){
                var s, c = a, u = o + t[e - 1];
                for(s = 0; s < r; ++s)t[e + s] = c[u + t[i + s]];
                e += 32;
            }
        }
        function le(t, e) {
            he(t, e, 4);
        }
        function fe(t, e) {
            he(t, e, 8);
        }
        function de(t, e) {
            he(t, e, 16);
        }
        function pe(t, e) {
            var r;
            for(r = 0; 16 > r; ++r)n(t, e + 32 * r, t, e - 32, 16);
        }
        function ge(t, e) {
            var r;
            for(r = 16; 0 < r; --r)i(t, e, t[e - 1], 16), e += 32;
        }
        function me(t, e, r) {
            var n;
            for(n = 0; 16 > n; ++n)i(e, r + 32 * n, t, 16);
        }
        function ve(t, e) {
            var r, n = 16;
            for(r = 0; 16 > r; ++r)n += t[e - 1 + 32 * r] + t[e + r - 32];
            me(n >> 5, t, e);
        }
        function be(t, e) {
            var r, n = 8;
            for(r = 0; 16 > r; ++r)n += t[e - 1 + 32 * r];
            me(n >> 4, t, e);
        }
        function ye(t, e) {
            var r, n = 8;
            for(r = 0; 16 > r; ++r)n += t[e + r - 32];
            me(n >> 4, t, e);
        }
        function we(t, e) {
            me(128, t, e);
        }
        function Ne(t, e, r) {
            return t + 2 * e + r + 2 >> 2;
        }
        function Le(t, e) {
            var r, i = e - 32;
            i = new Uint8Array([
                Ne(t[i - 1], t[i + 0], t[i + 1]),
                Ne(t[i + 0], t[i + 1], t[i + 2]),
                Ne(t[i + 1], t[i + 2], t[i + 3]),
                Ne(t[i + 2], t[i + 3], t[i + 4])
            ]);
            for(r = 0; 4 > r; ++r)n(t, e + 32 * r, i, 0, i.length);
        }
        function Ae(t, e) {
            var r = t[e - 1], n = t[e - 1 + 32], i = t[e - 1 + 64], a = t[e - 1 + 96];
            I(t, e + 0, 16843009 * Ne(t[e - 1 - 32], r, n)), I(t, e + 32, 16843009 * Ne(r, n, i)), I(t, e + 64, 16843009 * Ne(n, i, a)), I(t, e + 96, 16843009 * Ne(i, a, a));
        }
        function xe(t, e) {
            var r, n = 4;
            for(r = 0; 4 > r; ++r)n += t[e + r - 32] + t[e - 1 + 32 * r];
            for(n >>= 3, r = 0; 4 > r; ++r)i(t, e + 32 * r, n, 4);
        }
        function Se(t, e) {
            var r = t[e - 1 + 0], n = t[e - 1 + 32], i = t[e - 1 + 64], a = t[e - 1 - 32], o = t[e + 0 - 32], s = t[e + 1 - 32], c = t[e + 2 - 32], u = t[e + 3 - 32];
            t[e + 0 + 96] = Ne(n, i, t[e - 1 + 96]), t[e + 1 + 96] = t[e + 0 + 64] = Ne(r, n, i), t[e + 2 + 96] = t[e + 1 + 64] = t[e + 0 + 32] = Ne(a, r, n), t[e + 3 + 96] = t[e + 2 + 64] = t[e + 1 + 32] = t[e + 0 + 0] = Ne(o, a, r), t[e + 3 + 64] = t[e + 2 + 32] = t[e + 1 + 0] = Ne(s, o, a), t[e + 3 + 32] = t[e + 2 + 0] = Ne(c, s, o), t[e + 3 + 0] = Ne(u, c, s);
        }
        function _e(t, e) {
            var r = t[e + 1 - 32], n = t[e + 2 - 32], i = t[e + 3 - 32], a = t[e + 4 - 32], o = t[e + 5 - 32], s = t[e + 6 - 32], c = t[e + 7 - 32];
            t[e + 0 + 0] = Ne(t[e + 0 - 32], r, n), t[e + 1 + 0] = t[e + 0 + 32] = Ne(r, n, i), t[e + 2 + 0] = t[e + 1 + 32] = t[e + 0 + 64] = Ne(n, i, a), t[e + 3 + 0] = t[e + 2 + 32] = t[e + 1 + 64] = t[e + 0 + 96] = Ne(i, a, o), t[e + 3 + 32] = t[e + 2 + 64] = t[e + 1 + 96] = Ne(a, o, s), t[e + 3 + 64] = t[e + 2 + 96] = Ne(o, s, c), t[e + 3 + 96] = Ne(s, c, c);
        }
        function Pe(t, e) {
            var r = t[e - 1 + 0], n = t[e - 1 + 32], i = t[e - 1 + 64], a = t[e - 1 - 32], o = t[e + 0 - 32], s = t[e + 1 - 32], c = t[e + 2 - 32], u = t[e + 3 - 32];
            t[e + 0 + 0] = t[e + 1 + 64] = a + o + 1 >> 1, t[e + 1 + 0] = t[e + 2 + 64] = o + s + 1 >> 1, t[e + 2 + 0] = t[e + 3 + 64] = s + c + 1 >> 1, t[e + 3 + 0] = c + u + 1 >> 1, t[e + 0 + 96] = Ne(i, n, r), t[e + 0 + 64] = Ne(n, r, a), t[e + 0 + 32] = t[e + 1 + 96] = Ne(r, a, o), t[e + 1 + 32] = t[e + 2 + 96] = Ne(a, o, s), t[e + 2 + 32] = t[e + 3 + 96] = Ne(o, s, c), t[e + 3 + 32] = Ne(s, c, u);
        }
        function ke(t, e) {
            var r = t[e + 0 - 32], n = t[e + 1 - 32], i = t[e + 2 - 32], a = t[e + 3 - 32], o = t[e + 4 - 32], s = t[e + 5 - 32], c = t[e + 6 - 32], u = t[e + 7 - 32];
            t[e + 0 + 0] = r + n + 1 >> 1, t[e + 1 + 0] = t[e + 0 + 64] = n + i + 1 >> 1, t[e + 2 + 0] = t[e + 1 + 64] = i + a + 1 >> 1, t[e + 3 + 0] = t[e + 2 + 64] = a + o + 1 >> 1, t[e + 0 + 32] = Ne(r, n, i), t[e + 1 + 32] = t[e + 0 + 96] = Ne(n, i, a), t[e + 2 + 32] = t[e + 1 + 96] = Ne(i, a, o), t[e + 3 + 32] = t[e + 2 + 96] = Ne(a, o, s), t[e + 3 + 64] = Ne(o, s, c), t[e + 3 + 96] = Ne(s, c, u);
        }
        function Ie(t, e) {
            var r = t[e - 1 + 0], n = t[e - 1 + 32], i = t[e - 1 + 64], a = t[e - 1 + 96];
            t[e + 0 + 0] = r + n + 1 >> 1, t[e + 2 + 0] = t[e + 0 + 32] = n + i + 1 >> 1, t[e + 2 + 32] = t[e + 0 + 64] = i + a + 1 >> 1, t[e + 1 + 0] = Ne(r, n, i), t[e + 3 + 0] = t[e + 1 + 32] = Ne(n, i, a), t[e + 3 + 32] = t[e + 1 + 64] = Ne(i, a, a), t[e + 3 + 64] = t[e + 2 + 64] = t[e + 0 + 96] = t[e + 1 + 96] = t[e + 2 + 96] = t[e + 3 + 96] = a;
        }
        function Fe(t, e) {
            var r = t[e - 1 + 0], n = t[e - 1 + 32], i = t[e - 1 + 64], a = t[e - 1 + 96], o = t[e - 1 - 32], s = t[e + 0 - 32], c = t[e + 1 - 32], u = t[e + 2 - 32];
            t[e + 0 + 0] = t[e + 2 + 32] = r + o + 1 >> 1, t[e + 0 + 32] = t[e + 2 + 64] = n + r + 1 >> 1, t[e + 0 + 64] = t[e + 2 + 96] = i + n + 1 >> 1, t[e + 0 + 96] = a + i + 1 >> 1, t[e + 3 + 0] = Ne(s, c, u), t[e + 2 + 0] = Ne(o, s, c), t[e + 1 + 0] = t[e + 3 + 32] = Ne(r, o, s), t[e + 1 + 32] = t[e + 3 + 64] = Ne(n, r, o), t[e + 1 + 64] = t[e + 3 + 96] = Ne(i, n, r), t[e + 1 + 96] = Ne(a, i, n);
        }
        function Ce(t, e) {
            var r;
            for(r = 0; 8 > r; ++r)n(t, e + 32 * r, t, e - 32, 8);
        }
        function je(t, e) {
            var r;
            for(r = 0; 8 > r; ++r)i(t, e, t[e - 1], 8), e += 32;
        }
        function Oe(t, e, r) {
            var n;
            for(n = 0; 8 > n; ++n)i(e, r + 32 * n, t, 8);
        }
        function Be(t, e) {
            var r, n = 8;
            for(r = 0; 8 > r; ++r)n += t[e + r - 32] + t[e - 1 + 32 * r];
            Oe(n >> 4, t, e);
        }
        function Me(t, e) {
            var r, n = 4;
            for(r = 0; 8 > r; ++r)n += t[e + r - 32];
            Oe(n >> 3, t, e);
        }
        function Ee(t, e) {
            var r, n = 4;
            for(r = 0; 8 > r; ++r)n += t[e - 1 + 32 * r];
            Oe(n >> 3, t, e);
        }
        function qe(t, e) {
            Oe(128, t, e);
        }
        function De(t, e, r) {
            var n = t[e - r], i = t[e + 0], a = 3 * (i - n) + jn[1020 + t[e - 2 * r] - t[e + r]], o = On[112 + (a + 4 >> 3)];
            t[e - r] = Bn[255 + n + On[112 + (a + 3 >> 3)]], t[e + 0] = Bn[255 + i - o];
        }
        function Re(t, e, r, n) {
            var i = t[e + 0], a = t[e + r];
            return Mn[255 + t[e - 2 * r] - t[e - r]] > n || Mn[255 + a - i] > n;
        }
        function Te(t, e, r, n) {
            return 4 * Mn[255 + t[e - r] - t[e + 0]] + Mn[255 + t[e - 2 * r] - t[e + r]] <= n;
        }
        function Ue(t, e, r, n, i) {
            var a = t[e - 3 * r], o = t[e - 2 * r], s = t[e - r], c = t[e + 0], u = t[e + r], h = t[e + 2 * r], l = t[e + 3 * r];
            return 4 * Mn[255 + s - c] + Mn[255 + o - u] > n ? 0 : Mn[255 + t[e - 4 * r] - a] <= i && Mn[255 + a - o] <= i && Mn[255 + o - s] <= i && Mn[255 + l - h] <= i && Mn[255 + h - u] <= i && Mn[255 + u - c] <= i;
        }
        function ze(t, e, r, n) {
            var i = 2 * n + 1;
            for(n = 0; 16 > n; ++n)Te(t, e + n, r, i) && De(t, e + n, r);
        }
        function He(t, e, r, n) {
            var i = 2 * n + 1;
            for(n = 0; 16 > n; ++n)Te(t, e + n * r, 1, i) && De(t, e + n * r, 1);
        }
        function We(t, e, r, n) {
            var i;
            for(i = 3; 0 < i; --i)ze(t, e += 4 * r, r, n);
        }
        function Ve(t, e, r, n) {
            var i;
            for(i = 3; 0 < i; --i)He(t, e += 4, r, n);
        }
        function Ge(t, e, r, n, i, a, o, s) {
            for(a = 2 * a + 1; 0 < i--;){
                if (Ue(t, e, r, a, o)) {
                    if (Re(t, e, r, s)) De(t, e, r);
                    else {
                        var c = t, u = e, h = r, l = c[u - 2 * h], f = c[u - h], d = c[u + 0], p = c[u + h], g = c[u + 2 * h], m = 27 * (b = jn[1020 + 3 * (d - f) + jn[1020 + l - p]]) + 63 >> 7, v = 18 * b + 63 >> 7, b = 9 * b + 63 >> 7;
                        c[u - 3 * h] = Bn[255 + c[u - 3 * h] + b], c[u - 2 * h] = Bn[255 + l + v], c[u - h] = Bn[255 + f + m], c[u + 0] = Bn[255 + d - m], c[u + h] = Bn[255 + p - v], c[u + 2 * h] = Bn[255 + g - b];
                    }
                }
                e += n;
            }
        }
        function Ye(t, e, r, n, i, a, o, s) {
            for(a = 2 * a + 1; 0 < i--;){
                if (Ue(t, e, r, a, o)) {
                    if (Re(t, e, r, s)) De(t, e, r);
                    else {
                        var c = t, u = e, h = r, l = c[u - h], f = c[u + 0], d = c[u + h], p = On[112 + ((g = 3 * (f - l)) + 4 >> 3)], g = On[112 + (g + 3 >> 3)], m = p + 1 >> 1;
                        c[u - 2 * h] = Bn[255 + c[u - 2 * h] + m], c[u - h] = Bn[255 + l + g], c[u + 0] = Bn[255 + f - p], c[u + h] = Bn[255 + d - m];
                    }
                }
                e += n;
            }
        }
        function Je(t, e, r, n, i, a) {
            Ge(t, e, r, 1, 16, n, i, a);
        }
        function Xe(t, e, r, n, i, a) {
            Ge(t, e, 1, r, 16, n, i, a);
        }
        function Ke(t, e, r, n, i, a) {
            var o;
            for(o = 3; 0 < o; --o)Ye(t, e += 4 * r, r, 1, 16, n, i, a);
        }
        function Ze(t, e, r, n, i, a) {
            var o;
            for(o = 3; 0 < o; --o)Ye(t, e += 4, 1, r, 16, n, i, a);
        }
        function $e(t, e, r, n, i, a, o, s) {
            Ge(t, e, i, 1, 8, a, o, s), Ge(r, n, i, 1, 8, a, o, s);
        }
        function Qe(t, e, r, n, i, a, o, s) {
            Ge(t, e, 1, i, 8, a, o, s), Ge(r, n, 1, i, 8, a, o, s);
        }
        function tr(t, e, r, n, i, a, o, s) {
            Ye(t, e + 4 * i, i, 1, 8, a, o, s), Ye(r, n + 4 * i, i, 1, 8, a, o, s);
        }
        function er(t, e, r, n, i, a, o, s) {
            Ye(t, e + 4, 1, i, 8, a, o, s), Ye(r, n + 4, 1, i, 8, a, o, s);
        }
        function rr() {
            this.ba = new ot, this.ec = [], this.cc = [], this.Mc = [], this.Dc = this.Nc = this.dc = this.fc = 0, this.Oa = new ct, this.memory = 0, this.Ib = "OutputFunc", this.Jb = "OutputAlphaFunc", this.Nd = "OutputRowFunc";
        }
        function nr() {
            this.data = [], this.offset = this.kd = this.ha = this.w = 0, this.na = [], this.xa = this.gb = this.Ja = this.Sa = this.P = 0;
        }
        function ir() {
            this.nc = this.Ea = this.b = this.hc = 0, this.K = [], this.w = 0;
        }
        function ar() {
            this.ua = 0, this.Wa = new M, this.vb = new M, this.md = this.xc = this.wc = 0, this.vc = [], this.Wb = 0, this.Ya = new d, this.yc = new l;
        }
        function or() {
            this.xb = this.a = 0, this.l = new Gt, this.ca = new ot, this.V = [], this.Ba = 0, this.Ta = [], this.Ua = 0, this.m = new N, this.Pb = 0, this.wd = new N, this.Ma = this.$ = this.C = this.i = this.c = this.xd = 0, this.s = new ar, this.ab = 0, this.gc = o(4, ir), this.Oc = 0;
        }
        function sr() {
            this.Lc = this.Z = this.$a = this.i = this.c = 0, this.l = new Gt, this.ic = 0, this.ca = [], this.tb = 0, this.qd = null, this.rd = 0;
        }
        function cr(t, e, r, n, i, a, o) {
            for(t = null == t ? 0 : t[e + 0], e = 0; e < o; ++e)i[a + e] = t + r[n + e] & 255, t = i[a + e];
        }
        function ur(t, e, r, n, i, a, o) {
            var s;
            if (null == t) cr(null, null, r, n, i, a, o);
            else for(s = 0; s < o; ++s)i[a + s] = t[e + s] + r[n + s] & 255;
        }
        function hr(t, e, r, n, i, a, o) {
            if (null == t) cr(null, null, r, n, i, a, o);
            else {
                var s, c = t[e + 0], u = c, h = c;
                for(s = 0; s < o; ++s)u = h + (c = t[e + s]) - u, h = r[n + s] + (-256 & u ? 0 > u ? 0 : 255 : u) & 255, u = c, i[a + s] = h;
            }
        }
        function lr(t, r, i, o) {
            var s = r.width, c = r.o;
            if (e(null != t && null != r), 0 > i || 0 >= o || i + o > c) return null;
            if (!t.Cc) {
                if (null == t.ga) {
                    var u;
                    if (t.ga = new sr, (u = null == t.ga) || (u = r.width * r.o, e(0 == t.Gb.length), t.Gb = a(u), t.Uc = 0, null == t.Gb ? u = 0 : (t.mb = t.Gb, t.nb = t.Uc, t.rc = null, u = 1), u = !u), !u) {
                        u = t.ga;
                        var h = t.Fa, l = t.P, f = t.qc, d = t.mb, p = t.nb, g = l + 1, m = f - 1, b = u.l;
                        if (e(null != h && null != d && null != r), mi[0] = null, mi[1] = cr, mi[2] = ur, mi[3] = hr, u.ca = d, u.tb = p, u.c = r.width, u.i = r.height, e(0 < u.c && 0 < u.i), 1 >= f) r = 0;
                        else if (u.$a = h[l + 0] >> 0 & 3, u.Z = h[l + 0] >> 2 & 3, u.Lc = h[l + 0] >> 4 & 3, l = h[l + 0] >> 6 & 3, 0 > u.$a || 1 < u.$a || 4 <= u.Z || 1 < u.Lc || l) r = 0;
                        else if (b.put = dt, b.ac = ft, b.bc = pt, b.ma = u, b.width = r.width, b.height = r.height, b.Da = r.Da, b.v = r.v, b.va = r.va, b.j = r.j, b.o = r.o, u.$a) t: {
                            e(1 == u.$a), r = kt();
                            e: for(;;){
                                if (null == r) {
                                    r = 0;
                                    break t;
                                }
                                if (e(null != u), u.mc = r, r.c = u.c, r.i = u.i, r.l = u.l, r.l.ma = u, r.l.width = u.c, r.l.height = u.i, r.a = 0, v(r.m, h, g, m), !It(u.c, u.i, 1, r, null)) break e;
                                if (1 == r.ab && 3 == r.gc[0].hc && At(r.s) ? (u.ic = 1, h = r.c * r.i, r.Ta = null, r.Ua = 0, r.V = a(h), r.Ba = 0, null == r.V ? (r.a = 1, r = 0) : r = 1) : (u.ic = 0, r = Ft(r, u.c)), !r) break e;
                                r = 1;
                                break t;
                            }
                            u.mc = null, r = 0;
                        }
                        else r = m >= u.c * u.i;
                        u = !r;
                    }
                    if (u) return null;
                    1 != t.ga.Lc ? t.Ga = 0 : o = c - i;
                }
                e(null != t.ga), e(i + o <= c);
                t: {
                    if (r = (h = t.ga).c, c = h.l.o, 0 == h.$a) {
                        if (g = t.rc, m = t.Vc, b = t.Fa, l = t.P + 1 + i * r, f = t.mb, d = t.nb + i * r, e(l <= t.P + t.qc), 0 != h.Z) for(e(null != mi[h.Z]), u = 0; u < o; ++u)mi[h.Z](g, m, b, l, f, d, r), g = f, m = d, d += r, l += r;
                        else for(u = 0; u < o; ++u)n(f, d, b, l, r), g = f, m = d, d += r, l += r;
                        t.rc = g, t.Vc = m;
                    } else {
                        if (e(null != h.mc), r = i + o, e(null != (u = h.mc)), e(r <= u.i), u.C >= r) r = 1;
                        else if (h.ic || mr(), h.ic) {
                            h = u.V, g = u.Ba, m = u.c;
                            var y = u.i, w = (b = 1, l = u.$ / m, f = u.$ % m, d = u.m, p = u.s, u.$), N = m * y, L = m * r, x = p.wc, _ = w < L ? wt(p, f, l) : null;
                            e(w <= N), e(r <= y), e(At(p));
                            e: for(;;){
                                for(; !d.h && w < L;){
                                    if (f & x || (_ = wt(p, f, l)), e(null != _), S(d), 256 > (y = bt(_.G[0], _.H[0], d))) h[g + w] = y, ++w, ++f >= m && (f = 0, ++l <= r && !(l % 16) && St(u, l));
                                    else {
                                        if (!(280 > y)) {
                                            b = 0;
                                            break e;
                                        }
                                        y = mt(y - 256, d);
                                        var P, k = bt(_.G[4], _.H[4], d);
                                        if (S(d), !(w >= (k = vt(m, k = mt(k, d))) && N - w >= y)) {
                                            b = 0;
                                            break e;
                                        }
                                        for(P = 0; P < y; ++P)h[g + w + P] = h[g + w + P - k];
                                        for(w += y, f += y; f >= m;)f -= m, ++l <= r && !(l % 16) && St(u, l);
                                        w < L && f & x && (_ = wt(p, f, l));
                                    }
                                    e(d.h == A(d));
                                }
                                St(u, l > r ? r : l);
                                break e;
                            }
                            !b || d.h && w < N ? (b = 0, u.a = d.h ? 5 : 3) : u.$ = w, r = b;
                        } else r = _t(u, u.V, u.Ba, u.c, u.i, r, Ct);
                        if (!r) {
                            o = 0;
                            break t;
                        }
                    }
                    i + o >= c && (t.Cc = 1), o = 1;
                }
                if (!o) return null;
                if (t.Cc && (null != (o = t.ga) && (o.mc = null), t.ga = null, 0 < t.Ga)) return alert("todo:WebPDequantizeLevels"), null;
            }
            return t.nb + i * s;
        }
        function fr(t, e, r, n, i, a) {
            for(; 0 < i--;){
                var o, s = t, c = e + (r ? 1 : 0), u = t, h = e + (r ? 0 : 3);
                for(o = 0; o < n; ++o){
                    var l = u[h + 4 * o];
                    255 != l && (l *= 32897, s[c + 4 * o + 0] = s[c + 4 * o + 0] * l >> 23, s[c + 4 * o + 1] = s[c + 4 * o + 1] * l >> 23, s[c + 4 * o + 2] = s[c + 4 * o + 2] * l >> 23);
                }
                e += a;
            }
        }
        function dr(t, e, r, n, i) {
            for(; 0 < n--;){
                var a;
                for(a = 0; a < r; ++a){
                    var o = t[e + 2 * a + 0], s = 15 & (u = t[e + 2 * a + 1]), c = 4369 * s, u = (240 & u | u >> 4) * c >> 16;
                    t[e + 2 * a + 0] = (240 & o | o >> 4) * c >> 16 & 240 | (15 & o | o << 4) * c >> 16 >> 4 & 15, t[e + 2 * a + 1] = 240 & u | s;
                }
                e += i;
            }
        }
        function pr(t, e, r, n, i, a, o, s) {
            var c, u, h = 255;
            for(u = 0; u < i; ++u){
                for(c = 0; c < n; ++c){
                    var l = t[e + c];
                    a[o + 4 * c] = l, h &= l;
                }
                e += r, o += s;
            }
            return 255 != h;
        }
        function gr(t, e, r, n, i) {
            var a;
            for(a = 0; a < i; ++a)r[n + a] = t[e + a] >> 8;
        }
        function mr() {
            An = fr, xn = dr, Sn = pr, _n = gr;
        }
        function vr(r, n, i) {
            t[r] = function(t, r, a, o, s, c, u, h, l, f, d, p, g, m, v, b, y) {
                var w, N = y - 1 >> 1, L = s[c + 0] | u[h + 0] << 16, A = l[f + 0] | d[p + 0] << 16;
                e(null != t);
                var x = 3 * L + A + 131074 >> 2;
                for(n(t[r + 0], 255 & x, x >> 16, g, m), null != a && (x = 3 * A + L + 131074 >> 2, n(a[o + 0], 255 & x, x >> 16, v, b)), w = 1; w <= N; ++w){
                    var S = s[c + w] | u[h + w] << 16, _ = l[f + w] | d[p + w] << 16, P = L + S + A + _ + 524296, k = P + 2 * (S + A) >> 3;
                    x = k + L >> 1, L = (P = P + 2 * (L + _) >> 3) + S >> 1, n(t[r + 2 * w - 1], 255 & x, x >> 16, g, m + (2 * w - 1) * i), n(t[r + 2 * w - 0], 255 & L, L >> 16, g, m + (2 * w - 0) * i), null != a && (x = P + A >> 1, L = k + _ >> 1, n(a[o + 2 * w - 1], 255 & x, x >> 16, v, b + (2 * w - 1) * i), n(a[o + 2 * w + 0], 255 & L, L >> 16, v, b + (2 * w + 0) * i)), L = S, A = _;
                }
                1 & y || (x = 3 * L + A + 131074 >> 2, n(t[r + y - 1], 255 & x, x >> 16, g, m + (y - 1) * i), null != a && (x = 3 * A + L + 131074 >> 2, n(a[o + y - 1], 255 & x, x >> 16, v, b + (y - 1) * i)));
            };
        }
        function br() {
            vi[En] = bi, vi[qn] = wi, vi[Dn] = yi, vi[Rn] = Ni, vi[Tn] = Li, vi[Un] = Ai, vi[zn] = xi, vi[Hn] = wi, vi[Wn] = Ni, vi[Vn] = Li, vi[Gn] = Ai;
        }
        function yr(t) {
            return t & ~Fi ? 0 > t ? 0 : 255 : t >> Ii;
        }
        function wr(t, e) {
            return yr((19077 * t >> 8) + (26149 * e >> 8) - 14234);
        }
        function Nr(t, e, r) {
            return yr((19077 * t >> 8) - (6419 * e >> 8) - (13320 * r >> 8) + 8708);
        }
        function Lr(t, e) {
            return yr((19077 * t >> 8) + (33050 * e >> 8) - 17685);
        }
        function Ar(t, e, r, n, i) {
            n[i + 0] = wr(t, r), n[i + 1] = Nr(t, e, r), n[i + 2] = Lr(t, e);
        }
        function xr(t, e, r, n, i) {
            n[i + 0] = Lr(t, e), n[i + 1] = Nr(t, e, r), n[i + 2] = wr(t, r);
        }
        function Sr(t, e, r, n, i) {
            var a = Nr(t, e, r);
            e = a << 3 & 224 | Lr(t, e) >> 3, n[i + 0] = 248 & wr(t, r) | a >> 5, n[i + 1] = e;
        }
        function _r(t, e, r, n, i) {
            var a = 240 & Lr(t, e) | 15;
            n[i + 0] = 240 & wr(t, r) | Nr(t, e, r) >> 4, n[i + 1] = a;
        }
        function Pr(t, e, r, n, i) {
            n[i + 0] = 255, Ar(t, e, r, n, i + 1);
        }
        function kr(t, e, r, n, i) {
            xr(t, e, r, n, i), n[i + 3] = 255;
        }
        function Ir(t, e, r, n, i) {
            Ar(t, e, r, n, i), n[i + 3] = 255;
        }
        function Vt(t, e) {
            return 0 > t ? 0 : t > e ? e : t;
        }
        function Fr(e, r, n) {
            t[e] = function(t, e, i, a, o, s, c, u, h) {
                for(var l = u + (-2 & h) * n; u != l;)r(t[e + 0], i[a + 0], o[s + 0], c, u), r(t[e + 1], i[a + 0], o[s + 0], c, u + n), e += 2, ++a, ++s, u += 2 * n;
                1 & h && r(t[e + 0], i[a + 0], o[s + 0], c, u);
            };
        }
        function Cr(t, e, r) {
            return 0 == r ? 0 == t ? 0 == e ? 6 : 5 : 0 == e ? 4 : 0 : r;
        }
        function jr(t, e, r, n, i) {
            switch(t >>> 30){
                case 3:
                    on(e, r, n, i, 0);
                    break;
                case 2:
                    sn(e, r, n, i);
                    break;
                case 1:
                    un(e, r, n, i);
            }
        }
        function Or(t, e) {
            var r, a, o = e.M, s = e.Nb, c = t.oc, u = t.pc + 40, h = t.oc, l = t.pc + 584, f = t.oc, d = t.pc + 600;
            for(r = 0; 16 > r; ++r)c[u + 32 * r - 1] = 129;
            for(r = 0; 8 > r; ++r)h[l + 32 * r - 1] = 129, f[d + 32 * r - 1] = 129;
            for(0 < o ? c[u - 1 - 32] = h[l - 1 - 32] = f[d - 1 - 32] = 129 : (i(c, u - 32 - 1, 127, 21), i(h, l - 32 - 1, 127, 9), i(f, d - 32 - 1, 127, 9)), a = 0; a < t.za; ++a){
                var p = e.ya[e.aa + a];
                if (0 < a) {
                    for(r = -1; 16 > r; ++r)n(c, u + 32 * r - 4, c, u + 32 * r + 12, 4);
                    for(r = -1; 8 > r; ++r)n(h, l + 32 * r - 4, h, l + 32 * r + 4, 4), n(f, d + 32 * r - 4, f, d + 32 * r + 4, 4);
                }
                var g = t.Gd, m = t.Hd + a, v = p.ad, b = p.Hc;
                if (0 < o && (n(c, u - 32, g[m].y, 0, 16), n(h, l - 32, g[m].f, 0, 8), n(f, d - 32, g[m].ea, 0, 8)), p.Za) {
                    var y = c, w = u - 32 + 16;
                    for(0 < o && (a >= t.za - 1 ? i(y, w, g[m].y[15], 4) : n(y, w, g[m + 1].y, 0, 4)), r = 0; 4 > r; r++)y[w + 128 + r] = y[w + 256 + r] = y[w + 384 + r] = y[w + 0 + r];
                    for(r = 0; 16 > r; ++r, b <<= 2)y = c, w = u + Di[r], fi[p.Ob[r]](y, w), jr(b, v, 16 * +r, y, w);
                } else if (y = Cr(a, o, p.Ob[0]), li[y](c, u), 0 != b) for(r = 0; 16 > r; ++r, b <<= 2)jr(b, v, 16 * +r, c, u + Di[r]);
                for(r = p.Gc, y = Cr(a, o, p.Dd), di[y](h, l), di[y](f, d), b = v, y = h, w = l, 255 & (p = r >> 0) && (170 & p ? cn(b, 256, y, w) : hn(b, 256, y, w)), p = f, b = d, 255 & (r >>= 8) && (170 & r ? cn(v, 320, p, b) : hn(v, 320, p, b)), o < t.Ub - 1 && (n(g[m].y, 0, c, u + 480, 16), n(g[m].f, 0, h, l + 224, 8), n(g[m].ea, 0, f, d + 224, 8)), r = 8 * s * t.B, g = t.sa, m = t.ta + 16 * a + 16 * s * t.R, v = t.qa, p = t.ra + 8 * a + r, b = t.Ha, y = t.Ia + 8 * a + r, r = 0; 16 > r; ++r)n(g, m + r * t.R, c, u + 32 * r, 16);
                for(r = 0; 8 > r; ++r)n(v, p + r * t.B, h, l + 32 * r, 8), n(b, y + r * t.B, f, d + 32 * r, 8);
            }
        }
        function Br(t, n, i, a, o, s, c, u, h) {
            var l = [
                0
            ], f = [
                0
            ], d = 0, p = null != h ? h.kd : 0, g = null != h ? h : new nr;
            if (null == t || 12 > i) return 7;
            g.data = t, g.w = n, g.ha = i, n = [
                n
            ], i = [
                i
            ], g.gb = [
                g.gb
            ];
            t: {
                var m = n, b = i, y = g.gb;
                if (e(null != t), e(null != b), e(null != y), y[0] = 0, 12 <= b[0] && !r(t, m[0], "RIFF")) {
                    if (r(t, m[0] + 8, "WEBP")) {
                        y = 3;
                        break t;
                    }
                    var w = j(t, m[0] + 4);
                    if (12 > w || 4294967286 < w) {
                        y = 3;
                        break t;
                    }
                    if (p && w > b[0] - 8) {
                        y = 7;
                        break t;
                    }
                    y[0] = w, m[0] += 12, b[0] -= 12;
                }
                y = 0;
            }
            if (0 != y) return y;
            for(w = 0 < g.gb[0], i = i[0];;){
                t: {
                    var L = t;
                    b = n, y = i;
                    var A = l, x = f, S = m = [
                        0
                    ];
                    if ((k = d = [
                        d
                    ])[0] = 0, 8 > y[0]) y = 7;
                    else {
                        if (!r(L, b[0], "VP8X")) {
                            if (10 != j(L, b[0] + 4)) {
                                y = 3;
                                break t;
                            }
                            if (18 > y[0]) {
                                y = 7;
                                break t;
                            }
                            var _ = j(L, b[0] + 8), P = 1 + C(L, b[0] + 12);
                            if (2147483648 <= P * (L = 1 + C(L, b[0] + 15))) {
                                y = 3;
                                break t;
                            }
                            null != S && (S[0] = _), null != A && (A[0] = P), null != x && (x[0] = L), b[0] += 18, y[0] -= 18, k[0] = 1;
                        }
                        y = 0;
                    }
                }
                if (d = d[0], m = m[0], 0 != y) return y;
                if (b = !!(2 & m), !w && d) return 3;
                if (null != s && (s[0] = !!(16 & m)), null != c && (c[0] = b), null != u && (u[0] = 0), c = l[0], m = f[0], d && b && null == h) {
                    y = 0;
                    break;
                }
                if (4 > i) {
                    y = 7;
                    break;
                }
                if (w && d || !w && !d && !r(t, n[0], "ALPH")) {
                    i = [
                        i
                    ], g.na = [
                        g.na
                    ], g.P = [
                        g.P
                    ], g.Sa = [
                        g.Sa
                    ];
                    t: {
                        _ = t, y = n, w = i;
                        var k = g.gb;
                        A = g.na, x = g.P, S = g.Sa;
                        P = 22, e(null != _), e(null != w), L = y[0];
                        var I = w[0];
                        for(e(null != A), e(null != S), A[0] = null, x[0] = null, S[0] = 0;;){
                            if (y[0] = L, w[0] = I, 8 > I) {
                                y = 7;
                                break t;
                            }
                            var F = j(_, L + 4);
                            if (4294967286 < F) {
                                y = 3;
                                break t;
                            }
                            var O = 8 + F + 1 & -2;
                            if (P += O, 0 < k && P > k) {
                                y = 3;
                                break t;
                            }
                            if (!r(_, L, "VP8 ") || !r(_, L, "VP8L")) {
                                y = 0;
                                break t;
                            }
                            if (I[0] < O) {
                                y = 7;
                                break t;
                            }
                            r(_, L, "ALPH") || (A[0] = _, x[0] = L + 8, S[0] = F), L += O, I -= O;
                        }
                    }
                    if (i = i[0], g.na = g.na[0], g.P = g.P[0], g.Sa = g.Sa[0], 0 != y) break;
                }
                i = [
                    i
                ], g.Ja = [
                    g.Ja
                ], g.xa = [
                    g.xa
                ];
                t: if (k = t, y = n, w = i, A = g.gb[0], x = g.Ja, S = g.xa, _ = y[0], L = !r(k, _, "VP8 "), P = !r(k, _, "VP8L"), e(null != k), e(null != w), e(null != x), e(null != S), 8 > w[0]) y = 7;
                else {
                    if (L || P) {
                        if (k = j(k, _ + 4), 12 <= A && k > A - 12) {
                            y = 3;
                            break t;
                        }
                        if (p && k > w[0] - 8) {
                            y = 7;
                            break t;
                        }
                        x[0] = k, y[0] += 8, w[0] -= 8, S[0] = P;
                    } else S[0] = 5 <= w[0] && 47 == k[_ + 0] && !(k[_ + 4] >> 5), x[0] = w[0];
                    y = 0;
                }
                if (i = i[0], g.Ja = g.Ja[0], g.xa = g.xa[0], n = n[0], 0 != y) break;
                if (4294967286 < g.Ja) return 3;
                if (null == u || b || (u[0] = g.xa ? 2 : 1), c = [
                    c
                ], m = [
                    m
                ], g.xa) {
                    if (5 > i) {
                        y = 7;
                        break;
                    }
                    u = c, p = m, b = s, null == t || 5 > i ? t = 0 : 5 <= i && 47 == t[n + 0] && !(t[n + 4] >> 5) ? (w = [
                        0
                    ], k = [
                        0
                    ], A = [
                        0
                    ], v(x = new N, t, n, i), gt(x, w, k, A) ? (null != u && (u[0] = w[0]), null != p && (p[0] = k[0]), null != b && (b[0] = A[0]), t = 1) : t = 0) : t = 0;
                } else {
                    if (10 > i) {
                        y = 7;
                        break;
                    }
                    u = m, null == t || 10 > i || !Xt(t, n + 3, i - 3) ? t = 0 : (p = t[n + 0] | t[n + 1] << 8 | t[n + 2] << 16, b = 16383 & (t[n + 7] << 8 | t[n + 6]), t = 16383 & (t[n + 9] << 8 | t[n + 8]), 1 & p || 3 < (p >> 1 & 7) || !(p >> 4 & 1) || p >> 5 >= g.Ja || !b || !t ? t = 0 : (c && (c[0] = b), u && (u[0] = t), t = 1));
                }
                if (!t) return 3;
                if (c = c[0], m = m[0], d && (l[0] != c || f[0] != m)) return 3;
                null != h && (h[0] = g, h.offset = n - h.w, e(4294967286 > n - h.w), e(h.offset == h.ha - i));
                break;
            }
            return 0 == y || 7 == y && d && null == h ? (null != s && (s[0] |= null != g.na && 0 < g.na.length), null != a && (a[0] = c), null != o && (o[0] = m), 0) : y;
        }
        function Mr(t, e, r) {
            var n = e.width, i = e.height, a = 0, o = 0, s = n, c = i;
            if (e.Da = null != t && 0 < t.Da, e.Da && (s = t.cd, c = t.bd, a = t.v, o = t.j, 11 > r || (a &= -2, o &= -2), 0 > a || 0 > o || 0 >= s || 0 >= c || a + s > n || o + c > i)) return 0;
            if (e.v = a, e.j = o, e.va = a + s, e.o = o + c, e.U = s, e.T = c, e.da = null != t && 0 < t.da, e.da) {
                if (!E(s, c, r = [
                    t.ib
                ], a = [
                    t.hb
                ])) return 0;
                e.ib = r[0], e.hb = a[0];
            }
            return e.ob = null != t && t.ob, e.Kb = null == t || !t.Sd, e.da && (e.ob = e.ib < 3 * n / 4 && e.hb < 3 * i / 4, e.Kb = 0), 1;
        }
        function Er(t) {
            if (null == t) return 2;
            if (11 > t.S) {
                var e = t.f.RGBA;
                e.fb += (t.height - 1) * e.A, e.A = -e.A;
            } else e = t.f.kb, t = t.height, e.O += (t - 1) * e.fa, e.fa = -e.fa, e.N += (t - 1 >> 1) * e.Ab, e.Ab = -e.Ab, e.W += (t - 1 >> 1) * e.Db, e.Db = -e.Db, null != e.F && (e.J += (t - 1) * e.lb, e.lb = -e.lb);
            return 0;
        }
        function qr(t, e, r, n) {
            if (null == n || 0 >= t || 0 >= e) return 2;
            if (null != r) {
                if (r.Da) {
                    var i = r.cd, o = r.bd, s = -2 & r.v, c = -2 & r.j;
                    if (0 > s || 0 > c || 0 >= i || 0 >= o || s + i > t || c + o > e) return 2;
                    t = i, e = o;
                }
                if (r.da) {
                    if (!E(t, e, i = [
                        r.ib
                    ], o = [
                        r.hb
                    ])) return 2;
                    t = i[0], e = o[0];
                }
            }
            n.width = t, n.height = e;
            t: {
                var u = n.width, h = n.height;
                if (t = n.S, 0 >= u || 0 >= h || !(t >= En && 13 > t)) t = 2;
                else {
                    if (0 >= n.Rd && null == n.sd) {
                        s = o = i = e = 0;
                        var l = (c = u * zi[t]) * h;
                        if (11 > t || (o = (h + 1) / 2 * (e = (u + 1) / 2), 12 == t && (s = (i = u) * h)), null == (h = a(l + 2 * o + s))) {
                            t = 1;
                            break t;
                        }
                        n.sd = h, 11 > t ? ((u = n.f.RGBA).eb = h, u.fb = 0, u.A = c, u.size = l) : ((u = n.f.kb).y = h, u.O = 0, u.fa = c, u.Fd = l, u.f = h, u.N = 0 + l, u.Ab = e, u.Cd = o, u.ea = h, u.W = 0 + l + o, u.Db = e, u.Ed = o, 12 == t && (u.F = h, u.J = 0 + l + 2 * o), u.Tc = s, u.lb = i);
                    }
                    if (e = 1, i = n.S, o = n.width, s = n.height, i >= En && 13 > i) {
                        if (11 > i) t = n.f.RGBA, e &= (c = Math.abs(t.A)) * (s - 1) + o <= t.size, e &= c >= o * zi[i], e &= null != t.eb;
                        else {
                            t = n.f.kb, c = (o + 1) / 2, l = (s + 1) / 2, u = Math.abs(t.fa);
                            h = Math.abs(t.Ab);
                            var f = Math.abs(t.Db), d = Math.abs(t.lb), p = d * (s - 1) + o;
                            e &= u * (s - 1) + o <= t.Fd, e &= h * (l - 1) + c <= t.Cd, e = (e &= f * (l - 1) + c <= t.Ed) & u >= o & h >= c & f >= c, e &= null != t.y, e &= null != t.f, e &= null != t.ea, 12 == i && (e &= d >= o, e &= p <= t.Tc, e &= null != t.F);
                        }
                    } else e = 0;
                    t = e ? 0 : 2;
                }
            }
            return 0 != t || null != r && r.fd && (t = Er(n)), t;
        }
        var Dr = 64, Rr = [
            0,
            1,
            3,
            7,
            15,
            31,
            63,
            127,
            255,
            511,
            1023,
            2047,
            4095,
            8191,
            16383,
            32767,
            65535,
            131071,
            262143,
            524287,
            1048575,
            2097151,
            4194303,
            8388607,
            16777215
        ], Tr = 24, Ur = 32, zr = 8, Hr = [
            0,
            0,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
        ];
        R("Predictor0", "PredictorAdd0"), t.Predictor0 = function() {
            return 4278190080;
        }, t.Predictor1 = function(t) {
            return t;
        }, t.Predictor2 = function(t, e, r) {
            return e[r + 0];
        }, t.Predictor3 = function(t, e, r) {
            return e[r + 1];
        }, t.Predictor4 = function(t, e, r) {
            return e[r - 1];
        }, t.Predictor5 = function(t, e, r) {
            return U(U(t, e[r + 1]), e[r + 0]);
        }, t.Predictor6 = function(t, e, r) {
            return U(t, e[r - 1]);
        }, t.Predictor7 = function(t, e, r) {
            return U(t, e[r + 0]);
        }, t.Predictor8 = function(t, e, r) {
            return U(e[r - 1], e[r + 0]);
        }, t.Predictor9 = function(t, e, r) {
            return U(e[r + 0], e[r + 1]);
        }, t.Predictor10 = function(t, e, r) {
            return U(U(t, e[r - 1]), U(e[r + 0], e[r + 1]));
        }, t.Predictor11 = function(t, e, r) {
            var n = e[r + 0];
            return 0 >= W(n >> 24 & 255, t >> 24 & 255, (e = e[r - 1]) >> 24 & 255) + W(n >> 16 & 255, t >> 16 & 255, e >> 16 & 255) + W(n >> 8 & 255, t >> 8 & 255, e >> 8 & 255) + W(255 & n, 255 & t, 255 & e) ? n : t;
        }, t.Predictor12 = function(t, e, r) {
            var n = e[r + 0];
            return (z((t >> 24 & 255) + (n >> 24 & 255) - ((e = e[r - 1]) >> 24 & 255)) << 24 | z((t >> 16 & 255) + (n >> 16 & 255) - (e >> 16 & 255)) << 16 | z((t >> 8 & 255) + (n >> 8 & 255) - (e >> 8 & 255)) << 8 | z((255 & t) + (255 & n) - (255 & e))) >>> 0;
        }, t.Predictor13 = function(t, e, r) {
            var n = e[r - 1];
            return (H((t = U(t, e[r + 0])) >> 24 & 255, n >> 24 & 255) << 24 | H(t >> 16 & 255, n >> 16 & 255) << 16 | H(t >> 8 & 255, n >> 8 & 255) << 8 | H(t >> 0 & 255, n >> 0 & 255)) >>> 0;
        };
        var Wr = t.PredictorAdd0;
        t.PredictorAdd1 = V, R("Predictor2", "PredictorAdd2"), R("Predictor3", "PredictorAdd3"), R("Predictor4", "PredictorAdd4"), R("Predictor5", "PredictorAdd5"), R("Predictor6", "PredictorAdd6"), R("Predictor7", "PredictorAdd7"), R("Predictor8", "PredictorAdd8"), R("Predictor9", "PredictorAdd9"), R("Predictor10", "PredictorAdd10"), R("Predictor11", "PredictorAdd11"), R("Predictor12", "PredictorAdd12"), R("Predictor13", "PredictorAdd13");
        var Vr = t.PredictorAdd2;
        X("ColorIndexInverseTransform", "MapARGB", "32b", function(t) {
            return t >> 8 & 255;
        }, function(t) {
            return t;
        }), X("VP8LColorIndexInverseTransformAlpha", "MapAlpha", "8b", function(t) {
            return t;
        }, function(t) {
            return t >> 8 & 255;
        });
        var Gr, Yr = t.ColorIndexInverseTransform, Jr = t.MapARGB, Xr = t.VP8LColorIndexInverseTransformAlpha, Kr = t.MapAlpha, Zr = t.VP8LPredictorsAdd = [];
        Zr.length = 16, (t.VP8LPredictors = []).length = 16, (t.VP8LPredictorsAdd_C = []).length = 16, (t.VP8LPredictors_C = []).length = 16;
        var $r, Qr, tn, en, rn, nn, an, on, sn, cn, un, hn, ln, fn, dn, pn, gn, mn, vn, bn, yn, wn, Nn, Ln, An, xn, Sn, _n, Pn = a(511), kn = a(2041), In = a(225), Fn = a(767), Cn = 0, jn = kn, On = In, Bn = Fn, Mn = Pn, En = 0, qn = 1, Dn = 2, Rn = 3, Tn = 4, Un = 5, zn = 6, Hn = 7, Wn = 8, Vn = 9, Gn = 10, Yn = [
            2,
            3,
            7
        ], Jn = [
            3,
            3,
            11
        ], Xn = [
            280,
            256,
            256,
            256,
            40
        ], Kn = [
            0,
            1,
            1,
            1,
            0
        ], Zn = [
            17,
            18,
            0,
            1,
            2,
            3,
            4,
            5,
            16,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15
        ], $n = [
            24,
            7,
            23,
            25,
            40,
            6,
            39,
            41,
            22,
            26,
            38,
            42,
            56,
            5,
            55,
            57,
            21,
            27,
            54,
            58,
            37,
            43,
            72,
            4,
            71,
            73,
            20,
            28,
            53,
            59,
            70,
            74,
            36,
            44,
            88,
            69,
            75,
            52,
            60,
            3,
            87,
            89,
            19,
            29,
            86,
            90,
            35,
            45,
            68,
            76,
            85,
            91,
            51,
            61,
            104,
            2,
            103,
            105,
            18,
            30,
            102,
            106,
            34,
            46,
            84,
            92,
            67,
            77,
            101,
            107,
            50,
            62,
            120,
            1,
            119,
            121,
            83,
            93,
            17,
            31,
            100,
            108,
            66,
            78,
            118,
            122,
            33,
            47,
            117,
            123,
            49,
            63,
            99,
            109,
            82,
            94,
            0,
            116,
            124,
            65,
            79,
            16,
            32,
            98,
            110,
            48,
            115,
            125,
            81,
            95,
            64,
            114,
            126,
            97,
            111,
            80,
            113,
            127,
            96,
            112
        ], Qn = [
            2954,
            2956,
            2958,
            2962,
            2970,
            2986,
            3018,
            3082,
            3212,
            3468,
            3980,
            5004
        ], ti = 8, ei = [
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            17,
            18,
            19,
            20,
            20,
            21,
            21,
            22,
            22,
            23,
            23,
            24,
            25,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            91,
            93,
            95,
            96,
            98,
            100,
            101,
            102,
            104,
            106,
            108,
            110,
            112,
            114,
            116,
            118,
            122,
            124,
            126,
            128,
            130,
            132,
            134,
            136,
            138,
            140,
            143,
            145,
            148,
            151,
            154,
            157
        ], ri = [
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            60,
            62,
            64,
            66,
            68,
            70,
            72,
            74,
            76,
            78,
            80,
            82,
            84,
            86,
            88,
            90,
            92,
            94,
            96,
            98,
            100,
            102,
            104,
            106,
            108,
            110,
            112,
            114,
            116,
            119,
            122,
            125,
            128,
            131,
            134,
            137,
            140,
            143,
            146,
            149,
            152,
            155,
            158,
            161,
            164,
            167,
            170,
            173,
            177,
            181,
            185,
            189,
            193,
            197,
            201,
            205,
            209,
            213,
            217,
            221,
            225,
            229,
            234,
            239,
            245,
            249,
            254,
            259,
            264,
            269,
            274,
            279,
            284
        ], ni = null, ii = [
            [
                173,
                148,
                140,
                0
            ],
            [
                176,
                155,
                140,
                135,
                0
            ],
            [
                180,
                157,
                141,
                134,
                130,
                0
            ],
            [
                254,
                254,
                243,
                230,
                196,
                177,
                153,
                140,
                133,
                130,
                129,
                0
            ]
        ], ai = [
            0,
            1,
            4,
            8,
            5,
            2,
            3,
            6,
            9,
            12,
            13,
            10,
            7,
            11,
            14,
            15
        ], oi = [
            -0,
            1,
            -1,
            2,
            -2,
            3,
            4,
            6,
            -3,
            5,
            -4,
            -5,
            -6,
            7,
            -7,
            8,
            -8,
            -9
        ], si = [
            [
                [
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        253,
                        136,
                        254,
                        255,
                        228,
                        219,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        189,
                        129,
                        242,
                        255,
                        227,
                        213,
                        255,
                        219,
                        128,
                        128,
                        128
                    ],
                    [
                        106,
                        126,
                        227,
                        252,
                        214,
                        209,
                        255,
                        255,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        98,
                        248,
                        255,
                        236,
                        226,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        181,
                        133,
                        238,
                        254,
                        221,
                        234,
                        255,
                        154,
                        128,
                        128,
                        128
                    ],
                    [
                        78,
                        134,
                        202,
                        247,
                        198,
                        180,
                        255,
                        219,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        185,
                        249,
                        255,
                        243,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        184,
                        150,
                        247,
                        255,
                        236,
                        224,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        77,
                        110,
                        216,
                        255,
                        236,
                        230,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        101,
                        251,
                        255,
                        241,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        170,
                        139,
                        241,
                        252,
                        236,
                        209,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        37,
                        116,
                        196,
                        243,
                        228,
                        255,
                        255,
                        255,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        204,
                        254,
                        255,
                        245,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        207,
                        160,
                        250,
                        255,
                        238,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        102,
                        103,
                        231,
                        255,
                        211,
                        171,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        152,
                        252,
                        255,
                        240,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        177,
                        135,
                        243,
                        255,
                        234,
                        225,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        80,
                        129,
                        211,
                        255,
                        194,
                        224,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        246,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ]
            ],
            [
                [
                    [
                        198,
                        35,
                        237,
                        223,
                        193,
                        187,
                        162,
                        160,
                        145,
                        155,
                        62
                    ],
                    [
                        131,
                        45,
                        198,
                        221,
                        172,
                        176,
                        220,
                        157,
                        252,
                        221,
                        1
                    ],
                    [
                        68,
                        47,
                        146,
                        208,
                        149,
                        167,
                        221,
                        162,
                        255,
                        223,
                        128
                    ]
                ],
                [
                    [
                        1,
                        149,
                        241,
                        255,
                        221,
                        224,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        184,
                        141,
                        234,
                        253,
                        222,
                        220,
                        255,
                        199,
                        128,
                        128,
                        128
                    ],
                    [
                        81,
                        99,
                        181,
                        242,
                        176,
                        190,
                        249,
                        202,
                        255,
                        255,
                        128
                    ]
                ],
                [
                    [
                        1,
                        129,
                        232,
                        253,
                        214,
                        197,
                        242,
                        196,
                        255,
                        255,
                        128
                    ],
                    [
                        99,
                        121,
                        210,
                        250,
                        201,
                        198,
                        255,
                        202,
                        128,
                        128,
                        128
                    ],
                    [
                        23,
                        91,
                        163,
                        242,
                        170,
                        187,
                        247,
                        210,
                        255,
                        255,
                        128
                    ]
                ],
                [
                    [
                        1,
                        200,
                        246,
                        255,
                        234,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        109,
                        178,
                        241,
                        255,
                        231,
                        245,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        44,
                        130,
                        201,
                        253,
                        205,
                        192,
                        255,
                        255,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        132,
                        239,
                        251,
                        219,
                        209,
                        255,
                        165,
                        128,
                        128,
                        128
                    ],
                    [
                        94,
                        136,
                        225,
                        251,
                        218,
                        190,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        22,
                        100,
                        174,
                        245,
                        186,
                        161,
                        255,
                        199,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        182,
                        249,
                        255,
                        232,
                        235,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        124,
                        143,
                        241,
                        255,
                        227,
                        234,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        35,
                        77,
                        181,
                        251,
                        193,
                        211,
                        255,
                        205,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        157,
                        247,
                        255,
                        236,
                        231,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        121,
                        141,
                        235,
                        255,
                        225,
                        227,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        45,
                        99,
                        188,
                        251,
                        195,
                        217,
                        255,
                        224,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        1,
                        251,
                        255,
                        213,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        203,
                        1,
                        248,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        137,
                        1,
                        177,
                        255,
                        224,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ]
            ],
            [
                [
                    [
                        253,
                        9,
                        248,
                        251,
                        207,
                        208,
                        255,
                        192,
                        128,
                        128,
                        128
                    ],
                    [
                        175,
                        13,
                        224,
                        243,
                        193,
                        185,
                        249,
                        198,
                        255,
                        255,
                        128
                    ],
                    [
                        73,
                        17,
                        171,
                        221,
                        161,
                        179,
                        236,
                        167,
                        255,
                        234,
                        128
                    ]
                ],
                [
                    [
                        1,
                        95,
                        247,
                        253,
                        212,
                        183,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        239,
                        90,
                        244,
                        250,
                        211,
                        209,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        155,
                        77,
                        195,
                        248,
                        188,
                        195,
                        255,
                        255,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        24,
                        239,
                        251,
                        218,
                        219,
                        255,
                        205,
                        128,
                        128,
                        128
                    ],
                    [
                        201,
                        51,
                        219,
                        255,
                        196,
                        186,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        69,
                        46,
                        190,
                        239,
                        201,
                        218,
                        255,
                        228,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        191,
                        251,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        223,
                        165,
                        249,
                        255,
                        213,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        141,
                        124,
                        248,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        16,
                        248,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        190,
                        36,
                        230,
                        255,
                        236,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        149,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        226,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        247,
                        192,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        240,
                        128,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        134,
                        252,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        213,
                        62,
                        250,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        55,
                        93,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ]
            ],
            [
                [
                    [
                        202,
                        24,
                        213,
                        235,
                        186,
                        191,
                        220,
                        160,
                        240,
                        175,
                        255
                    ],
                    [
                        126,
                        38,
                        182,
                        232,
                        169,
                        184,
                        228,
                        174,
                        255,
                        187,
                        128
                    ],
                    [
                        61,
                        46,
                        138,
                        219,
                        151,
                        178,
                        240,
                        170,
                        255,
                        216,
                        128
                    ]
                ],
                [
                    [
                        1,
                        112,
                        230,
                        250,
                        199,
                        191,
                        247,
                        159,
                        255,
                        255,
                        128
                    ],
                    [
                        166,
                        109,
                        228,
                        252,
                        211,
                        215,
                        255,
                        174,
                        128,
                        128,
                        128
                    ],
                    [
                        39,
                        77,
                        162,
                        232,
                        172,
                        180,
                        245,
                        178,
                        255,
                        255,
                        128
                    ]
                ],
                [
                    [
                        1,
                        52,
                        220,
                        246,
                        198,
                        199,
                        249,
                        220,
                        255,
                        255,
                        128
                    ],
                    [
                        124,
                        74,
                        191,
                        243,
                        183,
                        193,
                        250,
                        221,
                        255,
                        255,
                        128
                    ],
                    [
                        24,
                        71,
                        130,
                        219,
                        154,
                        170,
                        243,
                        182,
                        255,
                        255,
                        128
                    ]
                ],
                [
                    [
                        1,
                        182,
                        225,
                        249,
                        219,
                        240,
                        255,
                        224,
                        128,
                        128,
                        128
                    ],
                    [
                        149,
                        150,
                        226,
                        252,
                        216,
                        205,
                        255,
                        171,
                        128,
                        128,
                        128
                    ],
                    [
                        28,
                        108,
                        170,
                        242,
                        183,
                        194,
                        254,
                        223,
                        255,
                        255,
                        128
                    ]
                ],
                [
                    [
                        1,
                        81,
                        230,
                        252,
                        204,
                        203,
                        255,
                        192,
                        128,
                        128,
                        128
                    ],
                    [
                        123,
                        102,
                        209,
                        247,
                        188,
                        196,
                        255,
                        233,
                        128,
                        128,
                        128
                    ],
                    [
                        20,
                        95,
                        153,
                        243,
                        164,
                        173,
                        255,
                        203,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        222,
                        248,
                        255,
                        216,
                        213,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        168,
                        175,
                        246,
                        252,
                        235,
                        205,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        47,
                        116,
                        215,
                        255,
                        211,
                        212,
                        255,
                        255,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        121,
                        236,
                        253,
                        212,
                        214,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        141,
                        84,
                        213,
                        252,
                        201,
                        202,
                        255,
                        219,
                        128,
                        128,
                        128
                    ],
                    [
                        42,
                        80,
                        160,
                        240,
                        162,
                        185,
                        255,
                        205,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        244,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        238,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ]
            ]
        ], ci = [
            [
                [
                    231,
                    120,
                    48,
                    89,
                    115,
                    113,
                    120,
                    152,
                    112
                ],
                [
                    152,
                    179,
                    64,
                    126,
                    170,
                    118,
                    46,
                    70,
                    95
                ],
                [
                    175,
                    69,
                    143,
                    80,
                    85,
                    82,
                    72,
                    155,
                    103
                ],
                [
                    56,
                    58,
                    10,
                    171,
                    218,
                    189,
                    17,
                    13,
                    152
                ],
                [
                    114,
                    26,
                    17,
                    163,
                    44,
                    195,
                    21,
                    10,
                    173
                ],
                [
                    121,
                    24,
                    80,
                    195,
                    26,
                    62,
                    44,
                    64,
                    85
                ],
                [
                    144,
                    71,
                    10,
                    38,
                    171,
                    213,
                    144,
                    34,
                    26
                ],
                [
                    170,
                    46,
                    55,
                    19,
                    136,
                    160,
                    33,
                    206,
                    71
                ],
                [
                    63,
                    20,
                    8,
                    114,
                    114,
                    208,
                    12,
                    9,
                    226
                ],
                [
                    81,
                    40,
                    11,
                    96,
                    182,
                    84,
                    29,
                    16,
                    36
                ]
            ],
            [
                [
                    134,
                    183,
                    89,
                    137,
                    98,
                    101,
                    106,
                    165,
                    148
                ],
                [
                    72,
                    187,
                    100,
                    130,
                    157,
                    111,
                    32,
                    75,
                    80
                ],
                [
                    66,
                    102,
                    167,
                    99,
                    74,
                    62,
                    40,
                    234,
                    128
                ],
                [
                    41,
                    53,
                    9,
                    178,
                    241,
                    141,
                    26,
                    8,
                    107
                ],
                [
                    74,
                    43,
                    26,
                    146,
                    73,
                    166,
                    49,
                    23,
                    157
                ],
                [
                    65,
                    38,
                    105,
                    160,
                    51,
                    52,
                    31,
                    115,
                    128
                ],
                [
                    104,
                    79,
                    12,
                    27,
                    217,
                    255,
                    87,
                    17,
                    7
                ],
                [
                    87,
                    68,
                    71,
                    44,
                    114,
                    51,
                    15,
                    186,
                    23
                ],
                [
                    47,
                    41,
                    14,
                    110,
                    182,
                    183,
                    21,
                    17,
                    194
                ],
                [
                    66,
                    45,
                    25,
                    102,
                    197,
                    189,
                    23,
                    18,
                    22
                ]
            ],
            [
                [
                    88,
                    88,
                    147,
                    150,
                    42,
                    46,
                    45,
                    196,
                    205
                ],
                [
                    43,
                    97,
                    183,
                    117,
                    85,
                    38,
                    35,
                    179,
                    61
                ],
                [
                    39,
                    53,
                    200,
                    87,
                    26,
                    21,
                    43,
                    232,
                    171
                ],
                [
                    56,
                    34,
                    51,
                    104,
                    114,
                    102,
                    29,
                    93,
                    77
                ],
                [
                    39,
                    28,
                    85,
                    171,
                    58,
                    165,
                    90,
                    98,
                    64
                ],
                [
                    34,
                    22,
                    116,
                    206,
                    23,
                    34,
                    43,
                    166,
                    73
                ],
                [
                    107,
                    54,
                    32,
                    26,
                    51,
                    1,
                    81,
                    43,
                    31
                ],
                [
                    68,
                    25,
                    106,
                    22,
                    64,
                    171,
                    36,
                    225,
                    114
                ],
                [
                    34,
                    19,
                    21,
                    102,
                    132,
                    188,
                    16,
                    76,
                    124
                ],
                [
                    62,
                    18,
                    78,
                    95,
                    85,
                    57,
                    50,
                    48,
                    51
                ]
            ],
            [
                [
                    193,
                    101,
                    35,
                    159,
                    215,
                    111,
                    89,
                    46,
                    111
                ],
                [
                    60,
                    148,
                    31,
                    172,
                    219,
                    228,
                    21,
                    18,
                    111
                ],
                [
                    112,
                    113,
                    77,
                    85,
                    179,
                    255,
                    38,
                    120,
                    114
                ],
                [
                    40,
                    42,
                    1,
                    196,
                    245,
                    209,
                    10,
                    25,
                    109
                ],
                [
                    88,
                    43,
                    29,
                    140,
                    166,
                    213,
                    37,
                    43,
                    154
                ],
                [
                    61,
                    63,
                    30,
                    155,
                    67,
                    45,
                    68,
                    1,
                    209
                ],
                [
                    100,
                    80,
                    8,
                    43,
                    154,
                    1,
                    51,
                    26,
                    71
                ],
                [
                    142,
                    78,
                    78,
                    16,
                    255,
                    128,
                    34,
                    197,
                    171
                ],
                [
                    41,
                    40,
                    5,
                    102,
                    211,
                    183,
                    4,
                    1,
                    221
                ],
                [
                    51,
                    50,
                    17,
                    168,
                    209,
                    192,
                    23,
                    25,
                    82
                ]
            ],
            [
                [
                    138,
                    31,
                    36,
                    171,
                    27,
                    166,
                    38,
                    44,
                    229
                ],
                [
                    67,
                    87,
                    58,
                    169,
                    82,
                    115,
                    26,
                    59,
                    179
                ],
                [
                    63,
                    59,
                    90,
                    180,
                    59,
                    166,
                    93,
                    73,
                    154
                ],
                [
                    40,
                    40,
                    21,
                    116,
                    143,
                    209,
                    34,
                    39,
                    175
                ],
                [
                    47,
                    15,
                    16,
                    183,
                    34,
                    223,
                    49,
                    45,
                    183
                ],
                [
                    46,
                    17,
                    33,
                    183,
                    6,
                    98,
                    15,
                    32,
                    183
                ],
                [
                    57,
                    46,
                    22,
                    24,
                    128,
                    1,
                    54,
                    17,
                    37
                ],
                [
                    65,
                    32,
                    73,
                    115,
                    28,
                    128,
                    23,
                    128,
                    205
                ],
                [
                    40,
                    3,
                    9,
                    115,
                    51,
                    192,
                    18,
                    6,
                    223
                ],
                [
                    87,
                    37,
                    9,
                    115,
                    59,
                    77,
                    64,
                    21,
                    47
                ]
            ],
            [
                [
                    104,
                    55,
                    44,
                    218,
                    9,
                    54,
                    53,
                    130,
                    226
                ],
                [
                    64,
                    90,
                    70,
                    205,
                    40,
                    41,
                    23,
                    26,
                    57
                ],
                [
                    54,
                    57,
                    112,
                    184,
                    5,
                    41,
                    38,
                    166,
                    213
                ],
                [
                    30,
                    34,
                    26,
                    133,
                    152,
                    116,
                    10,
                    32,
                    134
                ],
                [
                    39,
                    19,
                    53,
                    221,
                    26,
                    114,
                    32,
                    73,
                    255
                ],
                [
                    31,
                    9,
                    65,
                    234,
                    2,
                    15,
                    1,
                    118,
                    73
                ],
                [
                    75,
                    32,
                    12,
                    51,
                    192,
                    255,
                    160,
                    43,
                    51
                ],
                [
                    88,
                    31,
                    35,
                    67,
                    102,
                    85,
                    55,
                    186,
                    85
                ],
                [
                    56,
                    21,
                    23,
                    111,
                    59,
                    205,
                    45,
                    37,
                    192
                ],
                [
                    55,
                    38,
                    70,
                    124,
                    73,
                    102,
                    1,
                    34,
                    98
                ]
            ],
            [
                [
                    125,
                    98,
                    42,
                    88,
                    104,
                    85,
                    117,
                    175,
                    82
                ],
                [
                    95,
                    84,
                    53,
                    89,
                    128,
                    100,
                    113,
                    101,
                    45
                ],
                [
                    75,
                    79,
                    123,
                    47,
                    51,
                    128,
                    81,
                    171,
                    1
                ],
                [
                    57,
                    17,
                    5,
                    71,
                    102,
                    57,
                    53,
                    41,
                    49
                ],
                [
                    38,
                    33,
                    13,
                    121,
                    57,
                    73,
                    26,
                    1,
                    85
                ],
                [
                    41,
                    10,
                    67,
                    138,
                    77,
                    110,
                    90,
                    47,
                    114
                ],
                [
                    115,
                    21,
                    2,
                    10,
                    102,
                    255,
                    166,
                    23,
                    6
                ],
                [
                    101,
                    29,
                    16,
                    10,
                    85,
                    128,
                    101,
                    196,
                    26
                ],
                [
                    57,
                    18,
                    10,
                    102,
                    102,
                    213,
                    34,
                    20,
                    43
                ],
                [
                    117,
                    20,
                    15,
                    36,
                    163,
                    128,
                    68,
                    1,
                    26
                ]
            ],
            [
                [
                    102,
                    61,
                    71,
                    37,
                    34,
                    53,
                    31,
                    243,
                    192
                ],
                [
                    69,
                    60,
                    71,
                    38,
                    73,
                    119,
                    28,
                    222,
                    37
                ],
                [
                    68,
                    45,
                    128,
                    34,
                    1,
                    47,
                    11,
                    245,
                    171
                ],
                [
                    62,
                    17,
                    19,
                    70,
                    146,
                    85,
                    55,
                    62,
                    70
                ],
                [
                    37,
                    43,
                    37,
                    154,
                    100,
                    163,
                    85,
                    160,
                    1
                ],
                [
                    63,
                    9,
                    92,
                    136,
                    28,
                    64,
                    32,
                    201,
                    85
                ],
                [
                    75,
                    15,
                    9,
                    9,
                    64,
                    255,
                    184,
                    119,
                    16
                ],
                [
                    86,
                    6,
                    28,
                    5,
                    64,
                    255,
                    25,
                    248,
                    1
                ],
                [
                    56,
                    8,
                    17,
                    132,
                    137,
                    255,
                    55,
                    116,
                    128
                ],
                [
                    58,
                    15,
                    20,
                    82,
                    135,
                    57,
                    26,
                    121,
                    40
                ]
            ],
            [
                [
                    164,
                    50,
                    31,
                    137,
                    154,
                    133,
                    25,
                    35,
                    218
                ],
                [
                    51,
                    103,
                    44,
                    131,
                    131,
                    123,
                    31,
                    6,
                    158
                ],
                [
                    86,
                    40,
                    64,
                    135,
                    148,
                    224,
                    45,
                    183,
                    128
                ],
                [
                    22,
                    26,
                    17,
                    131,
                    240,
                    154,
                    14,
                    1,
                    209
                ],
                [
                    45,
                    16,
                    21,
                    91,
                    64,
                    222,
                    7,
                    1,
                    197
                ],
                [
                    56,
                    21,
                    39,
                    155,
                    60,
                    138,
                    23,
                    102,
                    213
                ],
                [
                    83,
                    12,
                    13,
                    54,
                    192,
                    255,
                    68,
                    47,
                    28
                ],
                [
                    85,
                    26,
                    85,
                    85,
                    128,
                    128,
                    32,
                    146,
                    171
                ],
                [
                    18,
                    11,
                    7,
                    63,
                    144,
                    171,
                    4,
                    4,
                    246
                ],
                [
                    35,
                    27,
                    10,
                    146,
                    174,
                    171,
                    12,
                    26,
                    128
                ]
            ],
            [
                [
                    190,
                    80,
                    35,
                    99,
                    180,
                    80,
                    126,
                    54,
                    45
                ],
                [
                    85,
                    126,
                    47,
                    87,
                    176,
                    51,
                    41,
                    20,
                    32
                ],
                [
                    101,
                    75,
                    128,
                    139,
                    118,
                    146,
                    116,
                    128,
                    85
                ],
                [
                    56,
                    41,
                    15,
                    176,
                    236,
                    85,
                    37,
                    9,
                    62
                ],
                [
                    71,
                    30,
                    17,
                    119,
                    118,
                    255,
                    17,
                    18,
                    138
                ],
                [
                    101,
                    38,
                    60,
                    138,
                    55,
                    70,
                    43,
                    26,
                    142
                ],
                [
                    146,
                    36,
                    19,
                    30,
                    171,
                    255,
                    97,
                    27,
                    20
                ],
                [
                    138,
                    45,
                    61,
                    62,
                    219,
                    1,
                    81,
                    188,
                    64
                ],
                [
                    32,
                    41,
                    20,
                    117,
                    151,
                    142,
                    20,
                    21,
                    163
                ],
                [
                    112,
                    19,
                    12,
                    61,
                    195,
                    128,
                    48,
                    4,
                    24
                ]
            ]
        ], ui = [
            [
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        176,
                        246,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        223,
                        241,
                        252,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        249,
                        253,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        244,
                        252,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        234,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        246,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        239,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        248,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        251,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        251,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        253,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        250,
                        255,
                        254,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ]
            ],
            [
                [
                    [
                        217,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        225,
                        252,
                        241,
                        253,
                        255,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        234,
                        250,
                        241,
                        250,
                        253,
                        255,
                        253,
                        254,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        223,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        238,
                        253,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        248,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        249,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        247,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        252,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        250,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ]
            ],
            [
                [
                    [
                        186,
                        251,
                        250,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        234,
                        251,
                        244,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        251,
                        251,
                        243,
                        253,
                        254,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        236,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        251,
                        253,
                        253,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ]
            ],
            [
                [
                    [
                        248,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        250,
                        254,
                        252,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        248,
                        254,
                        249,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        253,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        246,
                        253,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        252,
                        254,
                        251,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        252,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        248,
                        254,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        253,
                        255,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        251,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        245,
                        251,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        253,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        251,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        252,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        252,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        249,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        250,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ]
            ]
        ], hi = [
            0,
            1,
            2,
            3,
            6,
            4,
            5,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            7,
            0
        ], li = [], fi = [], di = [], pi = 1, gi = 2, mi = [], vi = [];
        vr("UpsampleRgbLinePair", Ar, 3), vr("UpsampleBgrLinePair", xr, 3), vr("UpsampleRgbaLinePair", Ir, 4), vr("UpsampleBgraLinePair", kr, 4), vr("UpsampleArgbLinePair", Pr, 4), vr("UpsampleRgba4444LinePair", _r, 2), vr("UpsampleRgb565LinePair", Sr, 2);
        var bi = t.UpsampleRgbLinePair, yi = t.UpsampleBgrLinePair, wi = t.UpsampleRgbaLinePair, Ni = t.UpsampleBgraLinePair, Li = t.UpsampleArgbLinePair, Ai = t.UpsampleRgba4444LinePair, xi = t.UpsampleRgb565LinePair, Si = 16, _i = 1 << Si - 1, Pi = -227, ki = 482, Ii = 6, Fi = (256 << Ii) - 1, Ci = 0, ji = a(256), Oi = a(256), Bi = a(256), Mi = a(256), Ei = a(ki - Pi), qi = a(ki - Pi);
        Fr("YuvToRgbRow", Ar, 3), Fr("YuvToBgrRow", xr, 3), Fr("YuvToRgbaRow", Ir, 4), Fr("YuvToBgraRow", kr, 4), Fr("YuvToArgbRow", Pr, 4), Fr("YuvToRgba4444Row", _r, 2), Fr("YuvToRgb565Row", Sr, 2);
        var Di = [
            0,
            4,
            8,
            12,
            128,
            132,
            136,
            140,
            256,
            260,
            264,
            268,
            384,
            388,
            392,
            396
        ], Ri = [
            0,
            2,
            8
        ], Ti = [
            8,
            7,
            6,
            4,
            4,
            2,
            2,
            2,
            1,
            1,
            1,
            1
        ], Ui = 1;
        this.WebPDecodeRGBA = function(t, r, n, i, a) {
            var o = qn, s = new rr, c = new ot;
            s.ba = c, c.S = o, c.width = [
                c.width
            ], c.height = [
                c.height
            ];
            var u = c.width, h = c.height, l = new st;
            if (null == l || null == t) var f = 2;
            else e(null != l), f = Br(t, r, n, l.width, l.height, l.Pd, l.Qd, l.format, null);
            if (0 != f ? u = 0 : (null != u && (u[0] = l.width[0]), null != h && (h[0] = l.height[0]), u = 1), u) {
                c.width = c.width[0], c.height = c.height[0], null != i && (i[0] = c.width), null != a && (a[0] = c.height);
                t: {
                    if (i = new Gt, (a = new nr).data = t, a.w = r, a.ha = n, a.kd = 1, r = [
                        0
                    ], e(null != a), (0 == (t = Br(a.data, a.w, a.ha, null, null, null, r, null, a)) || 7 == t) && r[0] && (t = 4), 0 == (r = t)) {
                        if (e(null != s), i.data = a.data, i.w = a.w + a.offset, i.ha = a.ha - a.offset, i.put = dt, i.ac = ft, i.bc = pt, i.ma = s, a.xa) {
                            if (null == (t = kt())) {
                                s = 1;
                                break t;
                            }
                            if (function(t, r) {
                                var n = [
                                    0
                                ], i = [
                                    0
                                ], a = [
                                    0
                                ];
                                e: for(;;){
                                    if (null == t) return 0;
                                    if (null == r) return t.a = 2, 0;
                                    if (t.l = r, t.a = 0, v(t.m, r.data, r.w, r.ha), !gt(t.m, n, i, a)) {
                                        t.a = 3;
                                        break e;
                                    }
                                    if (t.xb = gi, r.width = n[0], r.height = i[0], !It(n[0], i[0], 1, t, null)) break e;
                                    return 1;
                                }
                                return e(0 != t.a), 0;
                            }(t, i)) {
                                if (i = 0 == (r = qr(i.width, i.height, s.Oa, s.ba))) {
                                    e: {
                                        i = t;
                                        r: for(;;){
                                            if (null == i) {
                                                i = 0;
                                                break e;
                                            }
                                            if (e(null != i.s.yc), e(null != i.s.Ya), e(0 < i.s.Wb), e(null != (n = i.l)), e(null != (a = n.ma)), 0 != i.xb) {
                                                if (i.ca = a.ba, i.tb = a.tb, e(null != i.ca), !Mr(a.Oa, n, Rn)) {
                                                    i.a = 2;
                                                    break r;
                                                }
                                                if (!Ft(i, n.width)) break r;
                                                if (n.da) break r;
                                                if ((n.da || nt(i.ca.S)) && mr(), 11 > i.ca.S || (alert("todo:WebPInitConvertARGBToYUV"), null != i.ca.f.kb.F && mr()), i.Pb && 0 < i.s.ua && null == i.s.vb.X && !O(i.s.vb, i.s.Wa.Xa)) {
                                                    i.a = 1;
                                                    break r;
                                                }
                                                i.xb = 0;
                                            }
                                            if (!_t(i, i.V, i.Ba, i.c, i.i, n.o, Lt)) break r;
                                            a.Dc = i.Ma, i = 1;
                                            break e;
                                        }
                                        e(0 != i.a), i = 0;
                                    }
                                    i = !i;
                                }
                                i && (r = t.a);
                            } else r = t.a;
                        } else {
                            t = new Yt;
                            if (t.Fa = a.na, t.P = a.P, t.qc = a.Sa, Kt(t, i)) {
                                if (0 == (r = qr(i.width, i.height, s.Oa, s.ba))) {
                                    if (t.Aa = 0, n = s.Oa, e(null != (a = t)), null != n) {
                                        if (0 < (u = 0 > (u = n.Md) ? 0 : 100 < u ? 255 : 255 * u / 100)) {
                                            for(h = l = 0; 4 > h; ++h)12 > (f = a.pb[h]).lc && (f.ia = u * Ti[0 > f.lc ? 0 : f.lc] >> 3), l |= f.ia;
                                            l && (alert("todo:VP8InitRandom"), a.ia = 1);
                                        }
                                        a.Ga = n.Id, 100 < a.Ga ? a.Ga = 100 : 0 > a.Ga && (a.Ga = 0);
                                    }
                                    Qt(t, i) || (r = t.a);
                                }
                            } else r = t.a;
                        }
                        0 == r && null != s.Oa && s.Oa.fd && (r = Er(s.ba));
                    }
                    s = r;
                }
                o = 0 != s ? null : 11 > o ? c.f.RGBA.eb : c.f.kb.y;
            } else o = null;
            return o;
        };
        var zi = [
            3,
            4,
            3,
            4,
            4,
            2,
            2,
            4,
            4,
            4,
            2,
            1,
            1
        ];
    };
    function u(t, e) {
        for(var r = "", n = 0; n < 4; n++)r += String.fromCharCode(t[e++]);
        return r;
    }
    function h(t, e) {
        return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16) >>> 0;
    }
    function l(t, e) {
        return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16 | t[e + 3] << 24) >>> 0;
    }
    new c;
    var f = [
        0
    ], d = [
        0
    ], p = [], g = new c, m = t, v = function(t, e) {
        var r = {}, n = 0, i = !1, a = 0, o = 0;
        if (r.frames = [], !/** @license
   * Copyright (c) 2017 Dominik Homberger
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  https://webpjs.appspot.com
  WebPRiffParser dominikhlbg@gmail.com
  */ function(t, e, r, n) {
            for(var i = 0; i < n; i++)if (t[e + i] != r.charCodeAt(i)) return !0;
            return !1;
        }(t, e, "RIFF", 4)) {
            var s, c;
            l(t, e += 4);
            for(e += 8; e < t.length;){
                var f = u(t, e), d = l(t, e += 4);
                e += 4;
                var p = d + (1 & d);
                switch(f){
                    case "VP8 ":
                    case "VP8L":
                        void 0 === r.frames[n] && (r.frames[n] = {});
                        (v = r.frames[n]).src_off = i ? o : e - 8, v.src_size = a + d + 8, n++, i && (i = !1, a = 0, o = 0);
                        break;
                    case "VP8X":
                        (v = r.header = {}).feature_flags = t[e];
                        var g = e + 4;
                        v.canvas_width = 1 + h(t, g);
                        g += 3;
                        v.canvas_height = 1 + h(t, g);
                        g += 3;
                        break;
                    case "ALPH":
                        i = !0, a = p + 8, o = e - 8;
                        break;
                    case "ANIM":
                        (v = r.header).bgcolor = l(t, e);
                        g = e + 4;
                        v.loop_count = (s = t)[(c = g) + 0] << 0 | s[c + 1] << 8;
                        g += 2;
                        break;
                    case "ANMF":
                        var m, v;
                        (v = r.frames[n] = {}).offset_x = 2 * h(t, e), e += 3, v.offset_y = 2 * h(t, e), e += 3, v.width = 1 + h(t, e), e += 3, v.height = 1 + h(t, e), e += 3, v.duration = h(t, e), e += 3, m = t[e++], v.dispose = 1 & m, v.blend = m >> 1 & 1;
                }
                "ANMF" != f && (e += p);
            }
            return r;
        }
    }(m, 0);
    v.response = m, v.rgbaoutput = !0, v.dataurl = !1;
    var b = v.header ? v.header : null, y = v.frames ? v.frames : null;
    if (b) {
        b.loop_counter = b.loop_count, f = [
            b.canvas_height
        ], d = [
            b.canvas_width
        ];
        for(var w = 0; w < y.length && 0 != y[w].blend; w++);
    }
    var N = y[0], L = g.WebPDecodeRGBA(m, N.src_off, N.src_size, d, f);
    N.rgba = L, N.imgwidth = d[0], N.imgheight = f[0];
    for(var A = 0; A < d[0] * f[0] * 4; A++)p[A] = L[A];
    return this.width = d, this.height = f, this.data = p, this;
}
!function(t) {
    var r = function() {
        return "function" == typeof (0, _fflate.zlibSync);
    }, n = function(r, n, a, h) {
        var l = 4, f = s;
        switch(h){
            case t.image_compression.FAST:
                l = 1, f = o;
                break;
            case t.image_compression.MEDIUM:
                l = 6, f = c;
                break;
            case t.image_compression.SLOW:
                l = 9, f = u;
        }
        r = i(r, n, a, f);
        var d = (0, _fflate.zlibSync)(r, {
            level: l
        });
        return t.__addimage__.arrayBufferToBinaryString(d);
    }, i = function(t, e, r, n) {
        for(var i, a, o, s = t.length / e, c = new Uint8Array(t.length + s), u = l(), h = 0; h < s; h += 1){
            if (o = h * e, i = t.subarray(o, o + e), n) c.set(n(i, r, a), o + h);
            else {
                for(var d, p = u.length, g = []; d < p; d += 1)g[d] = u[d](i, r, a);
                var m = f(g.concat());
                c.set(g[m], o + h);
            }
            a = i;
        }
        return c;
    }, a = function(t) {
        var e = Array.apply([], t);
        return e.unshift(0), e;
    }, o = function(t, e) {
        var r, n = [], i = t.length;
        n[0] = 1;
        for(var a = 0; a < i; a += 1)r = t[a - e] || 0, n[a + 1] = t[a] - r + 256 & 255;
        return n;
    }, s = function(t, e, r) {
        var n, i = [], a = t.length;
        i[0] = 2;
        for(var o = 0; o < a; o += 1)n = r && r[o] || 0, i[o + 1] = t[o] - n + 256 & 255;
        return i;
    }, c = function(t, e, r) {
        var n, i, a = [], o = t.length;
        a[0] = 3;
        for(var s = 0; s < o; s += 1)n = t[s - e] || 0, i = r && r[s] || 0, a[s + 1] = t[s] + 256 - (n + i >>> 1) & 255;
        return a;
    }, u = function(t, e, r) {
        var n, i, a, o, s = [], c = t.length;
        s[0] = 4;
        for(var u = 0; u < c; u += 1)n = t[u - e] || 0, i = r && r[u] || 0, a = r && r[u - e] || 0, o = h(n, i, a), s[u + 1] = t[u] - o + 256 & 255;
        return s;
    }, h = function(t, e, r) {
        if (t === e && e === r) return t;
        var n = Math.abs(e - r), i = Math.abs(t - r), a = Math.abs(t + e - r - r);
        return n <= i && n <= a ? t : i <= a ? e : r;
    }, l = function() {
        return [
            a,
            o,
            s,
            c,
            u
        ];
    }, f = function(t) {
        var e = t.map(function(t) {
            return t.reduce(function(t, e) {
                return t + Math.abs(e);
            }, 0);
        });
        return e.indexOf(Math.min.apply(null, e));
    };
    t.processPNG = function(e, i, a, o) {
        var s, c, u, h, l, f, d, p, g, m, v, b, y, w, N, L = this.decode.FLATE_DECODE, A = "";
        if (this.__addimage__.isArrayBuffer(e) && (e = new Uint8Array(e)), this.__addimage__.isArrayBufferView(e)) {
            if (e = (u = new Kt(e)).imgData, c = u.bits, s = u.colorSpace, l = u.colors, -1 !== [
                4,
                6
            ].indexOf(u.colorType)) {
                if (8 === u.bits) {
                    g = (p = 32 == u.pixelBitlength ? new Uint32Array(u.decodePixels().buffer) : 16 == u.pixelBitlength ? new Uint16Array(u.decodePixels().buffer) : new Uint8Array(u.decodePixels().buffer)).length, v = new Uint8Array(g * u.colors), m = new Uint8Array(g);
                    var x, S = u.pixelBitlength - u.bits;
                    for(w = 0, N = 0; w < g; w++){
                        for(y = p[w], x = 0; x < S;)v[N++] = y >>> x & 255, x += u.bits;
                        m[w] = y >>> x & 255;
                    }
                }
                if (16 === u.bits) {
                    g = (p = new Uint32Array(u.decodePixels().buffer)).length, v = new Uint8Array(g * (32 / u.pixelBitlength) * u.colors), m = new Uint8Array(g * (32 / u.pixelBitlength)), b = u.colors > 1, w = 0, N = 0;
                    for(var _ = 0; w < g;)y = p[w++], v[N++] = y >>> 0 & 255, b && (v[N++] = y >>> 16 & 255, y = p[w++], v[N++] = y >>> 0 & 255), m[_++] = y >>> 16 & 255;
                    c = 8;
                }
                o !== t.image_compression.NONE && r() ? (e = n(v, u.width * u.colors, u.colors, o), d = n(m, u.width, 1, o)) : (e = v, d = m, L = void 0);
            }
            if (3 === u.colorType && (s = this.color_spaces.INDEXED, f = u.palette, u.transparency.indexed)) {
                var P = u.transparency.indexed, k = 0;
                for(w = 0, g = P.length; w < g; ++w)k += P[w];
                if ((k /= 255) === g - 1 && -1 !== P.indexOf(0)) h = [
                    P.indexOf(0)
                ];
                else if (k !== g) {
                    for(p = u.decodePixels(), m = new Uint8Array(p.length), w = 0, g = p.length; w < g; w++)m[w] = P[p[w]];
                    d = n(m, u.width, 1);
                }
            }
            var I = function(e) {
                var r;
                switch(e){
                    case t.image_compression.FAST:
                        r = 11;
                        break;
                    case t.image_compression.MEDIUM:
                        r = 13;
                        break;
                    case t.image_compression.SLOW:
                        r = 14;
                        break;
                    default:
                        r = 12;
                }
                return r;
            }(o);
            return L === this.decode.FLATE_DECODE && (A = "/Predictor " + I + " "), A += "/Colors " + l + " /BitsPerComponent " + c + " /Columns " + u.width, (this.__addimage__.isArrayBuffer(e) || this.__addimage__.isArrayBufferView(e)) && (e = this.__addimage__.arrayBufferToBinaryString(e)), (d && this.__addimage__.isArrayBuffer(d) || this.__addimage__.isArrayBufferView(d)) && (d = this.__addimage__.arrayBufferToBinaryString(d)), {
                alias: a,
                data: e,
                index: i,
                filter: L,
                decodeParameters: A,
                transparency: h,
                palette: f,
                sMask: d,
                predictor: I,
                width: u.width,
                height: u.height,
                bitsPerComponent: c,
                colorSpace: s
            };
        }
    };
}(E.API), function(t) {
    t.processGIF89A = function(e, r, n, i) {
        var a = new Zt(e), o = a.width, s = a.height, c = [];
        a.decodeAndBlitFrameRGBA(0, c);
        var u = {
            data: c,
            width: o,
            height: s
        }, h = new Qt(100).encode(u, 100);
        return t.processJPEG.call(this, h, r, n, i);
    }, t.processGIF87A = t.processGIF89A;
}(E.API), te.prototype.parseHeader = function() {
    if (this.fileSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.reserved = this.datav.getUint32(this.pos, !0), this.pos += 4, this.offset = this.datav.getUint32(this.pos, !0), this.pos += 4, this.headerSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.width = this.datav.getUint32(this.pos, !0), this.pos += 4, this.height = this.datav.getInt32(this.pos, !0), this.pos += 4, this.planes = this.datav.getUint16(this.pos, !0), this.pos += 2, this.bitPP = this.datav.getUint16(this.pos, !0), this.pos += 2, this.compress = this.datav.getUint32(this.pos, !0), this.pos += 4, this.rawSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.hr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.vr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.colors = this.datav.getUint32(this.pos, !0), this.pos += 4, this.importantColors = this.datav.getUint32(this.pos, !0), this.pos += 4, 16 === this.bitPP && this.is_with_alpha && (this.bitPP = 15), this.bitPP < 15) {
        var t = 0 === this.colors ? 1 << this.bitPP : this.colors;
        this.palette = new Array(t);
        for(var e = 0; e < t; e++){
            var r = this.datav.getUint8(this.pos++, !0), n = this.datav.getUint8(this.pos++, !0), i = this.datav.getUint8(this.pos++, !0), a = this.datav.getUint8(this.pos++, !0);
            this.palette[e] = {
                red: i,
                green: n,
                blue: r,
                quad: a
            };
        }
    }
    this.height < 0 && (this.height *= -1, this.bottom_up = !1);
}, te.prototype.parseBGR = function() {
    this.pos = this.offset;
    try {
        var t = "bit" + this.bitPP, e = this.width * this.height * 4;
        this.data = new Uint8Array(e), this[t]();
    } catch (t) {
        a.log("bit decode error:" + t);
    }
}, te.prototype.bit1 = function() {
    var t, e = Math.ceil(this.width / 8), r = e % 4;
    for(t = this.height - 1; t >= 0; t--){
        for(var n = this.bottom_up ? t : this.height - 1 - t, i = 0; i < e; i++)for(var a = this.datav.getUint8(this.pos++, !0), o = n * this.width * 4 + 8 * i * 4, s = 0; s < 8 && 8 * i + s < this.width; s++){
            var c = this.palette[a >> 7 - s & 1];
            this.data[o + 4 * s] = c.blue, this.data[o + 4 * s + 1] = c.green, this.data[o + 4 * s + 2] = c.red, this.data[o + 4 * s + 3] = 255;
        }
        0 !== r && (this.pos += 4 - r);
    }
}, te.prototype.bit4 = function() {
    for(var t = Math.ceil(this.width / 2), e = t % 4, r = this.height - 1; r >= 0; r--){
        for(var n = this.bottom_up ? r : this.height - 1 - r, i = 0; i < t; i++){
            var a = this.datav.getUint8(this.pos++, !0), o = n * this.width * 4 + 2 * i * 4, s = a >> 4, c = 15 & a, u = this.palette[s];
            if (this.data[o] = u.blue, this.data[o + 1] = u.green, this.data[o + 2] = u.red, this.data[o + 3] = 255, 2 * i + 1 >= this.width) break;
            u = this.palette[c], this.data[o + 4] = u.blue, this.data[o + 4 + 1] = u.green, this.data[o + 4 + 2] = u.red, this.data[o + 4 + 3] = 255;
        }
        0 !== e && (this.pos += 4 - e);
    }
}, te.prototype.bit8 = function() {
    for(var t = this.width % 4, e = this.height - 1; e >= 0; e--){
        for(var r = this.bottom_up ? e : this.height - 1 - e, n = 0; n < this.width; n++){
            var i = this.datav.getUint8(this.pos++, !0), a = r * this.width * 4 + 4 * n;
            if (i < this.palette.length) {
                var o = this.palette[i];
                this.data[a] = o.red, this.data[a + 1] = o.green, this.data[a + 2] = o.blue, this.data[a + 3] = 255;
            } else this.data[a] = 255, this.data[a + 1] = 255, this.data[a + 2] = 255, this.data[a + 3] = 255;
        }
        0 !== t && (this.pos += 4 - t);
    }
}, te.prototype.bit15 = function() {
    for(var t = this.width % 3, e = parseInt("11111", 2), r = this.height - 1; r >= 0; r--){
        for(var n = this.bottom_up ? r : this.height - 1 - r, i = 0; i < this.width; i++){
            var a = this.datav.getUint16(this.pos, !0);
            this.pos += 2;
            var o = (a & e) / e * 255 | 0, s = (a >> 5 & e) / e * 255 | 0, c = (a >> 10 & e) / e * 255 | 0, u = a >> 15 ? 255 : 0, h = n * this.width * 4 + 4 * i;
            this.data[h] = c, this.data[h + 1] = s, this.data[h + 2] = o, this.data[h + 3] = u;
        }
        this.pos += t;
    }
}, te.prototype.bit16 = function() {
    for(var t = this.width % 3, e = parseInt("11111", 2), r = parseInt("111111", 2), n = this.height - 1; n >= 0; n--){
        for(var i = this.bottom_up ? n : this.height - 1 - n, a = 0; a < this.width; a++){
            var o = this.datav.getUint16(this.pos, !0);
            this.pos += 2;
            var s = (o & e) / e * 255 | 0, c = (o >> 5 & r) / r * 255 | 0, u = (o >> 11) / e * 255 | 0, h = i * this.width * 4 + 4 * a;
            this.data[h] = u, this.data[h + 1] = c, this.data[h + 2] = s, this.data[h + 3] = 255;
        }
        this.pos += t;
    }
}, te.prototype.bit24 = function() {
    for(var t = this.height - 1; t >= 0; t--){
        for(var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++){
            var n = this.datav.getUint8(this.pos++, !0), i = this.datav.getUint8(this.pos++, !0), a = this.datav.getUint8(this.pos++, !0), o = e * this.width * 4 + 4 * r;
            this.data[o] = a, this.data[o + 1] = i, this.data[o + 2] = n, this.data[o + 3] = 255;
        }
        this.pos += this.width % 4;
    }
}, te.prototype.bit32 = function() {
    for(var t = this.height - 1; t >= 0; t--)for(var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++){
        var n = this.datav.getUint8(this.pos++, !0), i = this.datav.getUint8(this.pos++, !0), a = this.datav.getUint8(this.pos++, !0), o = this.datav.getUint8(this.pos++, !0), s = e * this.width * 4 + 4 * r;
        this.data[s] = a, this.data[s + 1] = i, this.data[s + 2] = n, this.data[s + 3] = o;
    }
}, te.prototype.getData = function() {
    return this.data;
}, /**
 * @license
 * Copyright (c) 2018 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    t.processBMP = function(e, r, n, i) {
        var a = new te(e, !1), o = a.width, s = a.height, c = {
            data: a.getData(),
            width: o,
            height: s
        }, u = new Qt(100).encode(c, 100);
        return t.processJPEG.call(this, u, r, n, i);
    };
}(E.API), ee.prototype.getData = function() {
    return this.data;
}, /**
 * @license
 * Copyright (c) 2019 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    t.processWEBP = function(e, r, n, i) {
        var a = new ee(e, !1), o = a.width, s = a.height, c = {
            data: a.getData(),
            width: o,
            height: s
        }, u = new Qt(100).encode(c, 100);
        return t.processJPEG.call(this, u, r, n, i);
    };
}(E.API), E.API.processRGBA = function(t, e, r) {
    for(var n = t.data, i = n.length, a = new Uint8Array(i / 4 * 3), o = new Uint8Array(i / 4), s = 0, c = 0, u = 0; u < i; u += 4){
        var h = n[u], l = n[u + 1], f = n[u + 2], d = n[u + 3];
        a[s++] = h, a[s++] = l, a[s++] = f, o[c++] = d;
    }
    var p = this.__addimage__.arrayBufferToBinaryString(a);
    return {
        alpha: this.__addimage__.arrayBufferToBinaryString(o),
        data: p,
        index: e,
        alias: r,
        colorSpace: "DeviceRGB",
        bitsPerComponent: 8,
        width: t.width,
        height: t.height
    };
}, E.API.setLanguage = function(t) {
    return void 0 === this.internal.languageSettings && (this.internal.languageSettings = {}, this.internal.languageSettings.isSubscribed = !1), void 0 !== ({
        af: "Afrikaans",
        sq: "Albanian",
        ar: "Arabic (Standard)",
        "ar-DZ": "Arabic (Algeria)",
        "ar-BH": "Arabic (Bahrain)",
        "ar-EG": "Arabic (Egypt)",
        "ar-IQ": "Arabic (Iraq)",
        "ar-JO": "Arabic (Jordan)",
        "ar-KW": "Arabic (Kuwait)",
        "ar-LB": "Arabic (Lebanon)",
        "ar-LY": "Arabic (Libya)",
        "ar-MA": "Arabic (Morocco)",
        "ar-OM": "Arabic (Oman)",
        "ar-QA": "Arabic (Qatar)",
        "ar-SA": "Arabic (Saudi Arabia)",
        "ar-SY": "Arabic (Syria)",
        "ar-TN": "Arabic (Tunisia)",
        "ar-AE": "Arabic (U.A.E.)",
        "ar-YE": "Arabic (Yemen)",
        an: "Aragonese",
        hy: "Armenian",
        as: "Assamese",
        ast: "Asturian",
        az: "Azerbaijani",
        eu: "Basque",
        be: "Belarusian",
        bn: "Bengali",
        bs: "Bosnian",
        br: "Breton",
        bg: "Bulgarian",
        my: "Burmese",
        ca: "Catalan",
        ch: "Chamorro",
        ce: "Chechen",
        zh: "Chinese",
        "zh-HK": "Chinese (Hong Kong)",
        "zh-CN": "Chinese (PRC)",
        "zh-SG": "Chinese (Singapore)",
        "zh-TW": "Chinese (Taiwan)",
        cv: "Chuvash",
        co: "Corsican",
        cr: "Cree",
        hr: "Croatian",
        cs: "Czech",
        da: "Danish",
        nl: "Dutch (Standard)",
        "nl-BE": "Dutch (Belgian)",
        en: "English",
        "en-AU": "English (Australia)",
        "en-BZ": "English (Belize)",
        "en-CA": "English (Canada)",
        "en-IE": "English (Ireland)",
        "en-JM": "English (Jamaica)",
        "en-NZ": "English (New Zealand)",
        "en-PH": "English (Philippines)",
        "en-ZA": "English (South Africa)",
        "en-TT": "English (Trinidad & Tobago)",
        "en-GB": "English (United Kingdom)",
        "en-US": "English (United States)",
        "en-ZW": "English (Zimbabwe)",
        eo: "Esperanto",
        et: "Estonian",
        fo: "Faeroese",
        fj: "Fijian",
        fi: "Finnish",
        fr: "French (Standard)",
        "fr-BE": "French (Belgium)",
        "fr-CA": "French (Canada)",
        "fr-FR": "French (France)",
        "fr-LU": "French (Luxembourg)",
        "fr-MC": "French (Monaco)",
        "fr-CH": "French (Switzerland)",
        fy: "Frisian",
        fur: "Friulian",
        gd: "Gaelic (Scots)",
        "gd-IE": "Gaelic (Irish)",
        gl: "Galacian",
        ka: "Georgian",
        de: "German (Standard)",
        "de-AT": "German (Austria)",
        "de-DE": "German (Germany)",
        "de-LI": "German (Liechtenstein)",
        "de-LU": "German (Luxembourg)",
        "de-CH": "German (Switzerland)",
        el: "Greek",
        gu: "Gujurati",
        ht: "Haitian",
        he: "Hebrew",
        hi: "Hindi",
        hu: "Hungarian",
        is: "Icelandic",
        id: "Indonesian",
        iu: "Inuktitut",
        ga: "Irish",
        it: "Italian (Standard)",
        "it-CH": "Italian (Switzerland)",
        ja: "Japanese",
        kn: "Kannada",
        ks: "Kashmiri",
        kk: "Kazakh",
        km: "Khmer",
        ky: "Kirghiz",
        tlh: "Klingon",
        ko: "Korean",
        "ko-KP": "Korean (North Korea)",
        "ko-KR": "Korean (South Korea)",
        la: "Latin",
        lv: "Latvian",
        lt: "Lithuanian",
        lb: "Luxembourgish",
        mk: "North Macedonia",
        ms: "Malay",
        ml: "Malayalam",
        mt: "Maltese",
        mi: "Maori",
        mr: "Marathi",
        mo: "Moldavian",
        nv: "Navajo",
        ng: "Ndonga",
        ne: "Nepali",
        no: "Norwegian",
        nb: "Norwegian (Bokmal)",
        nn: "Norwegian (Nynorsk)",
        oc: "Occitan",
        or: "Oriya",
        om: "Oromo",
        fa: "Persian",
        "fa-IR": "Persian/Iran",
        pl: "Polish",
        pt: "Portuguese",
        "pt-BR": "Portuguese (Brazil)",
        pa: "Punjabi",
        "pa-IN": "Punjabi (India)",
        "pa-PK": "Punjabi (Pakistan)",
        qu: "Quechua",
        rm: "Rhaeto-Romanic",
        ro: "Romanian",
        "ro-MO": "Romanian (Moldavia)",
        ru: "Russian",
        "ru-MO": "Russian (Moldavia)",
        sz: "Sami (Lappish)",
        sg: "Sango",
        sa: "Sanskrit",
        sc: "Sardinian",
        sd: "Sindhi",
        si: "Singhalese",
        sr: "Serbian",
        sk: "Slovak",
        sl: "Slovenian",
        so: "Somani",
        sb: "Sorbian",
        es: "Spanish",
        "es-AR": "Spanish (Argentina)",
        "es-BO": "Spanish (Bolivia)",
        "es-CL": "Spanish (Chile)",
        "es-CO": "Spanish (Colombia)",
        "es-CR": "Spanish (Costa Rica)",
        "es-DO": "Spanish (Dominican Republic)",
        "es-EC": "Spanish (Ecuador)",
        "es-SV": "Spanish (El Salvador)",
        "es-GT": "Spanish (Guatemala)",
        "es-HN": "Spanish (Honduras)",
        "es-MX": "Spanish (Mexico)",
        "es-NI": "Spanish (Nicaragua)",
        "es-PA": "Spanish (Panama)",
        "es-PY": "Spanish (Paraguay)",
        "es-PE": "Spanish (Peru)",
        "es-PR": "Spanish (Puerto Rico)",
        "es-ES": "Spanish (Spain)",
        "es-UY": "Spanish (Uruguay)",
        "es-VE": "Spanish (Venezuela)",
        sx: "Sutu",
        sw: "Swahili",
        sv: "Swedish",
        "sv-FI": "Swedish (Finland)",
        "sv-SV": "Swedish (Sweden)",
        ta: "Tamil",
        tt: "Tatar",
        te: "Teluga",
        th: "Thai",
        tig: "Tigre",
        ts: "Tsonga",
        tn: "Tswana",
        tr: "Turkish",
        tk: "Turkmen",
        uk: "Ukrainian",
        hsb: "Upper Sorbian",
        ur: "Urdu",
        ve: "Venda",
        vi: "Vietnamese",
        vo: "Volapuk",
        wa: "Walloon",
        cy: "Welsh",
        xh: "Xhosa",
        ji: "Yiddish",
        zu: "Zulu"
    })[t] && (this.internal.languageSettings.languageCode = t, !1 === this.internal.languageSettings.isSubscribed && (this.internal.events.subscribe("putCatalog", function() {
        this.internal.write("/Lang (" + this.internal.languageSettings.languageCode + ")");
    }), this.internal.languageSettings.isSubscribed = !0)), this;
}, Vt = E.API, Gt = Vt.getCharWidthsArray = function(e, r) {
    var n, i, a = (r = r || {}).font || this.internal.getFont(), o = r.fontSize || this.internal.getFontSize(), s = r.charSpace || this.internal.getCharSpace(), c = r.widths ? r.widths : a.metadata.Unicode.widths, u = c.fof ? c.fof : 1, h = r.kerning ? r.kerning : a.metadata.Unicode.kerning, l = h.fof ? h.fof : 1, f = !1 !== r.doKerning, d = 0, p = e.length, g = 0, m = c[0] || u, v = [];
    for(n = 0; n < p; n++)i = e.charCodeAt(n), "function" == typeof a.metadata.widthOfString ? v.push((a.metadata.widthOfGlyph(a.metadata.characterToGlyph(i)) + s * (1e3 / o) || 0) / 1e3) : (d = f && "object" === (0, _typeofDefault.default)(h[i]) && !isNaN(parseInt(h[i][g], 10)) ? h[i][g] / l : 0, v.push((c[i] || m) / u + d)), g = i;
    return v;
}, Yt = Vt.getStringUnitWidth = function(t, e) {
    var r = (e = e || {}).fontSize || this.internal.getFontSize(), n = e.font || this.internal.getFont(), i = e.charSpace || this.internal.getCharSpace();
    return Vt.processArabic && (t = Vt.processArabic(t)), "function" == typeof n.metadata.widthOfString ? n.metadata.widthOfString(t, r, i) / r : Gt.apply(this, arguments).reduce(function(t, e) {
        return t + e;
    }, 0);
}, Jt = function(t, e, r, n) {
    for(var i = [], a = 0, o = t.length, s = 0; a !== o && s + e[a] < r;)s += e[a], a++;
    i.push(t.slice(0, a));
    var c = a;
    for(s = 0; a !== o;)s + e[a] > n && (i.push(t.slice(c, a)), s = 0, c = a), s += e[a], a++;
    return c !== a && i.push(t.slice(c, a)), i;
}, Xt = function(t, e, r) {
    r || (r = {});
    var n, i, a, o, s, c, u, h = [], l = [
        h
    ], f = r.textIndent || 0, d = 0, p = 0, g = t.split(" "), m = Gt.apply(this, [
        " ",
        r
    ])[0];
    if (c = -1 === r.lineIndent ? g[0].length + 2 : r.lineIndent || 0) {
        var v = Array(c).join(" "), b = [];
        g.map(function(t) {
            (t = t.split(/\s*\n/)).length > 1 ? b = b.concat(t.map(function(t, e) {
                return (e && t.length ? "\n" : "") + t;
            })) : b.push(t[0]);
        }), g = b, c = Yt.apply(this, [
            v,
            r
        ]);
    }
    for(a = 0, o = g.length; a < o; a++){
        var y = 0;
        if (n = g[a], c && "\n" == n[0] && (n = n.substr(1), y = 1), f + d + (p = (i = Gt.apply(this, [
            n,
            r
        ])).reduce(function(t, e) {
            return t + e;
        }, 0)) > e || y) {
            if (p > e) {
                for(s = Jt.apply(this, [
                    n,
                    i,
                    e - (f + d),
                    e
                ]), h.push(s.shift()), h = [
                    s.pop()
                ]; s.length;)l.push([
                    s.shift()
                ]);
                p = i.slice(n.length - (h[0] ? h[0].length : 0)).reduce(function(t, e) {
                    return t + e;
                }, 0);
            } else h = [
                n
            ];
            l.push(h), f = p + c, d = m;
        } else h.push(n), f += d + p, d = m;
    }
    return u = c ? function(t, e) {
        return (e ? v : "") + t.join(" ");
    } : function(t) {
        return t.join(" ");
    }, l.map(u);
}, Vt.splitTextToSize = function(t, e, r) {
    var n, i = (r = r || {}).fontSize || this.internal.getFontSize(), a = (function(t) {
        if (t.widths && t.kerning) return {
            widths: t.widths,
            kerning: t.kerning
        };
        var e = this.internal.getFont(t.fontName, t.fontStyle);
        return e.metadata.Unicode ? {
            widths: e.metadata.Unicode.widths || {
                0: 1
            },
            kerning: e.metadata.Unicode.kerning || {}
        } : {
            font: e.metadata,
            fontSize: this.internal.getFontSize(),
            charSpace: this.internal.getCharSpace()
        };
    }).call(this, r);
    n = Array.isArray(t) ? t : String(t).split(/\r?\n/);
    var o = 1 * this.internal.scaleFactor * e / i;
    a.textIndent = r.textIndent ? 1 * r.textIndent * this.internal.scaleFactor / i : 0, a.lineIndent = r.lineIndent;
    var s, c, u = [];
    for(s = 0, c = n.length; s < c; s++)u = u.concat(Xt.apply(this, [
        n[s],
        o,
        a
    ]));
    return u;
}, function(e) {
    e.__fontmetrics__ = e.__fontmetrics__ || {};
    for(var r = "klmnopqrstuvwxyz", n = {}, i = {}, a = 0; a < r.length; a++)n[r[a]] = "0123456789abcdef"[a], i["0123456789abcdef"[a]] = r[a];
    var o = function(t) {
        return "0x" + parseInt(t, 10).toString(16);
    }, s = e.__fontmetrics__.compress = function(e) {
        var r, n, a, c, u = [
            "{"
        ];
        for(var h in e){
            if (r = e[h], isNaN(parseInt(h, 10)) ? n = "'" + h + "'" : (h = parseInt(h, 10), n = (n = o(h).slice(2)).slice(0, -1) + i[n.slice(-1)]), "number" == typeof r) r < 0 ? (a = o(r).slice(3), c = "-") : (a = o(r).slice(2), c = ""), a = c + a.slice(0, -1) + i[a.slice(-1)];
            else {
                if ("object" !== (0, _typeofDefault.default)(r)) throw new Error("Don't know what to do with value type " + (0, _typeofDefault.default)(r) + ".");
                a = s(r);
            }
            u.push(n + a);
        }
        return u.push("}"), u.join("");
    }, c = e.__fontmetrics__.uncompress = function(t) {
        if ("string" != typeof t) throw new Error("Invalid argument passed to uncompress.");
        for(var e, r, i, a, o = {}, s = 1, c = o, u = [], h = "", l = "", f = t.length - 1, d = 1; d < f; d += 1)"'" == (a = t[d]) ? e ? (i = e.join(""), e = void 0) : e = [] : e ? e.push(a) : "{" == a ? (u.push([
            c,
            i
        ]), c = {}, i = void 0) : "}" == a ? ((r = u.pop())[0][r[1]] = c, i = void 0, c = r[0]) : "-" == a ? s = -1 : void 0 === i ? n.hasOwnProperty(a) ? (h += n[a], i = parseInt(h, 16) * s, s = 1, h = "") : h += a : n.hasOwnProperty(a) ? (l += n[a], c[i] = parseInt(l, 16) * s, s = 1, i = void 0, l = "") : l += a;
        return o;
    }, u = {
        codePages: [
            "WinAnsiEncoding"
        ],
        WinAnsiEncoding: c("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")
    }, h = {
        Unicode: {
            Courier: u,
            "Courier-Bold": u,
            "Courier-BoldOblique": u,
            "Courier-Oblique": u,
            Helvetica: u,
            "Helvetica-Bold": u,
            "Helvetica-BoldOblique": u,
            "Helvetica-Oblique": u,
            "Times-Roman": u,
            "Times-Bold": u,
            "Times-BoldItalic": u,
            "Times-Italic": u
        }
    }, l = {
        Unicode: {
            "Courier-Oblique": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Times-BoldItalic": c("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),
            "Helvetica-Bold": c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
            Courier: c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Courier-BoldOblique": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Times-Bold": c("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),
            Symbol: c("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),
            Helvetica: c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),
            "Helvetica-BoldOblique": c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
            ZapfDingbats: c("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),
            "Courier-Bold": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Times-Italic": c("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),
            "Times-Roman": c("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),
            "Helvetica-Oblique": c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")
        }
    };
    e.events.push([
        "addFont",
        function(t) {
            var e = t.font, r = l.Unicode[e.postScriptName];
            r && (e.metadata.Unicode = {}, e.metadata.Unicode.widths = r.widths, e.metadata.Unicode.kerning = r.kerning);
            var n = h.Unicode[e.postScriptName];
            n && (e.metadata.Unicode.encoding = n, e.encoding = n.codePages[0]);
        }
    ]);
}(E.API), /**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    var e = function(t) {
        for(var e = t.length, r = new Uint8Array(e), n = 0; n < e; n++)r[n] = t.charCodeAt(n);
        return r;
    };
    t.API.events.push([
        "addFont",
        function(r) {
            var n = void 0, i = r.font, a = r.instance;
            if (!i.isStandardFont) {
                if (void 0 === a) throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('" + i.postScriptName + "').");
                if ("string" != typeof (n = !1 === a.existsFileInVFS(i.postScriptName) ? a.loadFile(i.postScriptName) : a.getFileFromVFS(i.postScriptName))) throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('" + i.postScriptName + "').");
                !function(r, n) {
                    n = /^\x00\x01\x00\x00/.test(n) ? e(n) : e(u(n)), r.metadata = t.API.TTFFont.open(n), r.metadata.Unicode = r.metadata.Unicode || {
                        encoding: {},
                        kerning: {},
                        widths: []
                    }, r.metadata.glyIdsUsed = [
                        0
                    ];
                }(i, n);
            }
        }
    ]);
}(E), /** @license
 * Copyright (c) 2012 Willow Systems Corporation, https://github.com/willowsystems
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */ function(t) {
    function e() {
        return (n.canvg ? Promise.resolve(n.canvg) : require("7ec43201f0dbcdb8")).catch(function(t) {
            return Promise.reject(new Error("Could not load canvg: " + t));
        }).then(function(t) {
            return t.default ? t.default : t;
        });
    }
    E.API.addSvgAsImage = function(t, r, n, i, o, s, c, u) {
        if (isNaN(r) || isNaN(n)) throw a.error("jsPDF.addSvgAsImage: Invalid coordinates", arguments), new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");
        if (isNaN(i) || isNaN(o)) throw a.error("jsPDF.addSvgAsImage: Invalid measurements", arguments), new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");
        var h = document.createElement("canvas");
        h.width = i, h.height = o;
        var l = h.getContext("2d");
        l.fillStyle = "#fff", l.fillRect(0, 0, h.width, h.height);
        var f = {
            ignoreMouse: !0,
            ignoreAnimation: !0,
            ignoreDimensions: !0
        }, d = this;
        return e().then(function(e) {
            return e.fromString(l, t, f);
        }, function() {
            return Promise.reject(new Error("Could not load canvg."));
        }).then(function(t) {
            return t.render(f);
        }).then(function() {
            d.addImage(h.toDataURL("image/jpeg", 1), r, n, i, o, c, u);
        });
    };
}(), E.API.putTotalPages = function(t) {
    var e, r = 0;
    parseInt(this.internal.getFont().id.substr(1), 10) < 15 ? (e = new RegExp(t, "g"), r = this.internal.getNumberOfPages()) : (e = new RegExp(this.pdfEscape16(t, this.internal.getFont()), "g"), r = this.pdfEscape16(this.internal.getNumberOfPages() + "", this.internal.getFont()));
    for(var n = 1; n <= this.internal.getNumberOfPages(); n++)for(var i = 0; i < this.internal.pages[n].length; i++)this.internal.pages[n][i] = this.internal.pages[n][i].replace(e, r);
    return this;
}, E.API.viewerPreferences = function(e, r) {
    var n;
    e = e || {}, r = r || !1;
    var i, a, o, s = {
        HideToolbar: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.3
        },
        HideMenubar: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.3
        },
        HideWindowUI: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.3
        },
        FitWindow: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.3
        },
        CenterWindow: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.3
        },
        DisplayDocTitle: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.4
        },
        NonFullScreenPageMode: {
            defaultValue: "UseNone",
            value: "UseNone",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "UseNone",
                "UseOutlines",
                "UseThumbs",
                "UseOC"
            ],
            pdfVersion: 1.3
        },
        Direction: {
            defaultValue: "L2R",
            value: "L2R",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "L2R",
                "R2L"
            ],
            pdfVersion: 1.3
        },
        ViewArea: {
            defaultValue: "CropBox",
            value: "CropBox",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "MediaBox",
                "CropBox",
                "TrimBox",
                "BleedBox",
                "ArtBox"
            ],
            pdfVersion: 1.4
        },
        ViewClip: {
            defaultValue: "CropBox",
            value: "CropBox",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "MediaBox",
                "CropBox",
                "TrimBox",
                "BleedBox",
                "ArtBox"
            ],
            pdfVersion: 1.4
        },
        PrintArea: {
            defaultValue: "CropBox",
            value: "CropBox",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "MediaBox",
                "CropBox",
                "TrimBox",
                "BleedBox",
                "ArtBox"
            ],
            pdfVersion: 1.4
        },
        PrintClip: {
            defaultValue: "CropBox",
            value: "CropBox",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "MediaBox",
                "CropBox",
                "TrimBox",
                "BleedBox",
                "ArtBox"
            ],
            pdfVersion: 1.4
        },
        PrintScaling: {
            defaultValue: "AppDefault",
            value: "AppDefault",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "AppDefault",
                "None"
            ],
            pdfVersion: 1.6
        },
        Duplex: {
            defaultValue: "",
            value: "none",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "Simplex",
                "DuplexFlipShortEdge",
                "DuplexFlipLongEdge",
                "none"
            ],
            pdfVersion: 1.7
        },
        PickTrayByPDFSize: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.7
        },
        PrintPageRange: {
            defaultValue: "",
            value: "",
            type: "array",
            explicitSet: !1,
            valueSet: null,
            pdfVersion: 1.7
        },
        NumCopies: {
            defaultValue: 1,
            value: 1,
            type: "integer",
            explicitSet: !1,
            valueSet: null,
            pdfVersion: 1.7
        }
    }, c = Object.keys(s), u = [], h = 0, l = 0, f = 0;
    function d(t, e) {
        var r, n = !1;
        for(r = 0; r < t.length; r += 1)t[r] === e && (n = !0);
        return n;
    }
    if (void 0 === this.internal.viewerpreferences && (this.internal.viewerpreferences = {}, this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(s)), this.internal.viewerpreferences.isSubscribed = !1), n = this.internal.viewerpreferences.configuration, "reset" === e || !0 === r) {
        var p = c.length;
        for(f = 0; f < p; f += 1)n[c[f]].value = n[c[f]].defaultValue, n[c[f]].explicitSet = !1;
    }
    if ("object" === (0, _typeofDefault.default)(e)) {
        for(a in e)if (o = e[a], d(c, a) && void 0 !== o) {
            if ("boolean" === n[a].type && "boolean" == typeof o) n[a].value = o;
            else if ("name" === n[a].type && d(n[a].valueSet, o)) n[a].value = o;
            else if ("integer" === n[a].type && Number.isInteger(o)) n[a].value = o;
            else if ("array" === n[a].type) {
                for(h = 0; h < o.length; h += 1)if (i = !0, 1 === o[h].length && "number" == typeof o[h][0]) u.push(String(o[h] - 1));
                else if (o[h].length > 1) {
                    for(l = 0; l < o[h].length; l += 1)"number" != typeof o[h][l] && (i = !1);
                    !0 === i && u.push([
                        o[h][0] - 1,
                        o[h][1] - 1
                    ].join(" "));
                }
                n[a].value = "[" + u.join(" ") + "]";
            } else n[a].value = n[a].defaultValue;
            n[a].explicitSet = !0;
        }
    }
    return !1 === this.internal.viewerpreferences.isSubscribed && (this.internal.events.subscribe("putCatalog", function() {
        var t, e = [];
        for(t in n)!0 === n[t].explicitSet && ("name" === n[t].type ? e.push("/" + t + " /" + n[t].value) : e.push("/" + t + " " + n[t].value));
        0 !== e.length && this.internal.write("/ViewerPreferences\n<<\n" + e.join("\n") + "\n>>");
    }), this.internal.viewerpreferences.isSubscribed = !0), this.internal.viewerpreferences.configuration = n, this;
}, /** ====================================================================
 * @license
 * jsPDF XMP metadata plugin
 * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */ function(t) {
    var e = function() {
        var t = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="' + this.internal.__metadata__.namespaceuri + '"><jspdf:metadata>', e = unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">')), r = unescape(encodeURIComponent(t)), n = unescape(encodeURIComponent(this.internal.__metadata__.metadata)), i = unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>")), a = unescape(encodeURIComponent("</x:xmpmeta>")), o = r.length + n.length + i.length + e.length + a.length;
        this.internal.__metadata__.metadata_object_number = this.internal.newObject(), this.internal.write("<< /Type /Metadata /Subtype /XML /Length " + o + " >>"), this.internal.write("stream"), this.internal.write(e + r + n + i + a), this.internal.write("endstream"), this.internal.write("endobj");
    }, r = function() {
        this.internal.__metadata__.metadata_object_number && this.internal.write("/Metadata " + this.internal.__metadata__.metadata_object_number + " 0 R");
    };
    t.addMetadata = function(t, n) {
        return void 0 === this.internal.__metadata__ && (this.internal.__metadata__ = {
            metadata: t,
            namespaceuri: n || "http://jspdf.default.namespaceuri/"
        }, this.internal.events.subscribe("putCatalog", r), this.internal.events.subscribe("postPutResources", e)), this;
    };
}(E.API), function(t) {
    var e = t.API, r = e.pdfEscape16 = function(t, e) {
        for(var r, n = e.metadata.Unicode.widths, i = [
            "",
            "0",
            "00",
            "000",
            "0000"
        ], a = [
            ""
        ], o = 0, s = t.length; o < s; ++o){
            if (r = e.metadata.characterToGlyph(t.charCodeAt(o)), e.metadata.glyIdsUsed.push(r), e.metadata.toUnicode[r] = t.charCodeAt(o), -1 == n.indexOf(r) && (n.push(r), n.push([
                parseInt(e.metadata.widthOfGlyph(r), 10)
            ])), "0" == r) return a.join("");
            r = r.toString(16), a.push(i[4 - r.length], r);
        }
        return a.join("");
    }, n = function(t) {
        var e, r, n, i, a, o, s;
        for(a = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange", n = [], o = 0, s = (r = Object.keys(t).sort(function(t, e) {
            return t - e;
        })).length; o < s; o++)e = r[o], n.length >= 100 && (a += "\n" + n.length + " beginbfchar\n" + n.join("\n") + "\nendbfchar", n = []), void 0 !== t[e] && null !== t[e] && "function" == typeof t[e].toString && (i = ("0000" + t[e].toString(16)).slice(-4), e = ("0000" + (+e).toString(16)).slice(-4), n.push("<" + e + "><" + i + ">"));
        return n.length && (a += "\n" + n.length + " beginbfchar\n" + n.join("\n") + "\nendbfchar\n"), a += "endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend";
    };
    e.events.push([
        "putFont",
        function(e) {
            !function(e) {
                var r = e.font, i = e.out, a = e.newObject, o = e.putStream;
                if (r.metadata instanceof t.API.TTFFont && "Identity-H" === r.encoding) {
                    for(var s = r.metadata.Unicode.widths, c = r.metadata.subset.encode(r.metadata.glyIdsUsed, 1), u = "", h = 0; h < c.length; h++)u += String.fromCharCode(c[h]);
                    var l = a();
                    o({
                        data: u,
                        addLength1: !0,
                        objectId: l
                    }), i("endobj");
                    var f = a();
                    o({
                        data: n(r.metadata.toUnicode),
                        addLength1: !0,
                        objectId: f
                    }), i("endobj");
                    var d = a();
                    i("<<"), i("/Type /FontDescriptor"), i("/FontName /" + F(r.fontName)), i("/FontFile2 " + l + " 0 R"), i("/FontBBox " + t.API.PDFObject.convert(r.metadata.bbox)), i("/Flags " + r.metadata.flags), i("/StemV " + r.metadata.stemV), i("/ItalicAngle " + r.metadata.italicAngle), i("/Ascent " + r.metadata.ascender), i("/Descent " + r.metadata.decender), i("/CapHeight " + r.metadata.capHeight), i(">>"), i("endobj");
                    var p = a();
                    i("<<"), i("/Type /Font"), i("/BaseFont /" + F(r.fontName)), i("/FontDescriptor " + d + " 0 R"), i("/W " + t.API.PDFObject.convert(s)), i("/CIDToGIDMap /Identity"), i("/DW 1000"), i("/Subtype /CIDFontType2"), i("/CIDSystemInfo"), i("<<"), i("/Supplement 0"), i("/Registry (Adobe)"), i("/Ordering (" + r.encoding + ")"), i(">>"), i(">>"), i("endobj"), r.objectNumber = a(), i("<<"), i("/Type /Font"), i("/Subtype /Type0"), i("/ToUnicode " + f + " 0 R"), i("/BaseFont /" + F(r.fontName)), i("/Encoding /" + r.encoding), i("/DescendantFonts [" + p + " 0 R]"), i(">>"), i("endobj"), r.isAlreadyPutted = !0;
                }
            }(e);
        }
    ]);
    e.events.push([
        "putFont",
        function(e) {
            !function(e) {
                var r = e.font, i = e.out, a = e.newObject, o = e.putStream;
                if (r.metadata instanceof t.API.TTFFont && "WinAnsiEncoding" === r.encoding) {
                    for(var s = r.metadata.rawData, c = "", u = 0; u < s.length; u++)c += String.fromCharCode(s[u]);
                    var h = a();
                    o({
                        data: c,
                        addLength1: !0,
                        objectId: h
                    }), i("endobj");
                    var l = a();
                    o({
                        data: n(r.metadata.toUnicode),
                        addLength1: !0,
                        objectId: l
                    }), i("endobj");
                    var f = a();
                    i("<<"), i("/Descent " + r.metadata.decender), i("/CapHeight " + r.metadata.capHeight), i("/StemV " + r.metadata.stemV), i("/Type /FontDescriptor"), i("/FontFile2 " + h + " 0 R"), i("/Flags 96"), i("/FontBBox " + t.API.PDFObject.convert(r.metadata.bbox)), i("/FontName /" + F(r.fontName)), i("/ItalicAngle " + r.metadata.italicAngle), i("/Ascent " + r.metadata.ascender), i(">>"), i("endobj"), r.objectNumber = a();
                    for(var d = 0; d < r.metadata.hmtx.widths.length; d++)r.metadata.hmtx.widths[d] = parseInt(r.metadata.hmtx.widths[d] * (1e3 / r.metadata.head.unitsPerEm));
                    i("<</Subtype/TrueType/Type/Font/ToUnicode " + l + " 0 R/BaseFont/" + F(r.fontName) + "/FontDescriptor " + f + " 0 R/Encoding/" + r.encoding + " /FirstChar 29 /LastChar 255 /Widths " + t.API.PDFObject.convert(r.metadata.hmtx.widths) + ">>"), i("endobj"), r.isAlreadyPutted = !0;
                }
            }(e);
        }
    ]);
    var i = function(t) {
        var e, n = t.text || "", i = t.x, a = t.y, o = t.options || {}, s = t.mutex || {}, c = s.pdfEscape, u = s.activeFontKey, h = s.fonts, l = u, f = "", d = 0, p = "", g = h[l].encoding;
        if ("Identity-H" !== h[l].encoding) return {
            text: n,
            x: i,
            y: a,
            options: o,
            mutex: s
        };
        for(p = n, l = u, Array.isArray(n) && (p = n[0]), d = 0; d < p.length; d += 1)h[l].metadata.hasOwnProperty("cmap") && (e = h[l].metadata.cmap.unicode.codeMap[p[d].charCodeAt(0)]), e || p[d].charCodeAt(0) < 256 && h[l].metadata.hasOwnProperty("Unicode") ? f += p[d] : f += "";
        var m = "";
        return parseInt(l.slice(1)) < 14 || "WinAnsiEncoding" === g ? m = c(f, l).split("").map(function(t) {
            return t.charCodeAt(0).toString(16);
        }).join("") : "Identity-H" === g && (m = r(f, h[l])), s.isHex = !0, {
            text: m,
            x: i,
            y: a,
            options: o,
            mutex: s
        };
    };
    e.events.push([
        "postProcessText",
        function(t) {
            var e = t.text || "", r = [], n = {
                text: e,
                x: t.x,
                y: t.y,
                options: t.options,
                mutex: t.mutex
            };
            if (Array.isArray(e)) {
                var a = 0;
                for(a = 0; a < e.length; a += 1)Array.isArray(e[a]) && 3 === e[a].length ? r.push([
                    i(Object.assign({}, n, {
                        text: e[a][0]
                    })).text,
                    e[a][1],
                    e[a][2]
                ]) : r.push(i(Object.assign({}, n, {
                    text: e[a]
                })).text);
                t.text = r;
            } else t.text = i(Object.assign({}, n, {
                text: e
            })).text;
        }
    ]);
}(E), /**
 * @license
 * jsPDF virtual FileSystem functionality
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    var e = function() {
        return void 0 === this.internal.vFS && (this.internal.vFS = {}), !0;
    };
    t.existsFileInVFS = function(t) {
        return e.call(this), void 0 !== this.internal.vFS[t];
    }, t.addFileToVFS = function(t, r) {
        return e.call(this), this.internal.vFS[t] = r, this;
    }, t.getFileFromVFS = function(t) {
        return e.call(this), void 0 !== this.internal.vFS[t] ? this.internal.vFS[t] : null;
    };
}(E.API), /**
 * @license
 * Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)
 * MIT License
 */ function(t) {
    t.__bidiEngine__ = t.prototype.__bidiEngine__ = function(t) {
        var r, n, i, a, o, s, c, u = e, h = [
            [
                0,
                3,
                0,
                1,
                0,
                0,
                0
            ],
            [
                0,
                3,
                0,
                1,
                2,
                2,
                0
            ],
            [
                0,
                3,
                0,
                17,
                2,
                0,
                1
            ],
            [
                0,
                3,
                5,
                5,
                4,
                1,
                0
            ],
            [
                0,
                3,
                21,
                21,
                4,
                0,
                1
            ],
            [
                0,
                3,
                5,
                5,
                4,
                2,
                0
            ]
        ], l = [
            [
                2,
                0,
                1,
                1,
                0,
                1,
                0
            ],
            [
                2,
                0,
                1,
                1,
                0,
                2,
                0
            ],
            [
                2,
                0,
                2,
                1,
                3,
                2,
                0
            ],
            [
                2,
                0,
                2,
                33,
                3,
                1,
                1
            ]
        ], f = {
            L: 0,
            R: 1,
            EN: 2,
            AN: 3,
            N: 4,
            B: 5,
            S: 6
        }, d = {
            0: 0,
            5: 1,
            6: 2,
            7: 3,
            32: 4,
            251: 5,
            254: 6,
            255: 7
        }, p = [
            "(",
            ")",
            "(",
            "<",
            ">",
            "<",
            "[",
            "]",
            "[",
            "{",
            "}",
            "{",
            "\xab",
            "\xbb",
            "\xab",
            "‹",
            "›",
            "‹",
            "⁅",
            "⁆",
            "⁅",
            "⁽",
            "⁾",
            "⁽",
            "₍",
            "₎",
            "₍",
            "≤",
            "≥",
            "≤",
            "〈",
            "〉",
            "〈",
            "﹙",
            "﹚",
            "﹙",
            "﹛",
            "﹜",
            "﹛",
            "﹝",
            "﹞",
            "﹝",
            "﹤",
            "﹥",
            "﹤"
        ], g = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/), m = !1, v = 0;
        this.__bidiEngine__ = {};
        var b = function(t) {
            var e = t.charCodeAt(), r = e >> 8, n = d[r];
            return void 0 !== n ? u[256 * n + (255 & e)] : 252 === r || 253 === r ? "AL" : g.test(r) ? "L" : 8 === r ? "R" : "N";
        }, y = function(t) {
            for(var e, r = 0; r < t.length; r++){
                if ("L" === (e = b(t.charAt(r)))) return !1;
                if ("R" === e) return !0;
            }
            return !1;
        }, w = function(t, e, o, s) {
            var c, u, h, l, f = e[s];
            switch(f){
                case "L":
                case "R":
                    m = !1;
                    break;
                case "N":
                case "AN":
                    break;
                case "EN":
                    m && (f = "AN");
                    break;
                case "AL":
                    m = !0, f = "R";
                    break;
                case "WS":
                    f = "N";
                    break;
                case "CS":
                    s < 1 || s + 1 >= e.length || "EN" !== (c = o[s - 1]) && "AN" !== c || "EN" !== (u = e[s + 1]) && "AN" !== u ? f = "N" : m && (u = "AN"), f = u === c ? u : "N";
                    break;
                case "ES":
                    f = "EN" === (c = s > 0 ? o[s - 1] : "B") && s + 1 < e.length && "EN" === e[s + 1] ? "EN" : "N";
                    break;
                case "ET":
                    if (s > 0 && "EN" === o[s - 1]) {
                        f = "EN";
                        break;
                    }
                    if (m) {
                        f = "N";
                        break;
                    }
                    for(h = s + 1, l = e.length; h < l && "ET" === e[h];)h++;
                    f = h < l && "EN" === e[h] ? "EN" : "N";
                    break;
                case "NSM":
                    if (i && !a) {
                        for(l = e.length, h = s + 1; h < l && "NSM" === e[h];)h++;
                        if (h < l) {
                            var d = t[s], p = d >= 1425 && d <= 2303 || 64286 === d;
                            if (c = e[h], p && ("R" === c || "AL" === c)) {
                                f = "R";
                                break;
                            }
                        }
                    }
                    f = s < 1 || "B" === (c = e[s - 1]) ? "N" : o[s - 1];
                    break;
                case "B":
                    m = !1, r = !0, f = v;
                    break;
                case "S":
                    n = !0, f = "N";
                    break;
                case "LRE":
                case "RLE":
                case "LRO":
                case "RLO":
                case "PDF":
                    m = !1;
                    break;
                case "BN":
                    f = "N";
            }
            return f;
        }, N = function(t, e, r) {
            var n = t.split("");
            return r && L(n, r, {
                hiLevel: v
            }), n.reverse(), e && e.reverse(), n.join("");
        }, L = function(t, e, i) {
            var a, o, s, c, u, d = -1, p = t.length, g = 0, y = [], N = v ? l : h, L = [];
            for(m = !1, r = !1, n = !1, o = 0; o < p; o++)L[o] = b(t[o]);
            for(s = 0; s < p; s++){
                if (u = g, y[s] = w(t, L, y, s), a = 240 & (g = N[u][f[y[s]]]), g &= 15, e[s] = c = N[g][5], a > 0) {
                    if (16 === a) {
                        for(o = d; o < s; o++)e[o] = 1;
                        d = -1;
                    } else d = -1;
                }
                if (N[g][6]) -1 === d && (d = s);
                else if (d > -1) {
                    for(o = d; o < s; o++)e[o] = c;
                    d = -1;
                }
                "B" === L[s] && (e[s] = 0), i.hiLevel |= c;
            }
            n && function(t, e, r) {
                for(var n = 0; n < r; n++)if ("S" === t[n]) {
                    e[n] = v;
                    for(var i = n - 1; i >= 0 && "WS" === t[i]; i--)e[i] = v;
                }
            }(L, e, p);
        }, A = function(t, e, n, i, a) {
            if (!(a.hiLevel < t)) {
                if (1 === t && 1 === v && !r) return e.reverse(), void (n && n.reverse());
                for(var o, s, c, u, h = e.length, l = 0; l < h;){
                    if (i[l] >= t) {
                        for(c = l + 1; c < h && i[c] >= t;)c++;
                        for(u = l, s = c - 1; u < s; u++, s--)o = e[u], e[u] = e[s], e[s] = o, n && (o = n[u], n[u] = n[s], n[s] = o);
                        l = c;
                    }
                    l++;
                }
            }
        }, x = function(t, e, r) {
            var n = t.split(""), i = {
                hiLevel: v
            };
            return r || (r = []), L(n, r, i), function(t, e, r) {
                if (0 !== r.hiLevel && c) for(var n, i = 0; i < t.length; i++)1 === e[i] && (n = p.indexOf(t[i])) >= 0 && (t[i] = p[n + 1]);
            }(n, r, i), A(2, n, e, r, i), A(1, n, e, r, i), n.join("");
        };
        return this.__bidiEngine__.doBidiReorder = function(t, e, r) {
            if (function(t, e) {
                if (e) for(var r = 0; r < t.length; r++)e[r] = r;
                void 0 === a && (a = y(t)), void 0 === s && (s = y(t));
            }(t, e), i || !o || s) {
                if (i && o && a ^ s) v = a ? 1 : 0, t = N(t, e, r);
                else if (!i && o && s) v = a ? 1 : 0, t = x(t, e, r), t = N(t, e);
                else if (!i || a || o || s) {
                    if (i && !o && a ^ s) t = N(t, e), a ? (v = 0, t = x(t, e, r)) : (v = 1, t = x(t, e, r), t = N(t, e));
                    else if (i && a && !o && s) v = 1, t = x(t, e, r), t = N(t, e);
                    else if (!i && !o && a ^ s) {
                        var n = c;
                        a ? (v = 1, t = x(t, e, r), v = 0, c = !1, t = x(t, e, r), c = n) : (v = 0, t = x(t, e, r), t = N(t, e), v = 1, c = !1, t = x(t, e, r), c = n, t = N(t, e));
                    }
                } else v = 0, t = x(t, e, r);
            } else v = a ? 1 : 0, t = x(t, e, r);
            return t;
        }, this.__bidiEngine__.setOptions = function(t) {
            t && (i = t.isInputVisual, o = t.isOutputVisual, a = t.isInputRtl, s = t.isOutputRtl, c = t.isSymmetricSwapping);
        }, this.__bidiEngine__.setOptions(t), this.__bidiEngine__;
    };
    var e = [
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "S",
        "B",
        "S",
        "WS",
        "B",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "B",
        "B",
        "B",
        "S",
        "WS",
        "N",
        "N",
        "ET",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "ES",
        "CS",
        "ES",
        "CS",
        "CS",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "CS",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "B",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "CS",
        "N",
        "ET",
        "ET",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "L",
        "N",
        "N",
        "BN",
        "N",
        "N",
        "ET",
        "ET",
        "EN",
        "EN",
        "N",
        "L",
        "N",
        "N",
        "N",
        "EN",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "ET",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "R",
        "NSM",
        "R",
        "NSM",
        "NSM",
        "R",
        "NSM",
        "NSM",
        "R",
        "NSM",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "N",
        "N",
        "N",
        "N",
        "N",
        "R",
        "R",
        "R",
        "R",
        "R",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "N",
        "N",
        "AL",
        "ET",
        "ET",
        "AL",
        "CS",
        "AL",
        "N",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AL",
        "AL",
        "N",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "ET",
        "AN",
        "AN",
        "AL",
        "AL",
        "AL",
        "NSM",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AN",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AL",
        "AL",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "N",
        "AL",
        "AL",
        "NSM",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "N",
        "N",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AL",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "R",
        "R",
        "N",
        "N",
        "N",
        "N",
        "R",
        "N",
        "N",
        "N",
        "N",
        "N",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "BN",
        "BN",
        "BN",
        "L",
        "R",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "WS",
        "B",
        "LRE",
        "RLE",
        "PDF",
        "LRO",
        "RLO",
        "CS",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "CS",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "WS",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "N",
        "LRI",
        "RLI",
        "FSI",
        "PDI",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "EN",
        "L",
        "N",
        "N",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "ES",
        "ES",
        "N",
        "N",
        "N",
        "L",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "ES",
        "ES",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "R",
        "NSM",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "ES",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "N",
        "R",
        "R",
        "R",
        "R",
        "R",
        "N",
        "R",
        "N",
        "R",
        "R",
        "N",
        "R",
        "R",
        "N",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "CS",
        "N",
        "CS",
        "N",
        "N",
        "CS",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "ET",
        "N",
        "N",
        "ES",
        "ES",
        "N",
        "N",
        "N",
        "N",
        "N",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "N",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "N",
        "N",
        "BN",
        "N",
        "N",
        "N",
        "ET",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "ES",
        "CS",
        "ES",
        "CS",
        "CS",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "CS",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N"
    ], r = new t.__bidiEngine__({
        isInputVisual: !0
    });
    t.API.events.push([
        "postProcessText",
        function(t) {
            var e = t.text, n = (t.x, t.y, t.options || {}), i = (t.mutex, n.lang, []);
            if (n.isInputVisual = "boolean" != typeof n.isInputVisual || n.isInputVisual, r.setOptions(n), "[object Array]" === Object.prototype.toString.call(e)) {
                var a = 0;
                for(i = [], a = 0; a < e.length; a += 1)"[object Array]" === Object.prototype.toString.call(e[a]) ? i.push([
                    r.doBidiReorder(e[a][0]),
                    e[a][1],
                    e[a][2]
                ]) : i.push([
                    r.doBidiReorder(e[a])
                ]);
                t.text = i;
            } else t.text = r.doBidiReorder(e);
            r.setOptions({
                isInputVisual: !0
            });
        }
    ]);
}(E), E.API.TTFFont = function() {
    function t(t) {
        var e;
        if (this.rawData = t, e = this.contents = new ne(t), this.contents.pos = 4, "ttcf" === e.readString(4)) throw new Error("TTCF not supported.");
        e.pos = 0, this.parse(), this.subset = new Le(this), this.registerTTF();
    }
    return t.open = function(e) {
        return new t(e);
    }, t.prototype.parse = function() {
        return this.directory = new ie(this.contents), this.head = new se(this), this.name = new pe(this), this.cmap = new ue(this), this.toUnicode = {}, this.hhea = new he(this), this.maxp = new ge(this), this.hmtx = new me(this), this.post = new fe(this), this.os2 = new le(this), this.loca = new Ne(this), this.glyf = new be(this), this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender, this.decender = this.os2.exists && this.os2.decender || this.hhea.decender, this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap, this.bbox = [
            this.head.xMin,
            this.head.yMin,
            this.head.xMax,
            this.head.yMax
        ];
    }, t.prototype.registerTTF = function() {
        var t, e, r, n, i;
        if (this.scaleFactor = 1e3 / this.head.unitsPerEm, this.bbox = (function() {
            var e, r, n, i;
            for(i = [], e = 0, r = (n = this.bbox).length; e < r; e++)t = n[e], i.push(Math.round(t * this.scaleFactor));
            return i;
        }).call(this), this.stemV = 0, this.post.exists ? (r = 255 & (n = this.post.italic_angle), 0 != (32768 & (e = n >> 16)) && (e = -(1 + (65535 ^ e))), this.italicAngle = +(e + "." + r)) : this.italicAngle = 0, this.ascender = Math.round(this.ascender * this.scaleFactor), this.decender = Math.round(this.decender * this.scaleFactor), this.lineGap = Math.round(this.lineGap * this.scaleFactor), this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender, this.xHeight = this.os2.exists && this.os2.xHeight || 0, this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8, this.isSerif = 1 === (i = this.familyClass) || 2 === i || 3 === i || 4 === i || 5 === i || 7 === i, this.isScript = 10 === this.familyClass, this.flags = 0, this.post.isFixedPitch && (this.flags |= 1), this.isSerif && (this.flags |= 2), this.isScript && (this.flags |= 8), 0 !== this.italicAngle && (this.flags |= 64), this.flags |= 32, !this.cmap.unicode) throw new Error("No unicode cmap for font");
    }, t.prototype.characterToGlyph = function(t) {
        var e;
        return (null != (e = this.cmap.unicode) ? e.codeMap[t] : void 0) || 0;
    }, t.prototype.widthOfGlyph = function(t) {
        var e;
        return e = 1e3 / this.head.unitsPerEm, this.hmtx.forGlyph(t).advance * e;
    }, t.prototype.widthOfString = function(t, e, r) {
        var n, i, a, o;
        for(a = 0, i = 0, o = (t = "" + t).length; 0 <= o ? i < o : i > o; i = 0 <= o ? ++i : --i)n = t.charCodeAt(i), a += this.widthOfGlyph(this.characterToGlyph(n)) + r * (1e3 / e) || 0;
        return a * (e / 1e3);
    }, t.prototype.lineHeight = function(t, e) {
        var r;
        return null == e && (e = !1), r = e ? this.lineGap : 0, (this.ascender + r - this.decender) / 1e3 * t;
    }, t;
}();
var re, ne = function() {
    function t(t) {
        this.data = null != t ? t : [], this.pos = 0, this.length = this.data.length;
    }
    return t.prototype.readByte = function() {
        return this.data[this.pos++];
    }, t.prototype.writeByte = function(t) {
        return this.data[this.pos++] = t;
    }, t.prototype.readUInt32 = function() {
        return 16777216 * this.readByte() + (this.readByte() << 16) + (this.readByte() << 8) + this.readByte();
    }, t.prototype.writeUInt32 = function(t) {
        return this.writeByte(t >>> 24 & 255), this.writeByte(t >> 16 & 255), this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
    }, t.prototype.readInt32 = function() {
        var t;
        return (t = this.readUInt32()) >= 2147483648 ? t - 4294967296 : t;
    }, t.prototype.writeInt32 = function(t) {
        return t < 0 && (t += 4294967296), this.writeUInt32(t);
    }, t.prototype.readUInt16 = function() {
        return this.readByte() << 8 | this.readByte();
    }, t.prototype.writeUInt16 = function(t) {
        return this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
    }, t.prototype.readInt16 = function() {
        var t;
        return (t = this.readUInt16()) >= 32768 ? t - 65536 : t;
    }, t.prototype.writeInt16 = function(t) {
        return t < 0 && (t += 65536), this.writeUInt16(t);
    }, t.prototype.readString = function(t) {
        var e, r;
        for(r = [], e = 0; 0 <= t ? e < t : e > t; e = 0 <= t ? ++e : --e)r[e] = String.fromCharCode(this.readByte());
        return r.join("");
    }, t.prototype.writeString = function(t) {
        var e, r, n;
        for(n = [], e = 0, r = t.length; 0 <= r ? e < r : e > r; e = 0 <= r ? ++e : --e)n.push(this.writeByte(t.charCodeAt(e)));
        return n;
    }, t.prototype.readShort = function() {
        return this.readInt16();
    }, t.prototype.writeShort = function(t) {
        return this.writeInt16(t);
    }, t.prototype.readLongLong = function() {
        var t, e, r, n, i, a, o, s;
        return t = this.readByte(), e = this.readByte(), r = this.readByte(), n = this.readByte(), i = this.readByte(), a = this.readByte(), o = this.readByte(), s = this.readByte(), 128 & t ? -1 * (72057594037927940 * (255 ^ t) + 281474976710656 * (255 ^ e) + 1099511627776 * (255 ^ r) + 4294967296 * (255 ^ n) + 16777216 * (255 ^ i) + 65536 * (255 ^ a) + 256 * (255 ^ o) + (255 ^ s) + 1) : 72057594037927940 * t + 281474976710656 * e + 1099511627776 * r + 4294967296 * n + 16777216 * i + 65536 * a + 256 * o + s;
    }, t.prototype.writeLongLong = function(t) {
        var e, r;
        return e = Math.floor(t / 4294967296), r = 4294967295 & t, this.writeByte(e >> 24 & 255), this.writeByte(e >> 16 & 255), this.writeByte(e >> 8 & 255), this.writeByte(255 & e), this.writeByte(r >> 24 & 255), this.writeByte(r >> 16 & 255), this.writeByte(r >> 8 & 255), this.writeByte(255 & r);
    }, t.prototype.readInt = function() {
        return this.readInt32();
    }, t.prototype.writeInt = function(t) {
        return this.writeInt32(t);
    }, t.prototype.read = function(t) {
        var e, r;
        for(e = [], r = 0; 0 <= t ? r < t : r > t; r = 0 <= t ? ++r : --r)e.push(this.readByte());
        return e;
    }, t.prototype.write = function(t) {
        var e, r, n, i;
        for(i = [], r = 0, n = t.length; r < n; r++)e = t[r], i.push(this.writeByte(e));
        return i;
    }, t;
}(), ie = function() {
    var t;
    function e(t) {
        var e, r, n;
        for(this.scalarType = t.readInt(), this.tableCount = t.readShort(), this.searchRange = t.readShort(), this.entrySelector = t.readShort(), this.rangeShift = t.readShort(), this.tables = {}, r = 0, n = this.tableCount; 0 <= n ? r < n : r > n; r = 0 <= n ? ++r : --r)e = {
            tag: t.readString(4),
            checksum: t.readInt(),
            offset: t.readInt(),
            length: t.readInt()
        }, this.tables[e.tag] = e;
    }
    return e.prototype.encode = function(e) {
        var r, n, i, a, o, s, c, u, h, l, f, d, p;
        for(p in f = Object.keys(e).length, s = Math.log(2), h = 16 * Math.floor(Math.log(f) / s), a = Math.floor(h / s), u = 16 * f - h, (n = new ne).writeInt(this.scalarType), n.writeShort(f), n.writeShort(h), n.writeShort(a), n.writeShort(u), i = 16 * f, c = n.pos + i, o = null, d = [], e)for(l = e[p], n.writeString(p), n.writeInt(t(l)), n.writeInt(c), n.writeInt(l.length), d = d.concat(l), "head" === p && (o = c), c += l.length; c % 4;)d.push(0), c++;
        return n.write(d), r = 2981146554 - t(n.data), n.pos = o + 8, n.writeUInt32(r), n.data;
    }, t = function(t) {
        var e, r, n, i;
        for(t = ve.call(t); t.length % 4;)t.push(0);
        for(n = new ne(t), r = 0, e = 0, i = t.length; e < i; e = e += 4)r += n.readUInt32();
        return 4294967295 & r;
    }, e;
}(), ae = {}.hasOwnProperty, oe = function(t, e) {
    for(var r in e)ae.call(e, r) && (t[r] = e[r]);
    function n() {
        this.constructor = t;
    }
    return n.prototype = e.prototype, t.prototype = new n, t.__super__ = e.prototype, t;
};
re = function() {
    function t(t) {
        var e;
        this.file = t, e = this.file.directory.tables[this.tag], this.exists = !!e, e && (this.offset = e.offset, this.length = e.length, this.parse(this.file.contents));
    }
    return t.prototype.parse = function() {}, t.prototype.encode = function() {}, t.prototype.raw = function() {
        return this.exists ? (this.file.contents.pos = this.offset, this.file.contents.read(this.length)) : null;
    }, t;
}();
var se = function(t) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "head", e.prototype.parse = function(t) {
        return t.pos = this.offset, this.version = t.readInt(), this.revision = t.readInt(), this.checkSumAdjustment = t.readInt(), this.magicNumber = t.readInt(), this.flags = t.readShort(), this.unitsPerEm = t.readShort(), this.created = t.readLongLong(), this.modified = t.readLongLong(), this.xMin = t.readShort(), this.yMin = t.readShort(), this.xMax = t.readShort(), this.yMax = t.readShort(), this.macStyle = t.readShort(), this.lowestRecPPEM = t.readShort(), this.fontDirectionHint = t.readShort(), this.indexToLocFormat = t.readShort(), this.glyphDataFormat = t.readShort();
    }, e.prototype.encode = function(t) {
        var e;
        return (e = new ne).writeInt(this.version), e.writeInt(this.revision), e.writeInt(this.checkSumAdjustment), e.writeInt(this.magicNumber), e.writeShort(this.flags), e.writeShort(this.unitsPerEm), e.writeLongLong(this.created), e.writeLongLong(this.modified), e.writeShort(this.xMin), e.writeShort(this.yMin), e.writeShort(this.xMax), e.writeShort(this.yMax), e.writeShort(this.macStyle), e.writeShort(this.lowestRecPPEM), e.writeShort(this.fontDirectionHint), e.writeShort(t), e.writeShort(this.glyphDataFormat), e.data;
    }, e;
}(), ce = function() {
    function t(t, e) {
        var r, n, i, a, o, s, c, u, h, l, f, d, p, g, m, v, b;
        switch(this.platformID = t.readUInt16(), this.encodingID = t.readShort(), this.offset = e + t.readInt(), h = t.pos, t.pos = this.offset, this.format = t.readUInt16(), this.length = t.readUInt16(), this.language = t.readUInt16(), this.isUnicode = 3 === this.platformID && 1 === this.encodingID && 4 === this.format || 0 === this.platformID && 4 === this.format, this.codeMap = {}, this.format){
            case 0:
                for(s = 0; s < 256; ++s)this.codeMap[s] = t.readByte();
                break;
            case 4:
                for(f = t.readUInt16(), l = f / 2, t.pos += 6, i = function() {
                    var e, r;
                    for(r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e)r.push(t.readUInt16());
                    return r;
                }(), t.pos += 2, p = function() {
                    var e, r;
                    for(r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e)r.push(t.readUInt16());
                    return r;
                }(), c = function() {
                    var e, r;
                    for(r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e)r.push(t.readUInt16());
                    return r;
                }(), u = function() {
                    var e, r;
                    for(r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e)r.push(t.readUInt16());
                    return r;
                }(), n = (this.length - t.pos + this.offset) / 2, o = function() {
                    var e, r;
                    for(r = [], s = e = 0; 0 <= n ? e < n : e > n; s = 0 <= n ? ++e : --e)r.push(t.readUInt16());
                    return r;
                }(), s = m = 0, b = i.length; m < b; s = ++m)for(g = i[s], r = v = d = p[s]; d <= g ? v <= g : v >= g; r = d <= g ? ++v : --v)0 === u[s] ? a = r + c[s] : 0 !== (a = o[u[s] / 2 + (r - d) - (l - s)] || 0) && (a += c[s]), this.codeMap[r] = 65535 & a;
        }
        t.pos = h;
    }
    return t.encode = function(t, e) {
        var r, n, i, a, o, s, c, u, h, l, f, d, p, g, m, v, b, y, w, N, L, A, x, S, _, P, k, I, F, C, j, O, B, M, E, q, D, R, T, U, z, H, W, V, G, Y;
        switch(I = new ne, a = Object.keys(t).sort(function(t, e) {
            return t - e;
        }), e){
            case "macroman":
                for(p = 0, g = function() {
                    var t = [];
                    for(d = 0; d < 256; ++d)t.push(0);
                    return t;
                }(), v = {
                    0: 0
                }, i = {}, F = 0, B = a.length; F < B; F++)null == v[W = t[n = a[F]]] && (v[W] = ++p), i[n] = {
                    old: t[n],
                    new: v[t[n]]
                }, g[n] = v[t[n]];
                return I.writeUInt16(1), I.writeUInt16(0), I.writeUInt32(12), I.writeUInt16(0), I.writeUInt16(262), I.writeUInt16(0), I.write(g), {
                    charMap: i,
                    subtable: I.data,
                    maxGlyphID: p + 1
                };
            case "unicode":
                for(P = [], h = [], b = 0, v = {}, r = {}, m = c = null, C = 0, M = a.length; C < M; C++)null == v[w = t[n = a[C]]] && (v[w] = ++b), r[n] = {
                    old: w,
                    new: v[w]
                }, o = v[w] - n, null != m && o === c || (m && h.push(m), P.push(n), c = o), m = n;
                for(m && h.push(m), h.push(65535), P.push(65535), S = 2 * (x = P.length), A = 2 * Math.pow(Math.log(x) / Math.LN2, 2), l = Math.log(A / 2) / Math.LN2, L = 2 * x - A, s = [], N = [], f = [], d = j = 0, E = P.length; j < E; d = ++j){
                    if (_ = P[d], u = h[d], 65535 === _) {
                        s.push(0), N.push(0);
                        break;
                    }
                    if (_ - (k = r[_].new) >= 32768) for(s.push(0), N.push(2 * (f.length + x - d)), n = O = _; _ <= u ? O <= u : O >= u; n = _ <= u ? ++O : --O)f.push(r[n].new);
                    else s.push(k - _), N.push(0);
                }
                for(I.writeUInt16(3), I.writeUInt16(1), I.writeUInt32(12), I.writeUInt16(4), I.writeUInt16(16 + 8 * x + 2 * f.length), I.writeUInt16(0), I.writeUInt16(S), I.writeUInt16(A), I.writeUInt16(l), I.writeUInt16(L), z = 0, q = h.length; z < q; z++)n = h[z], I.writeUInt16(n);
                for(I.writeUInt16(0), H = 0, D = P.length; H < D; H++)n = P[H], I.writeUInt16(n);
                for(V = 0, R = s.length; V < R; V++)o = s[V], I.writeUInt16(o);
                for(G = 0, T = N.length; G < T; G++)y = N[G], I.writeUInt16(y);
                for(Y = 0, U = f.length; Y < U; Y++)p = f[Y], I.writeUInt16(p);
                return {
                    charMap: r,
                    subtable: I.data,
                    maxGlyphID: b + 1
                };
        }
    }, t;
}(), ue = function(t) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "cmap", e.prototype.parse = function(t) {
        var e, r, n;
        for(t.pos = this.offset, this.version = t.readUInt16(), n = t.readUInt16(), this.tables = [], this.unicode = null, r = 0; 0 <= n ? r < n : r > n; r = 0 <= n ? ++r : --r)e = new ce(t, this.offset), this.tables.push(e), e.isUnicode && null == this.unicode && (this.unicode = e);
        return !0;
    }, e.encode = function(t, e) {
        var r, n;
        return null == e && (e = "macroman"), r = ce.encode(t, e), (n = new ne).writeUInt16(0), n.writeUInt16(1), r.table = n.data.concat(r.subtable), r;
    }, e;
}(), he = function(t) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "hhea", e.prototype.parse = function(t) {
        return t.pos = this.offset, this.version = t.readInt(), this.ascender = t.readShort(), this.decender = t.readShort(), this.lineGap = t.readShort(), this.advanceWidthMax = t.readShort(), this.minLeftSideBearing = t.readShort(), this.minRightSideBearing = t.readShort(), this.xMaxExtent = t.readShort(), this.caretSlopeRise = t.readShort(), this.caretSlopeRun = t.readShort(), this.caretOffset = t.readShort(), t.pos += 8, this.metricDataFormat = t.readShort(), this.numberOfMetrics = t.readUInt16();
    }, e;
}(), le = function(t) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "OS/2", e.prototype.parse = function(t) {
        if (t.pos = this.offset, this.version = t.readUInt16(), this.averageCharWidth = t.readShort(), this.weightClass = t.readUInt16(), this.widthClass = t.readUInt16(), this.type = t.readShort(), this.ySubscriptXSize = t.readShort(), this.ySubscriptYSize = t.readShort(), this.ySubscriptXOffset = t.readShort(), this.ySubscriptYOffset = t.readShort(), this.ySuperscriptXSize = t.readShort(), this.ySuperscriptYSize = t.readShort(), this.ySuperscriptXOffset = t.readShort(), this.ySuperscriptYOffset = t.readShort(), this.yStrikeoutSize = t.readShort(), this.yStrikeoutPosition = t.readShort(), this.familyClass = t.readShort(), this.panose = function() {
            var e, r;
            for(r = [], e = 0; e < 10; ++e)r.push(t.readByte());
            return r;
        }(), this.charRange = function() {
            var e, r;
            for(r = [], e = 0; e < 4; ++e)r.push(t.readInt());
            return r;
        }(), this.vendorID = t.readString(4), this.selection = t.readShort(), this.firstCharIndex = t.readShort(), this.lastCharIndex = t.readShort(), this.version > 0 && (this.ascent = t.readShort(), this.descent = t.readShort(), this.lineGap = t.readShort(), this.winAscent = t.readShort(), this.winDescent = t.readShort(), this.codePageRange = function() {
            var e, r;
            for(r = [], e = 0; e < 2; e = ++e)r.push(t.readInt());
            return r;
        }(), this.version > 1)) return this.xHeight = t.readShort(), this.capHeight = t.readShort(), this.defaultChar = t.readShort(), this.breakChar = t.readShort(), this.maxContext = t.readShort();
    }, e;
}(), fe = function(t) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "post", e.prototype.parse = function(t) {
        var e, r, n;
        switch(t.pos = this.offset, this.format = t.readInt(), this.italicAngle = t.readInt(), this.underlinePosition = t.readShort(), this.underlineThickness = t.readShort(), this.isFixedPitch = t.readInt(), this.minMemType42 = t.readInt(), this.maxMemType42 = t.readInt(), this.minMemType1 = t.readInt(), this.maxMemType1 = t.readInt(), this.format){
            case 65536:
                break;
            case 131072:
                var i;
                for(r = t.readUInt16(), this.glyphNameIndex = [], i = 0; 0 <= r ? i < r : i > r; i = 0 <= r ? ++i : --i)this.glyphNameIndex.push(t.readUInt16());
                for(this.names = [], n = []; t.pos < this.offset + this.length;)e = t.readByte(), n.push(this.names.push(t.readString(e)));
                return n;
            case 151552:
                return r = t.readUInt16(), this.offsets = t.read(r);
            case 196608:
                break;
            case 262144:
                return this.map = (function() {
                    var e, r, n;
                    for(n = [], i = e = 0, r = this.file.maxp.numGlyphs; 0 <= r ? e < r : e > r; i = 0 <= r ? ++e : --e)n.push(t.readUInt32());
                    return n;
                }).call(this);
        }
    }, e;
}(), de = function(t, e) {
    this.raw = t, this.length = t.length, this.platformID = e.platformID, this.encodingID = e.encodingID, this.languageID = e.languageID;
}, pe = function(t) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "name", e.prototype.parse = function(t) {
        var e, r, n, i, a, o, s, c, u, h, l;
        for(t.pos = this.offset, t.readShort(), e = t.readShort(), o = t.readShort(), r = [], i = 0; 0 <= e ? i < e : i > e; i = 0 <= e ? ++i : --i)r.push({
            platformID: t.readShort(),
            encodingID: t.readShort(),
            languageID: t.readShort(),
            nameID: t.readShort(),
            length: t.readShort(),
            offset: this.offset + o + t.readShort()
        });
        for(s = {}, i = u = 0, h = r.length; u < h; i = ++u)n = r[i], t.pos = n.offset, c = t.readString(n.length), a = new de(c, n), null == s[l = n.nameID] && (s[l] = []), s[n.nameID].push(a);
        this.strings = s, this.copyright = s[0], this.fontFamily = s[1], this.fontSubfamily = s[2], this.uniqueSubfamily = s[3], this.fontName = s[4], this.version = s[5];
        try {
            this.postscriptName = s[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
        } catch (t) {
            this.postscriptName = s[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
        }
        return this.trademark = s[7], this.manufacturer = s[8], this.designer = s[9], this.description = s[10], this.vendorUrl = s[11], this.designerUrl = s[12], this.license = s[13], this.licenseUrl = s[14], this.preferredFamily = s[15], this.preferredSubfamily = s[17], this.compatibleFull = s[18], this.sampleText = s[19];
    }, e;
}(), ge = function(t) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "maxp", e.prototype.parse = function(t) {
        return t.pos = this.offset, this.version = t.readInt(), this.numGlyphs = t.readUInt16(), this.maxPoints = t.readUInt16(), this.maxContours = t.readUInt16(), this.maxCompositePoints = t.readUInt16(), this.maxComponentContours = t.readUInt16(), this.maxZones = t.readUInt16(), this.maxTwilightPoints = t.readUInt16(), this.maxStorage = t.readUInt16(), this.maxFunctionDefs = t.readUInt16(), this.maxInstructionDefs = t.readUInt16(), this.maxStackElements = t.readUInt16(), this.maxSizeOfInstructions = t.readUInt16(), this.maxComponentElements = t.readUInt16(), this.maxComponentDepth = t.readUInt16();
    }, e;
}(), me = function(t) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "hmtx", e.prototype.parse = function(t) {
        var e, r, n, i, a, o, s;
        for(t.pos = this.offset, this.metrics = [], e = 0, o = this.file.hhea.numberOfMetrics; 0 <= o ? e < o : e > o; e = 0 <= o ? ++e : --e)this.metrics.push({
            advance: t.readUInt16(),
            lsb: t.readInt16()
        });
        for(n = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics, this.leftSideBearings = function() {
            var r, i;
            for(i = [], e = r = 0; 0 <= n ? r < n : r > n; e = 0 <= n ? ++r : --r)i.push(t.readInt16());
            return i;
        }(), this.widths = (function() {
            var t, e, r, n;
            for(n = [], t = 0, e = (r = this.metrics).length; t < e; t++)i = r[t], n.push(i.advance);
            return n;
        }).call(this), r = this.widths[this.widths.length - 1], s = [], e = a = 0; 0 <= n ? a < n : a > n; e = 0 <= n ? ++a : --a)s.push(this.widths.push(r));
        return s;
    }, e.prototype.forGlyph = function(t) {
        return t in this.metrics ? this.metrics[t] : {
            advance: this.metrics[this.metrics.length - 1].advance,
            lsb: this.leftSideBearings[t - this.metrics.length]
        };
    }, e;
}(), ve = [].slice, be = function(t) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "glyf", e.prototype.parse = function() {
        return this.cache = {};
    }, e.prototype.glyphFor = function(t) {
        var e, r, n, i, a, o, s, c, u, h;
        return t in this.cache ? this.cache[t] : (i = this.file.loca, e = this.file.contents, r = i.indexOf(t), 0 === (n = i.lengthOf(t)) ? this.cache[t] = null : (e.pos = this.offset + r, a = (o = new ne(e.read(n))).readShort(), c = o.readShort(), h = o.readShort(), s = o.readShort(), u = o.readShort(), this.cache[t] = -1 === a ? new we(o, c, h, s, u) : new ye(o, a, c, h, s, u), this.cache[t]));
    }, e.prototype.encode = function(t, e, r) {
        var n, i, a, o, s;
        for(a = [], i = [], o = 0, s = e.length; o < s; o++)n = t[e[o]], i.push(a.length), n && (a = a.concat(n.encode(r)));
        return i.push(a.length), {
            table: a,
            offsets: i
        };
    }, e;
}(), ye = function() {
    function t(t, e, r, n, i, a) {
        this.raw = t, this.numberOfContours = e, this.xMin = r, this.yMin = n, this.xMax = i, this.yMax = a, this.compound = !1;
    }
    return t.prototype.encode = function() {
        return this.raw.data;
    }, t;
}(), we = function() {
    function t(t, e, r, n, i) {
        var a, o;
        for(this.raw = t, this.xMin = e, this.yMin = r, this.xMax = n, this.yMax = i, this.compound = !0, this.glyphIDs = [], this.glyphOffsets = [], a = this.raw; o = a.readShort(), this.glyphOffsets.push(a.pos), this.glyphIDs.push(a.readUInt16()), 32 & o;)a.pos += 1 & o ? 4 : 2, 128 & o ? a.pos += 8 : 64 & o ? a.pos += 4 : 8 & o && (a.pos += 2);
    }
    return t.prototype.encode = function() {
        var t, e, r;
        for(e = new ne(ve.call(this.raw.data)), t = 0, r = this.glyphIDs.length; t < r; ++t)e.pos = this.glyphOffsets[t];
        return e.data;
    }, t;
}(), Ne = function(t) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "loca", e.prototype.parse = function(t) {
        var e, r;
        return t.pos = this.offset, e = this.file.head.indexToLocFormat, this.offsets = 0 === e ? (function() {
            var e, n;
            for(n = [], r = 0, e = this.length; r < e; r += 2)n.push(2 * t.readUInt16());
            return n;
        }).call(this) : (function() {
            var e, n;
            for(n = [], r = 0, e = this.length; r < e; r += 4)n.push(t.readUInt32());
            return n;
        }).call(this);
    }, e.prototype.indexOf = function(t) {
        return this.offsets[t];
    }, e.prototype.lengthOf = function(t) {
        return this.offsets[t + 1] - this.offsets[t];
    }, e.prototype.encode = function(t, e) {
        for(var r = new Uint32Array(this.offsets.length), n = 0, i = 0, a = 0; a < r.length; ++a)if (r[a] = n, i < e.length && e[i] == a) {
            ++i, r[a] = n;
            var o = this.offsets[a], s = this.offsets[a + 1] - o;
            s > 0 && (n += s);
        }
        for(var c = new Array(4 * r.length), u = 0; u < r.length; ++u)c[4 * u + 3] = 255 & r[u], c[4 * u + 2] = (65280 & r[u]) >> 8, c[4 * u + 1] = (16711680 & r[u]) >> 16, c[4 * u] = (4278190080 & r[u]) >> 24;
        return c;
    }, e;
}(), Le = function() {
    function t(t) {
        this.font = t, this.subset = {}, this.unicodes = {}, this.next = 33;
    }
    return t.prototype.generateCmap = function() {
        var t, e, r, n, i;
        for(e in n = this.font.cmap.tables[0].codeMap, t = {}, i = this.subset)r = i[e], t[e] = n[r];
        return t;
    }, t.prototype.glyphsFor = function(t) {
        var e, r, n, i, a, o, s;
        for(n = {}, a = 0, o = t.length; a < o; a++)n[i = t[a]] = this.font.glyf.glyphFor(i);
        for(i in e = [], n)(null != (r = n[i]) ? r.compound : void 0) && e.push.apply(e, r.glyphIDs);
        if (e.length > 0) for(i in s = this.glyphsFor(e))r = s[i], n[i] = r;
        return n;
    }, t.prototype.encode = function(t, e) {
        var r, n, i, a, o, s, c, u, h, l, f, d, p, g, m;
        for(n in r = ue.encode(this.generateCmap(), "unicode"), a = this.glyphsFor(t), f = {
            0: 0
        }, m = r.charMap)f[(s = m[n]).old] = s.new;
        for(d in l = r.maxGlyphID, a)d in f || (f[d] = l++);
        return u = function(t) {
            var e, r;
            for(e in r = {}, t)r[t[e]] = e;
            return r;
        }(f), h = Object.keys(u).sort(function(t, e) {
            return t - e;
        }), p = function() {
            var t, e, r;
            for(r = [], t = 0, e = h.length; t < e; t++)o = h[t], r.push(u[o]);
            return r;
        }(), i = this.font.glyf.encode(a, p, f), c = this.font.loca.encode(i.offsets, p), g = {
            cmap: this.font.cmap.raw(),
            glyf: i.table,
            loca: c,
            hmtx: this.font.hmtx.raw(),
            hhea: this.font.hhea.raw(),
            maxp: this.font.maxp.raw(),
            post: this.font.post.raw(),
            name: this.font.name.raw(),
            head: this.font.head.encode(e)
        }, this.font.os2.exists && (g["OS/2"] = this.font.os2.raw()), this.font.directory.encode(g);
    }, t;
}();
E.API.PDFObject = function() {
    var t;
    function e() {}
    return t = function(t, e) {
        return (Array(e + 1).join("0") + t).slice(-e);
    }, e.convert = function(r) {
        var n, i, a, o;
        if (Array.isArray(r)) return "[" + (function() {
            var t, i, a;
            for(a = [], t = 0, i = r.length; t < i; t++)n = r[t], a.push(e.convert(n));
            return a;
        })().join(" ") + "]";
        if ("string" == typeof r) return "/" + r;
        if (null != r ? r.isString : void 0) return "(" + r + ")";
        if (r instanceof Date) return "(D:" + t(r.getUTCFullYear(), 4) + t(r.getUTCMonth(), 2) + t(r.getUTCDate(), 2) + t(r.getUTCHours(), 2) + t(r.getUTCMinutes(), 2) + t(r.getUTCSeconds(), 2) + "Z)";
        if ("[object Object]" === ({}).toString.call(r)) {
            for(i in a = [
                "<<"
            ], r)o = r[i], a.push("/" + i + " " + e.convert(o));
            return a.push(">>"), a.join("\n");
        }
        return "" + r;
    }, e;
}();
exports.default = E;

},{"@babel/runtime/helpers/typeof":"jgQjt","fflate":"61VnC","e35ed7d1af132742":"hcCaS","fd4d839f94e36dff":"9qhFR","7ec43201f0dbcdb8":"7VLG2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jgQjt":[function(require,module,exports) {
function _typeof(obj) {
    "@babel/helpers - typeof";
    return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(obj);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"61VnC":[function(require,module,exports) {
// DEFLATE is a complex format; to read this code, you should probably check the RFC first:
// https://tools.ietf.org/html/rfc1951
// You may also wish to take a look at the guide I made about this program:
// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad
// Much of the following code is similar to that of UZIP.js:
// https://github.com/photopea/UZIP.js
// Many optimizations have been made, so the bundle size is ultimately smaller but performance is similar.
// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint
// is better for memory in most engines (I *think*).
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Deflate", ()=>Deflate);
parcelHelpers.export(exports, "AsyncDeflate", ()=>AsyncDeflate);
parcelHelpers.export(exports, "deflate", ()=>deflate);
/**
 * Compresses data with DEFLATE without any wrapper
 * @param data The data to compress
 * @param opts The compression options
 * @returns The deflated version of the data
 */ parcelHelpers.export(exports, "deflateSync", ()=>deflateSync);
parcelHelpers.export(exports, "Inflate", ()=>Inflate);
parcelHelpers.export(exports, "AsyncInflate", ()=>AsyncInflate);
parcelHelpers.export(exports, "inflate", ()=>inflate);
/**
 * Expands DEFLATE data with no wrapper
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */ parcelHelpers.export(exports, "inflateSync", ()=>inflateSync);
parcelHelpers.export(exports, "Gzip", ()=>Gzip);
parcelHelpers.export(exports, "AsyncGzip", ()=>AsyncGzip);
parcelHelpers.export(exports, "gzip", ()=>gzip);
/**
 * Compresses data with GZIP
 * @param data The data to compress
 * @param opts The compression options
 * @returns The gzipped version of the data
 */ parcelHelpers.export(exports, "gzipSync", ()=>gzipSync);
parcelHelpers.export(exports, "Gunzip", ()=>Gunzip);
parcelHelpers.export(exports, "AsyncGunzip", ()=>AsyncGunzip);
parcelHelpers.export(exports, "gunzip", ()=>gunzip);
/**
 * Expands GZIP data
 * @param data The data to decompress
 * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.
 * @returns The decompressed version of the data
 */ parcelHelpers.export(exports, "gunzipSync", ()=>gunzipSync);
parcelHelpers.export(exports, "Zlib", ()=>Zlib);
parcelHelpers.export(exports, "AsyncZlib", ()=>AsyncZlib);
parcelHelpers.export(exports, "zlib", ()=>zlib);
/**
 * Compress data with Zlib
 * @param data The data to compress
 * @param opts The compression options
 * @returns The zlib-compressed version of the data
 */ parcelHelpers.export(exports, "zlibSync", ()=>zlibSync);
parcelHelpers.export(exports, "Unzlib", ()=>Unzlib);
parcelHelpers.export(exports, "AsyncUnzlib", ()=>AsyncUnzlib);
parcelHelpers.export(exports, "unzlib", ()=>unzlib);
/**
 * Expands Zlib data
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */ parcelHelpers.export(exports, "unzlibSync", ()=>unzlibSync);
// Default algorithm for compression (used because having a known output size allows faster decompression)
parcelHelpers.export(exports, "compress", ()=>gzip);
parcelHelpers.export(exports, "AsyncCompress", ()=>AsyncGzip);
// Default algorithm for compression (used because having a known output size allows faster decompression)
parcelHelpers.export(exports, "compressSync", ()=>gzipSync);
parcelHelpers.export(exports, "Compress", ()=>Gzip);
parcelHelpers.export(exports, "Decompress", ()=>Decompress);
parcelHelpers.export(exports, "AsyncDecompress", ()=>AsyncDecompress);
parcelHelpers.export(exports, "decompress", ()=>decompress);
/**
 * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */ parcelHelpers.export(exports, "decompressSync", ()=>decompressSync);
/**
 * Converts a string into a Uint8Array for use with compression/decompression methods
 * @param str The string to encode
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless decoding a binary string.
 * @returns The string encoded in UTF-8/Latin-1 binary
 */ parcelHelpers.export(exports, "strToU8", ()=>strToU8);
/**
 * Converts a Uint8Array to a string
 * @param dat The data to decode to string
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless encoding to binary string.
 * @returns The original UTF-8/Latin-1 string
 */ parcelHelpers.export(exports, "strFromU8", ()=>strFromU8);
parcelHelpers.export(exports, "zip", ()=>zip);
/**
 * Synchronously creates a ZIP file. Prefer using `zip` for better performance
 * with more than one file.
 * @param data The directory structure for the ZIP archive
 * @param opts The main options, merged with per-file options
 * @returns The generated ZIP archive
 */ parcelHelpers.export(exports, "zipSync", ()=>zipSync);
/**
 * Asynchronously decompresses a ZIP archive
 * @param data The raw compressed ZIP file
 * @param cb The callback to call with the decompressed files
 * @returns A function that can be used to immediately terminate the unzipping
 */ parcelHelpers.export(exports, "unzip", ()=>unzip);
/**
 * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better
 * performance with more than one file.
 * @param data The raw compressed ZIP file
 * @returns The decompressed files
 */ parcelHelpers.export(exports, "unzipSync", ()=>unzipSync);
var ch2 = {};
var wk = function(c, id, msg, transfer, cb) {
    var u = ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([
        c
    ], {
        type: "text/javascript"
    })));
    var w = new Worker(u);
    w.onerror = function(e) {
        return cb(e.error, null);
    };
    w.onmessage = function(e) {
        return cb(null, e.data);
    };
    w.postMessage(msg, transfer);
    return w;
};
// aliases for shorter compressed code (most minifers don't do this)
var u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;
// fixed length extra bits
var fleb = new u8([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    /* unused */ 0,
    0,
    /* impossible */ 0
]);
// fixed distance extra bits
// see fleb note
var fdeb = new u8([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    /* unused */ 0,
    0
]);
// code length index map
var clim = new u8([
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
]);
// get base, reverse index map from extra bits
var freb = function(eb, start) {
    var b = new u16(31);
    for(var i = 0; i < 31; ++i)b[i] = start += 1 << eb[i - 1];
    // numbers here are at max 18 bits
    var r = new u32(b[30]);
    for(var i = 1; i < 30; ++i)for(var j = b[i]; j < b[i + 1]; ++j)r[j] = j - b[i] << 5 | i;
    return [
        b,
        r
    ];
};
var _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];
// we can ignore the fact that the other numbers are wrong; they never happen anyway
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];
// map of value to reverse (assuming 16 bits)
var rev = new u16(32768);
for(var i = 0; i < 32768; ++i){
    // reverse table algorithm from SO
    var x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;
    x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;
    x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;
    rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;
}
// create huffman tree from u8 "map": index -> code length for code index
// mb (max bits) must be at most 15
// TODO: optimize/split up?
var hMap = function(cd, mb, r) {
    var s = cd.length;
    // index
    var i = 0;
    // u16 "map": index -> # of codes with bit length = index
    var l = new u16(mb);
    // length of cd must be 288 (total # of codes)
    for(; i < s; ++i)++l[cd[i] - 1];
    // u16 "map": index -> minimum code for bit length = index
    var le = new u16(mb);
    for(i = 0; i < mb; ++i)le[i] = le[i - 1] + l[i - 1] << 1;
    var co;
    if (r) {
        // u16 "map": index -> number of actual bits, symbol for code
        co = new u16(1 << mb);
        // bits to remove for reverser
        var rvb = 15 - mb;
        for(i = 0; i < s; ++i)// ignore 0 lengths
        if (cd[i]) {
            // num encoding both symbol and bits read
            var sv = i << 4 | cd[i];
            // free bits
            var r_1 = mb - cd[i];
            // start value
            var v = le[cd[i] - 1]++ << r_1;
            // m is end value
            for(var m = v | (1 << r_1) - 1; v <= m; ++v)// every 16 bit value starting with the code yields the same result
            co[rev[v] >>> rvb] = sv;
        }
    } else {
        co = new u16(s);
        for(i = 0; i < s; ++i)co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
    }
    return co;
};
// fixed length tree
var flt = new u8(288);
for(var i = 0; i < 144; ++i)flt[i] = 8;
for(var i = 144; i < 256; ++i)flt[i] = 9;
for(var i = 256; i < 280; ++i)flt[i] = 7;
for(var i = 280; i < 288; ++i)flt[i] = 8;
// fixed distance tree
var fdt = new u8(32);
for(var i = 0; i < 32; ++i)fdt[i] = 5;
// fixed length map
var flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);
// fixed distance map
var fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);
// find max of array
var max = function(a) {
    var m = a[0];
    for(var i = 1; i < a.length; ++i)if (a[i] > m) m = a[i];
    return m;
};
// read d, starting at bit p and mask with m
var bits = function(d, p, m) {
    var o = p / 8 >> 0;
    return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
};
// read d, starting at bit p continuing for at least 16 bits
var bits16 = function(d, p) {
    var o = p / 8 >> 0;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
};
// get end of byte
var shft = function(p) {
    return (p / 8 >> 0) + (p & 7 && 1);
};
// typed array slice - allows garbage collector to free original reference,
// while being more compatible than .slice
var slc = function(v, s, e) {
    if (s == null || s < 0) s = 0;
    if (e == null || e > v.length) e = v.length;
    // can't use .constructor in case user-supplied
    var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
    n.set(v.subarray(s, e));
    return n;
};
// expands raw DEFLATE data
var inflt = function(dat, buf, st) {
    // source length
    var sl = dat.length;
    // have to estimate size
    var noBuf = !buf || st;
    // no state
    var noSt = !st || st.i;
    if (!st) st = {};
    // Assumes roughly 33% compression ratio average
    if (!buf) buf = new u8(sl * 3);
    // ensure buffer can fit at least l elements
    var cbuf = function(l) {
        var bl = buf.length;
        // need to increase size to fit
        if (l > bl) {
            // Double or set to necessary, whichever is greater
            var nbuf = new u8(Math.max(bl * 2, l));
            nbuf.set(buf);
            buf = nbuf;
        }
    };
    //  last chunk         bitpos           bytes
    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    // total bits
    var tbts = sl * 8;
    do {
        if (!lm) {
            // BFINAL - this is only 1 when last chunk is next
            st.f = final = bits(dat, pos, 1);
            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
            var type = bits(dat, pos + 1, 3);
            pos += 3;
            if (!type) {
                // go to end of byte boundary
                var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
                if (t > sl) {
                    if (noSt) throw "unexpected EOF";
                    break;
                }
                // ensure size
                if (noBuf) cbuf(bt + l);
                // Copy over uncompressed data
                buf.set(dat.subarray(s, t), bt);
                // Get new bitpos, update byte count
                st.b = bt += l, st.p = pos = t * 8;
                continue;
            } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
            else if (type == 2) {
                //  literal                            lengths
                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
                var tl = hLit + bits(dat, pos + 5, 31) + 1;
                pos += 14;
                // length+distance tree
                var ldt = new u8(tl);
                // code length tree
                var clt = new u8(19);
                for(var i = 0; i < hcLen; ++i)// use index map to get real code
                clt[clim[i]] = bits(dat, pos + i * 3, 7);
                pos += hcLen * 3;
                // code lengths bits
                var clb = max(clt), clbmsk = (1 << clb) - 1;
                if (!noSt && pos + tl * (clb + 7) > tbts) break;
                // code lengths map
                var clm = hMap(clt, clb, 1);
                for(var i = 0; i < tl;){
                    var r = clm[bits(dat, pos, clbmsk)];
                    // bits read
                    pos += r & 15;
                    // symbol
                    var s = r >>> 4;
                    // code length to copy
                    if (s < 16) ldt[i++] = s;
                    else {
                        //  copy   count
                        var c = 0, n = 0;
                        if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
                        else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;
                        else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;
                        while(n--)ldt[i++] = c;
                    }
                }
                //    length tree                 distance tree
                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
                // max length bits
                lbt = max(lt);
                // max dist bits
                dbt = max(dt);
                lm = hMap(lt, lbt, 1);
                dm = hMap(dt, dbt, 1);
            } else throw "invalid block type";
            if (pos > tbts) throw "unexpected EOF";
        }
        // Make sure the buffer can hold this + the largest possible addition
        // Maximum chunk size (practically, theoretically infinite) is 2^17;
        if (noBuf) cbuf(bt + 131072);
        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        var mxa = lbt + dbt + 18;
        while(noSt || pos + mxa < tbts){
            // bits read, code
            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
            pos += c & 15;
            if (pos > tbts) throw "unexpected EOF";
            if (!c) throw "invalid length/literal";
            if (sym < 256) buf[bt++] = sym;
            else if (sym == 256) {
                lm = null;
                break;
            } else {
                var add = sym - 254;
                // no extra bits needed if less
                if (sym > 264) {
                    // index
                    var i = sym - 257, b = fleb[i];
                    add = bits(dat, pos, (1 << b) - 1) + fl[i];
                    pos += b;
                }
                // dist
                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
                if (!d) throw "invalid distance";
                pos += d & 15;
                var dt = fd[dsym];
                if (dsym > 3) {
                    var b = fdeb[dsym];
                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
                }
                if (pos > tbts) throw "unexpected EOF";
                if (noBuf) cbuf(bt + 131072);
                var end = bt + add;
                for(; bt < end; bt += 4){
                    buf[bt] = buf[bt - dt];
                    buf[bt + 1] = buf[bt + 1 - dt];
                    buf[bt + 2] = buf[bt + 2 - dt];
                    buf[bt + 3] = buf[bt + 3 - dt];
                }
                bt = end;
            }
        }
        st.l = lm, st.p = pos, st.b = bt;
        if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    }while (!final);
    return bt == buf.length ? buf : slc(buf, 0, bt);
};
// starting at p, write the minimum number of bits that can hold v to d
var wbits = function(d, p, v) {
    v <<= p & 7;
    var o = p / 8 >> 0;
    d[o] |= v;
    d[o + 1] |= v >>> 8;
};
// starting at p, write the minimum number of bits (>8) that can hold v to d
var wbits16 = function(d, p, v) {
    v <<= p & 7;
    var o = p / 8 >> 0;
    d[o] |= v;
    d[o + 1] |= v >>> 8;
    d[o + 2] |= v >>> 16;
};
// creates code lengths from a frequency table
var hTree = function(d, mb) {
    // Need extra info to make a tree
    var t = [];
    for(var i = 0; i < d.length; ++i)if (d[i]) t.push({
        s: i,
        f: d[i]
    });
    var s = t.length;
    var t2 = t.slice();
    if (!s) return [
        new u8(0),
        0
    ];
    if (s == 1) {
        var v = new u8(t[0].s + 1);
        v[t[0].s] = 1;
        return [
            v,
            1
        ];
    }
    t.sort(function(a, b) {
        return a.f - b.f;
    });
    // after i2 reaches last ind, will be stopped
    // freq must be greater than largest possible number of symbols
    t.push({
        s: -1,
        f: 25001
    });
    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;
    t[0] = {
        s: -1,
        f: l.f + r.f,
        l: l,
        r: r
    };
    // efficient algorithm from UZIP.js
    // i0 is lookbehind, i2 is lookahead - after processing two low-freq
    // symbols that combined have high freq, will start processing i2 (high-freq,
    // non-composite) symbols instead
    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/
    while(i1 != s - 1){
        l = t[t[i0].f < t[i2].f ? i0++ : i2++];
        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
        t[i1++] = {
            s: -1,
            f: l.f + r.f,
            l: l,
            r: r
        };
    }
    var maxSym = t2[0].s;
    for(var i = 1; i < s; ++i)if (t2[i].s > maxSym) maxSym = t2[i].s;
    // code lengths
    var tr = new u16(maxSym + 1);
    // max bits in tree
    var mbt = ln(t[i1 - 1], tr, 0);
    if (mbt > mb) {
        // more algorithms from UZIP.js
        // TODO: find out how this code works (debt)
        //  ind    debt
        var i = 0, dt = 0;
        //    left            cost
        var lft = mbt - mb, cst = 1 << lft;
        t2.sort(function(a, b) {
            return tr[b.s] - tr[a.s] || a.f - b.f;
        });
        for(; i < s; ++i){
            var i2_1 = t2[i].s;
            if (tr[i2_1] > mb) {
                dt += cst - (1 << mbt - tr[i2_1]);
                tr[i2_1] = mb;
            } else break;
        }
        dt >>>= lft;
        while(dt > 0){
            var i2_2 = t2[i].s;
            if (tr[i2_2] < mb) dt -= 1 << mb - tr[i2_2]++ - 1;
            else ++i;
        }
        for(; i >= 0 && dt; --i){
            var i2_3 = t2[i].s;
            if (tr[i2_3] == mb) {
                --tr[i2_3];
                ++dt;
            }
        }
        mbt = mb;
    }
    return [
        new u8(tr),
        mbt
    ];
};
// get the max length and assign length codes
var ln = function(n, l, d) {
    return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;
};
// length codes generation
var lc = function(c) {
    var s = c.length;
    // Note that the semicolon was intentional
    while(s && !c[--s]);
    var cl = new u16(++s);
    //  ind      num         streak
    var cli = 0, cln = c[0], cls = 1;
    var w = function(v) {
        cl[cli++] = v;
    };
    for(var i = 1; i <= s; ++i)if (c[i] == cln && i != s) ++cls;
    else {
        if (!cln && cls > 2) {
            for(; cls > 138; cls -= 138)w(32754);
            if (cls > 2) {
                w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
                cls = 0;
            }
        } else if (cls > 3) {
            w(cln), --cls;
            for(; cls > 6; cls -= 6)w(8304);
            if (cls > 2) w(cls - 3 << 5 | 8208), cls = 0;
        }
        while(cls--)w(cln);
        cls = 1;
        cln = c[i];
    }
    return [
        cl.subarray(0, cli),
        s
    ];
};
// calculate the length of output from tree, code lengths
var clen = function(cf, cl) {
    var l = 0;
    for(var i = 0; i < cl.length; ++i)l += cf[i] * cl[i];
    return l;
};
// writes a fixed block
// returns the new bit pos
var wfblk = function(out, pos, dat) {
    // no need to write 00 as type: TypedArray defaults to 0
    var s = dat.length;
    var o = shft(pos + 2);
    out[o] = s & 255;
    out[o + 1] = s >>> 8;
    out[o + 2] = out[o] ^ 255;
    out[o + 3] = out[o + 1] ^ 255;
    for(var i = 0; i < s; ++i)out[o + i + 4] = dat[i];
    return (o + 4 + s) * 8;
};
// writes a block
var wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
    wbits(out, p++, final);
    ++lf[256];
    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];
    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];
    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];
    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];
    var lcfreq = new u16(19);
    for(var i = 0; i < lclt.length; ++i)lcfreq[lclt[i] & 31]++;
    for(var i = 0; i < lcdt.length; ++i)lcfreq[lcdt[i] & 31]++;
    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];
    var nlcc = 19;
    for(; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc);
    var flen = bl + 5 << 3;
    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);
    if (flen <= ftlen && flen <= dtlen) return wfblk(out, p, dat.subarray(bs, bs + bl));
    var lm, ll, dm, dl;
    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;
    if (dtlen < ftlen) {
        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
        var llm = hMap(lct, mlcb, 0);
        wbits(out, p, nlc - 257);
        wbits(out, p + 5, ndc - 1);
        wbits(out, p + 10, nlcc - 4);
        p += 14;
        for(var i = 0; i < nlcc; ++i)wbits(out, p + 3 * i, lct[clim[i]]);
        p += 3 * nlcc;
        var lcts = [
            lclt,
            lcdt
        ];
        for(var it = 0; it < 2; ++it){
            var clct = lcts[it];
            for(var i = 0; i < clct.length; ++i){
                var len = clct[i] & 31;
                wbits(out, p, llm[len]), p += lct[len];
                if (len > 15) wbits(out, p, clct[i] >>> 5 & 127), p += clct[i] >>> 12;
            }
        }
    } else lm = flm, ll = flt, dm = fdm, dl = fdt;
    for(var i = 0; i < li; ++i)if (syms[i] > 255) {
        var len = syms[i] >>> 18 & 31;
        wbits16(out, p, lm[len + 257]), p += ll[len + 257];
        if (len > 7) wbits(out, p, syms[i] >>> 23 & 31), p += fleb[len];
        var dst = syms[i] & 31;
        wbits16(out, p, dm[dst]), p += dl[dst];
        if (dst > 3) wbits16(out, p, syms[i] >>> 5 & 8191), p += fdeb[dst];
    } else wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];
    wbits16(out, p, lm[256]);
    return p + ll[256];
};
// deflate options (nice << 13) | chain
var deo = /*#__PURE__*/ new u32([
    65540,
    131080,
    131088,
    131104,
    262176,
    1048704,
    1048832,
    2114560,
    2117632
]);
// empty
var et = /*#__PURE__*/ new u8(0);
// compresses data into a raw DEFLATE buffer
var dflt = function(dat, lvl, plvl, pre, post, lst) {
    var s = dat.length;
    var o = new u8(pre + s + 5 * (1 + Math.floor(s / 7000)) + post);
    // writing to this writes to the output buffer
    var w = o.subarray(pre, o.length - post);
    var pos = 0;
    if (!lvl || s < 8) for(var i = 0; i <= s; i += 65535){
        // end
        var e = i + 65535;
        if (e < s) // write full block
        pos = wfblk(w, pos, dat.subarray(i, e));
        else {
            // write final block
            w[i] = lst;
            pos = wfblk(w, pos, dat.subarray(i, s));
        }
    }
    else {
        var opt = deo[lvl - 1];
        var n = opt >>> 13, c = opt & 8191;
        var msk_1 = (1 << plvl) - 1;
        //    prev 2-byte val map    curr 2-byte val map
        var prev = new u16(32768), head = new u16(msk_1 + 1);
        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
        var hsh = function(i) {
            return (dat[i] ^ dat[i + 1] << bs1_1 ^ dat[i + 2] << bs2_1) & msk_1;
        };
        // 24576 is an arbitrary number of maximum symbols per block
        // 424 buffer for last block
        var syms = new u32(25000);
        // length/literal freq   distance freq
        var lf = new u16(288), df = new u16(32);
        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos
        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;
        for(; i < s; ++i){
            // hash value
            var hv = hsh(i);
            // index mod 32768
            var imod = i & 32767;
            // previous index with this value
            var pimod = head[hv];
            prev[imod] = pimod;
            head[hv] = imod;
            // We always should modify head and prev, but only add symbols if
            // this data is not yet processed ("wait" for wait index)
            if (wi <= i) {
                // bytes remaining
                var rem = s - i;
                if ((lc_1 > 7000 || li > 24576) && rem > 423) {
                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
                    li = lc_1 = eb = 0, bs = i;
                    for(var j = 0; j < 286; ++j)lf[j] = 0;
                    for(var j = 0; j < 30; ++j)df[j] = 0;
                }
                //  len    dist   chain
                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;
                if (rem > 2 && hv == hsh(i - dif)) {
                    var maxn = Math.min(n, rem) - 1;
                    var maxd = Math.min(32767, i);
                    // max possible length
                    // not capped at dif because decompressors implement "rolling" index population
                    var ml = Math.min(258, rem);
                    while(dif <= maxd && --ch_1 && imod != pimod){
                        if (dat[i + l] == dat[i + l - dif]) {
                            var nl = 0;
                            for(; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl);
                            if (nl > l) {
                                l = nl, d = dif;
                                // break out early when we reach "nice" (we are satisfied enough)
                                if (nl > maxn) break;
                                // now, find the rarest 2-byte sequence within this
                                // length of literals and search for that instead.
                                // Much faster than just using the start
                                var mmd = Math.min(dif, nl - 2);
                                var md = 0;
                                for(var j = 0; j < mmd; ++j){
                                    var ti = i - dif + j + 32768 & 32767;
                                    var pti = prev[ti];
                                    var cd = ti - pti + 32768 & 32767;
                                    if (cd > md) md = cd, pimod = ti;
                                }
                            }
                        }
                        // check the previous match
                        imod = pimod, pimod = prev[imod];
                        dif += imod - pimod + 32768 & 32767;
                    }
                }
                // d will be nonzero only when a match was found
                if (d) {
                    // store both dist and len data in one Uint32
                    // Make sure this is recognized as a len/dist with 28th bit (2^28)
                    syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];
                    var lin = revfl[l] & 31, din = revfd[d] & 31;
                    eb += fleb[lin] + fdeb[din];
                    ++lf[257 + lin];
                    ++df[din];
                    wi = i + l;
                    ++lc_1;
                } else {
                    syms[li++] = dat[i];
                    ++lf[dat[i]];
                }
            }
        }
        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);
        // this is the easiest way to avoid needing to maintain state
        if (!lst) pos = wfblk(w, pos, et);
    }
    return slc(o, 0, pre + shft(pos) + post);
};
// CRC32 table
var crct = /*#__PURE__*/ function() {
    var t = new u32(256);
    for(var i = 0; i < 256; ++i){
        var c = i, k = 9;
        while(--k)c = (c & 1 && 0xEDB88320) ^ c >>> 1;
        t[i] = c;
    }
    return t;
}();
// CRC32
var crc = function() {
    var c = 0xFFFFFFFF;
    return {
        p: function(d) {
            // closures have awful performance
            var cr = c;
            for(var i = 0; i < d.length; ++i)cr = crct[cr & 255 ^ d[i]] ^ cr >>> 8;
            c = cr;
        },
        d: function() {
            return c ^ 0xFFFFFFFF;
        }
    };
};
// Alder32
var adler = function() {
    var a = 1, b = 0;
    return {
        p: function(d) {
            // closures have awful performance
            var n = a, m = b;
            var l = d.length;
            for(var i = 0; i != l;){
                var e = Math.min(i + 5552, l);
                for(; i < e; ++i)n += d[i], m += n;
                n %= 65521, m %= 65521;
            }
            a = n, b = m;
        },
        d: function() {
            return (a >>> 8 << 16 | (b & 255) << 8 | b >>> 8) + ((a & 255) << 23) * 2;
        }
    };
};
// deflate with opts
var dopt = function(dat, opt, pre, post, st) {
    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st);
};
// Walmart object spread
var mrg = function(a, b) {
    var o = {};
    for(var k in a)o[k] = a[k];
    for(var k in b)o[k] = b[k];
    return o;
};
// worker clone
// This is possibly the craziest part of the entire codebase, despite how simple it may seem.
// The only parameter to this function is a closure that returns an array of variables outside of the function scope.
// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.
// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).
// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.
// This took me three weeks to figure out how to do.
var wcln = function(fn, fnStr, td) {
    var dt = fn();
    var st = fn.toString();
    var ks = st.slice(st.indexOf("[") + 1, st.lastIndexOf("]")).replace(/ /g, "").split(",");
    for(var i = 0; i < dt.length; ++i){
        var v = dt[i], k = ks[i];
        if (typeof v == "function") {
            fnStr += ";" + k + "=";
            var st_1 = v.toString();
            if (v.prototype) {
                // for global objects
                if (st_1.indexOf("[native code]") != -1) {
                    var spInd = st_1.indexOf(" ", 8) + 1;
                    fnStr += st_1.slice(spInd, st_1.indexOf("(", spInd));
                } else {
                    fnStr += st_1;
                    for(var t in v.prototype)fnStr += ";" + k + ".prototype." + t + "=" + v.prototype[t].toString();
                }
            } else fnStr += st_1;
        } else td[k] = v;
    }
    return [
        fnStr,
        td
    ];
};
var ch = [];
// clone bufs
var cbfs = function(v) {
    var tl = [];
    for(var k in v)if (v[k] instanceof u8 || v[k] instanceof u16 || v[k] instanceof u32) tl.push((v[k] = new v[k].constructor(v[k])).buffer);
    return tl;
};
// use a worker to execute code
var wrkr = function(fns, init, id, cb) {
    var _a;
    if (!ch[id]) {
        var fnStr = "", td_1 = {}, m = fns.length - 1;
        for(var i = 0; i < m; ++i)_a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];
        ch[id] = wcln(fns[m], fnStr, td_1);
    }
    var td = mrg({}, ch[id][1]);
    return wk(ch[id][0] + ";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=" + init.toString() + "}", id, td, cbfs(td), cb);
};
// base async inflate fn
var bInflt = function() {
    return [
        u8,
        u16,
        u32,
        fleb,
        fdeb,
        clim,
        fl,
        fd,
        flrm,
        fdrm,
        rev,
        hMap,
        max,
        bits,
        bits16,
        shft,
        slc,
        inflt,
        inflateSync,
        pbf,
        gu8
    ];
};
var bDflt = function() {
    return [
        u8,
        u16,
        u32,
        fleb,
        fdeb,
        clim,
        revfl,
        revfd,
        flm,
        flt,
        fdm,
        fdt,
        rev,
        deo,
        et,
        hMap,
        wbits,
        wbits16,
        hTree,
        ln,
        lc,
        clen,
        wfblk,
        wblk,
        shft,
        slc,
        dflt,
        dopt,
        deflateSync,
        pbf
    ];
};
// gzip extra
var gze = function() {
    return [
        gzh,
        gzhl,
        wbytes,
        crc,
        crct
    ];
};
// gunzip extra
var guze = function() {
    return [
        gzs,
        gzl
    ];
};
// zlib extra
var zle = function() {
    return [
        zlh,
        wbytes,
        adler
    ];
};
// unzlib extra
var zule = function() {
    return [
        zlv
    ];
};
// post buf
var pbf = function(msg) {
    return postMessage(msg, [
        msg.buffer
    ]);
};
// get u8
var gu8 = function(o) {
    return o && o.size && new u8(o.size);
};
// async helper
var cbify = function(dat, opts, fns, init, id, cb) {
    var w = wrkr(fns, init, id, function(err, dat) {
        w.terminate();
        cb(err, dat);
    });
    if (!opts.consume) dat = new u8(dat);
    w.postMessage([
        dat,
        opts
    ], [
        dat.buffer
    ]);
    return function() {
        w.terminate();
    };
};
// auto stream
var astrm = function(strm) {
    strm.ondata = function(dat, final) {
        return postMessage([
            dat,
            final
        ], [
            dat.buffer
        ]);
    };
    return function(ev) {
        return strm.push(ev.data[0], ev.data[1]);
    };
};
// async stream attach
var astrmify = function(fns, strm, opts, init, id) {
    var t;
    var w = wrkr(fns, init, id, function(err, dat) {
        if (err) w.terminate(), strm.ondata.call(strm, err);
        else {
            if (dat[1]) w.terminate();
            strm.ondata.call(strm, err, dat[0], dat[1]);
        }
    });
    w.postMessage(opts);
    strm.push = function(d, f) {
        if (t) throw "stream finished";
        if (!strm.ondata) throw "no stream handler";
        w.postMessage([
            d,
            t = f
        ], [
            d.buffer
        ]);
    };
    strm.terminate = function() {
        w.terminate();
    };
};
// read 2 bytes
var b2 = function(d, b) {
    return d[b] | d[b + 1] << 8;
};
// read 4 bytes
var b4 = function(d, b) {
    return (d[b] | d[b + 1] << 8 | d[b + 2] << 16) + (d[b + 3] << 23) * 2;
};
// write bytes
var wbytes = function(d, b, v) {
    for(; v; ++b)d[b] = v, v >>>= 8;
};
// gzip header
var gzh = function(c, o) {
    var fn = o.filename;
    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix
    if (o.mtime != 0) wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));
    if (fn) {
        c[3] = 8;
        for(var i = 0; i <= fn.length; ++i)c[i + 10] = fn.charCodeAt(i);
    }
};
// gzip footer: -8 to -4 = CRC, -4 to -0 is length
// gzip start
var gzs = function(d) {
    if (d[0] != 31 || d[1] != 139 || d[2] != 8) throw "invalid gzip data";
    var flg = d[3];
    var st = 10;
    if (flg & 4) st += d[10] | (d[11] << 8) + 2;
    for(var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++]);
    return st + (flg & 2);
};
// gzip length
var gzl = function(d) {
    var l = d.length;
    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) + 2 * (d[l - 1] << 23);
};
// gzip header length
var gzhl = function(o) {
    return 10 + (o.filename && o.filename.length + 1 || 0);
};
// zlib header
var zlh = function(c, o) {
    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
    c[0] = 120, c[1] = fl << 6 | (fl ? 32 - 2 * fl : 1);
};
// zlib valid
var zlv = function(d) {
    if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw "invalid zlib data";
    if (d[1] & 32) throw "invalid zlib data: preset dictionaries not supported";
};
function AsyncCmpStrm(opts, cb) {
    if (!cb && typeof opts == "function") cb = opts, opts = {};
    this.ondata = cb;
    return opts;
}
// zlib footer: -4 to -0 is Adler32
/**
 * Streaming DEFLATE compression
 */ var Deflate = /*#__PURE__*/ function() {
    function Deflate(opts, cb) {
        if (!cb && typeof opts == "function") cb = opts, opts = {};
        this.ondata = cb;
        this.o = opts || {};
    }
    Deflate.prototype.p = function(c, f) {
        this.ondata(dopt(c, this.o, 0, 0, !f), f);
    };
    /**
     * Pushes a chunk to be deflated
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Deflate.prototype.push = function(chunk, final) {
        if (this.d) throw "stream finished";
        if (!this.ondata) throw "no stream handler";
        this.d = final;
        this.p(chunk, final || false);
    };
    return Deflate;
}();
/**
 * Asynchronous streaming DEFLATE compression
 */ var AsyncDeflate = /*#__PURE__*/ function() {
    function AsyncDeflate(opts, cb) {
        astrmify([
            bDflt,
            function() {
                return [
                    astrm,
                    Deflate
                ];
            }
        ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
            var strm = new Deflate(ev.data);
            onmessage = astrm(strm);
        }, 6);
    }
    return AsyncDeflate;
}();
function deflate(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != "function") throw "no callback";
    return cbify(data, opts, [
        bDflt
    ], function(ev) {
        return pbf(deflateSync(ev.data[0], ev.data[1]));
    }, 0, cb);
}
function deflateSync(data, opts) {
    if (opts === void 0) opts = {};
    return dopt(data, opts, 0, 0);
}
/**
 * Streaming DEFLATE decompression
 */ var Inflate = /*#__PURE__*/ function() {
    /**
     * Creates an inflation stream
     * @param cb The callback to call whenever data is inflated
     */ function Inflate(cb) {
        this.s = {};
        this.p = new u8(0);
        this.ondata = cb;
    }
    Inflate.prototype.e = function(c) {
        if (this.d) throw "stream finished";
        if (!this.ondata) throw "no stream handler";
        var l = this.p.length;
        var n = new u8(l + c.length);
        n.set(this.p), n.set(c, l), this.p = n;
    };
    Inflate.prototype.c = function(final) {
        this.d = this.s.i = final || false;
        var bts = this.s.b;
        var dt = inflt(this.p, this.o, this.s);
        this.ondata(slc(dt, bts, this.s.b), this.d);
        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
        this.p = slc(this.p, this.s.p / 8 >> 0), this.s.p &= 7;
    };
    /**
     * Pushes a chunk to be inflated
     * @param chunk The chunk to push
     * @param final Whether this is the final chunk
     */ Inflate.prototype.push = function(chunk, final) {
        this.e(chunk), this.c(final);
    };
    return Inflate;
}();
/**
 * Asynchronous streaming DEFLATE decompression
 */ var AsyncInflate = /*#__PURE__*/ function() {
    /**
     * Creates an asynchronous inflation stream
     * @param cb The callback to call whenever data is deflated
     */ function AsyncInflate(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            function() {
                return [
                    astrm,
                    Inflate
                ];
            }
        ], this, 0, function() {
            var strm = new Inflate();
            onmessage = astrm(strm);
        }, 7);
    }
    return AsyncInflate;
}();
function inflate(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != "function") throw "no callback";
    return cbify(data, opts, [
        bInflt
    ], function(ev) {
        return pbf(inflateSync(ev.data[0], gu8(ev.data[1])));
    }, 1, cb);
}
function inflateSync(data, out) {
    return inflt(data, out);
}
// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.
/**
 * Streaming GZIP compression
 */ var Gzip = /*#__PURE__*/ function() {
    function Gzip(opts, cb) {
        this.c = crc();
        this.l = 0;
        this.v = 1;
        Deflate.call(this, opts, cb);
    }
    /**
     * Pushes a chunk to be GZIPped
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Gzip.prototype.push = function(chunk, final) {
        Deflate.prototype.push.call(this, chunk, final);
    };
    Gzip.prototype.p = function(c, f) {
        this.c.p(c);
        this.l += c.length;
        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);
        if (this.v) gzh(raw, this.o), this.v = 0;
        if (f) wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);
        this.ondata(raw, f);
    };
    return Gzip;
}();
/**
 * Asynchronous streaming GZIP compression
 */ var AsyncGzip = /*#__PURE__*/ function() {
    function AsyncGzip(opts, cb) {
        astrmify([
            bDflt,
            gze,
            function() {
                return [
                    astrm,
                    Deflate,
                    Gzip
                ];
            }
        ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
            var strm = new Gzip(ev.data);
            onmessage = astrm(strm);
        }, 8);
    }
    return AsyncGzip;
}();
function gzip(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != "function") throw "no callback";
    return cbify(data, opts, [
        bDflt,
        gze,
        function() {
            return [
                gzipSync
            ];
        }
    ], function(ev) {
        return pbf(gzipSync(ev.data[0], ev.data[1]));
    }, 2, cb);
}
function gzipSync(data, opts) {
    if (opts === void 0) opts = {};
    var c = crc(), l = data.length;
    c.p(data);
    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;
    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;
}
/**
 * Streaming GZIP decompression
 */ var Gunzip = /*#__PURE__*/ function() {
    /**
     * Creates a GUNZIP stream
     * @param cb The callback to call whenever data is inflated
     */ function Gunzip(cb) {
        this.v = 1;
        Inflate.call(this, cb);
    }
    /**
     * Pushes a chunk to be GUNZIPped
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Gunzip.prototype.push = function(chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        if (this.v) {
            var s = gzs(this.p);
            if (s >= this.p.length && !final) return;
            this.p = this.p.subarray(s), this.v = 0;
        }
        if (final) {
            if (this.p.length < 8) throw "invalid gzip stream";
            this.p = this.p.subarray(0, -8);
        }
        // necessary to prevent TS from using the closure value
        // This allows for workerization to function correctly
        Inflate.prototype.c.call(this, final);
    };
    return Gunzip;
}();
/**
 * Asynchronous streaming GZIP decompression
 */ var AsyncGunzip = /*#__PURE__*/ function() {
    /**
     * Creates an asynchronous GUNZIP stream
     * @param cb The callback to call whenever data is deflated
     */ function AsyncGunzip(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            guze,
            function() {
                return [
                    astrm,
                    Inflate,
                    Gunzip
                ];
            }
        ], this, 0, function() {
            var strm = new Gunzip();
            onmessage = astrm(strm);
        }, 9);
    }
    return AsyncGunzip;
}();
function gunzip(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != "function") throw "no callback";
    return cbify(data, opts, [
        bInflt,
        guze,
        function() {
            return [
                gunzipSync
            ];
        }
    ], function(ev) {
        return pbf(gunzipSync(ev.data[0]));
    }, 3, cb);
}
function gunzipSync(data, out) {
    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));
}
/**
 * Streaming Zlib compression
 */ var Zlib = /*#__PURE__*/ function() {
    function Zlib(opts, cb) {
        this.c = adler();
        this.v = 1;
        Deflate.call(this, opts, cb);
    }
    /**
     * Pushes a chunk to be zlibbed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Zlib.prototype.push = function(chunk, final) {
        Deflate.prototype.push.call(this, chunk, final);
    };
    Zlib.prototype.p = function(c, f) {
        this.c.p(c);
        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);
        if (this.v) zlh(raw, this.o), this.v = 0;
        if (f) wbytes(raw, raw.length - 4, this.c.d());
        this.ondata(raw, f);
    };
    return Zlib;
}();
/**
 * Asynchronous streaming Zlib compression
 */ var AsyncZlib = /*#__PURE__*/ function() {
    function AsyncZlib(opts, cb) {
        astrmify([
            bDflt,
            zle,
            function() {
                return [
                    astrm,
                    Deflate,
                    Zlib
                ];
            }
        ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
            var strm = new Zlib(ev.data);
            onmessage = astrm(strm);
        }, 10);
    }
    return AsyncZlib;
}();
function zlib(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != "function") throw "no callback";
    return cbify(data, opts, [
        bDflt,
        zle,
        function() {
            return [
                zlibSync
            ];
        }
    ], function(ev) {
        return pbf(zlibSync(ev.data[0], ev.data[1]));
    }, 4, cb);
}
function zlibSync(data, opts) {
    if (opts === void 0) opts = {};
    var a = adler();
    a.p(data);
    var d = dopt(data, opts, 2, 4);
    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;
}
/**
 * Streaming Zlib decompression
 */ var Unzlib = /*#__PURE__*/ function() {
    /**
     * Creates a Zlib decompression stream
     * @param cb The callback to call whenever data is inflated
     */ function Unzlib(cb) {
        this.v = 1;
        Inflate.call(this, cb);
    }
    /**
     * Pushes a chunk to be unzlibbed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Unzlib.prototype.push = function(chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        if (this.v) {
            if (this.p.length < 2 && !final) return;
            this.p = this.p.subarray(2), this.v = 0;
        }
        if (final) {
            if (this.p.length < 4) throw "invalid zlib stream";
            this.p = this.p.subarray(0, -4);
        }
        // necessary to prevent TS from using the closure value
        // This allows for workerization to function correctly
        Inflate.prototype.c.call(this, final);
    };
    return Unzlib;
}();
/**
 * Asynchronous streaming Zlib decompression
 */ var AsyncUnzlib = /*#__PURE__*/ function() {
    /**
     * Creates an asynchronous Zlib decompression stream
     * @param cb The callback to call whenever data is deflated
     */ function AsyncUnzlib(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            zule,
            function() {
                return [
                    astrm,
                    Inflate,
                    Unzlib
                ];
            }
        ], this, 0, function() {
            var strm = new Unzlib();
            onmessage = astrm(strm);
        }, 11);
    }
    return AsyncUnzlib;
}();
function unzlib(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != "function") throw "no callback";
    return cbify(data, opts, [
        bInflt,
        zule,
        function() {
            return [
                unzlibSync
            ];
        }
    ], function(ev) {
        return pbf(unzlibSync(ev.data[0], gu8(ev.data[1])));
    }, 5, cb);
}
function unzlibSync(data, out) {
    return inflt((zlv(data), data.subarray(2, -4)), out);
}
/**
 * Streaming GZIP, Zlib, or raw DEFLATE decompression
 */ var Decompress = /*#__PURE__*/ function() {
    /**
     * Creates a decompression stream
     * @param cb The callback to call whenever data is decompressed
     */ function Decompress(cb) {
        this.G = Gunzip;
        this.I = Inflate;
        this.Z = Unzlib;
        this.ondata = cb;
    }
    /**
     * Pushes a chunk to be decompressed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Decompress.prototype.push = function(chunk, final) {
        if (!this.ondata) throw "no stream handler";
        if (!this.s) {
            if (this.p && this.p.length) {
                var n = new u8(this.p.length + chunk.length);
                n.set(this.p), n.set(chunk, this.p.length);
            } else this.p = chunk;
            if (this.p.length > 2) {
                var _this_1 = this;
                var cb = function() {
                    _this_1.ondata.apply(_this_1, arguments);
                };
                this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(cb) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(cb) : new this.Z(cb);
                this.s.push(this.p, final);
                this.p = null;
            }
        } else this.s.push(chunk, final);
    };
    return Decompress;
}();
/**
 * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression
 */ var AsyncDecompress = /*#__PURE__*/ function() {
    /**
   * Creates an asynchronous decompression stream
   * @param cb The callback to call whenever data is decompressed
   */ function AsyncDecompress(cb) {
        this.G = AsyncGunzip;
        this.I = AsyncInflate;
        this.Z = AsyncUnzlib;
        this.ondata = cb;
    }
    /**
     * Pushes a chunk to be decompressed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ AsyncDecompress.prototype.push = function(chunk, final) {
        Decompress.prototype.push.call(this, chunk, final);
    };
    return AsyncDecompress;
}();
function decompress(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != "function") throw "no callback";
    return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzip(data, opts, cb) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflate(data, opts, cb) : unzlib(data, opts, cb);
}
function decompressSync(data, out) {
    return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzipSync(data, out) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflateSync(data, out) : unzlibSync(data, out);
}
// flatten a directory structure
var fltn = function(d, p, t, o) {
    for(var k in d){
        var val = d[k], n = p + k;
        if (val instanceof u8) t[n] = [
            val,
            o
        ];
        else if (Array.isArray(val)) t[n] = [
            val[0],
            mrg(o, val[1])
        ];
        else fltn(val, n + "/", t, o);
    }
};
function strToU8(str, latin1) {
    var l = str.length;
    if (!latin1 && typeof TextEncoder != "undefined") return new TextEncoder().encode(str);
    var ar = new u8(str.length + (str.length >>> 1));
    var ai = 0;
    var w = function(v) {
        ar[ai++] = v;
    };
    for(var i = 0; i < l; ++i){
        if (ai + 5 > ar.length) {
            var n = new u8(ai + 8 + (l - i << 1));
            n.set(ar);
            ar = n;
        }
        var c = str.charCodeAt(i);
        if (c < 128 || latin1) w(c);
        else if (c < 2048) w(192 | c >>> 6), w(128 | c & 63);
        else if (c > 55295 && c < 57344) c = 65536 + (c & 1047552) | str.charCodeAt(++i) & 1023, w(240 | c >>> 18), w(128 | c >>> 12 & 63), w(128 | c >>> 6 & 63), w(128 | c & 63);
        else w(224 | c >>> 12), w(128 | c >>> 6 & 63), w(128 | c & 63);
    }
    return slc(ar, 0, ai);
}
function strFromU8(dat, latin1) {
    var r = "";
    if (!latin1 && typeof TextDecoder != "undefined") return new TextDecoder().decode(dat);
    for(var i = 0; i < dat.length;){
        var c = dat[i++];
        if (c < 128 || latin1) r += String.fromCharCode(c);
        else if (c < 224) r += String.fromCharCode((c & 31) << 6 | dat[i++] & 63);
        else if (c < 240) r += String.fromCharCode((c & 15) << 12 | (dat[i++] & 63) << 6 | dat[i++] & 63);
        else c = ((c & 15) << 18 | (dat[i++] & 63) << 12 | (dat[i++] & 63) << 6 | dat[i++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);
    }
    return r;
}
// skip local zip header
var slzh = function(d, b) {
    return b + 30 + b2(d, b + 26) + b2(d, b + 28);
};
// read zip header
var zh = function(d, b, z) {
    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl;
    var _a = z ? z64e(d, es) : [
        b4(d, b + 20),
        b4(d, b + 24),
        b4(d, b + 42)
    ], sc = _a[0], su = _a[1], off = _a[2];
    return [
        b2(d, b + 10),
        sc,
        su,
        fn,
        es + b2(d, b + 30) + b2(d, b + 32),
        off
    ];
};
// read zip64 extra field
var z64e = function(d, b) {
    for(; b2(d, b) != 1; b += 4 + b2(d, b + 2));
    return [
        b4(d, b + 12),
        b4(d, b + 4),
        b4(d, b + 20)
    ];
};
// write zip header
var wzh = function(d, b, c, cmp, su, fn, u, o, ce, t) {
    var fl = fn.length, l = cmp.length;
    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;
    if (ce != null) d[b] = 20, b += 2;
    d[b] = 20, b += 2; // spec compliance? what's that?
    d[b++] = t == 8 && (o.level == 1 ? 6 : o.level < 6 ? 4 : o.level == 9 ? 2 : 0), d[b++] = u && 8;
    d[b] = t, b += 2;
    var dt = new Date(o.mtime || Date.now()), y = dt.getFullYear() - 1980;
    if (y < 0 || y > 119) throw "date not in range 1980-2099";
    wbytes(d, b, (y << 24) * 2 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >>> 1);
    b += 4;
    wbytes(d, b, c);
    wbytes(d, b + 4, l);
    wbytes(d, b + 8, su);
    wbytes(d, b + 12, fl), b += 16; // skip extra field, comment
    if (ce != null) wbytes(d, b += 10, ce), b += 4;
    d.set(fn, b);
    b += fl;
    if (ce == null) d.set(cmp, b);
};
// write zip footer (end of central directory)
var wzf = function(o, b, c, d, e) {
    wbytes(o, b, 0x6054B50); // skip disk
    wbytes(o, b + 8, c);
    wbytes(o, b + 10, c);
    wbytes(o, b + 12, d);
    wbytes(o, b + 16, e);
};
function zip(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != "function") throw "no callback";
    var r = {};
    fltn(data, "", r, opts);
    var k = Object.keys(r);
    var lft = k.length, o = 0, tot = 0;
    var slft = lft, files = new Array(lft);
    var term = [];
    var tAll = function() {
        for(var i = 0; i < term.length; ++i)term[i]();
    };
    var cbf = function() {
        var out = new u8(tot + 22), oe = o, cdl = tot - o;
        tot = 0;
        for(var i = 0; i < slft; ++i){
            var f = files[i];
            try {
                wzh(out, tot, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
                wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, tot, f.t), o += 46 + f.n.length, tot += 30 + f.n.length + f.d.length;
            } catch (e) {
                return cb(e, null);
            }
        }
        wzf(out, o, files.length, cdl, oe);
        cb(null, out);
    };
    if (!lft) cbf();
    var _loop_1 = function(i) {
        var fn = k[i];
        var _a = r[fn], file = _a[0], p = _a[1];
        var c = crc(), m = file.length;
        c.p(file);
        var n = strToU8(fn), s = n.length;
        var t = p.level == 0 ? 0 : 8;
        var cbl = function(e, d) {
            if (e) {
                tAll();
                cb(e, null);
            } else {
                var l = d.length;
                files[i] = {
                    t: t,
                    d: d,
                    m: m,
                    c: c.d(),
                    u: fn.length != l,
                    n: n,
                    p: p
                };
                o += 30 + s + l;
                tot += 76 + 2 * s + l;
                if (!--lft) cbf();
            }
        };
        if (n.length > 65535) cbl("filename too long", null);
        if (!t) cbl(null, file);
        else if (m < 160000) try {
            cbl(null, deflateSync(file, p));
        } catch (e) {
            cbl(e, null);
        }
        else term.push(deflate(file, p, cbl));
    };
    // Cannot use lft because it can decrease
    for(var i = 0; i < slft; ++i)_loop_1(i);
    return tAll;
}
function zipSync(data, opts) {
    if (opts === void 0) opts = {};
    var r = {};
    var files = [];
    fltn(data, "", r, opts);
    var o = 0;
    var tot = 0;
    for(var fn in r){
        var _a = r[fn], file = _a[0], p = _a[1];
        var t = p.level == 0 ? 0 : 8;
        var n = strToU8(fn), s = n.length;
        if (n.length > 65535) throw "filename too long";
        var d = t ? deflateSync(file, p) : file, l = d.length;
        var c = crc();
        c.p(file);
        files.push({
            t: t,
            d: d,
            m: file.length,
            c: c.d(),
            u: fn.length != s,
            n: n,
            o: o,
            p: p
        });
        o += 30 + s + l;
        tot += 76 + 2 * s + l;
    }
    var out = new u8(tot + 22), oe = o, cdl = tot - o;
    for(var i = 0; i < files.length; ++i){
        var f = files[i];
        wzh(out, f.o, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
        wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, f.o, f.t), o += 46 + f.n.length;
    }
    wzf(out, o, files.length, cdl, oe);
    return out;
}
function unzip(data, cb) {
    if (typeof cb != "function") throw "no callback";
    var term = [];
    var tAll = function() {
        for(var i = 0; i < term.length; ++i)term[i]();
    };
    var files = {};
    var e = data.length - 22;
    for(; b4(data, e) != 0x6054B50; --e)if (!e || data.length - e > 65558) {
        cb("invalid zip file", null);
        return;
    }
    var lft = b2(data, e + 8);
    if (!lft) cb(null, {});
    var c = lft;
    var o = b4(data, e + 16);
    var z = o == 4294967295;
    if (z) {
        e = b4(data, e - 12);
        if (b4(data, e) != 0x6064B50) throw "invalid zip file";
        c = lft = b4(data, e + 32);
        o = b4(data, e + 48);
    }
    var _loop_2 = function(i) {
        var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);
        o = no;
        var cbl = function(e, d) {
            if (e) {
                tAll();
                cb(e, null);
            } else {
                files[fn] = d;
                if (!--lft) cb(null, files);
            }
        };
        if (!c_1) cbl(null, slc(data, b, b + sc));
        else if (c_1 == 8) {
            var infl = data.subarray(b, b + sc);
            if (sc < 320000) try {
                cbl(null, inflateSync(infl, new u8(su)));
            } catch (e) {
                cbl(e, null);
            }
            else term.push(inflate(infl, {
                size: su
            }, cbl));
        } else cbl("unknown compression type " + c_1, null);
    };
    for(var i = 0; i < c; ++i)_loop_2(i);
    return tAll;
}
function unzipSync(data) {
    var files = {};
    var e = data.length - 22;
    for(; b4(data, e) != 0x6054B50; --e){
        if (!e || data.length - e > 65558) throw "invalid zip file";
    }
    var c = b2(data, e + 8);
    if (!c) return {};
    var o = b4(data, e + 16);
    var z = o == 4294967295;
    if (z) {
        e = b4(data, e - 12);
        if (b4(data, e) != 0x6064B50) throw "invalid zip file";
        c = b4(data, e + 32);
        o = b4(data, e + 48);
    }
    for(var i = 0; i < c; ++i){
        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);
        o = no;
        if (!c_2) files[fn] = slc(data, b, b + sc);
        else if (c_2 == 8) files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));
        else throw "unknown compression type " + c_2;
    }
    return files;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hcCaS":[function(require,module,exports) {
module.exports = require("d900e668be6317d7")(require("d16268a74f5ef23a").getBundleURL("aplqo") + "html2canvas.b72f68b0.js" + "?" + Date.now()).catch((err)=>{
    delete module.bundle.cache[module.id];
    throw err;
}).then(()=>module.bundle.root("j1W5C"));

},{"d900e668be6317d7":"61B45","d16268a74f5ef23a":"lgJ39"}],"61B45":[function(require,module,exports) {
"use strict";
var cacheLoader = require("ca2a84f7fa4a3bb0");
module.exports = cacheLoader(function(bundle) {
    return new Promise(function(resolve, reject) {
        // Don't insert the same script twice (e.g. if it was already in the HTML)
        var existingScripts = document.getElementsByTagName("script");
        if ([].concat(existingScripts).some(function isCurrentBundle(script) {
            return script.src === bundle;
        })) {
            resolve();
            return;
        }
        var preloadLink = document.createElement("link");
        preloadLink.href = bundle;
        preloadLink.rel = "preload";
        preloadLink.as = "script";
        document.head.appendChild(preloadLink);
        var script = document.createElement("script");
        script.async = true;
        script.type = "text/javascript";
        script.src = bundle;
        script.onerror = function(e) {
            var error = new TypeError("Failed to fetch dynamically imported module: ".concat(bundle, ". Error: ").concat(e.message));
            script.onerror = script.onload = null;
            script.remove();
            reject(error);
        };
        script.onload = function() {
            script.onerror = script.onload = null;
            resolve();
        };
        document.getElementsByTagName("head")[0].appendChild(script);
    });
});

},{"ca2a84f7fa4a3bb0":"j49pS"}],"j49pS":[function(require,module,exports) {
"use strict";
var cachedBundles = {};
var cachedPreloads = {};
var cachedPrefetches = {};
function getCache(type) {
    switch(type){
        case "preload":
            return cachedPreloads;
        case "prefetch":
            return cachedPrefetches;
        default:
            return cachedBundles;
    }
}
module.exports = function(loader, type) {
    return function(bundle) {
        var cache = getCache(type);
        if (cache[bundle]) return cache[bundle];
        return cache[bundle] = loader.apply(null, arguments).catch(function(e) {
            delete cache[bundle];
            throw e;
        });
    };
};

},{}],"lgJ39":[function(require,module,exports) {
"use strict";
var bundleURL = {};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ("" + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return "/";
}
function getBaseURL(url) {
    return ("" + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/, "$1") + "/";
}
// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ("" + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^/]+/);
    if (!matches) throw new Error("Origin not found");
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"9qhFR":[function(require,module,exports) {
module.exports = require("d35e66357950b155")(require("8305c677feb817d5").getBundleURL("aplqo") + "purify.08e422dd.js" + "?" + Date.now()).catch((err)=>{
    delete module.bundle.cache[module.id];
    throw err;
}).then(()=>module.bundle.root("9Kzno"));

},{"d35e66357950b155":"61B45","8305c677feb817d5":"lgJ39"}],"7VLG2":[function(require,module,exports) {
module.exports = require("a7d23e9f7c974bd7")(require("b60defb70613e8d5").getBundleURL("aplqo") + "index.es.2a2cee94.js" + "?" + Date.now()).catch((err)=>{
    delete module.bundle.cache[module.id];
    throw err;
}).then(()=>module.bundle.root("gt0ZF"));

},{"a7d23e9f7c974bd7":"61B45","b60defb70613e8d5":"lgJ39"}],"8IKr0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fileUploadJs = require("../../utilities/formHelpers/fileUpload.js");
var _fileUploadJsDefault = parcelHelpers.interopDefault(_fileUploadJs);
var _helpersJs = require("../../utilities/helpers.js");
class RegisterDevice extends (0, _fileUploadJsDefault.default) {
    // _parentElement = document.querySelector('.register-device');
    initialize(previewHandlers) {
        this.type = "register-device";
        // this._previewType = ['model-name'];
        this.initializeFile();
        // Fields for options
        this._newOptionField = this._form.querySelector(".form__group--vendor-new");
        this._existingOptionField = this._form.querySelector(".form__group--vendor");
        // for toggling between new device and existing device
        this._newOptionBtn = this._form.querySelector(".btn-text--vendor-new");
        this._existingOptionBtn = this._form.querySelector(".btn-text--vendor");
        this._toggleFieldsOptionsArray = [
            this._newOptionField,
            this._existingOptionField
        ];
        this._newInput = this._form.querySelector(".form__input--vendor-new");
        this._existingInput = this._form.querySelector(".form__input--vendor");
        this._addHandlerNew();
        this._addHandlerExisting();
        // EXCEL
        this._snField = this._form.querySelector(".form__group--serial-number-new");
        this._atField = this._form.querySelector(".form__group--asset-tag-new");
        this._rmField = this._form.querySelector(`.form__group--remarks-new`);
        this._toggleFieldsExcelArray.push(this._snField, this._atField, this._rmField);
        this._elAfterExcel = this._form.querySelector(".form__group--submit--register-device");
        this._headers = [
            "Serial Number",
            "Asset Tag",
            "Remarks"
        ];
        // ACTUAL INPUTS FOR VALIDATION
        this._mn = this._form.querySelector(".form__input--model-name");
        this._vendor = this._form.querySelector(".form__input--vendor");
        this._vendorNew = this._form.querySelector(".form__input--vendor-new");
        this._sn = this._form.querySelector(".form__input--serial-number-new");
        this._at = this._form.querySelector(".form__input--asset-tag-new");
        this._rm = this._form.querySelector(".form__input--remarks-new");
        this._resetValuesArray = [
            this._sn,
            this._at,
            this._rm
        ];
        this._valueNew = this._form.querySelector(".form__input--model-value-new");
        // PREVIEW SEARCH
        this._previewArray = [
            {
                "type": "model-name",
                "input": this._mn,
                "typeName": "Model Name"
            }
        ];
        this._initializePreview(previewHandlers);
        // SUBMIT
        this._submitBtn = this._form.querySelector(".btn--register-device");
    }
    _generatePreviewMarkup() {
        console.log(this._results);
        return this._results.map((result)=>`<div class="preview__result preview--${this._focusedInput}-component" data-preview-value="${result["modelId"]}">
            <h3 class="preview__value">${result["modelName"]}</h3>
            <h4>${result["deviceType"]}</h4>
        </div><hr>`).join("");
    }
    // Check for validation
    getData() {
        // no mn
        let valid = true;
        let submitArr = [];
        let innerArr = [];
        const defaultSelect = this._vendor.options[0].textContent;
        // model, sn, at
        for (const state of this._previewInputStateArr){
            console.log(state.previewValue);
            if (state.previewValue === "") {
                valid = false;
                this.renderError(`${state.typeName} not allowed!`);
                return;
            } else submitArr.push(state.previewValue);
        }
        console.log(this._sn.value, this._at.value);
        valid = (0, _helpersJs.oldNewCheck).call(this, defaultSelect, this._vendor, this._vendorNew, "Vendor");
        if (!valid) return;
        // no sn
        if (!this._sn.value) {
            this.renderError("Serial Number cannot be blank!");
            valid = false;
            return;
        }
        // no at
        if (!this._at.value) {
            this.renderError("Asset Tag cannot be blank!");
            valid = false;
            return;
        }
        if (!valid) return;
        submitArr.push(this._vendorNew.value ? "_" + (0, _helpersJs.capitalizeWords)(this._vendorNew.value.trim()) : this._vendor.value.trim());
        submitArr.push(this._valueNew.value.trim() || 0);
        innerArr.push(String(this._sn.value).trim().split(" ")[0].toUpperCase());
        innerArr.push(String(this._at.value).trim().split(" ")[0].toUpperCase());
        // remarks
        innerArr.push(this._rm.value.trim() || "");
        submitArr.push(innerArr);
        console.log(submitArr);
        return submitArr;
    }
    getFileData(rawData) {
        console.log(rawData);
        let finalData = [];
        let valid = true;
        // serial no, asset tag, remarks
        for (const innerObj of rawData){
            console.log(Object.keys(innerObj).length);
            console.log(innerObj);
            if (!innerObj.serialNumber) {
                this.renderError(`Serial Number cannot be blank!`);
                valid = false;
                return;
            }
            if (!innerObj.assetTag) {
                this.renderError(`Asset Tag cannot be blank!`);
                valid = false;
                return;
            }
            if (Object.keys(innerObj).length !== 3) {
                this.renderError(`Something went wrong when submitting data, please check you did not amend the headers`);
                valid = false;
                return;
            }
            const innerArr = [
                String(innerObj.serialNumber).trim().split(" ")[0].toUpperCase(),
                String(innerObj.assetTag).trim().split(" ")[0].toUpperCase(),
                innerObj.remarks || ""
            ];
            finalData.push((0, _helpersJs.arrToString)(innerArr));
            console.log(finalData);
        }
        finalData.unshift(this._valueNew.value.trim() || 0);
        const defaultSelect = this._vendor.options[0].textContent;
        valid = (0, _helpersJs.oldNewCheck).call(this, defaultSelect, this._vendor, this._vendorNew, "Vendor");
        finalData.unshift(this._vendorNew.value ? "_" + (0, _helpersJs.capitalizeWords)(this._vendorNew.value.trim()) : this._vendor.value.trim());
        for (const state of this._previewInputStateArr)if (state.previewValue === "") {
            valid = false;
            this.renderError(`${state.typeName} not allowed!`);
            return;
        } else finalData.unshift(state.previewValue);
        if (!valid) return;
        return finalData;
    }
}
exports.default = new RegisterDevice();

},{"../../utilities/formHelpers/fileUpload.js":"jGsEy","../../utilities/helpers.js":"ePVjH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jGsEy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpersJs = require("../helpers.js");
var _previewViewJs = require("./previewView.js");
var _previewViewJsDefault = parcelHelpers.interopDefault(_previewViewJs);
var _spriteSvg = require("url:../../../../sprite.svg");
var _spriteSvgDefault = parcelHelpers.interopDefault(_spriteSvg);
class FileUpload extends (0, _previewViewJsDefault.default) {
    initializeFile(buttons = true) {
        this._initializeFormView();
        this._fileInput = document.querySelector(".file__input");
        // fileEl displayed when loaded, hidden when use normal or close btn is clicked
        this._fileEl = this._form.querySelector(".form__file-view");
        this._fileName = this._form.querySelector(".form__file--view__file");
        // split into 2 functions to cater for onboarding
        if (buttons) this._initializeExcelBtns();
    }
    _initializeExcelBtns() {
        this._excelField = this._form.querySelector(`.form__group--excel`);
        this._toggleFieldsExcelArray = [
            this._excelField
        ];
        this._excelBtnField = this._form.querySelector(".form__group--use-excel");
        this._normalBtnField = this._form.querySelector(".form__group--use-normal");
        this._useExcelBtn = this._form.querySelector(`#${this.type}-excel-btn`);
        this._useNormalBtn = this._form.querySelector(`#${this.type}-normal-btn`);
    }
    addHandlerNormalOption(handler) {
        this._useNormalBtn.addEventListener("click", (e)=>{
            e.preventDefault();
            // this.excelState = false;
            console.log("normal handler clicked");
            handler(this);
            // create device, condemn device, create user, remove user
            if (this.type === "condemned-device" || this.type === "remove-user") // show the input for previews
            {
                if (this._previewInputStateArr) this._previewInputStateArr.forEach((state)=>(0, _helpersJs.showEl)(state.previewInputEl));
            }
        });
    }
    addHandlerExcelOption(handler) {
        this._useExcelBtn.addEventListener("click", (e)=>{
            e.preventDefault();
            console.log("excel handler clicked");
            console.log(this.type);
            // TOREVIEW clear inputs
            (0, _helpersJs.resetInputs)(this._resetValuesArray);
            // TOREVIEW register-device should keep the model name preview. clear the input for previews and remove selected previews,  cant just select register-device because create-user does not have the previewArray
            if (this.type === "condemned-device" || this.type === "remove-user") {
                // remove selected previews
                this.removePreviews();
                // reset preview values
                if (this._previewInputStateArr) this._resetPreviewValues();
            }
            // update url.
            history.pushState({}, "", `${window.location.pathname}`);
            handler(this);
        });
    }
    addHandlerFileTemplate(handler) {
        document.addEventListener("click", (e)=>{
            if (e.target.closest(".btn--file-template")) {
                console.log(e.target);
                e.preventDefault();
                console.log(handler);
                handler();
            }
        });
    }
    addHandlerUploadFile() {
        document.addEventListener("click", (e)=>{
            if (e.target.closest(".btn--file-upload")) {
                console.log(e.target);
                e.preventDefault();
                this._fileInput.click();
            }
        });
    }
    addHandlerFileLoaded(handler) {
        document.addEventListener("change", (e)=>{
            if (e.target === this._fileInput) {
                console.log(e);
                handler(this, this._fileInput.files[0]);
            }
        });
    }
    addHandlerRemoveFile(handler) {
        document.addEventListener("click", (e)=>{
            if (e.target.closest(".btn--remove-file")) {
                e.preventDefault();
                console.log("closing excel");
                handler(this);
            }
        });
    }
    renderFileName(loaded, filename) {
        // 2 cases where !loaded = true: clicking on close, and when data fails the check
        if (loaded !== true) {
            this._fileName.innerHTML = "";
            (0, _helpersJs.hideEl)(this._fileEl);
            (0, _helpersJs.showEl)(document.querySelector(".btn--file-upload"));
        } else {
            console.log(this._fileName);
            this._fileName.innerHTML = filename;
            (0, _helpersJs.showEl)(this._fileEl);
            (0, _helpersJs.hideEl)(document.querySelector(".btn--file-upload"));
        }
        // reset the value so that same workflow happens when user clicks same file
        this._fileInput.value = null;
    }
    renderNormal() {
        (0, _helpersJs.toggleFields)("hidden", ...this._toggleFieldsExcelArray, this._excelBtnField, this._normalBtnField);
        (0, _helpersJs.hideEl)(this._fileEl);
        return;
    }
    renderExcel() {
        (0, _helpersJs.toggleFields)("hidden", ...this._toggleFieldsExcelArray, this._excelBtnField, this._normalBtnField);
    }
    addHandlerSubmitPDF(handler) {
        document.addEventListener("click", (e)=>{
            if (e.target.closest(".btn--pdf")) {
                e.preventDefault();
                handler(this);
            } else if (e.target.closest(".btn-text--bypass")) {
                e.preventDefault();
                handler(this, true);
            }
        });
    }
    renderPDFForm(page) {
        const markup = `
        <button class="btn--close-modal">&times;</button>
        <div class="window-pdf">${page === "loan device" || page === "returned device" && !this._eventId ? `
        <button class="btn btn--file-template">Generate Form</button>` : `<button class="btn btn--file-download btn--file-download--pdf" data-event-id="${this._eventId}">Download Form</button>`}
            <input type="file" id="pdf-file" class="file__input hidden" accept=".pdf">
            <button class="btn btn--file-upload">Upload File</button>
            <div class="form__file-view hidden">
                <span class="form__file--view__file"></span>
                <svg class="btn--remove-file"><use href="${(0, _spriteSvgDefault.default)}#icon-circle-with-cross"></use></svg>
            </div>
            <div class="form__group--submit--pdf-bypass">
                <a class="btn-text btn-text--bypass">Submit without form</a>
            </div>
            <div class="form__group--submit--pdf">
                <button class="btn btn--pdf">Submit</button>
            </div>
        </div>`;
        (0, _helpersJs.opaqueEl)(...this._popupFields);
        (0, _helpersJs.clearEl)(this._popupWindowEl);
        this._popupWindowEl.insertAdjacentHTML("afterbegin", markup);
        this._submitBtn = document.querySelector(".btn--pdf");
        this._fileInput = document.querySelector(".file__input");
        // fileEl displayed when loaded, hidden when use normal or close btn is clicked
        this._fileEl = document.querySelector(".form__file-view");
        console.log(this._fileEl);
        this._fileName = document.querySelector(".form__file--view__file");
        console.log(this._fileName);
    }
}
exports.default = FileUpload;

},{"../helpers.js":"ePVjH","./previewView.js":"2inex","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","url:../../../../sprite.svg":"63C6q"}],"2inex":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpersJs = require("../helpers.js");
var _configJs = require("../config.js");
var _formViewJs = require("./formView.js");
var _formViewJsDefault = parcelHelpers.interopDefault(_formViewJs);
var _spriteSvg = require("../../../../sprite.svg");
var _spriteSvgDefault = parcelHelpers.interopDefault(_spriteSvg);
class PreviewView extends (0, _formViewJsDefault.default) {
    _initializePreview(previewHandlers) {
        // create an array to keep a counter of a maximum of 1 event listener for each element
        const [searchHandler, previewSelectHandler, closePreviewHandler] = previewHandlers;
        this._previewInputStateArr = this._previewArray.map((state)=>{
            return {
                "eventListenerCount": 0,
                "previewInputType": state.type,
                "previewInputEl": state.input,
                "previewValue": "",
                "typeName": state.typeName
            };
        });
        // TODO
        this._multiplePreviews = this._previewInputStateArr.length;
        this._addHandlerPreviewSearch(searchHandler);
        this._addHandlerPreview(previewSelectHandler, closePreviewHandler);
    }
    // PREVIEWS
    _addHandlerPreviewSearch(handler) {
        // HIDE PREVIEW WINDOWS
        const hidePreview = function(e) {
            if (e.target.tagName !== "A" && this._previewWindowEl && !this._previewWindowEl.classList.contains("hidden-visibility")) {
                console.log("problem");
                e.preventDefault();
                setTimeout(()=>{
                    console.log("coming in");
                    console.log(document.activeElement);
                    console.log(this._previewInputEl);
                    if ((document.activeElement.classList.contains("form__input") && document.activeElement !== this._previewInputEl || !document.activeElement.classList.contains("form__input")) && !document.activeElement.classList.contains("preview__result--invalid")) {
                        console.log("closing");
                        (0, _helpersJs.clearEl)(this._previewEl);
                        (0, _helpersJs.transparentEl)(this._previewWindowEl);
                        this._validatePreviewInput();
                        this._focusedInput;
                    }
                }, (0, _configJs.PREVIEW_TIMEOUT_BLUR));
            }
        };
        document.querySelector(".content").addEventListener("click", hidePreview.bind(this));
        document.querySelector(".content").addEventListener("focus", hidePreview.bind(this));
        // FOCUS INPUT AND KEYSTROKE
        this._previewInputStateArr.forEach((previewInputState, i)=>{
            previewInputState.previewInputEl.addEventListener("focus", (e)=>{
                e.preventDefault();
                this._newPreviewInput = this._previewInputStateArr[i].previewInputType;
                console.log(this._focusedInput, this._newPreviewInput);
                if (this._focusedInput !== undefined && this._focusedInput !== this._newPreviewInput) {
                    (0, _helpersJs.clearEl)(this._previewEl);
                    (0, _helpersJs.transparentEl)(this._previewWindowEl);
                    this._validatePreviewInput();
                }
                this._focusedInput = this._newPreviewInput;
                this._previewInputEl = previewInputState.previewInputEl;
                console.log(this._previewInputEl);
                console.log(previewInputState.previewInputEl.parentElement);
                this._previewEl = this._previewInputEl.parentElement.querySelector(`.preview--${previewInputState.previewInputType}`);
                console.log(`.preview--${previewInputState.previewInputType}`);
                console.log(this._previewEl);
                this._previewWindowEl = this._previewEl.closest(".form-dropdown");
                console.log(this._focusedInput);
                if (this._previewInputEl.value) handler(this, this._focusedInput);
            });
            previewInputState.previewInputEl.addEventListener("keyup", (e)=>{
                e.preventDefault();
                handler(this, this._focusedInput);
            });
        });
    }
    // clicked preview
    _addHandlerPreview(selectHandler, closeHandler) {
        this._previewInputStateArr.forEach((state)=>{
            document.addEventListener("click", (e)=>{
                if (e.target.closest(`.btn--close-preview--${state.previewInputType}`)) {
                    e.preventDefault();
                    this._closePreviewBtn = e.target.closest(".btn--close-preview");
                    console.log("closing prev");
                    closeHandler(this);
                } else if (e.target.closest(`.preview--${state.previewInputType}`)) {
                    e.preventDefault();
                    selectHandler(this, e.target);
                }
            });
        });
    }
    _validatePreviewInput() {
        this._previewInputEl.style.borderBottom = "3px solid #f6bdc0";
    }
    getPreviewQuery() {
        const query = this._previewInputEl.value;
        return query;
    }
    renderPreviewResults(results) {
        (0, _helpersJs.clearEl)(this._previewEl);
        if (!results || Array.isArray(results) && results.length === 0) return;
        // CONVERT TO CLASS PROPERTY
        this._results = results;
        const markup = this._generatePreviewMarkup();
        this._previewEl.insertAdjacentHTML("afterbegin", markup);
    }
    // Device filter form will be using its own function
    renderPreview(el) {
        // get selected element and insert into input
        this._selectedPreviewEl = el.closest(`.preview--${this._focusedInput}-component`);
        if (this._selectedPreviewEl.classList.contains("preview__result--invalid")) return;
        this._previewInputEl.value = "";
        this._previewInputEl.insertAdjacentElement("afterend", this._selectedPreviewEl);
        // add close button
        this._selectedPreviewEl.insertAdjacentHTML("beforeend", `<svg class="btn--close-preview btn--close-preview--${this._focusedInput}" data-input-type="${this._focusedInput}"><use href="${(0, _spriteSvgDefault.default)}#icon-circle-with-cross"></use></svg>`);
        this._updatekeyValue(this._focusedInput, this._selectedPreviewEl.dataset.previewValue);
        this._updatePreviewFunctionality(true);
    }
    _updatePreviewState(curinputType, newPreviewValue) {
        this._previewInputStateArr.forEach((state)=>{
            state.previewInputType === curinputType ? state.previewValue = newPreviewValue : state.previewValue = state.previewValue;
        });
    }
    // TODO what exactly does clearEls do??
    _updatePreviewFunctionality(clearEls = false) {
        // update the value of the preview value
        this._updatePreviewState(this._focusedInput, this._selectedPreviewEl.dataset.previewValue);
        console.log(window.location.search);
        console.log(this._previewInputStateArr.map((state)=>state.previewValue));
        // this._form.querySelector(`.btn--close-preview--${this._focusedInput}`).addEventListener('click', this.closePreview.bind(this));
        // hide window and input, and clear preview suggestions
        (0, _helpersJs.hideEl)(this._previewInputEl);
        if (clearEls) {
            (0, _helpersJs.clearEl)(this._previewEl);
            (0, _helpersJs.transparentEl)(this._previewWindowEl);
        }
        // styles
        this._selectedPreviewEl.classList.add("selected");
        // tell handler to get the current user
        if (this.type === "returned-device") this._form.dispatchEvent(this._previewLoadedEvent);
    }
    closePreview() {
        console.log(this._closePreviewBtn);
        const closingInputEl = this._closePreviewBtn.parentElement.parentElement.querySelector(".form__input");
        console.log(closingInputEl);
        (0, _helpersJs.showEl)(closingInputEl);
        const closingPreviewEl = this._closePreviewBtn.closest(`.preview__result`);
        closingPreviewEl.remove();
        console.log(closingPreviewEl);
        // closingInputEl.value = '';
        this._updatePreviewState(this._closePreviewBtn.dataset.inputType, "");
        this._updatekeyValue(this._closePreviewBtn.dataset.inputType, "");
        // window.location.hash = ''
        this._focusedInput = undefined;
        if (this.type === "returned-device") {
            (0, _helpersJs.clearEl)(this._insertUserLocationEl);
            this._insertUserLocationEl.style.padding = "0rem";
            this._eventId = undefined;
            this._fileName = undefined;
        }
    }
    renderAutoDevicePreview(data) {
        document.querySelector(".preview__result.preview--asset-tag.selected")?.remove();
        document.querySelector(".preview__result.preview--user-name.selected")?.remove();
        this._focusedInput = "asset-tag";
        this._previewInputEl = this._at;
        this._previewInputEl.focus();
        // device is the details
        const { assetId, assetTag, modelName, serialNumber } = data;
        const markup = `<div class="preview__result preview--${this._focusedInput}" data-preview-value="${assetId}">
            <h3 class="preview__value--asset-tag">${assetTag}</h3>
            <h4 class="preview__value--model-name">${modelName}</h4>
            <h5 class="preview__value--serial-number">${serialNumber}</h5>
        </div>`;
        this._previewInputEl.insertAdjacentHTML("afterend", markup);
        this._selectedPreviewEl = this._form.querySelector(`.preview--${this._focusedInput}`);
        this._selectedPreviewEl.insertAdjacentHTML("beforeend", `<svg class="btn--close-preview btn--close-preview--${this._focusedInput}" data-input-type="${this._focusedInput}"><use href="${(0, _spriteSvgDefault.default)}#icon-circle-with-cross"></svg>`);
        this._updatePreviewFunctionality();
    }
    renderAutoUserPreview(data) {
        document.querySelector(".preview__result.preview--user-name.selected")?.remove();
        this._focusedInput = "user-name";
        this._previewInputEl = this._un;
        console.log(this._un);
        this._previewInputEl.focus();
        // user is the details
        console.log(data);
        const { deptName, userId, userName } = data;
        const markup = `<div class="preview__result preview--${this._focusedInput}" data-preview-value="${userId}">
            <h3 class="preview__value--user-name">${userName}</h3>
            <h4 class="preview__value--dept-name">${deptName}</h4>
        </div>`;
        this._previewInputEl.insertAdjacentHTML("afterend", markup);
        this._selectedPreviewEl = this._form.querySelector(`.preview--${this._focusedInput}`);
        this._selectedPreviewEl.insertAdjacentHTML("beforeend", `<svg class="btn--close-preview btn--close-preview--${this._focusedInput}" data-input-type="${this._focusedInput}"><use href="${(0, _spriteSvgDefault.default)}#icon-circle-with-cross"></svg>`);
        this._updatePreviewFunctionality();
    }
    _updatekeyValue(key, value) {
        if (this.type === "register-device") return;
        // get current key values in url
        const searchParams = new URLSearchParams(window.location.search);
        console.log(searchParams.toString());
        if (value === "") searchParams.delete(key);
        else key === "asset-tag" ? searchParams.set("asset-tag", value) : searchParams.set("user-name", value);
        const newURL = `${window.location.pathname}?${searchParams.toString()}`;
        history.pushState({}, "", newURL);
    }
    removePreviews() {
        document.querySelectorAll(".selected")?.forEach((el)=>el.remove());
    }
    // FOR EXCEL
    _resetPreviewValues() {
        this._previewInputStateArr.forEach((state)=>{
            state.previewInputEl.value = "";
            state.previewValue = "";
            state._focusedInput = undefined;
        });
    }
    showInputPreviews() {
        this._previewInputStateArr.forEach((state)=>{
            (0, _helpersJs.showEl)(state.previewInputEl);
        });
    }
    // FOR HISTORY AND DEVICES
    _generatePreviewMarkup() {
        return this._results.map((result)=>`<div class="preview__result preview--${this._focusedInput}-component" data-preview-value="${encodeURIComponent(result["modelName"])}">
            <h3 class="preview__value small-font">${result["modelName"]}</h3>
        </div><hr>`).join("");
    }
    renderBasicPreview(clickedEl) {
        console.log(clickedEl);
        const el = clickedEl.classList.contains("preview__value") ? clickedEl : clickedEl.querySelector(".preview__value");
        this._previewInputEl.value = el.innerHTML;
    }
}
exports.default = PreviewView;

},{"../helpers.js":"ePVjH","../config.js":"4wtf3","./formView.js":"1bKaG","../../../../sprite.svg":"5Bz2q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1bKaG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpersJs = require("../helpers.js");
var _showViewJs = require("../showView.js");
var _showViewJsDefault = parcelHelpers.interopDefault(_showViewJs);
var _spriteSvg = require("url:../../../../sprite.svg");
var _spriteSvgDefault = parcelHelpers.interopDefault(_spriteSvg);
class FormView extends (0, _showViewJsDefault.default) {
    // RENDER AND CLOSE ERROR
    _initializeFormView() {
        console.log(this._overlayEl);
        this._addHandlerCloseError();
        this._form = document.querySelector(`.form--${this.type}`);
    }
    renderSpinner() {
        console.log(this._popupFields);
        (0, _helpersJs.opaqueEl)(...this._popupFields);
        (0, _helpersJs.clearEl)(this._popupWindowEl);
        const markup = `
            <div class="spinner">
                <svg>
                    <use href="${(0, _spriteSvgDefault.default)}#icon-loader"></use>
                </svg>
            </div>`;
        this._popupWindowEl.insertAdjacentHTML("afterbegin", markup);
    }
    // FORMS
    // OPTION FOR NEW DEVICE / DEPARTMENT
    _addHandlerNew() {
        this._newOptionBtn.addEventListener("click", (e)=>{
            e.preventDefault();
            (0, _helpersJs.toggleFields)("hidden", ...this._toggleFieldsOptionsArray);
            this._existingInput.selectedIndex = 0;
        });
    }
    _addHandlerExisting() {
        this._existingOptionBtn.addEventListener("click", (e)=>{
            e.preventDefault();
            (0, _helpersJs.toggleFields)("hidden", ...this._toggleFieldsOptionsArray);
            this._newInput.value = "";
        });
    }
    // SUBMIT
    addHandlerSubmit(handler) {
        console.log("heloooo");
        document.addEventListener("click", (e)=>{
            if (e.target.closest(".btn--submit")) {
                console.log("no idea");
                e.preventDefault();
                console.log("submit clicked, going to validate");
                handler(this);
            }
        });
    }
    getFormDetails() {
        console.log("HELLo");
        return {
            assetTag: document.querySelector(".preview__value--asset-tag").innerHTML,
            modelName: document.querySelector(".preview__value--model-name").innerHTML,
            serialNumber: document.querySelector(".preview__value--serial-number").innerHTML,
            userName: document.querySelector(".preview__value--user-name").innerHTML,
            deptName: document.querySelector(".preview__value--dept-name").innerHTML
        };
    }
    renderResubmit(assetId, page, curUrl, homeUrl) {
        const resubmitUrl = curUrl.split("?")[0];
        const redirectUrl = `${homeUrl}views/show_device#${assetId}`;
        const markup = `
        <div class="window-resubmit">
            <div class="window-resubmit-result">Success!</div>
            <a class="btn btn--resubmit" href="${resubmitUrl}">${page === "loan device" ? "Loan another device" : "Return another device"}</a>
            <a class="btn btn--continue" href="${redirectUrl}">Continue</a>
        </div>`;
        (0, _helpersJs.opaqueEl)(...this._popupFields);
        (0, _helpersJs.clearEl)(this._popupWindowEl);
        this._popupWindowEl.insertAdjacentHTML("afterbegin", markup);
        this._resubmitBtn = document.querySelector(".btn--resubmit");
        this._continueBtn = document.querySelector(".btn--continue");
        document.removeEventListener("click", this._closeErrorCallback);
    }
}
exports.default = FormView;

},{"../helpers.js":"ePVjH","../showView.js":"so2IN","url:../../../../sprite.svg":"63C6q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"so2IN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpersJs = require("./helpers.js");
var _spriteSvg = require("url:../../../sprite.svg");
var _spriteSvgDefault = parcelHelpers.interopDefault(_spriteSvg);
class View {
    _overlayEl = document.querySelector(".overlay");
    _popupWindowEl = document.querySelector(".window");
    _popupFields = [
        this._overlayEl,
        this._popupWindowEl
    ];
    renderError(errMsg) {
        console.log("hi");
        const markup = `
        <button class="btn--close-modal">&times;</button>
        <h3 class="error-window-header"></h3>
        <h5 class="error-window-message"></h5>`;
        (0, _helpersJs.opaqueEl)(...this._popupFields);
        (0, _helpersJs.clearEl)(this._popupWindowEl);
        this._popupWindowEl.insertAdjacentHTML("afterbegin", markup);
        const popupHeaderEl = document.querySelector(".error-window-header");
        const popupMessageEl = document.querySelector(".error-window-message");
        popupHeaderEl.textContent = "Error!";
        popupMessageEl.textContent = errMsg;
    }
    _addHandlerCloseError() {
        console.log(this._popupFields);
        document.addEventListener("click", this._closeErrorCallback.bind(this));
    }
    _closeErrorCallback(e) {
        if (e.target.closest(".btn--close-modal")) {
            console.log(e.target);
            (0, _helpersJs.transparentEl)(...this._popupFields);
        }
        if (!e.target.closest(".window") && document.querySelector(".btn--close-modal")) {
            console.log(e.target);
            (0, _helpersJs.transparentEl)(...this._popupFields);
        }
    }
    render(data) {
        if (!data) return;
        this._data = data;
        const markup = this._generateMarkup();
        console.log(this._parentElement);
        (0, _helpersJs.clearEl)(this._parentElement);
        // INSERT DATA
        this._parentElement.insertAdjacentHTML("beforeend", markup);
    }
    updateNumResults(numResults) {
        console.log("updating");
        console.log(this._numResults);
        console.log(this._numResults.innerHTML);
        this._numResults.innerHTML = `${numResults} results found`;
    }
    addEditHandlers(handler) {
        [
            "deviceLoaded",
            "userLoaded"
        ].forEach((ev)=>document.addEventListener(ev, ()=>{
                this._editBtns = document.querySelectorAll(".btn--timeline__edit");
                this._editBtns.forEach((btn)=>btn.addEventListener("click", (e)=>{
                        console.log("hello");
                        this.editRemarks(e);
                        handler(e);
                    }));
            }));
    }
    editRemarks(e) {
        this._focusedRemark = e.target.previousElementSibling;
        this._focusedRemark.contentEditable = true;
        this._focusedRemark.classList.add("timeline__editable");
        this._editBtns.forEach((editBtn)=>(0, _helpersJs.transparentEl)(editBtn));
        (0, _helpersJs.opaqueEl)(e.target);
        e.target.innerHTML = "Save";
    }
    // can only add and remove bookmark from individual page view
    addHandlerAddBookmark(handler) {
        this._parentElement.addEventListener("click", (e)=>{
            const btn = e.target.closest(".btn--bookmark") // event delegation: btn--bookmark did not exist yet
            ;
            if (!btn) return;
            handler(this);
        });
    }
    update(data) {
        // dont make sense
        // if (!data || (Array.isArray(data) && data.length === 0)) return this.renderError();
        this._data = data;
        const newMarkup = this._generateMarkup(); // generate markup but not render it; compare with current HTML
        // convert markup string to a DOM object living in memory
        const newDOM = document.createRange().createContextualFragment(newMarkup); // virtual DOM that is not on page but in memory
        const newElements = Array.from(newDOM.querySelectorAll("*"));
        const curElements = Array.from(this._parentElement.querySelectorAll("*"));
        newElements.forEach((newEl, i)=>{
            const curEl = curElements[i];
            // console.log(curEl, newEl.isEqualNode(curEl)); // isEqualNode checks if contents are the same
            // change text
            if (!newEl.isEqualNode(curEl) && newEl.firstChild?.nodeValue.trim() !== "") curEl.textContent = newEl.textContent;
            // change attributes
            if (!newEl.isEqualNode(curEl)) Array.from(newEl.attributes).forEach((attr)=>curEl.setAttribute(attr.name, attr.value));
        });
    }
    addHandlerFilterBookmark(handler) {
        this._bookmarksBtn.addEventListener("click", (e)=>{
            e.preventDefault();
            handler(this);
        });
    }
    setBookmarkSvg(mode) {
        const markup = `
            <svg>
                <use href="${(0, _spriteSvgDefault.default)}#icon-bookmark${mode === "show" ? "-fill" : ""}"></use>
            </svg>
            <span class="filter-bookmarks__text">Bookmarks</span>`;
        this._bookmarksBtn.style.opacity = mode === "show" ? "1" : "0.5";
        (0, _helpersJs.clearEl)(this._bookmarksBtn);
        this._bookmarksBtn.insertAdjacentHTML("afterbegin", markup);
    }
    addHandlerDownloadFile(handler) {
        document.addEventListener("click", (e)=>{
            if (e.target.closest(".btn--file-download")) {
                e.preventDefault();
                handler(e.target.closest(".btn--file-download").dataset.eventId);
            }
        });
    }
    // filter for devices, users, history
    addHandlerClearFilter(handler) {
        this._form.addEventListener("reset", ()=>handler(this));
    }
}
exports.default = View;

},{"./helpers.js":"ePVjH","url:../../../sprite.svg":"63C6q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"63C6q":[function(require,module,exports) {
module.exports = require("9c5329e7a15c0c1e").getBundleURL("aplqo") + "sprite.36b4ec73.svg" + "?" + Date.now();

},{"9c5329e7a15c0c1e":"lgJ39"}],"5Bz2q":[function(require,module,exports) {
module.exports = require("464958a010c857ab").getBundleURL("aplqo") + "sprite.944d8a0f.svg" + "?" + Date.now();

},{"464958a010c857ab":"lgJ39"}],"ftH7g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formViewJs = require("../../utilities/formHelpers/formView.js");
var _formViewJsDefault = parcelHelpers.interopDefault(_formViewJs);
var _helpersJs = require("../../utilities/helpers.js");
class CreateDevice extends (0, _formViewJsDefault.default) {
    initialize() {
        this.type = "register-model";
        this._initializeFormView();
        // Fields
        this._newOptionField = this._form.querySelector(".form__group--device-type-new");
        this._existingOptionField = this._form.querySelector(".form__group--device-type");
        this._toggleFieldsOptionsArray = [
            this._newOptionField,
            this._existingOptionField
        ];
        // for toggling between new device and existing device
        this._newOptionBtn = this._form.querySelector(".btn-text--device-type-new");
        this._existingOptionBtn = this._form.querySelector(".btn-text--device-type");
        this._newInput = this._form.querySelector(".form__input--device-type-new");
        this._existingInput = this._form.querySelector(".form__input--device-type");
        this._addHandlerNew();
        this._addHandlerExisting();
        // ACTUAL INPUTS FOR VALIDATION
        this._dt = this._form.querySelector(".form__input--device-type");
        this._dtNew = this._form.querySelector(".form__input--device-type-new");
        this._modelNew = this._form.querySelector(".form__input--model-name-new");
        // submit button
        this._submitBtn = this._form.querySelector(".btn--register-model");
    }
    // Check for validation
    getData() {
        let valid = true;
        let submitArr = [];
        let innerArr = [];
        const defaultSelect = this._dt.options[0].textContent;
        (0, _helpersJs.oldNewCheck).call(this, defaultSelect, this._dt, this._dtNew, "Device Type");
        if (!valid) return;
        // no model
        if (this._modelNew.value === "") {
            this.renderError("Please enter a valid model name");
            valid = false;
            return;
        }
        if (!valid) return;
        // device, model, value
        submitArr.push(this._dtNew.value ? "_" + (0, _helpersJs.capitalizeWords)(this._dtNew.value.trim()) : this._dt.value.trim());
        innerArr.push((0, _helpersJs.capitalizeWords)(this._modelNew.value.trim()));
        submitArr.push(innerArr);
        return submitArr;
    }
}
exports.default = new CreateDevice();

},{"../../utilities/formHelpers/formView.js":"1bKaG","../../utilities/helpers.js":"ePVjH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bJKil":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fileUploadJs = require("../../utilities/formHelpers/fileUpload.js");
var _fileUploadJsDefault = parcelHelpers.interopDefault(_fileUploadJs);
var _helpersJs = require("../../utilities/helpers.js");
class CreateUser extends (0, _fileUploadJsDefault.default) {
    initialize() {
        this.type = "create-user";
        this.initializeFile();
        // Fields for options
        this._newOptionField = this._form.querySelector(".form__group--dept-new");
        this._existingOptionField = this._form.querySelector(".form__group--dept");
        // toggling between new dept and existing dept
        this._newOptionBtn = this._form.querySelector(".btn-text--dept-new");
        console.log(this._newOptionBtn);
        this._existingOptionBtn = this._form.querySelector(".btn-text--dept");
        this._toggleFieldsOptionsArray = [
            this._newOptionField,
            this._existingOptionField
        ];
        this._newInput = this._form.querySelector(".form__input--dept-new");
        this._existingInput = this._form.querySelector(".form__input--dept");
        this._addHandlerNew();
        this._addHandlerExisting();
        // EXCEL
        this.initializeFile();
        this._unField = this._form.querySelector(`.form__group--user-name-new`);
        this._rmField = this._form.querySelector(`.form__group--remarks-new`);
        this._toggleFieldsExcelArray.push(this._unField, this._rmField);
        this._elAfterExcel = this._form.querySelector(`.form__group--submit--create-user`);
        this._headers = [
            "Name",
            "Remarks"
        ];
        // ACTUAL INPUTS FOR VALIDATION
        this._dept = this._form.querySelector(".form__input--dept");
        this._deptNew = this._form.querySelector(".form__input--dept-new");
        this._un = this._form.querySelector(".form__input--user-name-new");
        this._rm = this._form.querySelector(".form__input--remarks-new");
        this._resetValuesArray = [
            this._un,
            this._rm
        ];
        // submit button
        this._submitBtn = this._form.querySelector(".btn--create-user");
    }
    // Check for validation
    getData() {
        let valid = true;
        let submitArr = [];
        let innerArr = [];
        const defaultSelect = this._dept.options[0].textContent;
        valid = (0, _helpersJs.oldNewCheck).call(this, defaultSelect, this._dept, this._deptNew, "Department");
        if (!valid) return;
        // no name
        if (this._un.value === "") {
            this.renderError("Please enter a valid name");
            valid = false;
            return;
        }
        if (!valid) return;
        console.log(this._deptNew.value, this._dept.value);
        submitArr.push(this._deptNew.value ? "_" + (0, _helpersJs.capitalizeWords)(this._deptNew.value.trim()) : this._dept.value.trim());
        innerArr.push((0, _helpersJs.capitalizeWords)(this._un.value.trim()));
        innerArr.push(this._rm.value.trim() || "");
        submitArr.push(innerArr);
        return submitArr;
    }
    getFileData(rawData) {
        let finalData = [];
        let valid = true;
        // serial no, asset tag, remarks
        for (const innerObj of rawData){
            console.log(innerObj);
            if (!innerObj.userName) {
                this.renderError(`User Name cannot be blank!`);
                valid = false;
                return;
            }
            if (Object.keys(innerObj).length !== 2) {
                this.renderError(`Something went wrong when submitting data, please check you did not amend the headers`);
                valid = false;
                return;
            }
            const innerArr = [
                (0, _helpersJs.capitalizeWords)(innerObj.userName),
                innerObj.remarks || ""
            ];
            console.log(innerArr);
            finalData.push((0, _helpersJs.arrToString)(innerArr));
        }
        const defaultSelect = this._dept.options[0].textContent;
        valid = (0, _helpersJs.oldNewCheck).call(this, defaultSelect, this._dept, this._deptNew, "Department");
        console.log("hello world");
        console.log(valid);
        if (!valid) return;
        finalData.unshift(this._deptNew.value ? "_" + (0, _helpersJs.capitalizeWords)(this._deptNew.value.trim()) : this._dept.value.trim());
        console.log(finalData);
        return finalData;
    }
}
exports.default = new CreateUser();

},{"../../utilities/formHelpers/fileUpload.js":"jGsEy","../../utilities/helpers.js":"ePVjH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fXE8Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fileUploadJs = require("../../utilities/formHelpers/fileUpload.js");
var _fileUploadJsDefault = parcelHelpers.interopDefault(_fileUploadJs);
var _helpersJs = require("../../utilities/helpers.js");
class RemoveUser extends (0, _fileUploadJsDefault.default) {
    initialize(previewHandlers) {
        this.type = "remove-user";
        // EXCEL
        this.initializeFile();
        this._unField = this._form.querySelector(`.form__group--user-name`);
        this._rmField = this._form.querySelector(`.form__group--remarks-new`);
        this._toggleFieldsExcelArray.push(this._unField, this._rmField);
        this._elAfterExcel = this._form.querySelector(`.form__group--submit--remove-user`);
        this._headers = [
            "Name",
            "Remarks"
        ];
        // ACTUAL INPUTS FOR VALIDATION
        this._un = this._form.querySelector(".form__input--user-name");
        console.log(this._un);
        this._rm = this._form.querySelector(".form__input--remarks-new");
        this._resetValuesArray = [
            this._un,
            this._rm
        ];
        this._previewArray = [
            {
                "type": "user-name",
                "input": this._un,
                "typeName": "User Name"
            }
        ];
        this._initializePreview(previewHandlers);
        // SUBMIT
        this._submitBtn = this._form.querySelector(".btn--remove-user");
    }
    _generatePreviewMarkup() {
        console.log(this._results);
        console.log(this._focusedInput);
        // class is for styling the preview, dataset is for getting value
        // check that user is not resigned already and is not loaning anything
        return this._results.map((result)=>`<div class="${result["hasResigned"] === 1 ? "preview__result--invalid preview__result--invalid-has-resigned" : result["devices"] ? "preview__result--invalid preview__result--invalid-has-device" : "preview__result"} preview--${this._focusedInput}-component" data-preview-value="${result["userId"]}" tabindex="0">
            <h3 class="preview__value">${result["userName"]}</h3>
            <h4>${result["deptName"]}</h4>
            </div><hr>`).join("");
    }
    getData() {
        let valid = true;
        let submitArr = [];
        let innerArr = [];
        console.log(this._previewInputStateArr);
        for (const state of this._previewInputStateArr)if (state.previewValue === "") {
            valid = false;
            this.renderError(`${state.typeName} cannot be blank!`);
            return;
        } else innerArr.push(state.previewValue);
        if (!valid) return;
        innerArr.push(this._rm.value.trim() || "");
        submitArr.push(innerArr);
        return submitArr;
    }
    getFileData(rawData) {
        let finalData = [];
        let valid = true;
        // serial no, asset tag, remarks
        for (const innerObj of rawData){
            if (!innerObj.userName) {
                this.renderError(`User Name cannot be blank!`);
                valid = false;
                return;
            }
            if (Object.keys(innerObj).length !== 2) {
                this.renderError(`Something went wrong when submitting data`);
                valid = false;
                return;
            }
            const innerArr = [
                innerObj.userName,
                innerObj.remarks || ""
            ];
            finalData.push((0, _helpersJs.arrToString)(innerArr));
        }
        if (!valid) {
            this.renderError(`Something went wrong when submitting data`);
            return;
        }
        return finalData;
    }
}
exports.default = new RemoveUser();

},{"../../utilities/formHelpers/fileUpload.js":"jGsEy","../../utilities/helpers.js":"ePVjH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i7CJd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpersJs = require("../../utilities/helpers.js");
var _fileUploadJs = require("../../utilities/formHelpers/fileUpload.js");
var _fileUploadJsDefault = parcelHelpers.interopDefault(_fileUploadJs);
class loanDevice extends (0, _fileUploadJsDefault.default) {
    // _parentElement = document.querySelector('.register-device');
    initialize(previewHandlers) {
        this.type = "loan-device";
        // this._previewType = [, ];
        this._initializeFormView();
        // ACTUAL INPUTS FOR VALIDATION
        console.log(this);
        this._at = this._form.querySelector(".form__input--asset-tag");
        this._un = this._form.querySelector(".form__input--user-name");
        this._rm = this._form.querySelector(".form__input--remarks-new");
        // PREVIEW SEARCH
        this._previewArray = [
            {
                "type": "asset-tag",
                "input": this._at,
                "typeName": "Asset Tag"
            },
            {
                "type": "user-name",
                "input": this._un,
                "typeName": "User Name"
            }
        ];
        this._initializePreview(previewHandlers);
        // SUBMIT
        this._submitBtn = this._form.querySelector(".btn--loan-pdf");
    }
    _generatePreviewMarkup() {
        // class is for styling the preview, dataset is for getting value
        if (this._focusedInput === "asset-tag") return this._results.map((result)=>`<div class="${result["status"] === "condemned" ? "preview__result--invalid preview__result--invalid-condemned" : result["status"] === "loaned" ? "preview__result--invalid preview__result--invalid-loan" : "preview__result"} preview--${this._focusedInput}-component" data-preview-value="${result["assetId"]}" tabindex="0">
                <h3 class="preview__value--asset-tag">${result["assetTag"]}</h3>
                <h4 class="preview__value--model-name">${result["modelName"]}</h4>
                <h5 class="preview__value--serial-number">${result["serialNumber"]}</h5>
                </div><hr>`).join("");
        else if (this._focusedInput === "user-name") {
            console.log(this._results);
            return this._results.map((result)=>`<div class="${result["hasResigned"] !== 0 ? "preview__result--invalid preview__result--invalid-has-resigned" : "preview__result"} preview--${this._focusedInput}-component" data-preview-value="${result["userId"]}" tabindex="0">
            <h3 class="preview__value--user-name">${result["userName"]}</h3>
            <h4 class="preview__value--dept-name">${result["deptName"]}</h4>
            </div><hr>`).join("");
        }
    }
    // Check for validation
    getData() {
        let valid = true;
        let submitArr = [];
        let innerArr = [];
        console.log(this._previewInputStateArr);
        // asset tag, username
        for (const state of this._previewInputStateArr)if (state.previewValue === "") {
            valid = false;
            this.renderError(`${state.typeName} cannot be blank!`);
            return;
        } else innerArr.push(state.previewValue);
        if (!valid) return;
        innerArr.push(this._rm.value.trim() || "");
        submitArr.push(innerArr);
        return submitArr;
    }
}
exports.default = new loanDevice();

},{"../../utilities/helpers.js":"ePVjH","../../utilities/formHelpers/fileUpload.js":"jGsEy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jl9qX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpersJs = require("../../utilities/helpers.js");
var _fileUploadJs = require("../../utilities/formHelpers/fileUpload.js");
var _fileUploadJsDefault = parcelHelpers.interopDefault(_fileUploadJs);
class ReturnedDevice extends (0, _fileUploadJsDefault.default) {
    // _parentElement = document.querySelector('.register-device');
    initialize(previewHandlers) {
        this.type = "returned-device";
        // this._previewType = [, ];
        this._initializeFormView();
        // ACTUAL INPUTS FOR VALIDATION
        this._at = this._form.querySelector(".form__input--asset-tag");
        this._rm = this._form.querySelector(".form__input--remarks-new");
        // PREVIEW SEARCH
        this._previewArray = [
            {
                "type": "asset-tag",
                "input": this._at,
                "typeName": "Asset Tag"
            }
        ];
        this._initializePreview(previewHandlers);
        // GET USER FROM SELECTED DEVICE
        this._previewLoadedEvent = new Event("previewLoaded");
        this._insertUserLocationEl = this._form.querySelector(".form__group--user-name--returned-device");
        // SUBMIT
        this._submitBtn = this._form.querySelector(".btn--returned-pdf");
    }
    _generatePreviewMarkup() {
        // class is for styling the preview, dataset is for getting value
        // check that it is only on loan
        console.log(this._results);
        return this._results.map((result)=>`<div class="${result["status"]} ${result["status"] === "available" ? "preview__result--invalid preview__result--invalid-available" : result["status"] === "condemned" ? "preview__result--invalid preview__result--invalid-condemned" : "preview__result"} preview--${this._focusedInput}-component" data-preview-value="${result["assetId"]}" tabindex="0">
            <h3 class="preview__value--asset-tag">${result["assetTag"]}</h3>
            <h4 class="preview__value--model-name">${result["modelName"]}</h4>
            <h5 class="preview__value--serial-number">${result["serialNumber"]}</h5>
            </div><hr>`).join("");
    }
    // RENDER THE USER AUTOMATICALLY
    addHandlerGetUser(handler) {
        this._form.addEventListener("previewLoaded", ()=>{
            const assetTag = this._selectedPreviewEl.dataset.previewValue;
            console.log(assetTag);
            handler(assetTag);
        });
    }
    renderUser(user) {
        const markup = `<div class="preview__result preview--user-name selected" data-preview-value="${user["userId"]}">
        <h3 class="preview__value--user-name">${user["userName"]}</h3>
        <h4 class="preview__value--dept-name">${user["deptName"]}</h4>
        </div>`;
        this._eventId = user.eventId;
        this._fileName = user.fileName;
        this._insertUserLocationEl.insertAdjacentHTML("afterbegin", markup);
        this._insertUserLocationEl.style.padding = "2rem";
    }
    // Check for validation
    getData() {
        let valid = true;
        let submitArr = [];
        let innerArr = [];
        for (const state of this._previewInputStateArr)if (state.previewValue === "") {
            valid = false;
            this.renderError(`${state.typeName} cannot be blank!`);
            break; // Break out of the loop when a condition is met
        } else innerArr.push(state.previewValue);
        // user wasnt found
        if (!valid || !this._insertUserLocationEl.innerHTML) {
            this.renderError("There was an error returning the device");
            return;
        }
        const userValue = this._insertUserLocationEl.querySelector(".preview__result").dataset.previewValue;
        innerArr.push(userValue);
        innerArr.push(this._rm.value.trim() || "");
        submitArr.push(innerArr);
        console.log(submitArr);
        return submitArr;
    }
}
exports.default = new ReturnedDevice();

},{"../../utilities/helpers.js":"ePVjH","../../utilities/formHelpers/fileUpload.js":"jGsEy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aRPVi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fileUploadJs = require("../../utilities/formHelpers/fileUpload.js");
var _fileUploadJsDefault = parcelHelpers.interopDefault(_fileUploadJs);
var _helpersJs = require("../../utilities/helpers.js");
class CondemnedDevice extends (0, _fileUploadJsDefault.default) {
    initialize(previewHandlers) {
        this.type = "condemned-device";
        this.initializeFile();
        this._atField = this._form.querySelector(`.form__group--asset-tag`);
        this._rmField = this._form.querySelector(`.form__group--remarks-new`);
        this._toggleFieldsExcelArray.push(this._atField, this._rmField);
        this._elAfterExcel = this._form.querySelector(`.form__group--submit--condemned-device`);
        this._headers = [
            "Asset Tag",
            "Remarks"
        ];
        // ACTUAL INPUTS FOR VALIDATION
        this._at = this._form.querySelector(".form__input--asset-tag");
        this._rm = this._form.querySelector(".form__input--remarks-new");
        this._resetValuesArray = [
            this._at,
            this._rm
        ];
        this._previewArray = [
            {
                "type": "asset-tag",
                "input": this._at,
                "typeName": "Asset Tag"
            }
        ];
        this._initializePreview(previewHandlers);
        // SUBMIT
        this._submitBtn = this._form.querySelector(".btn--condemned-device");
    }
    _generatePreviewMarkup() {
        // class is for styling the preview, dataset is for getting value
        // check that it is only on loan
        return this._results.map((result)=>`<div class="${result["status"] === "loaned" ? "preview__result--invalid preview__result--invalid-loan" : result["status"] === "condemned" ? "preview__result--invalid preview__result--invalid-condemned" : "preview__result"} preview--${this._focusedInput}-component" data-preview-value="${result["assetId"]}" tabindex="0">
            <h3 class="preview__value">${result["assetTag"]}</h3>
            <h4>${result["modelName"]}</h4>
            <h5>${result["serialNumber"]}</h5>
            </div><hr>`).join("");
    }
    // TODO return an array of single object instead
    getData() {
        let valid = true;
        let submitArr = [];
        let innerArr = [];
        console.log(this._previewInputStateArr);
        for (const state of this._previewInputStateArr)if (state.previewValue === "") {
            valid = false;
            this.renderError(`${state.typeName} cannot be blank!`);
            break; // Break out of the loop when a condition is met
        } else innerArr.push(state.previewValue);
        if (!valid) return;
        // remarks
        innerArr.push(this._rm.value.trim() || "");
        submitArr.push(innerArr);
        return submitArr;
    }
    getFileData(rawData) {
        let finalData = [];
        let valid = true;
        // asset tag, remarks
        for (const innerObj of rawData){
            if (!innerObj.assetTag) {
                this.renderError(`Asset Tag cannot be blank!`);
                valid = false;
                return;
            }
            if (Object.keys(innerObj).length !== 2) {
                this.renderError(`Something went wrong when submitting data, please check you did not amend the headers`);
                valid = false;
                return;
            }
            const innerArr = [
                innerObj.assetTag,
                innerObj.remarks || ""
            ];
            console.log(innerArr);
            finalData.push((0, _helpersJs.arrToString)(innerArr));
        }
        if (!valid) {
            this.renderError(`Something went wrong when submitting data, please check you did not amend the headers`);
            return;
        }
        return finalData;
    }
}
exports.default = new CondemnedDevice();

},{"../../utilities/formHelpers/fileUpload.js":"jGsEy","../../utilities/helpers.js":"ePVjH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jZJJg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fileUploadJs = require("../../utilities/formHelpers/fileUpload.js");
var _fileUploadJsDefault = parcelHelpers.interopDefault(_fileUploadJs);
var _helpers = require("../../utilities/helpers");
var _config = require("../../utilities/config");
class OnboardView extends (0, _fileUploadJsDefault.default) {
    initialize() {
        console.log("hello");
        this._parentElement = document.querySelector(".form--onboard");
        this.type = "onboard";
        this.renderOnboardWarning();
        console.log("rendering");
        this.initializeFile(false);
    }
    renderOnboardWarning() {
        const markup = `
        <button class="btn--close-modal">&times;</button>
            <div class="onboard-warning-container">
                    <h3>Warning:</h3> 
                    <ul>
                        <li>This feature allows you to register devices based on the actual registered date.</li>
                        <li>If the device is new, using normal device registration is highly recommended.</li>
                        <li>This feature should only be used when the data is completely clean</li>
                    </ul>
                    <a class="btn-text btn-text--register-device" href="${(0, _config.ASSET_HOMEPAGE_URL)}forms/register_device">Back to normal registration</a>
                </div>
            </div>`;
        console.log(this._popupFields);
        (0, _helpers.opaqueEl)(...this._popupFields);
        (0, _helpers.clearEl)(this._popupWindowEl);
        this._popupWindowEl.insertAdjacentHTML("afterbegin", markup);
    }
    addHandlerConfirm(handler) {
        document.addEventListener("click", (e)=>{
            if (e.target.closest(".btn--preview")) {
                e.preventDefault();
                // debugger;
                handler();
            }
        });
    }
    getFileData(data) {
        const checkChildAcrossParents = function(obj, parent, child) {
            let newParent = true;
            let newChild = true;
            // if modelsObj length is not 0, directly add the model below
            if (Object.keys(obj).length !== 0) for (const [key, value] of Object.entries(obj)){
                // if parent exists
                if (key === parent) newParent = false;
                // check if model name exists in other device type
                if (value.includes(child)) {
                    if (key !== parent) return `${child} already exists in ${key}, cannot be added to ${parent}`;
                    else newChild = false; // to do nothing later if model name already exists
                }
            }
            if (newChild) {
                if (newParent) obj[parent] = [
                    child
                ];
                else obj[parent].push(child);
            }
            return;
        };
        // TODO FILTER OUT THE DATA
        // contain device type and model names, with their value
        // eg { 'Laptop' : ['Asus A1412', ...], ...}
        const modelsObj = {};
        // contain dept and users
        const usersObj = {};
        // const loanArr = []
        // const registerArr = []
        const vendorArr = [];
        const snArr = [];
        const atArr = [];
        const dtSet = new Set();
        const deptSet = new Set();
        let valid = true;
        const deviceArr = data.map((device)=>{
            if (valid === false) return;
            console.log(Object.keys(device).length);
            if (Object.keys(device).length !== 14) {
                valid = false;
                return;
            }
            console.log(device);
            const deviceObj = {};
            deviceObj.modelValue = Number.isFinite(device.modelValue) && device.modelValue || 0;
            deviceObj.status = "registered";
            deviceObj.bookmarked = device.bookmarked || 0;
            deviceObj.location = String(device.location).trim() || "unknown";
            deviceObj.registeredRemarks = String(device.registeredRemarks).trim() || "";
            // SHORTEN ALL SN AND ASSET TAG AND CHECK FOR DUPLICATES
            if (!device.registeredDate) throw Error(`${device.assetTag}: Registered Date is missing`);
            // console.log(device.registeredDate);
            deviceObj.registeredDate = (0, _helpers.excelToJSDate)(device.registeredDate);
            // console.log(deviceObj.registeredDate);
            if (!device.vendorName) throw Error(`${device.assetTag}: Vendor is missing`);
            deviceObj.vendorName = (0, _helpers.capitalizeWords)(String(device.vendorName).trim());
            if (!vendorArr.includes(deviceObj.vendorName)) vendorArr.push(deviceObj.vendorName);
            if (!device.serialNumber) throw Error(`${device.assetTag}: Serial Number is missing`);
            deviceObj.serialNumber = String(device.serialNumber).trim().split(" ")[0].toUpperCase();
            if (snArr.includes(deviceObj.serialNumber)) throw Error(`${device.assetTag}: Duplicate Serial Number`);
            snArr.push(deviceObj.serialNumber);
            if (!device.assetTag) throw Error(`${device.assetTag}: Asset Tag is missing`);
            deviceObj.assetTag = String(device.assetTag).trim().split(" ")[0].toUpperCase();
            if (atArr.includes(deviceObj.assetTag)) throw Error(`${device.assetTag}: Duplicate Asset Tag`);
            atArr.push(deviceObj.assetTag);
            if (!device.deviceType) throw Error(`${device.assetTag}: Device Type Missing`);
            if (!device.modelName) throw Error(`${device.assetTag}: Model name is missing`);
            deviceObj.deviceType = (0, _helpers.capitalizeWords)(String(device.deviceType).trim());
            dtSet.add(deviceObj.deviceType);
            deviceObj.modelName = (0, _helpers.capitalizeWords)(String(device.modelName).trim());
            const errMsg = checkChildAcrossParents.call(this, modelsObj, deviceObj.deviceType, deviceObj.modelName);
            if (errMsg) throw Error(`${device.assetTag}: ${errMsg}`);
            // DONE FILTERED DEVICE TYPES (done with modelsObj)
            // CHECK FOR USER - status LOANED otherwise REGISTERED, CHECK FOR LOAN DATE IF THERE IS USER, CANT HAVE LOAN DATE IF NO USER
            if (device.deptName && !device.userName || device.loanedDate && !device.userName) throw Error(`Loaning ${device.assetTag} without user name`);
            if (device.userName) {
                if (!device.loanedDate) throw Error(`${device.assetTag}: No Loan Date`);
                if (!device.deptName) throw Error(`${device.assetTag}: No department name`);
                if (device.loanedDate < device.registeredDate) throw Error(`${device.assetTag}: Loan date cannot be before register date`);
                deviceObj.userName = (0, _helpers.capitalizeWords)(String(device.userName).trim());
                deviceObj.deptName = (0, _helpers.capitalizeWords)(String(device.deptName).trim());
                deviceObj.loanedDate = (0, _helpers.excelToJSDate)(device.loanedDate);
                deviceObj.loanedRemarks = device.loanedRemarks || "";
                deptSet.add(deviceObj.deptName);
                const errMsg = checkChildAcrossParents.call(this, usersObj, deviceObj.deptName, deviceObj.userName);
                if (errMsg) throw Error(`${device.assetTag}: ${errMsg}`);
                deviceObj.status = "loaned";
            }
            return deviceObj;
        });
        const dtArr = [
            ...dtSet
        ];
        const deptArr = [
            ...deptSet
        ];
        console.log(deviceArr, modelsObj, usersObj, vendorArr);
        if (valid === false) return;
        return [
            [
                deviceArr,
                modelsObj,
                usersObj,
                vendorArr
            ],
            [
                snArr,
                atArr,
                dtArr,
                deptArr
            ]
        ];
    }
    renderConfirmationPage(inputs, serverData) {
        const [deviceArr, modelsObj, usersObj, vendorArr] = inputs;
        const [curDtArr, curModelArr, curDeptArr, curUserArr, curVendorArr] = serverData;
        console.log(deviceArr, modelsObj, usersObj, vendorArr);
        console.log(curDtArr, curModelArr, curDeptArr, curUserArr, curVendorArr);
        console.log(Object.keys(modelsObj));
        const markup = `
        <button class="btn--close-modal">&times;</button>
        <div class="window-onboard">
            <div class="window-component--devices">
                <h3 class="window-header-devices"><span class="onboard-data-new">${deviceArr.length}</span> new devices will be added:</h3>
                <div class="window-dropdown">
                    <ul class="window-dropdown--devices">
                    ${deviceArr.map((device)=>`<li class="onboard-data onboard-data-new">${device.assetTag}</li>`).join("")}
                    </ul>
                </div>
            </div>
            <div class="window-component--models">
                <h3 class="window-header-models"><span class="onboard-data-new-parent">${Object.keys(modelsObj).length - curDtArr.length}</span> new device types and <span class="onboard-data-new">${Object.values(modelsObj).reduce((count, arr)=>{
            count += arr.length;
            return count;
        }, 0) - curModelArr.length}</span> new models will be added: </h3>
                <div class="window-dropdown">${Object.keys(modelsObj).map((deviceType)=>`<h4 ${curDtArr.includes(deviceType) ? "" : 'class="onboard-data-new-parent"'}>${deviceType}</h4><ul>${modelsObj[deviceType].map((model)=>`<li class="onboard-data ${curModelArr.includes(model) ? "" : "onboard-data-new"}">${model}</li>`).join("")}</ul>`).join("")}</div>
            </div>
            <div class="window-component--users">
                <h3 class="window-header-users"><span class="onboard-data-new-parent">${Object.keys(usersObj).length - curDeptArr.length}</span> new departments and <span class="onboard-data-new">${Object.values(usersObj).reduce((count, arr)=>{
            count += arr.length;
            return count;
        }, 0) - curUserArr.length}</span> new users will be added: </h3>
                <div class="window-dropdown">${Object.keys(usersObj).map((deptName)=>`<h4 ${curDeptArr.includes(deptName) ? "" : 'class="onboard-data-new-parent"'}>${deptName}</h4><ul>${usersObj[deptName].map((user)=>`<li class="onboard-data ${curUserArr.includes(user) ? "" : "onboard-data-new"}">${user}</li>`).join("")}</ul>`).join("")}</div>
            </div>
            <div class="window-component--vendors">
                <h3 class="window-header-vendors"><span class="onboard-data-new">${vendorArr.length - curVendorArr.length}</span> new vendors will be added: </h3>
                <div class="window-dropdown">
                    <ul>
                    ${vendorArr.map((vendor)=>`<li class="onboard-data ${curVendorArr.includes(vendor) ? "" : "onboard-data-new"}">${vendor}</li>`).join("")}
                    </ul>
                </div>
            </div>

            <div class="form__group--submit form__group--submit--onboard">
                <button class="btn btn--submit btn--onboard">Submit</button>
            </div>
        </div>`;
        (0, _helpers.opaqueEl)(...this._popupFields);
        (0, _helpers.clearEl)(this._popupWindowEl);
        this._popupWindowEl.insertAdjacentHTML("afterbegin", markup);
        this._submitBtn = document.querySelector(".btn--onboard");
    }
}
exports.default = new OnboardView();

},{"../../utilities/formHelpers/fileUpload.js":"jGsEy","../../utilities/helpers":"ePVjH","../../utilities/config":"4wtf3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1b910":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpersJs = require("../../utilities/helpers.js");
var _configJs = require("../../utilities/config.js");
var _spriteSvg = require("url:../../../../sprite.svg");
var _spriteSvgDefault = parcelHelpers.interopDefault(_spriteSvg);
var _previewViewJs = require("../../utilities/formHelpers/previewView.js");
var _previewViewJsDefault = parcelHelpers.interopDefault(_previewViewJs);
class DevicesView extends (0, _previewViewJsDefault.default) {
    initialize(initFunction, previewHandlers) {
        this._parentElement = document.querySelector(".devices-grid");
        this._numResults = document.querySelector(".devices-filter__count");
        initFunction();
        this._bookmarksBtn = document.querySelector(".btn-filter--bookmarks");
        this.setBookmarkSvg("hide");
        this._scrollStartEl = document.querySelector(".devices-grid");
        this._mn = document.querySelector(".form__input--model-name");
        // Model preview SEARCH
        this._previewArray = [
            {
                "type": "model-name",
                "input": this._mn,
                "typeName": "Model Name"
            }
        ];
        this._initializePreview(previewHandlers);
        // submit filter
        this._form = document.querySelector(".devices-filter");
        console.log(this._parentElement);
    }
    addHandlerExportExcel(handler) {
        document.querySelector(".btn--export-excel--devices").addEventListener("click", ()=>{
            handler();
        });
    }
    _generateMarkup() {
        // FILTER BAR + CARDS
        console.log(this._data);
        return this._data.map((device)=>`
        <div class="card--devices data-asset-id="${device.assetId}">
            <a class="card--devices__details" href="${0, _configJs.ASSET_HOMEPAGE_URL}views/show_device#${device.assetId}">
                <h2 class="card--devices__details--asset-tag">${device.assetTag}</h2>
                <h5 class="card--devices__details--serial-number">${device.serialNumber}</h5>
                <h5 class="card--devices__details--model-name">${device.modelName}</h5>
            </a>
            
            <div class="card--devices__status">
                <h3 class="card--devices__status-header">Status</h3>
                <span class="card--devices__status--status ${device.status === "loaned" ? "unavailable" : "available"}">${(0, _helpersJs.eventToStatus)(device.status)}</span>
                ${device.status === "loaned" ? `<h4 class="card--devices__status-header--user">User</h4>
                <a class="btn-text--user" href="${0, _configJs.ASSET_HOMEPAGE_URL}views/show_user#${device.userId}">
                    <span class="card--devices__status--user">${device.userName}</span>
                </a>` : ""}
            </div>

             
            <button class="btn--round btn--round--absolute">
                <svg>
                    <use href="${0, _spriteSvgDefault.default}#icon-bookmark${device.bookmarked === 1 ? "-fill" : ""}"></use>
                </svg>
            </button>

        </div>`).join("");
    }
    addHandlerFilter(handler) {
        this._form.addEventListener("submit", (e)=>{
            console.log("prevent");
            e.preventDefault(); // Prevent default form submission behavior
            const form = e.target;
            const formData = new FormData(form);
            (0, _helpersJs.setFormData)(formData, "modelName");
            (0, _helpersJs.setFormData)(formData, "id");
            (0, _helpersJs.setFormData)(formData, "status", "on loan", "loaned");
            const updatedParams = new URLSearchParams(formData);
            // Replace the URL search parameters with the updated ones
            for (const [key, value] of formData.entries()){
                updatedParams.delete(key);
                updatedParams.append(encodeURIComponent(key), encodeURIComponent(value));
            }
            // Create a new URL with the updated parameters
            const currentURL = window.location.href;
            const newURL = currentURL.split("?")[0] + "?" + updatedParams.toString();
            // Update the URL without reloading the page
            history.replaceState({}, "", newURL);
            handler();
        });
    }
}
exports.default = new DevicesView();

},{"../../utilities/helpers.js":"ePVjH","../../utilities/config.js":"4wtf3","url:../../../../sprite.svg":"63C6q","../../utilities/formHelpers/previewView.js":"2inex","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ypuw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpersJs = require("../../utilities/helpers.js");
var _configJs = require("../../utilities/config.js");
var _showViewJs = require("../../utilities/showView.js");
var _showViewJsDefault = parcelHelpers.interopDefault(_showViewJs);
var _spriteSvg = require("url:../../../../sprite.svg");
var _spriteSvgDefault = parcelHelpers.interopDefault(_spriteSvg);
class UsersView extends (0, _showViewJsDefault.default) {
    initialize(initFunction) {
        this._parentElement = document.querySelector(".users-grid");
        this._numResults = document.querySelector(".users-filter__count");
        // this._initializeLoadEvents();
        this._bookmarksBtn = document.querySelector(".btn-filter--bookmarks");
        this.setBookmarkSvg("hide");
        this._scrollStartEl = document.querySelector(".users-grid");
        initFunction();
        this._form = document.querySelector(".users-filter");
    }
    addHandlerExportExcel(handler) {
        document.querySelector(".btn--export-excel--users").addEventListener("click", ()=>{
            handler();
        });
    }
    _generateMarkup() {
        return this._data.map((user)=>`
            <div class="card--users" data-user-id="${user.userId}">
                <a class="card--users__details" href="${0, _configJs.ASSET_HOMEPAGE_URL}views/show_user#${user.userId}">
                    <h2 class="card--users__details--name">${user.userName}</h2>
                    <h5 class="card--users__details--dept">${user.deptName}</h5>
                </a>

                <div class="card--users__devices">
                    <h3 class="card--users__devices-header">Devices</h3>
                    <div class="scroll-window">
                        ${user.devices ? user.devices.map((device)=>`<div class="scroll-window--current-device">
                            <a class="btn-text--device" href="${0, _configJs.ASSET_HOMEPAGE_URL}views/show_device#${device.assetId}">
                                <span class="card--users__devices--asset-tag">${device.assetTag}</span>
                                <span class="card--users__devices--device-model">${device.modelName}</span>
                            </a>
                            <a class="btn-text--return" href="${0, _configJs.ASSET_HOMEPAGE_URL}forms/returned_device?asset-tag=${device.assetId}">Return Device</a>
                        </div>`).join("") : ""}
                    </div>
                </div>

                <button class="btn--round btn--round--absolute">
                    <svg>
                        <use href="${0, _spriteSvgDefault.default}#icon-bookmark${user.bookmarked === 1 ? "-fill" : ""}"></use>
                    </svg>
                </button>
            </div>`).join("");
    }
    addHandlerFilter(handler) {
        this._form.addEventListener("submit", (e)=>{
            console.log("prevent");
            e.preventDefault(); // Prevent default form submission behavior
            const form = e.target;
            const formData = new FormData(form);
            (0, _helpersJs.setFormData)(formData, "deptName");
            (0, _helpersJs.setFormData)(formData, "deviceCount");
            (0, _helpersJs.setFormData)(formData, "userName");
            const updatedParams = new URLSearchParams(formData);
            // Replace the URL search parameters with the updated ones
            for (const [key, value] of formData.entries()){
                updatedParams.delete(key);
                updatedParams.append(encodeURIComponent(key), encodeURIComponent(value));
            }
            // Create a new URL with the updated parameters
            const currentURL = window.location.href;
            const newURL = currentURL.split("?")[0] + "?" + updatedParams.toString();
            // Update the URL without reloading the page
            history.replaceState({}, "", newURL);
            handler();
        });
    }
    renderDeviceCount(countArr) {
        this._deviceCountEl = document.querySelector(".form__input--device-count");
        const markup = `<option selected>All</option>` + countArr.map((count)=>`<option>${count}</option>`).join("");
        this._deviceCountEl.innerHTML = markup;
    }
}
exports.default = new UsersView();

},{"../../utilities/helpers.js":"ePVjH","../../utilities/config.js":"4wtf3","../../utilities/showView.js":"so2IN","url:../../../../sprite.svg":"63C6q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ji4Yy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _showViewJs = require("../../utilities/showView.js");
var _showViewJsDefault = parcelHelpers.interopDefault(_showViewJs);
var _helpersJs = require("../../utilities/helpers.js");
var _configJs = require("../../utilities/config.js");
var _spriteSvg = require("url:../../../../sprite.svg");
var _spriteSvgDefault = parcelHelpers.interopDefault(_spriteSvg);
class ShowDevice extends (0, _showViewJsDefault.default) {
    initialize(initFunction) {
        this._parentElement = document.querySelector(".show-device");
        console.log(this._parentElement);
        this._deviceStatus;
        this._addHandlerCloseError();
        initFunction();
    }
    _generateMarkup() {
        console.log(this._data);
        const { details, events, pastUsers, currentUser } = this._data;
        console.log(details);
        this._assetId = details.assetId;
        this._deviceStatus = details.status;
        return `

        <div class="show-device-overview">
            <div class="show-device-container">
                <h1 class="show-device-details__asset-tag">Asset Tag: ${details.assetTag}</h1>
                <div class="show-device-details">
                    <h4 class="show-device-details__serial-number">Serial Number: ${details.serialNumber}</h4>
                    <h4 class="show-device-details__model-name">Model: ${details.modelName}</h4>
                    <h4 class="show-device-details__device-type">Type: ${details.deviceType}</h4>
                    <h4 class="show-device-details__device-type">Vendor: ${details.vendorName}</h4>
                    <div class="location-edit-component">
                        <h4 class="show-device-details__model-value">Value: </h4>
                        <h4 class="edit-el">${details.modelValue}</h4>
                        <a class="btn btn--edit btn--edit__value">Edit</a>
                        <a class="btn btn--save btn--save__value hidden-visibility" data-model-value="${details.assetId}">Save</a>
                    </div>
                    <div class="location-edit-component">
                        <h4 class="show-device-details__location">Location: </h4>
                        <h4 class="edit-el">${details.location}</h4>
                        <a class="btn btn--edit btn--edit__location">Edit</a>
                        <a class="btn btn--save btn--save__location hidden-visibility" data-location-name="${details.assetId}">Save</a>
                    </div>
                </div>
            </div>

            <div class="show-device-users--past">
                <h2 class="show-device-user-title">PAST USERS</h2>
                <hr />
                ${pastUsers.map((user)=>`
                <a class="btn-text--user" href="${0, _configJs.ASSET_HOMEPAGE_URL}views/show_user#${user.userId}">
                    <h4 class="show-device-user__name">${user.userName}</h4>
                </a>`).join("")}
            </div>

            <div class="show-device-users--current">
                <h2 class="show-device-user-title">STATUS</h2>
                <hr />
                <div class="show-device-user__status ${details.status === "loaned" ? "unavailable" : "available"}">${(0, _helpersJs.eventToStatus)(details.status)}</div>
                ${details.status === "loaned" ? `<div class="show-device-user__name-group">
                    <h3 class="show-device-user__name-title">USER:</h3>
                    <a class="btn-text--user" href="${0, _configJs.ASSET_HOMEPAGE_URL}views/show_user#${currentUser.userId}">
                        <h4 class="show-device-user__name">${currentUser.userName}</h4>
                    </a>
                </div>
                <a class="btn-text--return" href="${0, _configJs.ASSET_HOMEPAGE_URL}forms/returned_device?asset-tag=${details.assetId}">Return Device</a>` : ""}
            </div>
            <div class="show-device-actions">
                <button class="btn--round btn--bookmark">
                    <svg>
                        <use href="${0, _spriteSvgDefault.default}#icon-bookmark${details.bookmarked === 1 ? "-fill" : ""}"></use>
                    </svg>
                </button>
                ${details.status !== "condemned" && details.status !== "loaned" ? `<button class="btn btn--condemn" data-asset-id="${details.assetId}">CONDEMN</button>
                <button class="btn btn--loan" data-asset-id="${details.assetId}">LOAN</button>` : ""}
            </div>
        </div>

        <div class="timeline--show-device">

            ${events.map((ev, id)=>{
            console.log(ev);
            if (id % 2 === 0) return `<div class="timeline__component">
                        <div class="timeline__date timeline__date--right">${ev.eventDate}</div>
                    </div>
                    <div class="timeline__middle">
                        <div class="timeline__point${id === events.length - 1 ? " timeline__point--bottom" : ""}"></div>
                    </div>
                    <div class="timeline__component timeline__component--bg">
                        ${ev.eventType ? `<h3 class="timeline__title">${details.assetTag} was ${ev.eventType} ${ev.userName ? `by ${ev.userName}` : ""}</h3>` : ""}
                        <p class="timeline__paragraph edit-el">${ev.remarks ?? ""}</p>
                        <div class="timeline-edit-component">
                            <a class="btn btn--edit btn--edit__timeline">Edit</a>${ev.filePath ? `
                            <a class="btn btn--file-download" data-event-id="${ev.eventId}">Download PDF</a>` : ""}
                            <a class="btn btn--save btn--save__timeline hidden-visibility" data-event-id="${ev.eventId}">Save</a>
                        </div>
                    </div>`;
            else return `
                <div class="timeline__component timeline__component--bg">
                    ${ev.eventType ? `<h3 class="timeline__title">${details.assetTag} was ${ev.eventType}</h3>` : ""}
                    <p class="timeline__paragraph edit-el">${ev.remarks ?? ""}</p>
                    <div class="timeline-edit-component">
                        <a class="btn btn--edit btn--edit__timeline">Edit</a>${ev.filePath ? `
                        <a class="btn btn--file-download" data-event-id="${ev.eventId}">Download PDF</a>` : ""}
                        <a class="btn btn--save btn--save__timeline hidden-visibility" data-event-id="${ev.eventId}">Save</a>
                    </div>
                </div>
                <div class="timeline__middle">
                    <div class="timeline__point${id === events.length - 1 ? " timeline__point--bottom" : ""}"></div>
                </div>
                <div class="timeline__component">
                    <div class="timeline__date">${ev.eventDate}</div>
                </div>`;
        }).join("")}

        </div>`;
    }
    addActionHandlers(handler) {
        document.addEventListener("click", (e)=>{
            if (e.target.closest(".btn--loan")) handler(e.target.dataset.assetId, "loan");
            if (e.target.closest(".btn--condemn")) {
                console.log(e.target.dataset.assetId);
                handler(e.target.dataset.assetId, "condemned");
            }
            if (e.target.closest(".btn--return")) {
                console.log(e.target.dataset.assetId);
                handler(e.target.dataset.assetId, "returned");
            }
        });
    }
}
exports.default = new ShowDevice();

},{"../../utilities/showView.js":"so2IN","../../utilities/helpers.js":"ePVjH","../../utilities/config.js":"4wtf3","url:../../../../sprite.svg":"63C6q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8x44x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _showViewJs = require("../../utilities/showView.js");
var _showViewJsDefault = parcelHelpers.interopDefault(_showViewJs);
var _helpersJs = require("../../utilities/helpers.js");
var _configJs = require("../../utilities/config.js");
var _spriteSvg = require("url:../../../../sprite.svg");
var _spriteSvgDefault = parcelHelpers.interopDefault(_spriteSvg);
class ShowUser extends (0, _showViewJsDefault.default) {
    initialize(initFunction) {
        this._parentElement = document.querySelector(".show-user");
        console.log(this._parentElement);
        this._addHandlerCloseError();
        initFunction();
    }
    _generateMarkup() {
        const { details, events, pastDevices, currentDevices } = this._data;
        this._userId = details.userId;
        console.log(details.userId);
        console.log(currentDevices);
        console.log(events);
        return `

        <div class="show-user-overview">
            <div class="show-user-details">
                <h1 class="show-user-details__name">${details.userName}</h1>
                <h2 class="show-user-details__dept">${details.deptName}</h2>
            </div>

            <div class="show-user-devices--past">
                <h2 class="show-user-device-title">PAST DEVICES</h2>
                <hr />
                <div class="scroll-window">
                ${pastDevices.map((device)=>`
                    <a class="btn-text--device" href="${0, _configJs.ASSET_HOMEPAGE_URL}views/show_device#${device.assetId}">
                        <h3 class="show-user-device__asset-tag">${device.assetTag}</h3>
                        <h5 class="show-user-device__model-name">${device.modelName}</h5>
                    </a>`)}
                </div>
            </div>

            <div class="show-user-devices--current">
                <h2 class="show-user-device-title">CURRENT DEVICES</h2>
                <hr />
                <div class="scroll-window">
                ${currentDevices.map((device)=>`
                    <div class="scroll-window--current-device">
                        <a href="${0, _configJs.ASSET_HOMEPAGE_URL}views/show_device#${device.assetId}" class="btn-text--device">
                            <h3 class="btn-text--device__asset-tag">${device.assetTag}</h3>
                            <h5 class="btn-text--device__model-name">${device.modelName}</h5>
                        </a>
                        <a class="btn-text--return" href="${0, _configJs.ASSET_HOMEPAGE_URL}forms/returned_device?asset-tag=${device.assetId}">Return Device</a>
                    </div>`)}
                </div>
            </div>
            <div class="show-user-actions">
                <button class="btn--round btn--bookmark">
                    <svg>
                        <use href="${0, _spriteSvgDefault.default}#icon-bookmark${details.bookmarked === 1 ? "-fill" : ""}"></use>
                    </svg>
                </button>
                ${currentDevices.length === 0 && details.hasResigned !== 1 ? `<button class="btn btn--resign" data-user-id="${details.userId}">Resign</button>` : ""}
                ${details.hasResigned !== 1 ? `<button class="btn btn--loan" data-user-id="${details.userId}">Loan Device</button>` : ""}
            </div>
        </div>

        <div class="timeline--show-user">

            ${events.map((ev, id)=>{
            if (id % 2 === 0) return `<div class="timeline__component">
                        <div class="timeline__date timeline__date--right">${ev.eventDate}</div>
                    </div>
                    <div class="timeline__middle">
                        <div class="timeline__point${id === events.length - 1 ? " timeline__point--bottom" : ""}"></div>
                    </div>
                    <div class="timeline__component timeline__component--bg">
                        ${ev.eventType ? `<h3 class="timeline__title">${ev.assetTag || "User"} was ${ev.eventType}</h3>` : ""}
                        <p class="timeline__paragraph">${ev.remarks ?? ""}</p>
                        <div class="timeline-edit-component">
                            <a class="btn btn--edit btn--edit__timeline">Edit</a>${ev.filePath ? `
                            <a class="btn btn--file-download" data-event-id="${ev.eventId}">Download PDF</a>` : ""}
                            <a class="btn btn--save btn--save__timeline hidden-visibility" data-event-id="${ev.eventId}">Save</a>
                        </div>
                    </div>`;
            else return `
                <div class="timeline__component timeline__component--bg">
                    ${ev.eventType ? `<h3 class="timeline__title">${ev.assetTag || "User"} was ${ev.eventType}</h3>` : ""}
                    <p class="timeline__paragraph">${ev.remarks ?? ""}</p>
                    <div class="timeline-edit-component">
                        <a class="btn btn--edit btn--edit__timeline">Edit</a>${ev.filePath ? `
                        <a class="btn btn--file-download" data-event-id="${ev.eventId}">Download PDF</a>` : ""}
                        <a class="btn btn--save btn--save__timeline hidden-visibility" data-event-id="${ev.eventId}">Save</a>
                    </div>
                </div>
                <div class="timeline__middle">
                    <div class="timeline__point${id === events.length - 1 ? " timeline__point--bottom" : ""}"></div>
                </div>
                <div class="timeline__component">
                    <div class="timeline__date">${ev.eventDate}</div>
                </div>`;
        }).join("")}

        </div>`;
    }
    addActionHandlers(handler) {
        document.addEventListener("click", (e)=>{
            if (e.target.closest(".btn--resign")) handler(e.target.dataset.userId, "remove");
            if (e.target.closest(".btn--loan")) handler(e.target.dataset.userId, "loan");
            if (e.target.closest(".btn--return")) {
                console.log(e.target.dataset.assetId);
                handler(e.target.dataset.assetId, "returned");
            }
        });
    }
}
exports.default = new ShowUser();

},{"../../utilities/showView.js":"so2IN","../../utilities/helpers.js":"ePVjH","../../utilities/config.js":"4wtf3","url:../../../../sprite.svg":"63C6q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7utSO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpersJs = require("../../utilities/helpers.js");
var _configJs = require("../../utilities/config.js");
var _previewViewJs = require("../../utilities/formHelpers/previewView.js");
var _previewViewJsDefault = parcelHelpers.interopDefault(_previewViewJs);
class HistoryView extends (0, _previewViewJsDefault.default) {
    initialize(initFunction, previewHandlers) {
        this._eventElArr = document.querySelectorAll(".history-event");
        this._parentElement = document.querySelector(".table-body");
        console.log(this._parentElement);
        // this._eventLoadedEvent = new Event("eventLoaded");
        this._numResults = document.querySelector(".history-filter__count");
        // this._initializeLoadEvents();
        this._scrollStartEl = document.querySelector(".table");
        initFunction();
        this._mn = document.querySelector(".form__input--model-name");
        // Model preview SEARCH
        this._previewArray = [
            {
                "type": "model-name",
                "input": this._mn,
                "typeName": "Model Name"
            }
        ];
        this._initializePreview(previewHandlers);
        // submit filter
        this._form = document.querySelector(".history-filter");
    }
    addHandlerFilter(handler) {
        this._form.addEventListener("submit", (e)=>{
            console.log("prevent");
            e.preventDefault(); // Prevent default form submission behavior
            const form = e.target;
            const formData = new FormData(form);
            (0, _helpersJs.setFormData)(formData, "modelName");
            (0, _helpersJs.setFormData)(formData, "id");
            (0, _helpersJs.setFormData)(formData, "userName");
            const updatedParams = new URLSearchParams(formData);
            // Replace the URL search parameters with the updated ones
            for (const [key, value] of formData.entries()){
                updatedParams.delete(key);
                updatedParams.append(encodeURIComponent(key), encodeURIComponent(value));
            }
            // Create a new URL with the updated parameters
            const currentURL = window.location.href;
            const newURL = currentURL.split("?")[0] + "?" + updatedParams.toString();
            // Update the URL without reloading the page
            history.replaceState({}, "", newURL);
            handler();
        });
    }
    addHandlerExportExcel(handler) {
        document.querySelector(".btn--export-excel--history").addEventListener("click", ()=>{
            handler();
        });
    }
    addHandlerRedirect() {
        this._parentElement.addEventListener("click", (e)=>{
            const userId = e.target.closest(".table-data--person_name")?.dataset.userId;
            if (!userId) {
                const assetId = e.target.closest(".table-data").dataset.assetId;
                if (!assetId) {
                    const userId = e.target.closest(".table-data").dataset.userId;
                    window.location.href = `${0, _configJs.ASSET_HOMEPAGE_URL}views/show_user#${userId}`;
                    return;
                } else {
                    window.location.href = `${0, _configJs.ASSET_HOMEPAGE_URL}views/show_device#${assetId}`;
                    return;
                }
            } else window.location.href = `${0, _configJs.ASSET_HOMEPAGE_URL}views/show_user#${userId}`;
        });
    }
    renderEvents() {
        this._eventDes = this._data.reduce((eventArr, event)=>{
            if (eventArr.length < 4 && event.eventType === "loaned" || event.eventType === "returned") eventArr.push(`
            <span class="history-event__datetime">${event.eventDate}</span>
            <p class="history-event__description">${event.assetTag} (S/N ${event.serialNumber}) was ${event.eventType} ${event.userName ? `by ${event.userName}` : "by Admin"}</p>`);
            return eventArr;
        }, []);
        console.log(this._eventDes);
        this._eventElArr.forEach((eventEl, i)=>eventEl.innerHTML = this._eventDes[i]);
    }
    _generateMarkup() {
        return this._data.map((event)=>{
            return `
            <tr class="table-data" ${event.assetId ? `data-asset-id="${event.assetId}">` : `data-user-id="${event.userId}">`}
                <td data-cell="asset tag" class="table-data--asset_tag">${event.assetTag || "-"}</td>
                <td data-cell="serial number" class="table-data--serial_number">${event.serialNumber || "-"}</td>
                <td data-cell="device type" class="table-data--device_type">${event.deviceType || "-"}</td>
                <td data-cell="model name" class="table-data--model_name">${event.modelName || "-"}</td>
                <td data-cell="event type" class="table-data--event_type">${event.eventType}</td>
                <td data-cell="person name" class="table-data--person_name" data-user-id="${event.userId}">${event.userName || "-"}</td>
                <td data-cell="event date" class="table-data--event_date">${Intl.DateTimeFormat("en-sg", (0, _configJs.dateTimeObject)).format(new Date(event.eventDate))}</td>
            </tr>`;
        }).join("");
    }
}
exports.default = new HistoryView();

},{"../../utilities/helpers.js":"ePVjH","../../utilities/config.js":"4wtf3","../../utilities/formHelpers/previewView.js":"2inex","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iHc12":[function(require,module,exports) {
// APPLIES TO DEVICES, USERS AND HISTORY
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _showViewJs = require("../../utilities/showView.js");
var _showViewJsDefault = parcelHelpers.interopDefault(_showViewJs);
class PaginationView extends (0, _showViewJsDefault.default) {
    initialize() {
        this._parentElement = document.querySelector(".pagination");
        console.log(this._parentElement);
    }
    addHandlerClick(handler, el) {
        console.log(el);
        this._parentElement.addEventListener("click", function(e) {
            const btn = e.target.closest(".btn--inline") // event delegation
            ;
            if (!btn) return;
            const goToPage = +btn.dataset.goto;
            handler(goToPage);
            el.scrollIntoView({
                behavior: "smooth",
                block: "start" // Optional: Adjust the scroll position (start, center, end)
            });
        });
    }
    _generateMarkup() {
        console.log(this._data);
        const curPage = this._data.page;
        const numResults = this._data.bookmarked ? this._data.bookmarks.length : this._data.results.length;
        const numPages = Math.ceil(numResults / this._data.resultsPerPage);
        // page 1, other pages
        if (curPage === 1 && numPages > 1) // use data attribute to address connection between DOM and code
        return `
            <button data-goto="${curPage + 1}" class="btn--inline pagination__btn--next">
                <span>Page ${curPage + 1}</span>
            </button>`;
        // Last page
        if (curPage === numPages && numPages > 1) return `
            <button data-goto="${curPage - 1}" class="btn--inline pagination__btn--prev">
                <span>Page ${curPage - 1}</span>
            </button>`;
        // Other page
        if (curPage < numPages) return `
            <button data-goto="${curPage - 1}" class="btn--inline pagination__btn--prev">
            <span>Page ${curPage - 1}</span>
          </button>
          <button data-goto="${curPage + 1}" class="btn--inline pagination__btn--next">
            <span>Page ${curPage + 1}</span>
          </button>`;
        // page 1 ONLY
        return "";
    }
}
exports.default = new PaginationView();

},{"../../utilities/showView.js":"so2IN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gBDug":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _autoprefixer = require("autoprefixer");
var _helpersJs = require("../../utilities/helpers.js");
var _showViewJs = require("../../utilities/showView.js");
var _showViewJsDefault = parcelHelpers.interopDefault(_showViewJs);
class EditView extends (0, _showViewJsDefault.default) {
    addEditHandlers(handler) {
        document.addEventListener("click", (e)=>{
            if (e.target.closest(".btn--edit")) {
                this._editBtns = document.querySelectorAll(".btn--edit");
                this._saveBtns = document.querySelectorAll(".btn--save");
                this._focusedEditBtn = e.target;
                this._focusedSaveBtn = e.target.parentElement.querySelector(".btn--save");
                console.log(this._focusedSaveBtn);
                handler();
            }
            if (e.target.closest(".btn--save")) {
                // make sure that the save buttons match
                if (!this._focusedSaveBtn === e.target) {
                    this.renderError(`Something went wrong!`);
                    return;
                }
                // pass in the value
                let type, data;
                this._dataset = this._focusedSaveBtn.dataset;
                if (this._dataset.locationName) {
                    data = this._dataset.locationName;
                    type = "location";
                } else if (this._dataset.eventId) {
                    data = this._dataset.eventId;
                    type = "remark";
                } else if (this._dataset.modelValue) {
                    data = this._dataset.modelValue;
                    type = "value";
                } else return;
                handler(type, data, this._focusedRemark.innerHTML);
            }
        });
    }
    renderEdit() {
        this._focusedRemark = this._focusedEditBtn.previousElementSibling || this._focusedEditBtn.parentElement.previousElementSibling;
        console.log(this._focusedRemark);
        this._focusedRemark.contentEditable = true;
        this._focusedRemark.focus();
        this._focusedRemark.classList.add("timeline__editable");
        // hide edits, show save
        this._editBtns.forEach((editBtn)=>(0, _helpersJs.transparentEl)(editBtn));
        (0, _helpersJs.opaqueEl)(this._focusedSaveBtn);
    }
    renderSave() {
        this._focusedRemark.contentEditable = false;
        this._focusedRemark.classList.remove("timeline__editable");
        this._focusedRemark = undefined;
        // hide edits, show save
        this._editBtns.forEach((editBtn)=>(0, _helpersJs.opaqueEl)(editBtn));
        (0, _helpersJs.transparentEl)(this._focusedSaveBtn);
    }
}
exports.default = new EditView();

},{"autoprefixer":"3mKf2","../../utilities/helpers.js":"ePVjH","../../utilities/showView.js":"so2IN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3mKf2":[function(require,module,exports) {
var process = require("f91382627304e5e5");
let browserslist = require("f027a13ded972043");
let { agents } = require("9aff224e825e7232");
let pico = require("49d27feab5ebc710");
let Browsers = require("e77049c087cc0404");
let Prefixes = require("46d61e09f7ad6f79");
let dataPrefixes = require("2e5dd2aa4570cb6c");
let getInfo = require("d5165508aec7752c");
let autoprefixerData = {
    browsers: agents,
    prefixes: dataPrefixes
};
const WARNING = "\n  Replace Autoprefixer `browsers` option to Browserslist config.\n  Use `browserslist` key in `package.json` or `.browserslistrc` file.\n\n  Using `browsers` option can cause errors. Browserslist config can\n  be used for Babel, Autoprefixer, postcss-normalize and other tools.\n\n  If you really need to use option, rename it to `overrideBrowserslist`.\n\n  Learn more at:\n  https://github.com/browserslist/browserslist#readme\n  https://twitter.com/browserslist\n\n";
function isPlainObject(obj) {
    return Object.prototype.toString.apply(obj) === "[object Object]";
}
let cache = new Map();
function timeCapsule(result, prefixes) {
    if (prefixes.browsers.selected.length === 0) return;
    if (prefixes.add.selectors.length > 0) return;
    if (Object.keys(prefixes.add).length > 2) return;
    /* c8 ignore next 11 */ result.warn("Autoprefixer target browsers do not need any prefixes.You do not need Autoprefixer anymore.\nCheck your Browserslist config to be sure that your targets are set up correctly.\n\n  Learn more at:\n  https://github.com/postcss/autoprefixer#readme\n  https://github.com/browserslist/browserslist#readme\n\n");
}
module.exports = plugin;
function plugin(...reqs) {
    let options;
    if (reqs.length === 1 && isPlainObject(reqs[0])) {
        options = reqs[0];
        reqs = undefined;
    } else if (reqs.length === 0 || reqs.length === 1 && !reqs[0]) reqs = undefined;
    else if (reqs.length <= 2 && (Array.isArray(reqs[0]) || !reqs[0])) {
        options = reqs[1];
        reqs = reqs[0];
    } else if (typeof reqs[reqs.length - 1] === "object") options = reqs.pop();
    if (!options) options = {};
    if (options.browser) throw new Error("Change `browser` option to `overrideBrowserslist` in Autoprefixer");
    else if (options.browserslist) throw new Error("Change `browserslist` option to `overrideBrowserslist` in Autoprefixer");
    if (options.overrideBrowserslist) reqs = options.overrideBrowserslist;
    else if (options.browsers) {
        if (typeof console !== "undefined" && console.warn) console.warn(pico.red(WARNING.replace(/`[^`]+`/g, (i)=>pico.yellow(i.slice(1, -1)))));
        reqs = options.browsers;
    }
    let brwlstOpts = {
        ignoreUnknownVersions: options.ignoreUnknownVersions,
        stats: options.stats,
        env: options.env
    };
    function loadPrefixes(opts) {
        let d = autoprefixerData;
        let browsers = new Browsers(d.browsers, reqs, opts, brwlstOpts);
        let key = browsers.selected.join(", ") + JSON.stringify(options);
        if (!cache.has(key)) cache.set(key, new Prefixes(d.prefixes, browsers, options));
        return cache.get(key);
    }
    return {
        postcssPlugin: "autoprefixer",
        prepare (result) {
            let prefixes = loadPrefixes({
                from: result.opts.from,
                env: options.env
            });
            return {
                OnceExit (root) {
                    timeCapsule(result, prefixes);
                    if (options.remove !== false) prefixes.processor.remove(root, result);
                    if (options.add !== false) prefixes.processor.add(root, result);
                }
            };
        },
        info (opts) {
            opts = opts || {};
            opts.from = opts.from || process.cwd();
            return getInfo(loadPrefixes(opts));
        },
        options,
        browsers: reqs
    };
}
plugin.postcss = true;
/**
 * Autoprefixer data
 */ plugin.data = autoprefixerData;
/**
 * Autoprefixer default browsers
 */ plugin.defaults = browserslist.defaults;
/**
 * Inspect with default Autoprefixer
 */ plugin.info = ()=>plugin().info();

},{"f91382627304e5e5":"d5jf4","f027a13ded972043":"h32Zo","9aff224e825e7232":"1o0P3","49d27feab5ebc710":"1298x","e77049c087cc0404":"dGs5H","46d61e09f7ad6f79":"1EIhI","2e5dd2aa4570cb6c":"eWph3","d5165508aec7752c":"bGWG3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"h32Zo":[function(require,module,exports) {
var jsReleases = require("92e3660602ae04ac");
var agents = require("cbe20b3656de85b3").agents;
var jsEOL = require("86a87d707b63a4a0");
var path = require("16d9435aac8c9c34");
var e2c = require("f94f671dcbf096f7");
var BrowserslistError = require("a610b394abe6d220");
var parse = require("3d001556e62ae7c7");
var env = require("d933602907f19a21") // Will load browser.js in webpack
;
var YEAR = 365.259641 * 86400000;
var ANDROID_EVERGREEN_FIRST = 37;
// Helpers
function isVersionsMatch(versionA, versionB) {
    return (versionA + ".").indexOf(versionB + ".") === 0;
}
function isEolReleased(name) {
    var version = name.slice(1);
    return browserslist.nodeVersions.some(function(i) {
        return isVersionsMatch(i, version);
    });
}
function normalize(versions) {
    return versions.filter(function(version) {
        return typeof version === "string";
    });
}
function normalizeElectron(version) {
    var versionToUse = version;
    if (version.split(".").length === 3) versionToUse = version.split(".").slice(0, -1).join(".");
    return versionToUse;
}
function nameMapper(name) {
    return function mapName(version) {
        return name + " " + version;
    };
}
function getMajor(version) {
    return parseInt(version.split(".")[0]);
}
function getMajorVersions(released, number) {
    if (released.length === 0) return [];
    var majorVersions = uniq(released.map(getMajor));
    var minimum = majorVersions[majorVersions.length - number];
    if (!minimum) return released;
    var selected = [];
    for(var i = released.length - 1; i >= 0; i--){
        if (minimum > getMajor(released[i])) break;
        selected.unshift(released[i]);
    }
    return selected;
}
function uniq(array) {
    var filtered = [];
    for(var i = 0; i < array.length; i++)if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);
    return filtered;
}
function fillUsage(result, name, data) {
    for(var i in data)result[name + " " + i] = data[i];
}
function generateFilter(sign, version) {
    version = parseFloat(version);
    if (sign === ">") return function(v) {
        return parseFloat(v) > version;
    };
    else if (sign === ">=") return function(v) {
        return parseFloat(v) >= version;
    };
    else if (sign === "<") return function(v) {
        return parseFloat(v) < version;
    };
    else return function(v) {
        return parseFloat(v) <= version;
    };
}
function generateSemverFilter(sign, version) {
    version = version.split(".").map(parseSimpleInt);
    version[1] = version[1] || 0;
    version[2] = version[2] || 0;
    if (sign === ">") return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(v, version) > 0;
    };
    else if (sign === ">=") return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(v, version) >= 0;
    };
    else if (sign === "<") return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(version, v) > 0;
    };
    else return function(v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(version, v) >= 0;
    };
}
function parseSimpleInt(x) {
    return parseInt(x);
}
function compare(a, b) {
    if (a < b) return -1;
    if (a > b) return 1;
    return 0;
}
function compareSemver(a, b) {
    return compare(parseInt(a[0]), parseInt(b[0])) || compare(parseInt(a[1] || "0"), parseInt(b[1] || "0")) || compare(parseInt(a[2] || "0"), parseInt(b[2] || "0"));
}
// this follows the npm-like semver behavior
function semverFilterLoose(operator, range) {
    range = range.split(".").map(parseSimpleInt);
    if (typeof range[1] === "undefined") range[1] = "x";
    // ignore any patch version because we only return minor versions
    // range[2] = 'x'
    switch(operator){
        case "<=":
            return function(version) {
                version = version.split(".").map(parseSimpleInt);
                return compareSemverLoose(version, range) <= 0;
            };
        case ">=":
        default:
            return function(version) {
                version = version.split(".").map(parseSimpleInt);
                return compareSemverLoose(version, range) >= 0;
            };
    }
}
// this follows the npm-like semver behavior
function compareSemverLoose(version, range) {
    if (version[0] !== range[0]) return version[0] < range[0] ? -1 : 1;
    if (range[1] === "x") return 0;
    if (version[1] !== range[1]) return version[1] < range[1] ? -1 : 1;
    return 0;
}
function resolveVersion(data, version) {
    if (data.versions.indexOf(version) !== -1) return version;
    else if (browserslist.versionAliases[data.name][version]) return browserslist.versionAliases[data.name][version];
    else return false;
}
function normalizeVersion(data, version) {
    var resolved = resolveVersion(data, version);
    if (resolved) return resolved;
    else if (data.versions.length === 1) return data.versions[0];
    else return false;
}
function filterByYear(since, context) {
    since = since / 1000;
    return Object.keys(agents).reduce(function(selected, name) {
        var data = byName(name, context);
        if (!data) return selected;
        var versions = Object.keys(data.releaseDate).filter(function(v) {
            var date = data.releaseDate[v];
            return date !== null && date >= since;
        });
        return selected.concat(versions.map(nameMapper(data.name)));
    }, []);
}
function cloneData(data) {
    return {
        name: data.name,
        versions: data.versions,
        released: data.released,
        releaseDate: data.releaseDate
    };
}
function mapVersions(data, map) {
    data.versions = data.versions.map(function(i) {
        return map[i] || i;
    });
    data.released = data.released.map(function(i) {
        return map[i] || i;
    });
    var fixedDate = {};
    for(var i in data.releaseDate)fixedDate[map[i] || i] = data.releaseDate[i];
    data.releaseDate = fixedDate;
    return data;
}
function byName(name, context) {
    name = name.toLowerCase();
    name = browserslist.aliases[name] || name;
    if (context.mobileToDesktop && browserslist.desktopNames[name]) {
        var desktop = browserslist.data[browserslist.desktopNames[name]];
        if (name === "android") return normalizeAndroidData(cloneData(browserslist.data[name]), desktop);
        else {
            var cloned = cloneData(desktop);
            cloned.name = name;
            if (name === "op_mob") cloned = mapVersions(cloned, {
                "10.0-10.1": "10"
            });
            return cloned;
        }
    }
    return browserslist.data[name];
}
function normalizeAndroidVersions(androidVersions, chromeVersions) {
    var firstEvergreen = ANDROID_EVERGREEN_FIRST;
    var last = chromeVersions[chromeVersions.length - 1];
    return androidVersions.filter(function(version) {
        return /^(?:[2-4]\.|[34]$)/.test(version);
    }).concat(chromeVersions.slice(firstEvergreen - last - 1));
}
function normalizeAndroidData(android, chrome) {
    android.released = normalizeAndroidVersions(android.released, chrome.released);
    android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
    return android;
}
function checkName(name, context) {
    var data = byName(name, context);
    if (!data) throw new BrowserslistError("Unknown browser " + name);
    return data;
}
function unknownQuery(query) {
    return new BrowserslistError("Unknown browser query `" + query + "`. " + "Maybe you are using old Browserslist or made typo in query.");
}
function filterAndroid(list, versions, context) {
    if (context.mobileToDesktop) return list;
    var released = browserslist.data.android.released;
    var last = released[released.length - 1];
    var diff = last - ANDROID_EVERGREEN_FIRST - versions;
    if (diff > 0) return list.slice(-1);
    else return list.slice(diff - 1);
}
function resolve(queries, context) {
    return parse(QUERIES, queries).reduce(function(result, node, index) {
        if (node.not && index === 0) throw new BrowserslistError("Write any browsers query (for instance, `defaults`) before `" + node.query + "`");
        var type = QUERIES[node.type];
        var array = type.select.call(browserslist, context, node).map(function(j) {
            var parts = j.split(" ");
            if (parts[1] === "0") return parts[0] + " " + byName(parts[0], context).versions[0];
            else return j;
        });
        if (node.compose === "and") {
            if (node.not) return result.filter(function(j) {
                return array.indexOf(j) === -1;
            });
            else return result.filter(function(j) {
                return array.indexOf(j) !== -1;
            });
        } else {
            if (node.not) {
                var filter = {};
                array.forEach(function(j) {
                    filter[j] = true;
                });
                return result.filter(function(j) {
                    return !filter[j];
                });
            }
            return result.concat(array);
        }
    }, []);
}
function prepareOpts(opts) {
    if (typeof opts === "undefined") opts = {};
    if (typeof opts.path === "undefined") opts.path = path.resolve ? path.resolve(".") : ".";
    return opts;
}
function prepareQueries(queries, opts) {
    if (typeof queries === "undefined" || queries === null) {
        var config = browserslist.loadConfig(opts);
        if (config) queries = config;
        else queries = browserslist.defaults;
    }
    return queries;
}
function checkQueries(queries) {
    if (!(typeof queries === "string" || Array.isArray(queries))) throw new BrowserslistError("Browser queries must be an array or string. Got " + typeof queries + ".");
}
var cache = {};
function browserslist(queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);
    var context = {
        ignoreUnknownVersions: opts.ignoreUnknownVersions,
        dangerousExtend: opts.dangerousExtend,
        mobileToDesktop: opts.mobileToDesktop,
        path: opts.path,
        env: opts.env
    };
    env.oldDataWarning(browserslist.data);
    var stats = env.getStat(opts, browserslist.data);
    if (stats) {
        context.customUsage = {};
        for(var browser in stats)fillUsage(context.customUsage, browser, stats[browser]);
    }
    var cacheKey = JSON.stringify([
        queries,
        context
    ]);
    if (cache[cacheKey]) return cache[cacheKey];
    var result = uniq(resolve(queries, context)).sort(function(name1, name2) {
        name1 = name1.split(" ");
        name2 = name2.split(" ");
        if (name1[0] === name2[0]) {
            // assumptions on caniuse data
            // 1) version ranges never overlaps
            // 2) if version is not a range, it never contains `-`
            var version1 = name1[1].split("-")[0];
            var version2 = name2[1].split("-")[0];
            return compareSemver(version2.split("."), version1.split("."));
        } else return compare(name1[0], name2[0]);
    });
    if (!env.env.BROWSERSLIST_DISABLE_CACHE) cache[cacheKey] = result;
    return result;
}
browserslist.parse = function(queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);
    return parse(QUERIES, queries);
};
// Will be filled by Can I Use data below
browserslist.cache = {};
browserslist.data = {};
browserslist.usage = {
    global: {},
    custom: null
};
// Default browsers query
browserslist.defaults = [
    "> 0.5%",
    "last 2 versions",
    "Firefox ESR",
    "not dead"
];
// Browser names aliases
browserslist.aliases = {
    fx: "firefox",
    ff: "firefox",
    ios: "ios_saf",
    explorer: "ie",
    blackberry: "bb",
    explorermobile: "ie_mob",
    operamini: "op_mini",
    operamobile: "op_mob",
    chromeandroid: "and_chr",
    firefoxandroid: "and_ff",
    ucandroid: "and_uc",
    qqandroid: "and_qq"
};
// Can I Use only provides a few versions for some browsers (e.g. and_chr).
// Fallback to a similar browser for unknown versions
browserslist.desktopNames = {
    and_chr: "chrome",
    and_ff: "firefox",
    ie_mob: "ie",
    op_mob: "opera",
    android: "chrome" // has extra processing logic
};
// Aliases to work with joined versions like `ios_saf 7.0-7.1`
browserslist.versionAliases = {};
browserslist.clearCaches = env.clearCaches;
browserslist.parseConfig = env.parseConfig;
browserslist.readConfig = env.readConfig;
browserslist.findConfig = env.findConfig;
browserslist.loadConfig = env.loadConfig;
browserslist.coverage = function(browsers, stats) {
    var data;
    if (typeof stats === "undefined") data = browserslist.usage.global;
    else if (stats === "my stats") {
        var opts = {};
        opts.path = path.resolve ? path.resolve(".") : ".";
        var customStats = env.getStat(opts);
        if (!customStats) throw new BrowserslistError("Custom usage statistics was not provided");
        data = {};
        for(var browser in customStats)fillUsage(data, browser, customStats[browser]);
    } else if (typeof stats === "string") {
        if (stats.length > 2) stats = stats.toLowerCase();
        else stats = stats.toUpperCase();
        env.loadCountry(browserslist.usage, stats, browserslist.data);
        data = browserslist.usage[stats];
    } else {
        if ("dataByBrowser" in stats) stats = stats.dataByBrowser;
        data = {};
        for(var name in stats)for(var version in stats[name])data[name + " " + version] = stats[name][version];
    }
    return browsers.reduce(function(all, i) {
        var usage = data[i];
        if (usage === undefined) usage = data[i.replace(/ \S+$/, " 0")];
        return all + (usage || 0);
    }, 0);
};
function nodeQuery(context, node) {
    var matched = browserslist.nodeVersions.filter(function(i) {
        return isVersionsMatch(i, node.version);
    });
    if (matched.length === 0) {
        if (context.ignoreUnknownVersions) return [];
        else throw new BrowserslistError("Unknown version " + node.version + " of Node.js");
    }
    return [
        "node " + matched[matched.length - 1]
    ];
}
function sinceQuery(context, node) {
    var year = parseInt(node.year);
    var month = parseInt(node.month || "01") - 1;
    var day = parseInt(node.day || "01");
    return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context);
}
function coverQuery(context, node) {
    var coverage = parseFloat(node.coverage);
    var usage = browserslist.usage.global;
    if (node.place) {
        if (node.place.match(/^my\s+stats$/i)) {
            if (!context.customUsage) throw new BrowserslistError("Custom usage statistics was not provided");
            usage = context.customUsage;
        } else {
            var place;
            if (node.place.length === 2) place = node.place.toUpperCase();
            else place = node.place.toLowerCase();
            env.loadCountry(browserslist.usage, place, browserslist.data);
            usage = browserslist.usage[place];
        }
    }
    var versions = Object.keys(usage).sort(function(a, b) {
        return usage[b] - usage[a];
    });
    var coveraged = 0;
    var result = [];
    var version;
    for(var i = 0; i < versions.length; i++){
        version = versions[i];
        if (usage[version] === 0) break;
        coveraged += usage[version];
        result.push(version);
        if (coveraged >= coverage) break;
    }
    return result;
}
var QUERIES = {
    last_major_versions: {
        matches: [
            "versions"
        ],
        regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
        select: function(context, node) {
            return Object.keys(agents).reduce(function(selected, name) {
                var data = byName(name, context);
                if (!data) return selected;
                var list = getMajorVersions(data.released, node.versions);
                list = list.map(nameMapper(data.name));
                if (data.name === "android") list = filterAndroid(list, node.versions, context);
                return selected.concat(list);
            }, []);
        }
    },
    last_versions: {
        matches: [
            "versions"
        ],
        regexp: /^last\s+(\d+)\s+versions?$/i,
        select: function(context, node) {
            return Object.keys(agents).reduce(function(selected, name) {
                var data = byName(name, context);
                if (!data) return selected;
                var list = data.released.slice(-node.versions);
                list = list.map(nameMapper(data.name));
                if (data.name === "android") list = filterAndroid(list, node.versions, context);
                return selected.concat(list);
            }, []);
        }
    },
    last_electron_major_versions: {
        matches: [
            "versions"
        ],
        regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
        select: function(context, node) {
            var validVersions = getMajorVersions(Object.keys(e2c), node.versions);
            return validVersions.map(function(i) {
                return "chrome " + e2c[i];
            });
        }
    },
    last_node_major_versions: {
        matches: [
            "versions"
        ],
        regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
        select: function(context, node) {
            return getMajorVersions(browserslist.nodeVersions, node.versions).map(function(version) {
                return "node " + version;
            });
        }
    },
    last_browser_major_versions: {
        matches: [
            "versions",
            "browser"
        ],
        regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
        select: function(context, node) {
            var data = checkName(node.browser, context);
            var validVersions = getMajorVersions(data.released, node.versions);
            var list = validVersions.map(nameMapper(data.name));
            if (data.name === "android") list = filterAndroid(list, node.versions, context);
            return list;
        }
    },
    last_electron_versions: {
        matches: [
            "versions"
        ],
        regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
        select: function(context, node) {
            return Object.keys(e2c).slice(-node.versions).map(function(i) {
                return "chrome " + e2c[i];
            });
        }
    },
    last_node_versions: {
        matches: [
            "versions"
        ],
        regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
        select: function(context, node) {
            return browserslist.nodeVersions.slice(-node.versions).map(function(version) {
                return "node " + version;
            });
        }
    },
    last_browser_versions: {
        matches: [
            "versions",
            "browser"
        ],
        regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
        select: function(context, node) {
            var data = checkName(node.browser, context);
            var list = data.released.slice(-node.versions).map(nameMapper(data.name));
            if (data.name === "android") list = filterAndroid(list, node.versions, context);
            return list;
        }
    },
    unreleased_versions: {
        matches: [],
        regexp: /^unreleased\s+versions$/i,
        select: function(context) {
            return Object.keys(agents).reduce(function(selected, name) {
                var data = byName(name, context);
                if (!data) return selected;
                var list = data.versions.filter(function(v) {
                    return data.released.indexOf(v) === -1;
                });
                list = list.map(nameMapper(data.name));
                return selected.concat(list);
            }, []);
        }
    },
    unreleased_electron_versions: {
        matches: [],
        regexp: /^unreleased\s+electron\s+versions?$/i,
        select: function() {
            return [];
        }
    },
    unreleased_browser_versions: {
        matches: [
            "browser"
        ],
        regexp: /^unreleased\s+(\w+)\s+versions?$/i,
        select: function(context, node) {
            var data = checkName(node.browser, context);
            return data.versions.filter(function(v) {
                return data.released.indexOf(v) === -1;
            }).map(nameMapper(data.name));
        }
    },
    last_years: {
        matches: [
            "years"
        ],
        regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
        select: function(context, node) {
            return filterByYear(Date.now() - YEAR * node.years, context);
        }
    },
    since_y: {
        matches: [
            "year"
        ],
        regexp: /^since (\d+)$/i,
        select: sinceQuery
    },
    since_y_m: {
        matches: [
            "year",
            "month"
        ],
        regexp: /^since (\d+)-(\d+)$/i,
        select: sinceQuery
    },
    since_y_m_d: {
        matches: [
            "year",
            "month",
            "day"
        ],
        regexp: /^since (\d+)-(\d+)-(\d+)$/i,
        select: sinceQuery
    },
    popularity: {
        matches: [
            "sign",
            "popularity"
        ],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
        select: function(context, node) {
            var popularity = parseFloat(node.popularity);
            var usage = browserslist.usage.global;
            return Object.keys(usage).reduce(function(result, version) {
                if (node.sign === ">") {
                    if (usage[version] > popularity) result.push(version);
                } else if (node.sign === "<") {
                    if (usage[version] < popularity) result.push(version);
                } else if (node.sign === "<=") {
                    if (usage[version] <= popularity) result.push(version);
                } else if (usage[version] >= popularity) result.push(version);
                return result;
            }, []);
        }
    },
    popularity_in_my_stats: {
        matches: [
            "sign",
            "popularity"
        ],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
        select: function(context, node) {
            var popularity = parseFloat(node.popularity);
            if (!context.customUsage) throw new BrowserslistError("Custom usage statistics was not provided");
            var usage = context.customUsage;
            return Object.keys(usage).reduce(function(result, version) {
                var percentage = usage[version];
                if (percentage == null) return result;
                if (node.sign === ">") {
                    if (percentage > popularity) result.push(version);
                } else if (node.sign === "<") {
                    if (percentage < popularity) result.push(version);
                } else if (node.sign === "<=") {
                    if (percentage <= popularity) result.push(version);
                } else if (percentage >= popularity) result.push(version);
                return result;
            }, []);
        }
    },
    popularity_in_config_stats: {
        matches: [
            "sign",
            "popularity",
            "config"
        ],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
        select: function(context, node) {
            var popularity = parseFloat(node.popularity);
            var stats = env.loadStat(context, node.config, browserslist.data);
            if (stats) {
                context.customUsage = {};
                for(var browser in stats)fillUsage(context.customUsage, browser, stats[browser]);
            }
            if (!context.customUsage) throw new BrowserslistError("Custom usage statistics was not provided");
            var usage = context.customUsage;
            return Object.keys(usage).reduce(function(result, version) {
                var percentage = usage[version];
                if (percentage == null) return result;
                if (node.sign === ">") {
                    if (percentage > popularity) result.push(version);
                } else if (node.sign === "<") {
                    if (percentage < popularity) result.push(version);
                } else if (node.sign === "<=") {
                    if (percentage <= popularity) result.push(version);
                } else if (percentage >= popularity) result.push(version);
                return result;
            }, []);
        }
    },
    popularity_in_place: {
        matches: [
            "sign",
            "popularity",
            "place"
        ],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
        select: function(context, node) {
            var popularity = parseFloat(node.popularity);
            var place = node.place;
            if (place.length === 2) place = place.toUpperCase();
            else place = place.toLowerCase();
            env.loadCountry(browserslist.usage, place, browserslist.data);
            var usage = browserslist.usage[place];
            return Object.keys(usage).reduce(function(result, version) {
                var percentage = usage[version];
                if (percentage == null) return result;
                if (node.sign === ">") {
                    if (percentage > popularity) result.push(version);
                } else if (node.sign === "<") {
                    if (percentage < popularity) result.push(version);
                } else if (node.sign === "<=") {
                    if (percentage <= popularity) result.push(version);
                } else if (percentage >= popularity) result.push(version);
                return result;
            }, []);
        }
    },
    cover: {
        matches: [
            "coverage"
        ],
        regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i,
        select: coverQuery
    },
    cover_in: {
        matches: [
            "coverage",
            "place"
        ],
        regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
        select: coverQuery
    },
    supports: {
        matches: [
            "feature"
        ],
        regexp: /^supports\s+([\w-]+)$/,
        select: function(context, node) {
            env.loadFeature(browserslist.cache, node.feature);
            var features = browserslist.cache[node.feature];
            return Object.keys(features).reduce(function(result, version) {
                var flags = features[version];
                if (flags.indexOf("y") >= 0 || flags.indexOf("a") >= 0) result.push(version);
                return result;
            }, []);
        }
    },
    electron_range: {
        matches: [
            "from",
            "to"
        ],
        regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(context, node) {
            var fromToUse = normalizeElectron(node.from);
            var toToUse = normalizeElectron(node.to);
            var from = parseFloat(node.from);
            var to = parseFloat(node.to);
            if (!e2c[fromToUse]) throw new BrowserslistError("Unknown version " + from + " of electron");
            if (!e2c[toToUse]) throw new BrowserslistError("Unknown version " + to + " of electron");
            return Object.keys(e2c).filter(function(i) {
                var parsed = parseFloat(i);
                return parsed >= from && parsed <= to;
            }).map(function(i) {
                return "chrome " + e2c[i];
            });
        }
    },
    node_range: {
        matches: [
            "from",
            "to"
        ],
        regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(context, node) {
            return browserslist.nodeVersions.filter(semverFilterLoose(">=", node.from)).filter(semverFilterLoose("<=", node.to)).map(function(v) {
                return "node " + v;
            });
        }
    },
    browser_range: {
        matches: [
            "browser",
            "from",
            "to"
        ],
        regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(context, node) {
            var data = checkName(node.browser, context);
            var from = parseFloat(normalizeVersion(data, node.from) || node.from);
            var to = parseFloat(normalizeVersion(data, node.to) || node.to);
            function filter(v) {
                var parsed = parseFloat(v);
                return parsed >= from && parsed <= to;
            }
            return data.released.filter(filter).map(nameMapper(data.name));
        }
    },
    electron_ray: {
        matches: [
            "sign",
            "version"
        ],
        regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
        select: function(context, node) {
            var versionToUse = normalizeElectron(node.version);
            return Object.keys(e2c).filter(generateFilter(node.sign, versionToUse)).map(function(i) {
                return "chrome " + e2c[i];
            });
        }
    },
    node_ray: {
        matches: [
            "sign",
            "version"
        ],
        regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
        select: function(context, node) {
            return browserslist.nodeVersions.filter(generateSemverFilter(node.sign, node.version)).map(function(v) {
                return "node " + v;
            });
        }
    },
    browser_ray: {
        matches: [
            "browser",
            "sign",
            "version"
        ],
        regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
        select: function(context, node) {
            var version = node.version;
            var data = checkName(node.browser, context);
            var alias = browserslist.versionAliases[data.name][version];
            if (alias) version = alias;
            return data.released.filter(generateFilter(node.sign, version)).map(function(v) {
                return data.name + " " + v;
            });
        }
    },
    firefox_esr: {
        matches: [],
        regexp: /^(firefox|ff|fx)\s+esr$/i,
        select: function() {
            return [
                "firefox 102"
            ];
        }
    },
    opera_mini_all: {
        matches: [],
        regexp: /(operamini|op_mini)\s+all/i,
        select: function() {
            return [
                "op_mini all"
            ];
        }
    },
    electron_version: {
        matches: [
            "version"
        ],
        regexp: /^electron\s+([\d.]+)$/i,
        select: function(context, node) {
            var versionToUse = normalizeElectron(node.version);
            var chrome = e2c[versionToUse];
            if (!chrome) throw new BrowserslistError("Unknown version " + node.version + " of electron");
            return [
                "chrome " + chrome
            ];
        }
    },
    node_major_version: {
        matches: [
            "version"
        ],
        regexp: /^node\s+(\d+)$/i,
        select: nodeQuery
    },
    node_minor_version: {
        matches: [
            "version"
        ],
        regexp: /^node\s+(\d+\.\d+)$/i,
        select: nodeQuery
    },
    node_patch_version: {
        matches: [
            "version"
        ],
        regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
        select: nodeQuery
    },
    current_node: {
        matches: [],
        regexp: /^current\s+node$/i,
        select: function(context) {
            return [
                env.currentNode(resolve, context)
            ];
        }
    },
    maintained_node: {
        matches: [],
        regexp: /^maintained\s+node\s+versions$/i,
        select: function(context) {
            var now = Date.now();
            var queries = Object.keys(jsEOL).filter(function(key) {
                return now < Date.parse(jsEOL[key].end) && now > Date.parse(jsEOL[key].start) && isEolReleased(key);
            }).map(function(key) {
                return "node " + key.slice(1);
            });
            return resolve(queries, context);
        }
    },
    phantomjs_1_9: {
        matches: [],
        regexp: /^phantomjs\s+1.9$/i,
        select: function() {
            return [
                "safari 5"
            ];
        }
    },
    phantomjs_2_1: {
        matches: [],
        regexp: /^phantomjs\s+2.1$/i,
        select: function() {
            return [
                "safari 6"
            ];
        }
    },
    browser_version: {
        matches: [
            "browser",
            "version"
        ],
        regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
        select: function(context, node) {
            var version = node.version;
            if (/^tp$/i.test(version)) version = "TP";
            var data = checkName(node.browser, context);
            var alias = normalizeVersion(data, version);
            if (alias) version = alias;
            else {
                if (version.indexOf(".") === -1) alias = version + ".0";
                else alias = version.replace(/\.0$/, "");
                alias = normalizeVersion(data, alias);
                if (alias) version = alias;
                else if (context.ignoreUnknownVersions) return [];
                else throw new BrowserslistError("Unknown version " + version + " of " + node.browser);
            }
            return [
                data.name + " " + version
            ];
        }
    },
    browserslist_config: {
        matches: [],
        regexp: /^browserslist config$/i,
        select: function(context) {
            return browserslist(undefined, context);
        }
    },
    extends: {
        matches: [
            "config"
        ],
        regexp: /^extends (.+)$/i,
        select: function(context, node) {
            return resolve(env.loadQueries(context, node.config), context);
        }
    },
    defaults: {
        matches: [],
        regexp: /^defaults$/i,
        select: function(context) {
            return resolve(browserslist.defaults, context);
        }
    },
    dead: {
        matches: [],
        regexp: /^dead$/i,
        select: function(context) {
            var dead = [
                "Baidu >= 0",
                "ie <= 11",
                "ie_mob <= 11",
                "bb <= 10",
                "op_mob <= 12.1",
                "samsung 4"
            ];
            return resolve(dead, context);
        }
    },
    unknown: {
        matches: [],
        regexp: /^(\w+)$/i,
        select: function(context, node) {
            if (byName(node.query, context)) throw new BrowserslistError("Specify versions in Browserslist query for browser " + node.query);
            else throw unknownQuery(node.query);
        }
    }
};
(function() {
    for(var name in agents){
        var browser = agents[name];
        browserslist.data[name] = {
            name: name,
            versions: normalize(agents[name].versions),
            released: normalize(agents[name].versions.slice(0, -3)),
            releaseDate: agents[name].release_date
        };
        fillUsage(browserslist.usage.global, name, browser.usage_global);
        browserslist.versionAliases[name] = {};
        for(var i = 0; i < browser.versions.length; i++){
            var full = browser.versions[i];
            if (!full) continue;
            if (full.indexOf("-") !== -1) {
                var interval = full.split("-");
                for(var j = 0; j < interval.length; j++)browserslist.versionAliases[name][interval[j]] = full;
            }
        }
    }
    browserslist.versionAliases.op_mob["59"] = "58";
    browserslist.nodeVersions = jsReleases.map(function(release) {
        return release.version;
    });
})();
module.exports = browserslist;

},{"92e3660602ae04ac":"qrnUB","cbe20b3656de85b3":"1o0P3","86a87d707b63a4a0":"b7Kzh","16d9435aac8c9c34":"jhUEF","f94f671dcbf096f7":"i95xm","a610b394abe6d220":"4GzM4","3d001556e62ae7c7":"a4Lkh","d933602907f19a21":"hteYL"}],"qrnUB":[function(require,module,exports) {
module.exports = JSON.parse('[{"name":"nodejs","version":"0.2.0","date":"2011-08-26","lts":false,"security":false,"v8":"2.3.8.0"},{"name":"nodejs","version":"0.3.0","date":"2011-08-26","lts":false,"security":false,"v8":"2.5.1.0"},{"name":"nodejs","version":"0.4.0","date":"2011-08-26","lts":false,"security":false,"v8":"3.1.2.0"},{"name":"nodejs","version":"0.5.0","date":"2011-08-26","lts":false,"security":false,"v8":"3.1.8.25"},{"name":"nodejs","version":"0.6.0","date":"2011-11-04","lts":false,"security":false,"v8":"3.6.6.6"},{"name":"nodejs","version":"0.7.0","date":"2012-01-17","lts":false,"security":false,"v8":"3.8.6.0"},{"name":"nodejs","version":"0.8.0","date":"2012-06-22","lts":false,"security":false,"v8":"3.11.10.10"},{"name":"nodejs","version":"0.9.0","date":"2012-07-20","lts":false,"security":false,"v8":"3.11.10.15"},{"name":"nodejs","version":"0.10.0","date":"2013-03-11","lts":false,"security":false,"v8":"3.14.5.8"},{"name":"nodejs","version":"0.11.0","date":"2013-03-28","lts":false,"security":false,"v8":"3.17.13.0"},{"name":"nodejs","version":"0.12.0","date":"2015-02-06","lts":false,"security":false,"v8":"3.28.73.0"},{"name":"nodejs","version":"4.0.0","date":"2015-09-08","lts":false,"security":false,"v8":"4.5.103.30"},{"name":"nodejs","version":"4.1.0","date":"2015-09-17","lts":false,"security":false,"v8":"4.5.103.33"},{"name":"nodejs","version":"4.2.0","date":"2015-10-12","lts":"Argon","security":false,"v8":"4.5.103.35"},{"name":"nodejs","version":"4.3.0","date":"2016-02-09","lts":"Argon","security":false,"v8":"4.5.103.35"},{"name":"nodejs","version":"4.4.0","date":"2016-03-08","lts":"Argon","security":false,"v8":"4.5.103.35"},{"name":"nodejs","version":"4.5.0","date":"2016-08-16","lts":"Argon","security":false,"v8":"4.5.103.37"},{"name":"nodejs","version":"4.6.0","date":"2016-09-27","lts":"Argon","security":true,"v8":"4.5.103.37"},{"name":"nodejs","version":"4.7.0","date":"2016-12-06","lts":"Argon","security":false,"v8":"4.5.103.43"},{"name":"nodejs","version":"4.8.0","date":"2017-02-21","lts":"Argon","security":false,"v8":"4.5.103.45"},{"name":"nodejs","version":"4.9.0","date":"2018-03-28","lts":"Argon","security":true,"v8":"4.5.103.53"},{"name":"nodejs","version":"5.0.0","date":"2015-10-29","lts":false,"security":false,"v8":"4.6.85.28"},{"name":"nodejs","version":"5.1.0","date":"2015-11-17","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.2.0","date":"2015-12-09","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.3.0","date":"2015-12-15","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.4.0","date":"2016-01-06","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.5.0","date":"2016-01-21","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.6.0","date":"2016-02-09","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.7.0","date":"2016-02-23","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.8.0","date":"2016-03-09","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.9.0","date":"2016-03-16","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.10.0","date":"2016-04-01","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.11.0","date":"2016-04-21","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.12.0","date":"2016-06-23","lts":false,"security":false,"v8":"4.6.85.32"},{"name":"nodejs","version":"6.0.0","date":"2016-04-26","lts":false,"security":false,"v8":"5.0.71.35"},{"name":"nodejs","version":"6.1.0","date":"2016-05-05","lts":false,"security":false,"v8":"5.0.71.35"},{"name":"nodejs","version":"6.2.0","date":"2016-05-17","lts":false,"security":false,"v8":"5.0.71.47"},{"name":"nodejs","version":"6.3.0","date":"2016-07-06","lts":false,"security":false,"v8":"5.0.71.52"},{"name":"nodejs","version":"6.4.0","date":"2016-08-12","lts":false,"security":false,"v8":"5.0.71.60"},{"name":"nodejs","version":"6.5.0","date":"2016-08-26","lts":false,"security":false,"v8":"5.1.281.81"},{"name":"nodejs","version":"6.6.0","date":"2016-09-14","lts":false,"security":false,"v8":"5.1.281.83"},{"name":"nodejs","version":"6.7.0","date":"2016-09-27","lts":false,"security":true,"v8":"5.1.281.83"},{"name":"nodejs","version":"6.8.0","date":"2016-10-12","lts":false,"security":false,"v8":"5.1.281.84"},{"name":"nodejs","version":"6.9.0","date":"2016-10-18","lts":"Boron","security":false,"v8":"5.1.281.84"},{"name":"nodejs","version":"6.10.0","date":"2017-02-21","lts":"Boron","security":false,"v8":"5.1.281.93"},{"name":"nodejs","version":"6.11.0","date":"2017-06-06","lts":"Boron","security":false,"v8":"5.1.281.102"},{"name":"nodejs","version":"6.12.0","date":"2017-11-06","lts":"Boron","security":false,"v8":"5.1.281.108"},{"name":"nodejs","version":"6.13.0","date":"2018-02-10","lts":"Boron","security":false,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.14.0","date":"2018-03-28","lts":"Boron","security":true,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.15.0","date":"2018-11-27","lts":"Boron","security":true,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.16.0","date":"2018-12-26","lts":"Boron","security":false,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.17.0","date":"2019-02-28","lts":"Boron","security":true,"v8":"5.1.281.111"},{"name":"nodejs","version":"7.0.0","date":"2016-10-25","lts":false,"security":false,"v8":"5.4.500.36"},{"name":"nodejs","version":"7.1.0","date":"2016-11-08","lts":false,"security":false,"v8":"5.4.500.36"},{"name":"nodejs","version":"7.2.0","date":"2016-11-22","lts":false,"security":false,"v8":"5.4.500.43"},{"name":"nodejs","version":"7.3.0","date":"2016-12-20","lts":false,"security":false,"v8":"5.4.500.45"},{"name":"nodejs","version":"7.4.0","date":"2017-01-04","lts":false,"security":false,"v8":"5.4.500.45"},{"name":"nodejs","version":"7.5.0","date":"2017-01-31","lts":false,"security":false,"v8":"5.4.500.48"},{"name":"nodejs","version":"7.6.0","date":"2017-02-21","lts":false,"security":false,"v8":"5.5.372.40"},{"name":"nodejs","version":"7.7.0","date":"2017-02-28","lts":false,"security":false,"v8":"5.5.372.41"},{"name":"nodejs","version":"7.8.0","date":"2017-03-29","lts":false,"security":false,"v8":"5.5.372.43"},{"name":"nodejs","version":"7.9.0","date":"2017-04-11","lts":false,"security":false,"v8":"5.5.372.43"},{"name":"nodejs","version":"7.10.0","date":"2017-05-02","lts":false,"security":false,"v8":"5.5.372.43"},{"name":"nodejs","version":"8.0.0","date":"2017-05-30","lts":false,"security":false,"v8":"5.8.283.41"},{"name":"nodejs","version":"8.1.0","date":"2017-06-08","lts":false,"security":false,"v8":"5.8.283.41"},{"name":"nodejs","version":"8.2.0","date":"2017-07-19","lts":false,"security":false,"v8":"5.8.283.41"},{"name":"nodejs","version":"8.3.0","date":"2017-08-08","lts":false,"security":false,"v8":"6.0.286.52"},{"name":"nodejs","version":"8.4.0","date":"2017-08-15","lts":false,"security":false,"v8":"6.0.286.52"},{"name":"nodejs","version":"8.5.0","date":"2017-09-12","lts":false,"security":false,"v8":"6.0.287.53"},{"name":"nodejs","version":"8.6.0","date":"2017-09-26","lts":false,"security":false,"v8":"6.0.287.53"},{"name":"nodejs","version":"8.7.0","date":"2017-10-11","lts":false,"security":false,"v8":"6.1.534.42"},{"name":"nodejs","version":"8.8.0","date":"2017-10-24","lts":false,"security":false,"v8":"6.1.534.42"},{"name":"nodejs","version":"8.9.0","date":"2017-10-31","lts":"Carbon","security":false,"v8":"6.1.534.46"},{"name":"nodejs","version":"8.10.0","date":"2018-03-06","lts":"Carbon","security":false,"v8":"6.2.414.50"},{"name":"nodejs","version":"8.11.0","date":"2018-03-28","lts":"Carbon","security":true,"v8":"6.2.414.50"},{"name":"nodejs","version":"8.12.0","date":"2018-09-10","lts":"Carbon","security":false,"v8":"6.2.414.66"},{"name":"nodejs","version":"8.13.0","date":"2018-11-20","lts":"Carbon","security":false,"v8":"6.2.414.72"},{"name":"nodejs","version":"8.14.0","date":"2018-11-27","lts":"Carbon","security":true,"v8":"6.2.414.72"},{"name":"nodejs","version":"8.15.0","date":"2018-12-26","lts":"Carbon","security":false,"v8":"6.2.414.75"},{"name":"nodejs","version":"8.16.0","date":"2019-04-16","lts":"Carbon","security":false,"v8":"6.2.414.77"},{"name":"nodejs","version":"8.17.0","date":"2019-12-17","lts":"Carbon","security":true,"v8":"6.2.414.78"},{"name":"nodejs","version":"9.0.0","date":"2017-10-31","lts":false,"security":false,"v8":"6.2.414.32"},{"name":"nodejs","version":"9.1.0","date":"2017-11-07","lts":false,"security":false,"v8":"6.2.414.32"},{"name":"nodejs","version":"9.2.0","date":"2017-11-14","lts":false,"security":false,"v8":"6.2.414.44"},{"name":"nodejs","version":"9.3.0","date":"2017-12-12","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.4.0","date":"2018-01-10","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.5.0","date":"2018-01-31","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.6.0","date":"2018-02-21","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.7.0","date":"2018-03-01","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.8.0","date":"2018-03-07","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.9.0","date":"2018-03-21","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.10.0","date":"2018-03-28","lts":false,"security":true,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.11.0","date":"2018-04-04","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"10.0.0","date":"2018-04-24","lts":false,"security":false,"v8":"6.6.346.24"},{"name":"nodejs","version":"10.1.0","date":"2018-05-08","lts":false,"security":false,"v8":"6.6.346.27"},{"name":"nodejs","version":"10.2.0","date":"2018-05-23","lts":false,"security":false,"v8":"6.6.346.32"},{"name":"nodejs","version":"10.3.0","date":"2018-05-29","lts":false,"security":false,"v8":"6.6.346.32"},{"name":"nodejs","version":"10.4.0","date":"2018-06-06","lts":false,"security":false,"v8":"6.7.288.43"},{"name":"nodejs","version":"10.5.0","date":"2018-06-20","lts":false,"security":false,"v8":"6.7.288.46"},{"name":"nodejs","version":"10.6.0","date":"2018-07-04","lts":false,"security":false,"v8":"6.7.288.46"},{"name":"nodejs","version":"10.7.0","date":"2018-07-18","lts":false,"security":false,"v8":"6.7.288.49"},{"name":"nodejs","version":"10.8.0","date":"2018-08-01","lts":false,"security":false,"v8":"6.7.288.49"},{"name":"nodejs","version":"10.9.0","date":"2018-08-15","lts":false,"security":false,"v8":"6.8.275.24"},{"name":"nodejs","version":"10.10.0","date":"2018-09-06","lts":false,"security":false,"v8":"6.8.275.30"},{"name":"nodejs","version":"10.11.0","date":"2018-09-19","lts":false,"security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.12.0","date":"2018-10-10","lts":false,"security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.13.0","date":"2018-10-30","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.14.0","date":"2018-11-27","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.15.0","date":"2018-12-26","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.16.0","date":"2019-05-28","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.17.0","date":"2019-10-22","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.18.0","date":"2019-12-17","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.19.0","date":"2020-02-05","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.20.0","date":"2020-03-26","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.21.0","date":"2020-06-02","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.22.0","date":"2020-07-21","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.23.0","date":"2020-10-27","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.24.0","date":"2021-02-23","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"11.0.0","date":"2018-10-23","lts":false,"security":false,"v8":"7.0.276.28"},{"name":"nodejs","version":"11.1.0","date":"2018-10-30","lts":false,"security":false,"v8":"7.0.276.32"},{"name":"nodejs","version":"11.2.0","date":"2018-11-15","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.3.0","date":"2018-11-27","lts":false,"security":true,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.4.0","date":"2018-12-07","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.5.0","date":"2018-12-18","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.6.0","date":"2018-12-26","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.7.0","date":"2019-01-17","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.8.0","date":"2019-01-24","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.9.0","date":"2019-01-30","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.10.0","date":"2019-02-14","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.11.0","date":"2019-03-05","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.12.0","date":"2019-03-14","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.13.0","date":"2019-03-28","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.14.0","date":"2019-04-10","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.15.0","date":"2019-04-30","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"12.0.0","date":"2019-04-23","lts":false,"security":false,"v8":"7.4.288.21"},{"name":"nodejs","version":"12.1.0","date":"2019-04-29","lts":false,"security":false,"v8":"7.4.288.21"},{"name":"nodejs","version":"12.2.0","date":"2019-05-07","lts":false,"security":false,"v8":"7.4.288.21"},{"name":"nodejs","version":"12.3.0","date":"2019-05-21","lts":false,"security":false,"v8":"7.4.288.27"},{"name":"nodejs","version":"12.4.0","date":"2019-06-04","lts":false,"security":false,"v8":"7.4.288.27"},{"name":"nodejs","version":"12.5.0","date":"2019-06-26","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.6.0","date":"2019-07-03","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.7.0","date":"2019-07-23","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.8.0","date":"2019-08-06","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.9.0","date":"2019-08-20","lts":false,"security":false,"v8":"7.6.303.29"},{"name":"nodejs","version":"12.10.0","date":"2019-09-04","lts":false,"security":false,"v8":"7.6.303.29"},{"name":"nodejs","version":"12.11.0","date":"2019-09-25","lts":false,"security":false,"v8":"7.7.299.11"},{"name":"nodejs","version":"12.12.0","date":"2019-10-11","lts":false,"security":false,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.13.0","date":"2019-10-21","lts":"Erbium","security":false,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.14.0","date":"2019-12-17","lts":"Erbium","security":true,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.15.0","date":"2020-02-05","lts":"Erbium","security":true,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.16.0","date":"2020-02-11","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.17.0","date":"2020-05-26","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.18.0","date":"2020-06-02","lts":"Erbium","security":true,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.19.0","date":"2020-10-06","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.20.0","date":"2020-11-24","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.21.0","date":"2021-02-23","lts":"Erbium","security":true,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.22.0","date":"2021-03-30","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"13.0.0","date":"2019-10-22","lts":false,"security":false,"v8":"7.8.279.17"},{"name":"nodejs","version":"13.1.0","date":"2019-11-05","lts":false,"security":false,"v8":"7.8.279.17"},{"name":"nodejs","version":"13.2.0","date":"2019-11-21","lts":false,"security":false,"v8":"7.9.317.23"},{"name":"nodejs","version":"13.3.0","date":"2019-12-03","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.4.0","date":"2019-12-17","lts":false,"security":true,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.5.0","date":"2019-12-18","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.6.0","date":"2020-01-07","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.7.0","date":"2020-01-21","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.8.0","date":"2020-02-05","lts":false,"security":true,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.9.0","date":"2020-02-18","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.10.0","date":"2020-03-04","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.11.0","date":"2020-03-12","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.12.0","date":"2020-03-26","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.13.0","date":"2020-04-14","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.14.0","date":"2020-04-29","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"14.0.0","date":"2020-04-21","lts":false,"security":false,"v8":"8.1.307.30"},{"name":"nodejs","version":"14.1.0","date":"2020-04-29","lts":false,"security":false,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.2.0","date":"2020-05-05","lts":false,"security":false,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.3.0","date":"2020-05-19","lts":false,"security":false,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.4.0","date":"2020-06-02","lts":false,"security":true,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.5.0","date":"2020-06-30","lts":false,"security":false,"v8":"8.3.110.9"},{"name":"nodejs","version":"14.6.0","date":"2020-07-20","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.7.0","date":"2020-07-29","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.8.0","date":"2020-08-11","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.9.0","date":"2020-08-27","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.10.0","date":"2020-09-08","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.11.0","date":"2020-09-15","lts":false,"security":true,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.12.0","date":"2020-09-22","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.13.0","date":"2020-09-29","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.14.0","date":"2020-10-15","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.15.0","date":"2020-10-27","lts":"Fermium","security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.16.0","date":"2021-02-23","lts":"Fermium","security":true,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.17.0","date":"2021-05-11","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.18.0","date":"2021-09-28","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.19.0","date":"2022-02-01","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.20.0","date":"2022-07-07","lts":"Fermium","security":true,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.21.0","date":"2022-11-01","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"15.0.0","date":"2020-10-20","lts":false,"security":false,"v8":"8.6.395.16"},{"name":"nodejs","version":"15.1.0","date":"2020-11-04","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.2.0","date":"2020-11-10","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.3.0","date":"2020-11-24","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.4.0","date":"2020-12-09","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.5.0","date":"2020-12-22","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.6.0","date":"2021-01-14","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.7.0","date":"2021-01-25","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.8.0","date":"2021-02-02","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.9.0","date":"2021-02-18","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.10.0","date":"2021-02-23","lts":false,"security":true,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.11.0","date":"2021-03-03","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.12.0","date":"2021-03-17","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.13.0","date":"2021-03-31","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.14.0","date":"2021-04-06","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"16.0.0","date":"2021-04-20","lts":false,"security":false,"v8":"9.0.257.17"},{"name":"nodejs","version":"16.1.0","date":"2021-05-04","lts":false,"security":false,"v8":"9.0.257.24"},{"name":"nodejs","version":"16.2.0","date":"2021-05-19","lts":false,"security":false,"v8":"9.0.257.25"},{"name":"nodejs","version":"16.3.0","date":"2021-06-03","lts":false,"security":false,"v8":"9.0.257.25"},{"name":"nodejs","version":"16.4.0","date":"2021-06-23","lts":false,"security":false,"v8":"9.1.269.36"},{"name":"nodejs","version":"16.5.0","date":"2021-07-14","lts":false,"security":false,"v8":"9.1.269.38"},{"name":"nodejs","version":"16.6.0","date":"2021-07-29","lts":false,"security":true,"v8":"9.2.230.21"},{"name":"nodejs","version":"16.7.0","date":"2021-08-18","lts":false,"security":false,"v8":"9.2.230.21"},{"name":"nodejs","version":"16.8.0","date":"2021-08-25","lts":false,"security":false,"v8":"9.2.230.21"},{"name":"nodejs","version":"16.9.0","date":"2021-09-07","lts":false,"security":false,"v8":"9.3.345.16"},{"name":"nodejs","version":"16.10.0","date":"2021-09-22","lts":false,"security":false,"v8":"9.3.345.19"},{"name":"nodejs","version":"16.11.0","date":"2021-10-08","lts":false,"security":false,"v8":"9.4.146.19"},{"name":"nodejs","version":"16.12.0","date":"2021-10-20","lts":false,"security":false,"v8":"9.4.146.19"},{"name":"nodejs","version":"16.13.0","date":"2021-10-26","lts":"Gallium","security":false,"v8":"9.4.146.19"},{"name":"nodejs","version":"16.14.0","date":"2022-02-08","lts":"Gallium","security":false,"v8":"9.4.146.24"},{"name":"nodejs","version":"16.15.0","date":"2022-04-26","lts":"Gallium","security":false,"v8":"9.4.146.24"},{"name":"nodejs","version":"16.16.0","date":"2022-07-07","lts":"Gallium","security":true,"v8":"9.4.146.24"},{"name":"nodejs","version":"16.17.0","date":"2022-08-16","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"16.18.0","date":"2022-10-12","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"16.19.0","date":"2022-12-13","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"16.20.0","date":"2023-03-28","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"17.0.0","date":"2021-10-19","lts":false,"security":false,"v8":"9.5.172.21"},{"name":"nodejs","version":"17.1.0","date":"2021-11-09","lts":false,"security":false,"v8":"9.5.172.25"},{"name":"nodejs","version":"17.2.0","date":"2021-11-30","lts":false,"security":false,"v8":"9.6.180.14"},{"name":"nodejs","version":"17.3.0","date":"2021-12-17","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.4.0","date":"2022-01-18","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.5.0","date":"2022-02-10","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.6.0","date":"2022-02-22","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.7.0","date":"2022-03-09","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.8.0","date":"2022-03-22","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.9.0","date":"2022-04-07","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"18.0.0","date":"2022-04-18","lts":false,"security":false,"v8":"10.1.124.8"},{"name":"nodejs","version":"18.1.0","date":"2022-05-03","lts":false,"security":false,"v8":"10.1.124.8"},{"name":"nodejs","version":"18.2.0","date":"2022-05-17","lts":false,"security":false,"v8":"10.1.124.8"},{"name":"nodejs","version":"18.3.0","date":"2022-06-02","lts":false,"security":false,"v8":"10.2.154.4"},{"name":"nodejs","version":"18.4.0","date":"2022-06-16","lts":false,"security":false,"v8":"10.2.154.4"},{"name":"nodejs","version":"18.5.0","date":"2022-07-06","lts":false,"security":true,"v8":"10.2.154.4"},{"name":"nodejs","version":"18.6.0","date":"2022-07-13","lts":false,"security":false,"v8":"10.2.154.13"},{"name":"nodejs","version":"18.7.0","date":"2022-07-26","lts":false,"security":false,"v8":"10.2.154.13"},{"name":"nodejs","version":"18.8.0","date":"2022-08-24","lts":false,"security":false,"v8":"10.2.154.13"},{"name":"nodejs","version":"18.9.0","date":"2022-09-07","lts":false,"security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.10.0","date":"2022-09-28","lts":false,"security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.11.0","date":"2022-10-13","lts":false,"security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.12.0","date":"2022-10-25","lts":"Hydrogen","security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.13.0","date":"2023-01-05","lts":"Hydrogen","security":false,"v8":"10.2.154.23"},{"name":"nodejs","version":"18.14.0","date":"2023-02-01","lts":"Hydrogen","security":false,"v8":"10.2.154.23"},{"name":"nodejs","version":"18.15.0","date":"2023-03-05","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"18.16.0","date":"2023-04-12","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"19.0.0","date":"2022-10-17","lts":false,"security":false,"v8":"10.7.193.13"},{"name":"nodejs","version":"19.1.0","date":"2022-11-14","lts":false,"security":false,"v8":"10.7.193.20"},{"name":"nodejs","version":"19.2.0","date":"2022-11-29","lts":false,"security":false,"v8":"10.8.168.20"},{"name":"nodejs","version":"19.3.0","date":"2022-12-14","lts":false,"security":false,"v8":"10.8.168.21"},{"name":"nodejs","version":"19.4.0","date":"2023-01-05","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.5.0","date":"2023-01-24","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.6.0","date":"2023-02-01","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.7.0","date":"2023-02-21","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.8.0","date":"2023-03-14","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.9.0","date":"2023-04-10","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"20.0.0","date":"2023-04-17","lts":false,"security":false,"v8":"11.3.244.4"},{"name":"nodejs","version":"20.1.0","date":"2023-05-03","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.2.0","date":"2023-05-16","lts":false,"security":false,"v8":"11.3.244.8"}]');

},{}],"1o0P3":[function(require,module,exports) {
"use strict";
const browsers = require("761a276a9b325335").browsers;
const versions = require("2a3221c2ff64becb").browserVersions;
const agentsData = require("923f718a75e41a18");
function unpackBrowserVersions(versionsData) {
    return Object.keys(versionsData).reduce((usage, version)=>{
        usage[versions[version]] = versionsData[version];
        return usage;
    }, {});
}
module.exports.agents = Object.keys(agentsData).reduce((map, key)=>{
    let versionsData = agentsData[key];
    map[browsers[key]] = Object.keys(versionsData).reduce((data, entry)=>{
        if (entry === "A") data.usage_global = unpackBrowserVersions(versionsData[entry]);
        else if (entry === "C") data.versions = versionsData[entry].reduce((list, version)=>{
            if (version === "") list.push(null);
            else list.push(versions[version]);
            return list;
        }, []);
        else if (entry === "D") data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
        else if (entry === "E") data.browser = versionsData[entry];
        else if (entry === "F") data.release_date = Object.keys(versionsData[entry]).reduce((map2, key2)=>{
            map2[versions[key2]] = versionsData[entry][key2];
            return map2;
        }, {});
        else // entry is B
        data.prefix = versionsData[entry];
        return data;
    }, {});
    return map;
}, {});

},{"761a276a9b325335":"1klRD","2a3221c2ff64becb":"gSgrO","923f718a75e41a18":"dwIbB"}],"1klRD":[function(require,module,exports) {
module.exports.browsers = require("b08db31f4e727e49");

},{"b08db31f4e727e49":"dD80h"}],"dD80h":[function(require,module,exports) {
module.exports = {
    A: "ie",
    B: "edge",
    C: "firefox",
    D: "chrome",
    E: "safari",
    F: "opera",
    G: "ios_saf",
    H: "op_mini",
    I: "android",
    J: "bb",
    K: "op_mob",
    L: "and_chr",
    M: "and_ff",
    N: "ie_mob",
    O: "and_uc",
    P: "samsung",
    Q: "and_qq",
    R: "baidu",
    S: "kaios"
};

},{}],"gSgrO":[function(require,module,exports) {
module.exports.browserVersions = require("36214008d1c0abda");

},{"36214008d1c0abda":"jocZZ"}],"jocZZ":[function(require,module,exports) {
module.exports = {
    "0": "21",
    "1": "22",
    "2": "23",
    "3": "24",
    "4": "25",
    "5": "26",
    "6": "27",
    "7": "28",
    "8": "29",
    "9": "30",
    A: "10",
    B: "11",
    C: "12",
    D: "113",
    E: "7",
    F: "8",
    G: "9",
    H: "15",
    I: "4",
    J: "6",
    K: "13",
    L: "14",
    M: "16",
    N: "17",
    O: "18",
    P: "79",
    Q: "80",
    R: "81",
    S: "83",
    T: "84",
    U: "85",
    V: "86",
    W: "87",
    X: "88",
    Y: "89",
    Z: "90",
    a: "91",
    b: "92",
    c: "93",
    d: "94",
    e: "95",
    f: "96",
    g: "97",
    h: "98",
    i: "20",
    j: "73",
    k: "99",
    l: "100",
    m: "101",
    n: "102",
    o: "103",
    p: "104",
    q: "105",
    r: "106",
    s: "107",
    t: "108",
    u: "109",
    v: "110",
    w: "111",
    x: "112",
    y: "5",
    z: "19",
    AB: "31",
    BB: "32",
    CB: "33",
    DB: "34",
    EB: "35",
    FB: "36",
    GB: "37",
    HB: "38",
    IB: "39",
    JB: "40",
    KB: "41",
    LB: "42",
    MB: "43",
    NB: "44",
    OB: "45",
    PB: "46",
    QB: "47",
    RB: "48",
    SB: "49",
    TB: "50",
    UB: "51",
    VB: "52",
    WB: "53",
    XB: "54",
    YB: "55",
    ZB: "56",
    aB: "57",
    bB: "58",
    cB: "60",
    dB: "62",
    eB: "63",
    fB: "64",
    gB: "65",
    hB: "66",
    iB: "67",
    jB: "68",
    kB: "69",
    lB: "70",
    mB: "71",
    nB: "72",
    oB: "74",
    pB: "75",
    qB: "76",
    rB: "77",
    sB: "78",
    tB: "11.1",
    uB: "12.1",
    vB: "16.0",
    wB: "3",
    xB: "59",
    yB: "61",
    zB: "82",
    "0B": "114",
    "1B": "115",
    "2B": "3.2",
    "3B": "10.1",
    "4B": "13.1",
    "5B": "15.2-15.3",
    "6B": "15.4",
    "7B": "15.5",
    "8B": "15.6",
    "9B": "16.1",
    AC: "16.2",
    BC: "16.3",
    CC: "16.4",
    DC: "16.5",
    EC: "11.5",
    FC: "4.2-4.3",
    GC: "5.5",
    HC: "2",
    IC: "3.5",
    JC: "3.6",
    KC: "116",
    LC: "3.1",
    MC: "5.1",
    NC: "6.1",
    OC: "7.1",
    PC: "9.1",
    QC: "14.1",
    RC: "15.1",
    SC: "16.6",
    TC: "TP",
    UC: "9.5-9.6",
    VC: "10.0-10.1",
    WC: "10.5",
    XC: "10.6",
    YC: "11.6",
    ZC: "4.0-4.1",
    aC: "5.0-5.1",
    bC: "6.0-6.1",
    cC: "7.0-7.1",
    dC: "8.1-8.4",
    eC: "9.0-9.2",
    fC: "9.3",
    gC: "10.0-10.2",
    hC: "10.3",
    iC: "11.0-11.2",
    jC: "11.3-11.4",
    kC: "12.0-12.1",
    lC: "12.2-12.5",
    mC: "13.0-13.1",
    nC: "13.2",
    oC: "13.3",
    pC: "13.4-13.7",
    qC: "14.0-14.4",
    rC: "14.5-14.8",
    sC: "15.0-15.1",
    tC: "all",
    uC: "2.1",
    vC: "2.2",
    wC: "2.3",
    xC: "4.1",
    yC: "4.4",
    zC: "4.4.3-4.4.4",
    "0C": "13.4",
    "1C": "5.0-5.4",
    "2C": "6.2-6.4",
    "3C": "7.2-7.4",
    "4C": "8.2",
    "5C": "9.2",
    "6C": "11.1-11.2",
    "7C": "12.0",
    "8C": "13.0",
    "9C": "14.0",
    AD: "15.0",
    BD: "17.0",
    CD: "18.0",
    DD: "19.0",
    ED: "13.18",
    FD: "2.5",
    GD: "3.0-3.1"
};

},{}],"dwIbB":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            J: 0.0131217,
            E: 0.00621152,
            F: 0.0439988,
            G: 0.0527986,
            A: 0.00879976,
            B: 0.36959,
            GC: 0.009298
        },
        B: "ms",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "GC",
            "J",
            "E",
            "F",
            "G",
            "A",
            "B",
            "",
            "",
            ""
        ],
        E: "IE",
        F: {
            GC: 962323200,
            J: 998870400,
            E: 1161129600,
            F: 1237420800,
            G: 1300060800,
            A: 1346716800,
            B: 1381968000
        }
    },
    B: {
        A: {
            C: 0.004081,
            K: 0.004267,
            L: 0.004268,
            H: 0.004081,
            M: 0.003702,
            N: 0.004441,
            O: 0.013323,
            P: 0,
            Q: 0.004298,
            R: 0.00944,
            S: 0.004043,
            T: 0.004441,
            U: 0.003861,
            V: 0.003861,
            W: 0.004441,
            X: 0.003943,
            Y: 0.004441,
            Z: 0.003943,
            a: 0.003943,
            b: 0.008882,
            c: 0.004118,
            d: 0.003939,
            e: 0.003943,
            f: 0.003943,
            g: 0.003943,
            h: 0.003929,
            k: 0.003901,
            l: 0.011829,
            m: 0.004441,
            n: 0.004441,
            o: 0.008162,
            p: 0.004081,
            q: 0.004441,
            r: 0.008882,
            s: 0.017764,
            t: 0.031087,
            u: 0.093261,
            v: 0.075497,
            w: 1.38559,
            x: 3.15755,
            D: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "C",
            "K",
            "L",
            "H",
            "M",
            "N",
            "O",
            "P",
            "Q",
            "R",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "k",
            "l",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "w",
            "x",
            "D",
            "",
            "",
            ""
        ],
        E: "Edge",
        F: {
            C: 1438128000,
            K: 1447286400,
            L: 1470096000,
            H: 1491868800,
            M: 1508198400,
            N: 1525046400,
            O: 1542067200,
            P: 1579046400,
            Q: 1581033600,
            R: 1586736000,
            S: 1590019200,
            T: 1594857600,
            U: 1598486400,
            V: 1602201600,
            W: 1605830400,
            X: 1611360000,
            Y: 1614816000,
            Z: 1618358400,
            a: 1622073600,
            b: 1626912000,
            c: 1630627200,
            d: 1632441600,
            e: 1634774400,
            f: 1637539200,
            g: 1641427200,
            h: 1643932800,
            k: 1646265600,
            l: 1649635200,
            m: 1651190400,
            n: 1653955200,
            o: 1655942400,
            p: 1659657600,
            q: 1661990400,
            r: 1664755200,
            s: 1666915200,
            t: 1670198400,
            u: 1673481600,
            v: 1675900800,
            w: 1678665600,
            x: 1680825600,
            D: 1683158400
        },
        D: {
            C: "ms",
            K: "ms",
            L: "ms",
            H: "ms",
            M: "ms",
            N: "ms",
            O: "ms"
        }
    },
    C: {
        A: {
            "0": 0.008322,
            "1": 0.013698,
            "2": 0.004161,
            "3": 0.008786,
            "4": 0.004118,
            "5": 0.004317,
            "6": 0.004393,
            "7": 0.004418,
            "8": 0.008834,
            "9": 0.008322,
            HC: 0.004118,
            wB: 0.004271,
            I: 0.011703,
            y: 0.004879,
            J: 0.020136,
            E: 0.005725,
            F: 0.004525,
            G: 0.00533,
            A: 0.004283,
            B: 0.008882,
            C: 0.004471,
            K: 0.004486,
            L: 0.00453,
            H: 0.008322,
            M: 0.004417,
            N: 0.004425,
            O: 0.004161,
            z: 0.004443,
            i: 0.004283,
            AB: 0.008928,
            BB: 0.004471,
            CB: 0.009284,
            DB: 0.004707,
            EB: 0.009076,
            FB: 0.004081,
            GB: 0.004783,
            HB: 0.003929,
            IB: 0.004783,
            JB: 0.00487,
            KB: 0.005029,
            LB: 0.0047,
            MB: 0.022205,
            NB: 0.004441,
            OB: 0.003867,
            PB: 0.004525,
            QB: 0.004293,
            RB: 0.004081,
            SB: 0.004538,
            TB: 0.008282,
            UB: 0.011601,
            VB: 0.039969,
            WB: 0.011601,
            XB: 0.004441,
            YB: 0.004441,
            ZB: 0.004441,
            aB: 0.011601,
            bB: 0.003939,
            xB: 0.004441,
            cB: 0.003929,
            yB: 0.004356,
            dB: 0.004425,
            eB: 0.008322,
            fB: 0.00415,
            gB: 0.004267,
            hB: 0.003801,
            iB: 0.004267,
            jB: 0.004081,
            kB: 0.00415,
            lB: 0.004293,
            mB: 0.004425,
            nB: 0.013323,
            j: 0.00415,
            oB: 0.00415,
            pB: 0.004318,
            qB: 0.004356,
            rB: 0.003974,
            sB: 0.031087,
            P: 0.004081,
            Q: 0.004081,
            R: 0.004081,
            zB: 0.003861,
            S: 0.004441,
            T: 0.003929,
            U: 0.004268,
            V: 0.003801,
            W: 0.008882,
            X: 0.004441,
            Y: 0.003943,
            Z: 0.003943,
            a: 0.008882,
            b: 0.003801,
            c: 0.007722,
            d: 0.017764,
            e: 0.003773,
            f: 0.007886,
            g: 0.003901,
            h: 0.003901,
            k: 0.004081,
            l: 0.003861,
            m: 0.004081,
            n: 0.097702,
            o: 0.017764,
            p: 0.004441,
            q: 0.008882,
            r: 0.008882,
            s: 0.008882,
            t: 0.013323,
            u: 0.022205,
            v: 0.048851,
            w: 1.00367,
            x: 0.905964,
            D: 0.008882,
            "0B": 0,
            "1B": 0,
            IC: 0.008786,
            JC: 0.00487
        },
        B: "moz",
        C: [
            "HC",
            "wB",
            "IC",
            "JC",
            "I",
            "y",
            "J",
            "E",
            "F",
            "G",
            "A",
            "B",
            "C",
            "K",
            "L",
            "H",
            "M",
            "N",
            "O",
            "z",
            "i",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "AB",
            "BB",
            "CB",
            "DB",
            "EB",
            "FB",
            "GB",
            "HB",
            "IB",
            "JB",
            "KB",
            "LB",
            "MB",
            "NB",
            "OB",
            "PB",
            "QB",
            "RB",
            "SB",
            "TB",
            "UB",
            "VB",
            "WB",
            "XB",
            "YB",
            "ZB",
            "aB",
            "bB",
            "xB",
            "cB",
            "yB",
            "dB",
            "eB",
            "fB",
            "gB",
            "hB",
            "iB",
            "jB",
            "kB",
            "lB",
            "mB",
            "nB",
            "j",
            "oB",
            "pB",
            "qB",
            "rB",
            "sB",
            "P",
            "Q",
            "R",
            "zB",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "k",
            "l",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "w",
            "x",
            "D",
            "0B",
            "1B",
            ""
        ],
        E: "Firefox",
        F: {
            "0": 1364860800,
            "1": 1368489600,
            "2": 1372118400,
            "3": 1375747200,
            "4": 1379376000,
            "5": 1386633600,
            "6": 1391472000,
            "7": 1395100800,
            "8": 1398729600,
            "9": 1402358400,
            HC: 1161648000,
            wB: 1213660800,
            IC: 1246320000,
            JC: 1264032000,
            I: 1300752000,
            y: 1308614400,
            J: 1313452800,
            E: 1317081600,
            F: 1317081600,
            G: 1320710400,
            A: 1324339200,
            B: 1327968000,
            C: 1331596800,
            K: 1335225600,
            L: 1338854400,
            H: 1342483200,
            M: 1346112000,
            N: 1349740800,
            O: 1353628800,
            z: 1357603200,
            i: 1361232000,
            AB: 1405987200,
            BB: 1409616000,
            CB: 1413244800,
            DB: 1417392000,
            EB: 1421107200,
            FB: 1424736000,
            GB: 1428278400,
            HB: 1431475200,
            IB: 1435881600,
            JB: 1439251200,
            KB: 1442880000,
            LB: 1446508800,
            MB: 1450137600,
            NB: 1453852800,
            OB: 1457395200,
            PB: 1461628800,
            QB: 1465257600,
            RB: 1470096000,
            SB: 1474329600,
            TB: 1479168000,
            UB: 1485216000,
            VB: 1488844800,
            WB: 1492560000,
            XB: 1497312000,
            YB: 1502150400,
            ZB: 1506556800,
            aB: 1510617600,
            bB: 1516665600,
            xB: 1520985600,
            cB: 1525824000,
            yB: 1529971200,
            dB: 1536105600,
            eB: 1540252800,
            fB: 1544486400,
            gB: 1548720000,
            hB: 1552953600,
            iB: 1558396800,
            jB: 1562630400,
            kB: 1567468800,
            lB: 1571788800,
            mB: 1575331200,
            nB: 1578355200,
            j: 1581379200,
            oB: 1583798400,
            pB: 1586304000,
            qB: 1588636800,
            rB: 1591056000,
            sB: 1593475200,
            P: 1595894400,
            Q: 1598313600,
            R: 1600732800,
            zB: 1603152000,
            S: 1605571200,
            T: 1607990400,
            U: 1611619200,
            V: 1614038400,
            W: 1616457600,
            X: 1618790400,
            Y: 1622505600,
            Z: 1626134400,
            a: 1628553600,
            b: 1630972800,
            c: 1633392000,
            d: 1635811200,
            e: 1638835200,
            f: 1641859200,
            g: 1644364800,
            h: 1646697600,
            k: 1649116800,
            l: 1651536000,
            m: 1653955200,
            n: 1656374400,
            o: 1658793600,
            p: 1661212800,
            q: 1663632000,
            r: 1666051200,
            s: 1668470400,
            t: 1670889600,
            u: 1673913600,
            v: 1676332800,
            w: 1678752000,
            x: 1681171200,
            D: 1683590400,
            "0B": null,
            "1B": null
        }
    },
    D: {
        A: {
            "0": 0.004317,
            "1": 0.003901,
            "2": 0.008786,
            "3": 0.003939,
            "4": 0.004461,
            "5": 0.004141,
            "6": 0.004326,
            "7": 0.0047,
            "8": 0.004538,
            "9": 0.008322,
            I: 0.004706,
            y: 0.004879,
            J: 0.004879,
            E: 0.005591,
            F: 0.005591,
            G: 0.005591,
            A: 0.004534,
            B: 0.004464,
            C: 0.010424,
            K: 0.0083,
            L: 0.004706,
            H: 0.015087,
            M: 0.004393,
            N: 0.004393,
            O: 0.008652,
            z: 0.008322,
            i: 0.004393,
            AB: 0.008596,
            BB: 0.004566,
            CB: 0.004118,
            DB: 0.008882,
            EB: 0.004441,
            FB: 0.004335,
            GB: 0.004464,
            HB: 0.017764,
            IB: 0.003867,
            JB: 0.013323,
            KB: 0.004441,
            LB: 0.003974,
            MB: 0.008882,
            NB: 0.008882,
            OB: 0.013323,
            PB: 0.003867,
            QB: 0.008882,
            RB: 0.017764,
            SB: 0.035528,
            TB: 0.004441,
            UB: 0.004081,
            VB: 0.004441,
            WB: 0.008882,
            XB: 0.003867,
            YB: 0.004441,
            ZB: 0.066615,
            aB: 0.004081,
            bB: 0.004441,
            xB: 0.003773,
            cB: 0.013323,
            yB: 0.008882,
            dB: 0.003773,
            eB: 0.004441,
            fB: 0.003943,
            gB: 0.008882,
            hB: 0.031087,
            iB: 0.008882,
            jB: 0.013323,
            kB: 0.039969,
            lB: 0.022205,
            mB: 0.017764,
            nB: 0.026646,
            j: 0.008882,
            oB: 0.031087,
            pB: 0.04441,
            qB: 0.04441,
            rB: 0.017764,
            sB: 0.026646,
            P: 0.22205,
            Q: 0.039969,
            R: 0.04441,
            S: 0.137671,
            T: 0.035528,
            U: 0.071056,
            V: 0.057733,
            W: 0.093261,
            X: 0.026646,
            Y: 0.035528,
            Z: 0.04441,
            a: 0.084379,
            b: 0.048851,
            c: 0.137671,
            d: 0.066615,
            e: 0.017764,
            f: 0.035528,
            g: 0.048851,
            h: 0.039969,
            k: 0.057733,
            l: 0.048851,
            m: 0.039969,
            n: 0.057733,
            o: 0.270901,
            p: 0.057733,
            q: 0.08882,
            r: 0.071056,
            s: 0.093261,
            t: 0.248696,
            u: 2.10947,
            v: 0.475187,
            w: 8.75321,
            x: 9.67694,
            D: 0.022205,
            "0B": 0.013323,
            "1B": 0,
            KC: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "I",
            "y",
            "J",
            "E",
            "F",
            "G",
            "A",
            "B",
            "C",
            "K",
            "L",
            "H",
            "M",
            "N",
            "O",
            "z",
            "i",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "AB",
            "BB",
            "CB",
            "DB",
            "EB",
            "FB",
            "GB",
            "HB",
            "IB",
            "JB",
            "KB",
            "LB",
            "MB",
            "NB",
            "OB",
            "PB",
            "QB",
            "RB",
            "SB",
            "TB",
            "UB",
            "VB",
            "WB",
            "XB",
            "YB",
            "ZB",
            "aB",
            "bB",
            "xB",
            "cB",
            "yB",
            "dB",
            "eB",
            "fB",
            "gB",
            "hB",
            "iB",
            "jB",
            "kB",
            "lB",
            "mB",
            "nB",
            "j",
            "oB",
            "pB",
            "qB",
            "rB",
            "sB",
            "P",
            "Q",
            "R",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "k",
            "l",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "w",
            "x",
            "D",
            "0B",
            "1B",
            "KC"
        ],
        E: "Chrome",
        F: {
            "0": 1340668800,
            "1": 1343692800,
            "2": 1348531200,
            "3": 1352246400,
            "4": 1357862400,
            "5": 1361404800,
            "6": 1364428800,
            "7": 1369094400,
            "8": 1374105600,
            "9": 1376956800,
            I: 1264377600,
            y: 1274745600,
            J: 1283385600,
            E: 1287619200,
            F: 1291248000,
            G: 1296777600,
            A: 1299542400,
            B: 1303862400,
            C: 1307404800,
            K: 1312243200,
            L: 1316131200,
            H: 1316131200,
            M: 1319500800,
            N: 1323734400,
            O: 1328659200,
            z: 1332892800,
            i: 1337040000,
            AB: 1384214400,
            BB: 1389657600,
            CB: 1392940800,
            DB: 1397001600,
            EB: 1400544000,
            FB: 1405468800,
            GB: 1409011200,
            HB: 1412640000,
            IB: 1416268800,
            JB: 1421798400,
            KB: 1425513600,
            LB: 1429401600,
            MB: 1432080000,
            NB: 1437523200,
            OB: 1441152000,
            PB: 1444780800,
            QB: 1449014400,
            RB: 1453248000,
            SB: 1456963200,
            TB: 1460592000,
            UB: 1464134400,
            VB: 1469059200,
            WB: 1472601600,
            XB: 1476230400,
            YB: 1480550400,
            ZB: 1485302400,
            aB: 1489017600,
            bB: 1492560000,
            xB: 1496707200,
            cB: 1500940800,
            yB: 1504569600,
            dB: 1508198400,
            eB: 1512518400,
            fB: 1516752000,
            gB: 1520294400,
            hB: 1523923200,
            iB: 1527552000,
            jB: 1532390400,
            kB: 1536019200,
            lB: 1539648000,
            mB: 1543968000,
            nB: 1548720000,
            j: 1552348800,
            oB: 1555977600,
            pB: 1559606400,
            qB: 1564444800,
            rB: 1568073600,
            sB: 1571702400,
            P: 1575936000,
            Q: 1580860800,
            R: 1586304000,
            S: 1589846400,
            T: 1594684800,
            U: 1598313600,
            V: 1601942400,
            W: 1605571200,
            X: 1611014400,
            Y: 1614556800,
            Z: 1618272000,
            a: 1621987200,
            b: 1626739200,
            c: 1630368000,
            d: 1632268800,
            e: 1634601600,
            f: 1637020800,
            g: 1641340800,
            h: 1643673600,
            k: 1646092800,
            l: 1648512000,
            m: 1650931200,
            n: 1653350400,
            o: 1655769600,
            p: 1659398400,
            q: 1661817600,
            r: 1664236800,
            s: 1666656000,
            t: 1669680000,
            u: 1673308800,
            v: 1675728000,
            w: 1678147200,
            x: 1680566400,
            D: 1682985600,
            "0B": null,
            "1B": null,
            KC: null
        }
    },
    E: {
        A: {
            I: 0,
            y: 0.008322,
            J: 0.004656,
            E: 0.004465,
            F: 0.003974,
            G: 0.003929,
            A: 0.004425,
            B: 0.004318,
            C: 0.003801,
            K: 0.022205,
            L: 0.119907,
            H: 0.026646,
            LC: 0,
            "2B": 0.008692,
            MC: 0.008882,
            NC: 0.00456,
            OC: 0.004283,
            PC: 0.048851,
            "3B": 0.007802,
            tB: 0.008882,
            uB: 0.039969,
            "4B": 0.186522,
            QC: 0.328634,
            RC: 0.048851,
            "5B": 0.04441,
            "6B": 0.111025,
            "7B": 0.195404,
            "8B": 0.830467,
            vB: 0.08882,
            "9B": 0.279783,
            AC: 0.408572,
            BC: 1.63429,
            CC: 0.688355,
            DC: 0.013323,
            SC: 0,
            TC: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "LC",
            "2B",
            "I",
            "y",
            "MC",
            "J",
            "NC",
            "E",
            "OC",
            "F",
            "G",
            "PC",
            "A",
            "3B",
            "B",
            "tB",
            "C",
            "uB",
            "K",
            "4B",
            "L",
            "QC",
            "H",
            "RC",
            "5B",
            "6B",
            "7B",
            "8B",
            "vB",
            "9B",
            "AC",
            "BC",
            "CC",
            "DC",
            "SC",
            "TC",
            ""
        ],
        E: "Safari",
        F: {
            LC: 1205798400,
            "2B": 1226534400,
            I: 1244419200,
            y: 1275868800,
            MC: 1311120000,
            J: 1343174400,
            NC: 1382400000,
            E: 1382400000,
            OC: 1410998400,
            F: 1413417600,
            G: 1443657600,
            PC: 1458518400,
            A: 1474329600,
            "3B": 1490572800,
            B: 1505779200,
            tB: 1522281600,
            C: 1537142400,
            uB: 1553472000,
            K: 1568851200,
            "4B": 1585008000,
            L: 1600214400,
            QC: 1619395200,
            H: 1632096000,
            RC: 1635292800,
            "5B": 1639353600,
            "6B": 1647216000,
            "7B": 1652745600,
            "8B": 1658275200,
            vB: 1662940800,
            "9B": 1666569600,
            AC: 1670889600,
            BC: 1674432000,
            CC: 1679875200,
            DC: 1684368000,
            SC: null,
            TC: null
        }
    },
    F: {
        A: {
            "0": 0.006597,
            "1": 0.006597,
            "2": 0.013434,
            "3": 0.006702,
            "4": 0.006015,
            "5": 0.005595,
            "6": 0.004393,
            "7": 0.008882,
            "8": 0.004879,
            "9": 0.004879,
            G: 0.0082,
            B: 0.016581,
            C: 0.004317,
            H: 0.00685,
            M: 0.00685,
            N: 0.00685,
            O: 0.005014,
            z: 0.006015,
            i: 0.004879,
            AB: 0.004441,
            BB: 0.005152,
            CB: 0.005014,
            DB: 0.009758,
            EB: 0.004879,
            FB: 0.004441,
            GB: 0.004283,
            HB: 0.004367,
            IB: 0.004534,
            JB: 0.004441,
            KB: 0.004227,
            LB: 0.004418,
            MB: 0.004161,
            NB: 0.004227,
            OB: 0.004725,
            PB: 0.013323,
            QB: 0.008942,
            RB: 0.004707,
            SB: 0.004827,
            TB: 0.004707,
            UB: 0.004707,
            VB: 0.004326,
            WB: 0.008922,
            XB: 0.014349,
            YB: 0.004425,
            ZB: 0.00472,
            aB: 0.004425,
            bB: 0.004425,
            cB: 0.00472,
            dB: 0.004532,
            eB: 0.004566,
            fB: 0.02283,
            gB: 0.00867,
            hB: 0.004656,
            iB: 0.004642,
            jB: 0.003929,
            kB: 0.00944,
            lB: 0.004293,
            mB: 0.003929,
            nB: 0.004298,
            j: 0.096692,
            oB: 0.008162,
            pB: 0.004141,
            qB: 0.004257,
            rB: 0.003939,
            sB: 0.008236,
            P: 0.003855,
            Q: 0.003939,
            R: 0.008514,
            zB: 0.003939,
            S: 0.003939,
            T: 0.003702,
            U: 0.004441,
            V: 0.003855,
            W: 0.003855,
            X: 0.003929,
            Y: 0.003861,
            Z: 0.011703,
            a: 0.007546,
            b: 0.011829,
            c: 0.069498,
            d: 0.004441,
            e: 0.066615,
            f: 0.315311,
            g: 0.817144,
            h: 0.031087,
            UC: 0.00685,
            VC: 0,
            WC: 0.008392,
            XC: 0.004706,
            tB: 0.006229,
            EC: 0.004879,
            YC: 0.008786,
            uB: 0.00472
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "G",
            "UC",
            "VC",
            "WC",
            "XC",
            "B",
            "tB",
            "EC",
            "YC",
            "C",
            "uB",
            "H",
            "M",
            "N",
            "O",
            "z",
            "i",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "AB",
            "BB",
            "CB",
            "DB",
            "EB",
            "FB",
            "GB",
            "HB",
            "IB",
            "JB",
            "KB",
            "LB",
            "MB",
            "NB",
            "OB",
            "PB",
            "QB",
            "RB",
            "SB",
            "TB",
            "UB",
            "VB",
            "WB",
            "XB",
            "YB",
            "ZB",
            "aB",
            "bB",
            "cB",
            "dB",
            "eB",
            "fB",
            "gB",
            "hB",
            "iB",
            "jB",
            "kB",
            "lB",
            "mB",
            "nB",
            "j",
            "oB",
            "pB",
            "qB",
            "rB",
            "sB",
            "P",
            "Q",
            "R",
            "zB",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "",
            "",
            ""
        ],
        E: "Opera",
        F: {
            "0": 1399334400,
            "1": 1401753600,
            "2": 1405987200,
            "3": 1409616000,
            "4": 1413331200,
            "5": 1417132800,
            "6": 1422316800,
            "7": 1425945600,
            "8": 1430179200,
            "9": 1433808000,
            G: 1150761600,
            UC: 1223424000,
            VC: 1251763200,
            WC: 1267488000,
            XC: 1277942400,
            B: 1292457600,
            tB: 1302566400,
            EC: 1309219200,
            YC: 1323129600,
            C: 1323129600,
            uB: 1352073600,
            H: 1372723200,
            M: 1377561600,
            N: 1381104000,
            O: 1386288000,
            z: 1390867200,
            i: 1393891200,
            AB: 1438646400,
            BB: 1442448000,
            CB: 1445904000,
            DB: 1449100800,
            EB: 1454371200,
            FB: 1457308800,
            GB: 1462320000,
            HB: 1465344000,
            IB: 1470096000,
            JB: 1474329600,
            KB: 1477267200,
            LB: 1481587200,
            MB: 1486425600,
            NB: 1490054400,
            OB: 1494374400,
            PB: 1498003200,
            QB: 1502236800,
            RB: 1506470400,
            SB: 1510099200,
            TB: 1515024000,
            UB: 1517961600,
            VB: 1521676800,
            WB: 1525910400,
            XB: 1530144000,
            YB: 1534982400,
            ZB: 1537833600,
            aB: 1543363200,
            bB: 1548201600,
            cB: 1554768000,
            dB: 1561593600,
            eB: 1566259200,
            fB: 1570406400,
            gB: 1573689600,
            hB: 1578441600,
            iB: 1583971200,
            jB: 1587513600,
            kB: 1592956800,
            lB: 1595894400,
            mB: 1600128000,
            nB: 1603238400,
            j: 1613520000,
            oB: 1612224000,
            pB: 1616544000,
            qB: 1619568000,
            rB: 1623715200,
            sB: 1627948800,
            P: 1631577600,
            Q: 1633392000,
            R: 1635984000,
            zB: 1638403200,
            S: 1642550400,
            T: 1644969600,
            U: 1647993600,
            V: 1650412800,
            W: 1652745600,
            X: 1654646400,
            Y: 1657152000,
            Z: 1660780800,
            a: 1663113600,
            b: 1668816000,
            c: 1668643200,
            d: 1671062400,
            e: 1675209600,
            f: 1677024000,
            g: 1679529600,
            h: 1681948800
        },
        D: {
            G: "o",
            B: "o",
            C: "o",
            UC: "o",
            VC: "o",
            WC: "o",
            XC: "o",
            tB: "o",
            EC: "o",
            YC: "o",
            uB: "o"
        }
    },
    G: {
        A: {
            F: 0.00318601,
            "2B": 0,
            ZC: 0,
            FC: 0.00318601,
            aC: 0.00477902,
            bC: 0.00637202,
            cC: 0.0175231,
            dC: 0.0254881,
            eC: 0.012744,
            fC: 0.0541622,
            gC: 0.00318601,
            hC: 0.0684992,
            iC: 0.0207091,
            jC: 0.0223021,
            kC: 0.0191161,
            lC: 0.358426,
            mC: 0.011151,
            nC: 0.0207091,
            oC: 0.0302671,
            pC: 0.0908013,
            qC: 0.237358,
            rC: 0.430112,
            sC: 0.136998,
            "5B": 0.167266,
            "6B": 0.191161,
            "7B": 0.30745,
            "8B": 0.831549,
            vB: 0.933501,
            "9B": 1.93709,
            AC: 1.14696,
            BC: 5.44011,
            CC: 2.42455,
            DC: 0.0525692
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "2B",
            "ZC",
            "FC",
            "aC",
            "bC",
            "cC",
            "F",
            "dC",
            "eC",
            "fC",
            "gC",
            "hC",
            "iC",
            "jC",
            "kC",
            "lC",
            "mC",
            "nC",
            "oC",
            "pC",
            "qC",
            "rC",
            "sC",
            "5B",
            "6B",
            "7B",
            "8B",
            "vB",
            "9B",
            "AC",
            "BC",
            "CC",
            "DC",
            "",
            "",
            ""
        ],
        E: "Safari on iOS",
        F: {
            "2B": 1270252800,
            ZC: 1283904000,
            FC: 1299628800,
            aC: 1331078400,
            bC: 1359331200,
            cC: 1394409600,
            F: 1410912000,
            dC: 1413763200,
            eC: 1442361600,
            fC: 1458518400,
            gC: 1473724800,
            hC: 1490572800,
            iC: 1505779200,
            jC: 1522281600,
            kC: 1537142400,
            lC: 1553472000,
            mC: 1568851200,
            nC: 1572220800,
            oC: 1580169600,
            pC: 1585008000,
            qC: 1600214400,
            rC: 1619395200,
            sC: 1632096000,
            "5B": 1639353600,
            "6B": 1647216000,
            "7B": 1652659200,
            "8B": 1658275200,
            vB: 1662940800,
            "9B": 1666569600,
            AC: 1670889600,
            BC: 1674432000,
            CC: 1679875200,
            DC: 1684368000
        }
    },
    H: {
        A: {
            tC: 0.994689
        },
        B: "o",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "tC",
            "",
            "",
            ""
        ],
        E: "Opera Mini",
        F: {
            tC: 1426464000
        }
    },
    I: {
        A: {
            wB: 0,
            I: 0.0285433,
            D: 0,
            uC: 0,
            vC: 0.00951444,
            wC: 0,
            xC: 0.0190289,
            FC: 0.0951444,
            yC: 0,
            zC: 0.34252
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "uC",
            "vC",
            "wC",
            "wB",
            "I",
            "xC",
            "FC",
            "yC",
            "zC",
            "D",
            "",
            "",
            ""
        ],
        E: "Android Browser",
        F: {
            uC: 1256515200,
            vC: 1274313600,
            wC: 1291593600,
            wB: 1298332800,
            I: 1318896000,
            xC: 1341792000,
            FC: 1374624000,
            yC: 1386547200,
            zC: 1401667200,
            D: 1682985600
        }
    },
    J: {
        A: {
            E: 0,
            A: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "E",
            "A",
            "",
            "",
            ""
        ],
        E: "Blackberry Browser",
        F: {
            E: 1325376000,
            A: 1359504000
        }
    },
    K: {
        A: {
            A: 0,
            B: 0,
            C: 0,
            j: 0.0111391,
            tB: 0,
            EC: 0,
            uB: 0
        },
        B: "o",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "A",
            "B",
            "tB",
            "EC",
            "C",
            "uB",
            "j",
            "",
            "",
            ""
        ],
        E: "Opera Mobile",
        F: {
            A: 1287100800,
            B: 1300752000,
            tB: 1314835200,
            EC: 1318291200,
            C: 1330300800,
            uB: 1349740800,
            j: 1673827200
        },
        D: {
            j: "webkit"
        }
    },
    L: {
        A: {
            D: 39.6882
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "D",
            "",
            "",
            ""
        ],
        E: "Chrome for Android",
        F: {
            D: 1682985600
        }
    },
    M: {
        A: {
            D: 0.289068
        },
        B: "moz",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "D",
            "",
            "",
            ""
        ],
        E: "Firefox for Android",
        F: {
            D: 1683590400
        }
    },
    N: {
        A: {
            A: 0.0115934,
            B: 0.022664
        },
        B: "ms",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "A",
            "B",
            "",
            "",
            ""
        ],
        E: "IE Mobile",
        F: {
            A: 1340150400,
            B: 1353456000
        }
    },
    O: {
        A: {
            "0C": 0.950589
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "0C",
            "",
            "",
            ""
        ],
        E: "UC Browser for Android",
        F: {
            "0C": 1634688000
        },
        D: {
            "0C": "webkit"
        }
    },
    P: {
        A: {
            I: 0.191027,
            i: 2.06946,
            "1C": 0.0103543,
            "2C": 0.010304,
            "3C": 0.0530632,
            "4C": 0.0103584,
            "5C": 0.0104443,
            "3B": 0.0105043,
            "6C": 0.0212253,
            "7C": 0.0103982,
            "8C": 0.0212253,
            "9C": 0.0106126,
            AD: 0.0106126,
            vB: 0.0530632,
            BD: 0.0530632,
            CD: 0.0530632,
            DD: 0.148577
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "I",
            "1C",
            "2C",
            "3C",
            "4C",
            "5C",
            "3B",
            "6C",
            "7C",
            "8C",
            "9C",
            "AD",
            "vB",
            "BD",
            "CD",
            "DD",
            "i",
            "",
            "",
            ""
        ],
        E: "Samsung Internet",
        F: {
            I: 1461024000,
            "1C": 1481846400,
            "2C": 1509408000,
            "3C": 1528329600,
            "4C": 1546128000,
            "5C": 1554163200,
            "3B": 1567900800,
            "6C": 1582588800,
            "7C": 1593475200,
            "8C": 1605657600,
            "9C": 1618531200,
            AD: 1629072000,
            vB: 1640736000,
            BD: 1651708800,
            CD: 1659657600,
            DD: 1667260800,
            i: 1677369600
        }
    },
    Q: {
        A: {
            "4B": 0.127857
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "4B",
            "",
            "",
            ""
        ],
        E: "QQ Browser",
        F: {
            "4B": 1663718400
        }
    },
    R: {
        A: {
            ED: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "ED",
            "",
            "",
            ""
        ],
        E: "Baidu Browser",
        F: {
            ED: 1663027200
        }
    },
    S: {
        A: {
            FD: 0.066708,
            GD: 0
        },
        B: "moz",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "FD",
            "GD",
            "",
            "",
            ""
        ],
        E: "KaiOS Browser",
        F: {
            FD: 1527811200,
            GD: 1631664000
        }
    }
};

},{}],"b7Kzh":[function(require,module,exports) {
module.exports = JSON.parse('{"v0.8":{"start":"2012-06-25","end":"2014-07-31"},"v0.10":{"start":"2013-03-11","end":"2016-10-31"},"v0.12":{"start":"2015-02-06","end":"2016-12-31"},"v4":{"start":"2015-09-08","lts":"2015-10-12","maintenance":"2017-04-01","end":"2018-04-30","codename":"Argon"},"v5":{"start":"2015-10-29","maintenance":"2016-04-30","end":"2016-06-30"},"v6":{"start":"2016-04-26","lts":"2016-10-18","maintenance":"2018-04-30","end":"2019-04-30","codename":"Boron"},"v7":{"start":"2016-10-25","maintenance":"2017-04-30","end":"2017-06-30"},"v8":{"start":"2017-05-30","lts":"2017-10-31","maintenance":"2019-01-01","end":"2019-12-31","codename":"Carbon"},"v9":{"start":"2017-10-01","maintenance":"2018-04-01","end":"2018-06-30"},"v10":{"start":"2018-04-24","lts":"2018-10-30","maintenance":"2020-05-19","end":"2021-04-30","codename":"Dubnium"},"v11":{"start":"2018-10-23","maintenance":"2019-04-22","end":"2019-06-01"},"v12":{"start":"2019-04-23","lts":"2019-10-21","maintenance":"2020-11-30","end":"2022-04-30","codename":"Erbium"},"v13":{"start":"2019-10-22","maintenance":"2020-04-01","end":"2020-06-01"},"v14":{"start":"2020-04-21","lts":"2020-10-27","maintenance":"2021-10-19","end":"2023-04-30","codename":"Fermium"},"v15":{"start":"2020-10-20","maintenance":"2021-04-01","end":"2021-06-01"},"v16":{"start":"2021-04-20","lts":"2021-10-26","maintenance":"2022-10-18","end":"2023-09-11","codename":"Gallium"},"v17":{"start":"2021-10-19","maintenance":"2022-04-01","end":"2022-06-01"},"v18":{"start":"2022-04-19","lts":"2022-10-25","maintenance":"2023-10-18","end":"2025-04-30","codename":"Hydrogen"},"v19":{"start":"2022-10-18","maintenance":"2023-04-01","end":"2023-06-01"},"v20":{"start":"2023-04-18","lts":"2023-10-24","maintenance":"2024-10-22","end":"2026-04-30","codename":""}}');

},{}],"i95xm":[function(require,module,exports) {
module.exports = {
    "0.20": "39",
    "0.21": "41",
    "0.22": "41",
    "0.23": "41",
    "0.24": "41",
    "0.25": "42",
    "0.26": "42",
    "0.27": "43",
    "0.28": "43",
    "0.29": "43",
    "0.30": "44",
    "0.31": "45",
    "0.32": "45",
    "0.33": "45",
    "0.34": "45",
    "0.35": "45",
    "0.36": "47",
    "0.37": "49",
    "1.0": "49",
    "1.1": "50",
    "1.2": "51",
    "1.3": "52",
    "1.4": "53",
    "1.5": "54",
    "1.6": "56",
    "1.7": "58",
    "1.8": "59",
    "2.0": "61",
    "2.1": "61",
    "3.0": "66",
    "3.1": "66",
    "4.0": "69",
    "4.1": "69",
    "4.2": "69",
    "5.0": "73",
    "6.0": "76",
    "6.1": "76",
    "7.0": "78",
    "7.1": "78",
    "7.2": "78",
    "7.3": "78",
    "8.0": "80",
    "8.1": "80",
    "8.2": "80",
    "8.3": "80",
    "8.4": "80",
    "8.5": "80",
    "9.0": "83",
    "9.1": "83",
    "9.2": "83",
    "9.3": "83",
    "9.4": "83",
    "10.0": "85",
    "10.1": "85",
    "10.2": "85",
    "10.3": "85",
    "10.4": "85",
    "11.0": "87",
    "11.1": "87",
    "11.2": "87",
    "11.3": "87",
    "11.4": "87",
    "11.5": "87",
    "12.0": "89",
    "12.1": "89",
    "12.2": "89",
    "13.0": "91",
    "13.1": "91",
    "13.2": "91",
    "13.3": "91",
    "13.4": "91",
    "13.5": "91",
    "13.6": "91",
    "14.0": "93",
    "14.1": "93",
    "14.2": "93",
    "15.0": "94",
    "15.1": "94",
    "15.2": "94",
    "15.3": "94",
    "15.4": "94",
    "15.5": "94",
    "16.0": "96",
    "16.1": "96",
    "16.2": "96",
    "17.0": "98",
    "17.1": "98",
    "17.2": "98",
    "17.3": "98",
    "17.4": "98",
    "18.0": "100",
    "18.1": "100",
    "18.2": "100",
    "18.3": "100",
    "19.0": "102",
    "19.1": "102",
    "20.0": "104",
    "20.1": "104",
    "20.2": "104",
    "20.3": "104",
    "21.0": "106",
    "21.1": "106",
    "21.2": "106",
    "21.3": "106",
    "21.4": "106",
    "22.0": "108",
    "22.1": "108",
    "22.2": "108",
    "22.3": "108",
    "23.0": "110",
    "23.1": "110",
    "23.2": "110",
    "23.3": "110",
    "24.0": "112",
    "24.1": "112",
    "24.2": "112",
    "24.3": "112",
    "24.4": "112",
    "25.0": "114"
};

},{}],"4GzM4":[function(require,module,exports) {
function BrowserslistError(message) {
    this.name = "BrowserslistError";
    this.message = message;
    this.browserslist = true;
    if (Error.captureStackTrace) Error.captureStackTrace(this, BrowserslistError);
}
BrowserslistError.prototype = Error.prototype;
module.exports = BrowserslistError;

},{}],"a4Lkh":[function(require,module,exports) {
var AND_REGEXP = /^\s+and\s+(.*)/i;
var OR_REGEXP = /^(?:,\s*|\s+or\s+)(.*)/i;
function flatten(array) {
    if (!Array.isArray(array)) return [
        array
    ];
    return array.reduce(function(a, b) {
        return a.concat(flatten(b));
    }, []);
}
function find(string, predicate) {
    for(var n = 1, max = string.length; n <= max; n++){
        var parsed = string.substr(-n, n);
        if (predicate(parsed, n, max)) return string.slice(0, -n);
    }
    return "";
}
function matchQuery(all, query) {
    var node = {
        query: query
    };
    if (query.indexOf("not ") === 0) {
        node.not = true;
        query = query.slice(4);
    }
    for(var name in all){
        var type = all[name];
        var match = query.match(type.regexp);
        if (match) {
            node.type = name;
            for(var i = 0; i < type.matches.length; i++)node[type.matches[i]] = match[i + 1];
            return node;
        }
    }
    node.type = "unknown";
    return node;
}
function matchBlock(all, string, qs) {
    var node;
    return find(string, function(parsed, n, max) {
        if (AND_REGEXP.test(parsed)) {
            node = matchQuery(all, parsed.match(AND_REGEXP)[1]);
            node.compose = "and";
            qs.unshift(node);
            return true;
        } else if (OR_REGEXP.test(parsed)) {
            node = matchQuery(all, parsed.match(OR_REGEXP)[1]);
            node.compose = "or";
            qs.unshift(node);
            return true;
        } else if (n === max) {
            node = matchQuery(all, parsed.trim());
            node.compose = "or";
            qs.unshift(node);
            return true;
        }
        return false;
    });
}
module.exports = function parse(all, queries) {
    if (!Array.isArray(queries)) queries = [
        queries
    ];
    return flatten(queries.map(function(block) {
        var qs = [];
        do block = matchBlock(all, block, qs);
        while (block);
        return qs;
    }));
};

},{}],"hteYL":[function(require,module,exports) {
var BrowserslistError = require("6932a7c7f3ac3c02");
function noop() {}
module.exports = {
    loadQueries: function loadQueries() {
        throw new BrowserslistError("Sharable configs are not supported in client-side build of Browserslist");
    },
    getStat: function getStat(opts) {
        return opts.stats;
    },
    loadConfig: function loadConfig(opts) {
        if (opts.config) throw new BrowserslistError("Browserslist config are not supported in client-side build");
    },
    loadCountry: function loadCountry() {
        throw new BrowserslistError("Country statistics are not supported in client-side build of Browserslist");
    },
    loadFeature: function loadFeature() {
        throw new BrowserslistError("Supports queries are not available in client-side build of Browserslist");
    },
    currentNode: function currentNode(resolve, context) {
        return resolve([
            "maintained node versions"
        ], context)[0];
    },
    parseConfig: noop,
    readConfig: noop,
    findConfig: noop,
    clearCaches: noop,
    oldDataWarning: noop,
    env: {}
};

},{"6932a7c7f3ac3c02":"4GzM4"}],"1298x":[function(require,module,exports) {
var x = String;
var create = function() {
    return {
        isColorSupported: false,
        reset: x,
        bold: x,
        dim: x,
        italic: x,
        underline: x,
        inverse: x,
        hidden: x,
        strikethrough: x,
        black: x,
        red: x,
        green: x,
        yellow: x,
        blue: x,
        magenta: x,
        cyan: x,
        white: x,
        gray: x,
        bgBlack: x,
        bgRed: x,
        bgGreen: x,
        bgYellow: x,
        bgBlue: x,
        bgMagenta: x,
        bgCyan: x,
        bgWhite: x
    };
};
module.exports = create();
module.exports.createColors = create;

},{}],"dGs5H":[function(require,module,exports) {
let browserslist = require("eb7ef4ff888a9850");
let { agents } = require("d1fee5d87feee14d");
let utils = require("28b73a9cdc116c77");
class Browsers {
    /**
   * Return all prefixes for default browser data
   */ static prefixes() {
        if (this.prefixesCache) return this.prefixesCache;
        this.prefixesCache = [];
        for(let name in agents)this.prefixesCache.push(`-${agents[name].prefix}-`);
        this.prefixesCache = utils.uniq(this.prefixesCache).sort((a, b)=>b.length - a.length);
        return this.prefixesCache;
    }
    /**
   * Check is value contain any possible prefix
   */ static withPrefix(value) {
        if (!this.prefixesRegexp) this.prefixesRegexp = new RegExp(this.prefixes().join("|"));
        return this.prefixesRegexp.test(value);
    }
    constructor(data, requirements, options, browserslistOpts){
        this.data = data;
        this.options = options || {};
        this.browserslistOpts = browserslistOpts || {};
        this.selected = this.parse(requirements);
    }
    /**
   * Return browsers selected by requirements
   */ parse(requirements) {
        let opts = {};
        for(let i in this.browserslistOpts)opts[i] = this.browserslistOpts[i];
        opts.path = this.options.from;
        return browserslist(requirements, opts);
    }
    /**
   * Return prefix for selected browser
   */ prefix(browser) {
        let [name, version] = browser.split(" ");
        let data = this.data[name];
        let prefix = data.prefix_exceptions && data.prefix_exceptions[version];
        if (!prefix) prefix = data.prefix;
        return `-${prefix}-`;
    }
    /**
   * Is browser is selected by requirements
   */ isSelected(browser) {
        return this.selected.includes(browser);
    }
}
module.exports = Browsers;

},{"eb7ef4ff888a9850":"h32Zo","d1fee5d87feee14d":"1o0P3","28b73a9cdc116c77":"j2sRV"}],"j2sRV":[function(require,module,exports) {
let { list } = require("29e1343774d16e86");
/**
 * Throw special error, to tell beniary,
 * that this error is from Autoprefixer.
 */ module.exports.error = function(text) {
    let err = new Error(text);
    err.autoprefixer = true;
    throw err;
};
/**
 * Return array, that doesn’t contain duplicates.
 */ module.exports.uniq = function(array) {
    return [
        ...new Set(array)
    ];
};
/**
 * Return "-webkit-" on "-webkit- old"
 */ module.exports.removeNote = function(string) {
    if (!string.includes(" ")) return string;
    return string.split(" ")[0];
};
/**
 * Escape RegExp symbols
 */ module.exports.escapeRegexp = function(string) {
    return string.replace(/[$()*+-.?[\\\]^{|}]/g, "\\$&");
};
/**
 * Return regexp to check, that CSS string contain word
 */ module.exports.regexp = function(word, escape = true) {
    if (escape) word = this.escapeRegexp(word);
    return new RegExp(`(^|[\\s,(])(${word}($|[\\s(,]))`, "gi");
};
/**
 * Change comma list
 */ module.exports.editList = function(value, callback) {
    let origin = list.comma(value);
    let changed = callback(origin, []);
    if (origin === changed) return value;
    let join = value.match(/,\s*/);
    join = join ? join[0] : ", ";
    return changed.join(join);
};
/**
 * Split the selector into parts.
 * It returns 3 level deep array because selectors can be comma
 * separated (1), space separated (2), and combined (3)
 * @param {String} selector selector string
 * @return {Array<Array<Array>>} 3 level deep array of split selector
 * @see utils.test.js for examples
 */ module.exports.splitSelector = function(selector) {
    return list.comma(selector).map((i)=>{
        return list.space(i).map((k)=>{
            return k.split(/(?=\.|#)/g);
        });
    });
};
/**
 * Return true if a given value only contains numbers.
 * @param {*} value
 * @returns {boolean}
 */ module.exports.isPureNumber = function(value) {
    if (typeof value === "number") return true;
    if (typeof value === "string") return /^[0-9]+$/.test(value);
    return false;
};

},{"29e1343774d16e86":"gauyy"}],"gauyy":[function(require,module,exports) {
"use strict";
let CssSyntaxError = require("b94c122da89285cf");
let Declaration = require("58b9b695b5cdec4f");
let LazyResult = require("28800b7f609eacb4");
let Container = require("53e8dbf4303f6b2");
let Processor = require("74e2939a62033b88");
let stringify = require("423052f41b6923a8");
let fromJSON = require("265270fe03ed0453");
let Document = require("6d045fa42be054c3");
let Warning = require("5e8938f8ea2bde5c");
let Comment = require("a80a0398f4ef418a");
let AtRule = require("3d45f8dbf6f865b3");
let Result = require("7861cd83b55ece93");
let Input = require("88cc225cd57b2cfd");
let parse = require("d869a996a852aa7b");
let list = require("b9cbb1c1f8b97b6d");
let Rule = require("885ac03c34871ebd");
let Root = require("4e735dfb84c57321");
let Node = require("f911e43317d4d41c");
function postcss(...plugins) {
    if (plugins.length === 1 && Array.isArray(plugins[0])) plugins = plugins[0];
    return new Processor(plugins);
}
postcss.plugin = function plugin(name, initializer) {
    let warningPrinted = false;
    function creator(...args) {
        // eslint-disable-next-line no-console
        if (console && console.warn && !warningPrinted) {
            warningPrinted = true;
            // eslint-disable-next-line no-console
            console.warn(name + ": postcss.plugin was deprecated. Migration guide:\n" + "https://evilmartians.com/chronicles/postcss-8-plugin-migration");
        }
        let transformer = initializer(...args);
        transformer.postcssPlugin = name;
        transformer.postcssVersion = new Processor().version;
        return transformer;
    }
    let cache;
    Object.defineProperty(creator, "postcss", {
        get () {
            if (!cache) cache = creator();
            return cache;
        }
    });
    creator.process = function(css, processOpts, pluginOpts) {
        return postcss([
            creator(pluginOpts)
        ]).process(css, processOpts);
    };
    return creator;
};
postcss.stringify = stringify;
postcss.parse = parse;
postcss.fromJSON = fromJSON;
postcss.list = list;
postcss.comment = (defaults)=>new Comment(defaults);
postcss.atRule = (defaults)=>new AtRule(defaults);
postcss.decl = (defaults)=>new Declaration(defaults);
postcss.rule = (defaults)=>new Rule(defaults);
postcss.root = (defaults)=>new Root(defaults);
postcss.document = (defaults)=>new Document(defaults);
postcss.CssSyntaxError = CssSyntaxError;
postcss.Declaration = Declaration;
postcss.Container = Container;
postcss.Processor = Processor;
postcss.Document = Document;
postcss.Comment = Comment;
postcss.Warning = Warning;
postcss.AtRule = AtRule;
postcss.Result = Result;
postcss.Input = Input;
postcss.Rule = Rule;
postcss.Root = Root;
postcss.Node = Node;
LazyResult.registerPostcss(postcss);
module.exports = postcss;
postcss.default = postcss;

},{"b94c122da89285cf":"5TKyW","58b9b695b5cdec4f":"2mU8a","28800b7f609eacb4":"580Su","53e8dbf4303f6b2":"1gj6C","74e2939a62033b88":"lU6wZ","423052f41b6923a8":"a0MwE","265270fe03ed0453":"iiNZS","6d045fa42be054c3":"dK3sP","5e8938f8ea2bde5c":"lw5j2","a80a0398f4ef418a":"5CBjv","3d45f8dbf6f865b3":"kbVAt","7861cd83b55ece93":"dmoqr","88cc225cd57b2cfd":"fb1UO","d869a996a852aa7b":"ioa1B","b9cbb1c1f8b97b6d":"hZo3l","885ac03c34871ebd":"4SFJx","4e735dfb84c57321":"hsDFv","f911e43317d4d41c":"5azBO"}],"5TKyW":[function(require,module,exports) {
"use strict";
let pico = require("9ad9103a933bde56");
let terminalHighlight = require("76818616dc2728aa");
class CssSyntaxError extends Error {
    constructor(message, line, column, source, file, plugin){
        super(message);
        this.name = "CssSyntaxError";
        this.reason = message;
        if (file) this.file = file;
        if (source) this.source = source;
        if (plugin) this.plugin = plugin;
        if (typeof line !== "undefined" && typeof column !== "undefined") {
            if (typeof line === "number") {
                this.line = line;
                this.column = column;
            } else {
                this.line = line.line;
                this.column = line.column;
                this.endLine = column.line;
                this.endColumn = column.column;
            }
        }
        this.setMessage();
        if (Error.captureStackTrace) Error.captureStackTrace(this, CssSyntaxError);
    }
    setMessage() {
        this.message = this.plugin ? this.plugin + ": " : "";
        this.message += this.file ? this.file : "<css input>";
        if (typeof this.line !== "undefined") this.message += ":" + this.line + ":" + this.column;
        this.message += ": " + this.reason;
    }
    showSourceCode(color) {
        if (!this.source) return "";
        let css = this.source;
        if (color == null) color = pico.isColorSupported;
        if (terminalHighlight) {
            if (color) css = terminalHighlight(css);
        }
        let lines = css.split(/\r?\n/);
        let start = Math.max(this.line - 3, 0);
        let end = Math.min(this.line + 2, lines.length);
        let maxWidth = String(end).length;
        let mark, aside;
        if (color) {
            let { bold, red, gray } = pico.createColors(true);
            mark = (text)=>bold(red(text));
            aside = (text)=>gray(text);
        } else mark = aside = (str)=>str;
        return lines.slice(start, end).map((line, index)=>{
            let number = start + 1 + index;
            let gutter = " " + (" " + number).slice(-maxWidth) + " | ";
            if (number === this.line) {
                let spacing = aside(gutter.replace(/\d/g, " ")) + line.slice(0, this.column - 1).replace(/[^\t]/g, " ");
                return mark(">") + aside(gutter) + line + "\n " + spacing + mark("^");
            }
            return " " + aside(gutter) + line;
        }).join("\n");
    }
    toString() {
        let code = this.showSourceCode();
        if (code) code = "\n\n" + code + "\n";
        return this.name + ": " + this.message + code;
    }
}
module.exports = CssSyntaxError;
CssSyntaxError.default = CssSyntaxError;

},{"9ad9103a933bde56":"1298x","76818616dc2728aa":"jhUEF"}],"2mU8a":[function(require,module,exports) {
"use strict";
let Node = require("943ca4e816e55fa8");
class Declaration extends Node {
    constructor(defaults){
        if (defaults && typeof defaults.value !== "undefined" && typeof defaults.value !== "string") defaults = {
            ...defaults,
            value: String(defaults.value)
        };
        super(defaults);
        this.type = "decl";
    }
    get variable() {
        return this.prop.startsWith("--") || this.prop[0] === "$";
    }
}
module.exports = Declaration;
Declaration.default = Declaration;

},{"943ca4e816e55fa8":"5azBO"}],"5azBO":[function(require,module,exports) {
"use strict";
let { isClean, my } = require("2a4266f65f480cdb");
let CssSyntaxError = require("c1e82465b8844d24");
let Stringifier = require("b3be92e0a68c8c98");
let stringify = require("5a353b155add93c7");
function cloneNode(obj, parent) {
    let cloned = new obj.constructor();
    for(let i in obj){
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        if (i === "proxyCache") continue;
        let value = obj[i];
        let type = typeof value;
        if (i === "parent" && type === "object") {
            if (parent) cloned[i] = parent;
        } else if (i === "source") cloned[i] = value;
        else if (Array.isArray(value)) cloned[i] = value.map((j)=>cloneNode(j, cloned));
        else {
            if (type === "object" && value !== null) value = cloneNode(value);
            cloned[i] = value;
        }
    }
    return cloned;
}
class Node {
    constructor(defaults = {}){
        this.raws = {};
        this[isClean] = false;
        this[my] = true;
        for(let name in defaults)if (name === "nodes") {
            this.nodes = [];
            for (let node of defaults[name])if (typeof node.clone === "function") this.append(node.clone());
            else this.append(node);
        } else this[name] = defaults[name];
    }
    error(message, opts = {}) {
        if (this.source) {
            let { start, end } = this.rangeBy(opts);
            return this.source.input.error(message, {
                line: start.line,
                column: start.column
            }, {
                line: end.line,
                column: end.column
            }, opts);
        }
        return new CssSyntaxError(message);
    }
    warn(result, text, opts) {
        let data = {
            node: this
        };
        for(let i in opts)data[i] = opts[i];
        return result.warn(text, data);
    }
    remove() {
        if (this.parent) this.parent.removeChild(this);
        this.parent = undefined;
        return this;
    }
    toString(stringifier = stringify) {
        if (stringifier.stringify) stringifier = stringifier.stringify;
        let result = "";
        stringifier(this, (i)=>{
            result += i;
        });
        return result;
    }
    assign(overrides = {}) {
        for(let name in overrides)this[name] = overrides[name];
        return this;
    }
    clone(overrides = {}) {
        let cloned = cloneNode(this);
        for(let name in overrides)cloned[name] = overrides[name];
        return cloned;
    }
    cloneBefore(overrides = {}) {
        let cloned = this.clone(overrides);
        this.parent.insertBefore(this, cloned);
        return cloned;
    }
    cloneAfter(overrides = {}) {
        let cloned = this.clone(overrides);
        this.parent.insertAfter(this, cloned);
        return cloned;
    }
    replaceWith(...nodes) {
        if (this.parent) {
            let bookmark = this;
            let foundSelf = false;
            for (let node of nodes){
                if (node === this) foundSelf = true;
                else if (foundSelf) {
                    this.parent.insertAfter(bookmark, node);
                    bookmark = node;
                } else this.parent.insertBefore(bookmark, node);
            }
            if (!foundSelf) this.remove();
        }
        return this;
    }
    next() {
        if (!this.parent) return undefined;
        let index = this.parent.index(this);
        return this.parent.nodes[index + 1];
    }
    prev() {
        if (!this.parent) return undefined;
        let index = this.parent.index(this);
        return this.parent.nodes[index - 1];
    }
    before(add) {
        this.parent.insertBefore(this, add);
        return this;
    }
    after(add) {
        this.parent.insertAfter(this, add);
        return this;
    }
    root() {
        let result = this;
        while(result.parent && result.parent.type !== "document")result = result.parent;
        return result;
    }
    raw(prop, defaultType) {
        let str = new Stringifier();
        return str.raw(this, prop, defaultType);
    }
    cleanRaws(keepBetween) {
        delete this.raws.before;
        delete this.raws.after;
        if (!keepBetween) delete this.raws.between;
    }
    toJSON(_, inputs) {
        let fixed = {};
        let emitInputs = inputs == null;
        inputs = inputs || new Map();
        let inputsNextIndex = 0;
        for(let name in this){
            if (!Object.prototype.hasOwnProperty.call(this, name)) continue;
            if (name === "parent" || name === "proxyCache") continue;
            let value = this[name];
            if (Array.isArray(value)) fixed[name] = value.map((i)=>{
                if (typeof i === "object" && i.toJSON) return i.toJSON(null, inputs);
                else return i;
            });
            else if (typeof value === "object" && value.toJSON) fixed[name] = value.toJSON(null, inputs);
            else if (name === "source") {
                let inputId = inputs.get(value.input);
                if (inputId == null) {
                    inputId = inputsNextIndex;
                    inputs.set(value.input, inputsNextIndex);
                    inputsNextIndex++;
                }
                fixed[name] = {
                    inputId,
                    start: value.start,
                    end: value.end
                };
            } else fixed[name] = value;
        }
        if (emitInputs) fixed.inputs = [
            ...inputs.keys()
        ].map((input)=>input.toJSON());
        return fixed;
    }
    positionInside(index) {
        let string = this.toString();
        let column = this.source.start.column;
        let line = this.source.start.line;
        for(let i = 0; i < index; i++)if (string[i] === "\n") {
            column = 1;
            line += 1;
        } else column += 1;
        return {
            line,
            column
        };
    }
    positionBy(opts) {
        let pos = this.source.start;
        if (opts.index) pos = this.positionInside(opts.index);
        else if (opts.word) {
            let index = this.toString().indexOf(opts.word);
            if (index !== -1) pos = this.positionInside(index);
        }
        return pos;
    }
    rangeBy(opts) {
        let start = {
            line: this.source.start.line,
            column: this.source.start.column
        };
        let end = this.source.end ? {
            line: this.source.end.line,
            column: this.source.end.column + 1
        } : {
            line: start.line,
            column: start.column + 1
        };
        if (opts.word) {
            let index = this.toString().indexOf(opts.word);
            if (index !== -1) {
                start = this.positionInside(index);
                end = this.positionInside(index + opts.word.length);
            }
        } else {
            if (opts.start) start = {
                line: opts.start.line,
                column: opts.start.column
            };
            else if (opts.index) start = this.positionInside(opts.index);
            if (opts.end) end = {
                line: opts.end.line,
                column: opts.end.column
            };
            else if (opts.endIndex) end = this.positionInside(opts.endIndex);
            else if (opts.index) end = this.positionInside(opts.index + 1);
        }
        if (end.line < start.line || end.line === start.line && end.column <= start.column) end = {
            line: start.line,
            column: start.column + 1
        };
        return {
            start,
            end
        };
    }
    getProxyProcessor() {
        return {
            set (node, prop, value) {
                if (node[prop] === value) return true;
                node[prop] = value;
                if (prop === "prop" || prop === "value" || prop === "name" || prop === "params" || prop === "important" || /* c8 ignore next */ prop === "text") node.markDirty();
                return true;
            },
            get (node, prop) {
                if (prop === "proxyOf") return node;
                else if (prop === "root") return ()=>node.root().toProxy();
                else return node[prop];
            }
        };
    }
    toProxy() {
        if (!this.proxyCache) this.proxyCache = new Proxy(this, this.getProxyProcessor());
        return this.proxyCache;
    }
    addToError(error) {
        error.postcssNode = this;
        if (error.stack && this.source && /\n\s{4}at /.test(error.stack)) {
            let s = this.source;
            error.stack = error.stack.replace(/\n\s{4}at /, `$&${s.input.from}:${s.start.line}:${s.start.column}$&`);
        }
        return error;
    }
    markDirty() {
        if (this[isClean]) {
            this[isClean] = false;
            let next = this;
            while(next = next.parent)next[isClean] = false;
        }
    }
    get proxyOf() {
        return this;
    }
}
module.exports = Node;
Node.default = Node;

},{"2a4266f65f480cdb":"9Ej2B","c1e82465b8844d24":"5TKyW","b3be92e0a68c8c98":"ebmGP","5a353b155add93c7":"a0MwE"}],"9Ej2B":[function(require,module,exports) {
"use strict";
module.exports.isClean = Symbol("isClean");
module.exports.my = Symbol("my");

},{}],"ebmGP":[function(require,module,exports) {
"use strict";
const DEFAULT_RAW = {
    colon: ": ",
    indent: "    ",
    beforeDecl: "\n",
    beforeRule: "\n",
    beforeOpen: " ",
    beforeClose: "\n",
    beforeComment: "\n",
    after: "\n",
    emptyBody: "",
    commentLeft: " ",
    commentRight: " ",
    semicolon: false
};
function capitalize(str) {
    return str[0].toUpperCase() + str.slice(1);
}
class Stringifier {
    constructor(builder){
        this.builder = builder;
    }
    stringify(node, semicolon) {
        /* c8 ignore start */ if (!this[node.type]) throw new Error("Unknown AST node type " + node.type + ". " + "Maybe you need to change PostCSS stringifier.");
        /* c8 ignore stop */ this[node.type](node, semicolon);
    }
    document(node) {
        this.body(node);
    }
    root(node) {
        this.body(node);
        if (node.raws.after) this.builder(node.raws.after);
    }
    comment(node) {
        let left = this.raw(node, "left", "commentLeft");
        let right = this.raw(node, "right", "commentRight");
        this.builder("/*" + left + node.text + right + "*/", node);
    }
    decl(node, semicolon) {
        let between = this.raw(node, "between", "colon");
        let string = node.prop + between + this.rawValue(node, "value");
        if (node.important) string += node.raws.important || " !important";
        if (semicolon) string += ";";
        this.builder(string, node);
    }
    rule(node) {
        this.block(node, this.rawValue(node, "selector"));
        if (node.raws.ownSemicolon) this.builder(node.raws.ownSemicolon, node, "end");
    }
    atrule(node, semicolon) {
        let name = "@" + node.name;
        let params = node.params ? this.rawValue(node, "params") : "";
        if (typeof node.raws.afterName !== "undefined") name += node.raws.afterName;
        else if (params) name += " ";
        if (node.nodes) this.block(node, name + params);
        else {
            let end = (node.raws.between || "") + (semicolon ? ";" : "");
            this.builder(name + params + end, node);
        }
    }
    body(node) {
        let last = node.nodes.length - 1;
        while(last > 0){
            if (node.nodes[last].type !== "comment") break;
            last -= 1;
        }
        let semicolon = this.raw(node, "semicolon");
        for(let i = 0; i < node.nodes.length; i++){
            let child = node.nodes[i];
            let before = this.raw(child, "before");
            if (before) this.builder(before);
            this.stringify(child, last !== i || semicolon);
        }
    }
    block(node, start) {
        let between = this.raw(node, "between", "beforeOpen");
        this.builder(start + between + "{", node, "start");
        let after;
        if (node.nodes && node.nodes.length) {
            this.body(node);
            after = this.raw(node, "after");
        } else after = this.raw(node, "after", "emptyBody");
        if (after) this.builder(after);
        this.builder("}", node, "end");
    }
    raw(node, own, detect) {
        let value;
        if (!detect) detect = own;
        // Already had
        if (own) {
            value = node.raws[own];
            if (typeof value !== "undefined") return value;
        }
        let parent = node.parent;
        if (detect === "before") {
            // Hack for first rule in CSS
            if (!parent || parent.type === "root" && parent.first === node) return "";
            // `root` nodes in `document` should use only their own raws
            if (parent && parent.type === "document") return "";
        }
        // Floating child without parent
        if (!parent) return DEFAULT_RAW[detect];
        // Detect style by other nodes
        let root = node.root();
        if (!root.rawCache) root.rawCache = {};
        if (typeof root.rawCache[detect] !== "undefined") return root.rawCache[detect];
        if (detect === "before" || detect === "after") return this.beforeAfter(node, detect);
        else {
            let method = "raw" + capitalize(detect);
            if (this[method]) value = this[method](root, node);
            else root.walk((i)=>{
                value = i.raws[own];
                if (typeof value !== "undefined") return false;
            });
        }
        if (typeof value === "undefined") value = DEFAULT_RAW[detect];
        root.rawCache[detect] = value;
        return value;
    }
    rawSemicolon(root) {
        let value;
        root.walk((i)=>{
            if (i.nodes && i.nodes.length && i.last.type === "decl") {
                value = i.raws.semicolon;
                if (typeof value !== "undefined") return false;
            }
        });
        return value;
    }
    rawEmptyBody(root) {
        let value;
        root.walk((i)=>{
            if (i.nodes && i.nodes.length === 0) {
                value = i.raws.after;
                if (typeof value !== "undefined") return false;
            }
        });
        return value;
    }
    rawIndent(root) {
        if (root.raws.indent) return root.raws.indent;
        let value;
        root.walk((i)=>{
            let p = i.parent;
            if (p && p !== root && p.parent && p.parent === root) {
                if (typeof i.raws.before !== "undefined") {
                    let parts = i.raws.before.split("\n");
                    value = parts[parts.length - 1];
                    value = value.replace(/\S/g, "");
                    return false;
                }
            }
        });
        return value;
    }
    rawBeforeComment(root, node) {
        let value;
        root.walkComments((i)=>{
            if (typeof i.raws.before !== "undefined") {
                value = i.raws.before;
                if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
                return false;
            }
        });
        if (typeof value === "undefined") value = this.raw(node, null, "beforeDecl");
        else if (value) value = value.replace(/\S/g, "");
        return value;
    }
    rawBeforeDecl(root, node) {
        let value;
        root.walkDecls((i)=>{
            if (typeof i.raws.before !== "undefined") {
                value = i.raws.before;
                if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
                return false;
            }
        });
        if (typeof value === "undefined") value = this.raw(node, null, "beforeRule");
        else if (value) value = value.replace(/\S/g, "");
        return value;
    }
    rawBeforeRule(root) {
        let value;
        root.walk((i)=>{
            if (i.nodes && (i.parent !== root || root.first !== i)) {
                if (typeof i.raws.before !== "undefined") {
                    value = i.raws.before;
                    if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
                    return false;
                }
            }
        });
        if (value) value = value.replace(/\S/g, "");
        return value;
    }
    rawBeforeClose(root) {
        let value;
        root.walk((i)=>{
            if (i.nodes && i.nodes.length > 0) {
                if (typeof i.raws.after !== "undefined") {
                    value = i.raws.after;
                    if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
                    return false;
                }
            }
        });
        if (value) value = value.replace(/\S/g, "");
        return value;
    }
    rawBeforeOpen(root) {
        let value;
        root.walk((i)=>{
            if (i.type !== "decl") {
                value = i.raws.between;
                if (typeof value !== "undefined") return false;
            }
        });
        return value;
    }
    rawColon(root) {
        let value;
        root.walkDecls((i)=>{
            if (typeof i.raws.between !== "undefined") {
                value = i.raws.between.replace(/[^\s:]/g, "");
                return false;
            }
        });
        return value;
    }
    beforeAfter(node, detect) {
        let value;
        if (node.type === "decl") value = this.raw(node, null, "beforeDecl");
        else if (node.type === "comment") value = this.raw(node, null, "beforeComment");
        else if (detect === "before") value = this.raw(node, null, "beforeRule");
        else value = this.raw(node, null, "beforeClose");
        let buf = node.parent;
        let depth = 0;
        while(buf && buf.type !== "root"){
            depth += 1;
            buf = buf.parent;
        }
        if (value.includes("\n")) {
            let indent = this.raw(node, null, "indent");
            if (indent.length) for(let step = 0; step < depth; step++)value += indent;
        }
        return value;
    }
    rawValue(node, prop) {
        let value = node[prop];
        let raw = node.raws[prop];
        if (raw && raw.value === value) return raw.raw;
        return value;
    }
}
module.exports = Stringifier;
Stringifier.default = Stringifier;

},{}],"a0MwE":[function(require,module,exports) {
"use strict";
let Stringifier = require("f7559227119e51ac");
function stringify(node, builder) {
    let str = new Stringifier(builder);
    str.stringify(node);
}
module.exports = stringify;
stringify.default = stringify;

},{"f7559227119e51ac":"ebmGP"}],"580Su":[function(require,module,exports) {
"use strict";
let { isClean, my } = require("784df17aa24f7eff");
let MapGenerator = require("66ac869ca9d5e2f0");
let stringify = require("d3d5a028585e9913");
let Container = require("cde52f575286bb6");
let Document = require("681b63fe9d05e426");
let warnOnce = require("139c0704f6de1f4e");
let Result = require("9fd200a8479a5908");
let parse = require("4ddbb908fc5050d1");
let Root = require("b7ad0485699a64e0");
const TYPE_TO_CLASS_NAME = {
    document: "Document",
    root: "Root",
    atrule: "AtRule",
    rule: "Rule",
    decl: "Declaration",
    comment: "Comment"
};
const PLUGIN_PROPS = {
    postcssPlugin: true,
    prepare: true,
    Once: true,
    Document: true,
    Root: true,
    Declaration: true,
    Rule: true,
    AtRule: true,
    Comment: true,
    DeclarationExit: true,
    RuleExit: true,
    AtRuleExit: true,
    CommentExit: true,
    RootExit: true,
    DocumentExit: true,
    OnceExit: true
};
const NOT_VISITORS = {
    postcssPlugin: true,
    prepare: true,
    Once: true
};
const CHILDREN = 0;
function isPromise(obj) {
    return typeof obj === "object" && typeof obj.then === "function";
}
function getEvents(node) {
    let key = false;
    let type = TYPE_TO_CLASS_NAME[node.type];
    if (node.type === "decl") key = node.prop.toLowerCase();
    else if (node.type === "atrule") key = node.name.toLowerCase();
    if (key && node.append) return [
        type,
        type + "-" + key,
        CHILDREN,
        type + "Exit",
        type + "Exit-" + key
    ];
    else if (key) return [
        type,
        type + "-" + key,
        type + "Exit",
        type + "Exit-" + key
    ];
    else if (node.append) return [
        type,
        CHILDREN,
        type + "Exit"
    ];
    else return [
        type,
        type + "Exit"
    ];
}
function toStack(node) {
    let events;
    if (node.type === "document") events = [
        "Document",
        CHILDREN,
        "DocumentExit"
    ];
    else if (node.type === "root") events = [
        "Root",
        CHILDREN,
        "RootExit"
    ];
    else events = getEvents(node);
    return {
        node,
        events,
        eventIndex: 0,
        visitors: [],
        visitorIndex: 0,
        iterator: 0
    };
}
function cleanMarks(node) {
    node[isClean] = false;
    if (node.nodes) node.nodes.forEach((i)=>cleanMarks(i));
    return node;
}
let postcss = {};
class LazyResult {
    constructor(processor, css, opts){
        this.stringified = false;
        this.processed = false;
        let root;
        if (typeof css === "object" && css !== null && (css.type === "root" || css.type === "document")) root = cleanMarks(css);
        else if (css instanceof LazyResult || css instanceof Result) {
            root = cleanMarks(css.root);
            if (css.map) {
                if (typeof opts.map === "undefined") opts.map = {};
                if (!opts.map.inline) opts.map.inline = false;
                opts.map.prev = css.map;
            }
        } else {
            let parser = parse;
            if (opts.syntax) parser = opts.syntax.parse;
            if (opts.parser) parser = opts.parser;
            if (parser.parse) parser = parser.parse;
            try {
                root = parser(css, opts);
            } catch (error) {
                this.processed = true;
                this.error = error;
            }
            if (root && !root[my]) /* c8 ignore next 2 */ Container.rebuild(root);
        }
        this.result = new Result(processor, root, opts);
        this.helpers = {
            ...postcss,
            result: this.result,
            postcss
        };
        this.plugins = this.processor.plugins.map((plugin)=>{
            if (typeof plugin === "object" && plugin.prepare) return {
                ...plugin,
                ...plugin.prepare(this.result)
            };
            else return plugin;
        });
    }
    get [Symbol.toStringTag]() {
        return "LazyResult";
    }
    get processor() {
        return this.result.processor;
    }
    get opts() {
        return this.result.opts;
    }
    get css() {
        return this.stringify().css;
    }
    get content() {
        return this.stringify().content;
    }
    get map() {
        return this.stringify().map;
    }
    get root() {
        return this.sync().root;
    }
    get messages() {
        return this.sync().messages;
    }
    warnings() {
        return this.sync().warnings();
    }
    toString() {
        return this.css;
    }
    then(onFulfilled, onRejected) {
        if (!("from" in this.opts)) warnOnce("Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning.");
        return this.async().then(onFulfilled, onRejected);
    }
    catch(onRejected) {
        return this.async().catch(onRejected);
    }
    finally(onFinally) {
        return this.async().then(onFinally, onFinally);
    }
    async() {
        if (this.error) return Promise.reject(this.error);
        if (this.processed) return Promise.resolve(this.result);
        if (!this.processing) this.processing = this.runAsync();
        return this.processing;
    }
    sync() {
        if (this.error) throw this.error;
        if (this.processed) return this.result;
        this.processed = true;
        if (this.processing) throw this.getAsyncError();
        for (let plugin of this.plugins){
            let promise = this.runOnRoot(plugin);
            if (isPromise(promise)) throw this.getAsyncError();
        }
        this.prepareVisitors();
        if (this.hasListener) {
            let root = this.result.root;
            while(!root[isClean]){
                root[isClean] = true;
                this.walkSync(root);
            }
            if (this.listeners.OnceExit) {
                if (root.type === "document") for (let subRoot of root.nodes)this.visitSync(this.listeners.OnceExit, subRoot);
                else this.visitSync(this.listeners.OnceExit, root);
            }
        }
        return this.result;
    }
    stringify() {
        if (this.error) throw this.error;
        if (this.stringified) return this.result;
        this.stringified = true;
        this.sync();
        let opts = this.result.opts;
        let str = stringify;
        if (opts.syntax) str = opts.syntax.stringify;
        if (opts.stringifier) str = opts.stringifier;
        if (str.stringify) str = str.stringify;
        let map = new MapGenerator(str, this.result.root, this.result.opts);
        let data = map.generate();
        this.result.css = data[0];
        this.result.map = data[1];
        return this.result;
    }
    walkSync(node) {
        node[isClean] = true;
        let events = getEvents(node);
        for (let event of events){
            if (event === CHILDREN) {
                if (node.nodes) node.each((child)=>{
                    if (!child[isClean]) this.walkSync(child);
                });
            } else {
                let visitors = this.listeners[event];
                if (visitors) {
                    if (this.visitSync(visitors, node.toProxy())) return;
                }
            }
        }
    }
    visitSync(visitors, node) {
        for (let [plugin, visitor] of visitors){
            this.result.lastPlugin = plugin;
            let promise;
            try {
                promise = visitor(node, this.helpers);
            } catch (e) {
                throw this.handleError(e, node.proxyOf);
            }
            if (node.type !== "root" && node.type !== "document" && !node.parent) return true;
            if (isPromise(promise)) throw this.getAsyncError();
        }
    }
    runOnRoot(plugin) {
        this.result.lastPlugin = plugin;
        try {
            if (typeof plugin === "object" && plugin.Once) {
                if (this.result.root.type === "document") {
                    let roots = this.result.root.nodes.map((root)=>plugin.Once(root, this.helpers));
                    if (isPromise(roots[0])) return Promise.all(roots);
                    return roots;
                }
                return plugin.Once(this.result.root, this.helpers);
            } else if (typeof plugin === "function") return plugin(this.result.root, this.result);
        } catch (error) {
            throw this.handleError(error);
        }
    }
    getAsyncError() {
        throw new Error("Use process(css).then(cb) to work with async plugins");
    }
    handleError(error, node) {
        let plugin = this.result.lastPlugin;
        try {
            if (node) node.addToError(error);
            this.error = error;
            if (error.name === "CssSyntaxError" && !error.plugin) {
                error.plugin = plugin.postcssPlugin;
                error.setMessage();
            } else if (plugin.postcssVersion) {
                let pluginName = plugin.postcssPlugin;
                let pluginVer = plugin.postcssVersion;
                let runtimeVer = this.result.processor.version;
                let a = pluginVer.split(".");
                let b = runtimeVer.split(".");
                if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) // eslint-disable-next-line no-console
                console.error("Unknown error from PostCSS plugin. Your current PostCSS version is " + runtimeVer + ", but " + pluginName + " uses " + pluginVer + ". Perhaps this is the source of the error below.");
            }
        } catch (err) {
            /* c8 ignore next 3 */ // eslint-disable-next-line no-console
            if (console && console.error) console.error(err);
        }
        return error;
    }
    async runAsync() {
        this.plugin = 0;
        for(let i = 0; i < this.plugins.length; i++){
            let plugin = this.plugins[i];
            let promise = this.runOnRoot(plugin);
            if (isPromise(promise)) try {
                await promise;
            } catch (error) {
                throw this.handleError(error);
            }
        }
        this.prepareVisitors();
        if (this.hasListener) {
            let root = this.result.root;
            while(!root[isClean]){
                root[isClean] = true;
                let stack = [
                    toStack(root)
                ];
                while(stack.length > 0){
                    let promise = this.visitTick(stack);
                    if (isPromise(promise)) try {
                        await promise;
                    } catch (e) {
                        let node = stack[stack.length - 1].node;
                        throw this.handleError(e, node);
                    }
                }
            }
            if (this.listeners.OnceExit) for (let [plugin, visitor] of this.listeners.OnceExit){
                this.result.lastPlugin = plugin;
                try {
                    if (root.type === "document") {
                        let roots = root.nodes.map((subRoot)=>visitor(subRoot, this.helpers));
                        await Promise.all(roots);
                    } else await visitor(root, this.helpers);
                } catch (e) {
                    throw this.handleError(e);
                }
            }
        }
        this.processed = true;
        return this.stringify();
    }
    prepareVisitors() {
        this.listeners = {};
        let add = (plugin, type, cb)=>{
            if (!this.listeners[type]) this.listeners[type] = [];
            this.listeners[type].push([
                plugin,
                cb
            ]);
        };
        for (let plugin of this.plugins){
            if (typeof plugin === "object") for(let event in plugin){
                if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) throw new Error(`Unknown event ${event} in ${plugin.postcssPlugin}. ` + `Try to update PostCSS (${this.processor.version} now).`);
                if (!NOT_VISITORS[event]) {
                    if (typeof plugin[event] === "object") {
                        for(let filter in plugin[event])if (filter === "*") add(plugin, event, plugin[event][filter]);
                        else add(plugin, event + "-" + filter.toLowerCase(), plugin[event][filter]);
                    } else if (typeof plugin[event] === "function") add(plugin, event, plugin[event]);
                }
            }
        }
        this.hasListener = Object.keys(this.listeners).length > 0;
    }
    visitTick(stack) {
        let visit = stack[stack.length - 1];
        let { node, visitors } = visit;
        if (node.type !== "root" && node.type !== "document" && !node.parent) {
            stack.pop();
            return;
        }
        if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
            let [plugin, visitor] = visitors[visit.visitorIndex];
            visit.visitorIndex += 1;
            if (visit.visitorIndex === visitors.length) {
                visit.visitors = [];
                visit.visitorIndex = 0;
            }
            this.result.lastPlugin = plugin;
            try {
                return visitor(node.toProxy(), this.helpers);
            } catch (e) {
                throw this.handleError(e, node);
            }
        }
        if (visit.iterator !== 0) {
            let iterator = visit.iterator;
            let child;
            while(child = node.nodes[node.indexes[iterator]]){
                node.indexes[iterator] += 1;
                if (!child[isClean]) {
                    child[isClean] = true;
                    stack.push(toStack(child));
                    return;
                }
            }
            visit.iterator = 0;
            delete node.indexes[iterator];
        }
        let events = visit.events;
        while(visit.eventIndex < events.length){
            let event = events[visit.eventIndex];
            visit.eventIndex += 1;
            if (event === CHILDREN) {
                if (node.nodes && node.nodes.length) {
                    node[isClean] = true;
                    visit.iterator = node.getIterator();
                }
                return;
            } else if (this.listeners[event]) {
                visit.visitors = this.listeners[event];
                return;
            }
        }
        stack.pop();
    }
}
LazyResult.registerPostcss = (dependant)=>{
    postcss = dependant;
};
module.exports = LazyResult;
LazyResult.default = LazyResult;
Root.registerLazyResult(LazyResult);
Document.registerLazyResult(LazyResult);

},{"784df17aa24f7eff":"9Ej2B","66ac869ca9d5e2f0":"ghfT0","d3d5a028585e9913":"a0MwE","cde52f575286bb6":"1gj6C","681b63fe9d05e426":"dK3sP","139c0704f6de1f4e":"dpzGz","9fd200a8479a5908":"dmoqr","4ddbb908fc5050d1":"ioa1B","b7ad0485699a64e0":"hsDFv"}],"ghfT0":[function(require,module,exports) {
var Buffer = require("91ad75e9856644d").Buffer;
"use strict";
let { SourceMapConsumer, SourceMapGenerator } = require("d7d3f4b3c85e89c0");
let { dirname, resolve, relative, sep } = require("4b1599d5a5511897");
let { pathToFileURL } = require("b3f2b26b354a6135");
let Input = require("376c58899937cbfc");
let sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
let pathAvailable = Boolean(dirname && resolve && relative && sep);
class MapGenerator {
    constructor(stringify, root, opts, cssString){
        this.stringify = stringify;
        this.mapOpts = opts.map || {};
        this.root = root;
        this.opts = opts;
        this.css = cssString;
        this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;
    }
    isMap() {
        if (typeof this.opts.map !== "undefined") return !!this.opts.map;
        return this.previous().length > 0;
    }
    previous() {
        if (!this.previousMaps) {
            this.previousMaps = [];
            if (this.root) this.root.walk((node)=>{
                if (node.source && node.source.input.map) {
                    let map = node.source.input.map;
                    if (!this.previousMaps.includes(map)) this.previousMaps.push(map);
                }
            });
            else {
                let input = new Input(this.css, this.opts);
                if (input.map) this.previousMaps.push(input.map);
            }
        }
        return this.previousMaps;
    }
    isInline() {
        if (typeof this.mapOpts.inline !== "undefined") return this.mapOpts.inline;
        let annotation = this.mapOpts.annotation;
        if (typeof annotation !== "undefined" && annotation !== true) return false;
        if (this.previous().length) return this.previous().some((i)=>i.inline);
        return true;
    }
    isSourcesContent() {
        if (typeof this.mapOpts.sourcesContent !== "undefined") return this.mapOpts.sourcesContent;
        if (this.previous().length) return this.previous().some((i)=>i.withContent());
        return true;
    }
    clearAnnotation() {
        if (this.mapOpts.annotation === false) return;
        if (this.root) {
            let node;
            for(let i = this.root.nodes.length - 1; i >= 0; i--){
                node = this.root.nodes[i];
                if (node.type !== "comment") continue;
                if (node.text.indexOf("# sourceMappingURL=") === 0) this.root.removeChild(i);
            }
        } else if (this.css) this.css = this.css.replace(/(\n)?\/\*#[\S\s]*?\*\/$/gm, "");
    }
    setSourcesContent() {
        let already = {};
        if (this.root) this.root.walk((node)=>{
            if (node.source) {
                let from = node.source.input.from;
                if (from && !already[from]) {
                    already[from] = true;
                    let fromUrl = this.usesFileUrls ? this.toFileUrl(from) : this.toUrl(this.path(from));
                    this.map.setSourceContent(fromUrl, node.source.input.css);
                }
            }
        });
        else if (this.css) {
            let from = this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>";
            this.map.setSourceContent(from, this.css);
        }
    }
    applyPrevMaps() {
        for (let prev of this.previous()){
            let from = this.toUrl(this.path(prev.file));
            let root = prev.root || dirname(prev.file);
            let map;
            if (this.mapOpts.sourcesContent === false) {
                map = new SourceMapConsumer(prev.text);
                if (map.sourcesContent) map.sourcesContent = map.sourcesContent.map(()=>null);
            } else map = prev.consumer();
            this.map.applySourceMap(map, from, this.toUrl(this.path(root)));
        }
    }
    isAnnotation() {
        if (this.isInline()) return true;
        if (typeof this.mapOpts.annotation !== "undefined") return this.mapOpts.annotation;
        if (this.previous().length) return this.previous().some((i)=>i.annotation);
        return true;
    }
    toBase64(str) {
        if (Buffer) return Buffer.from(str).toString("base64");
        else return window.btoa(unescape(encodeURIComponent(str)));
    }
    addAnnotation() {
        let content;
        if (this.isInline()) content = "data:application/json;base64," + this.toBase64(this.map.toString());
        else if (typeof this.mapOpts.annotation === "string") content = this.mapOpts.annotation;
        else if (typeof this.mapOpts.annotation === "function") content = this.mapOpts.annotation(this.opts.to, this.root);
        else content = this.outputFile() + ".map";
        let eol = "\n";
        if (this.css.includes("\r\n")) eol = "\r\n";
        this.css += eol + "/*# sourceMappingURL=" + content + " */";
    }
    outputFile() {
        if (this.opts.to) return this.path(this.opts.to);
        else if (this.opts.from) return this.path(this.opts.from);
        else return "to.css";
    }
    generateMap() {
        if (this.root) this.generateString();
        else if (this.previous().length === 1) {
            let prev = this.previous()[0].consumer();
            prev.file = this.outputFile();
            this.map = SourceMapGenerator.fromSourceMap(prev);
        } else {
            this.map = new SourceMapGenerator({
                file: this.outputFile()
            });
            this.map.addMapping({
                source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>",
                generated: {
                    line: 1,
                    column: 0
                },
                original: {
                    line: 1,
                    column: 0
                }
            });
        }
        if (this.isSourcesContent()) this.setSourcesContent();
        if (this.root && this.previous().length > 0) this.applyPrevMaps();
        if (this.isAnnotation()) this.addAnnotation();
        if (this.isInline()) return [
            this.css
        ];
        else return [
            this.css,
            this.map
        ];
    }
    path(file) {
        if (file.indexOf("<") === 0) return file;
        if (/^\w+:\/\//.test(file)) return file;
        if (this.mapOpts.absolute) return file;
        let from = this.opts.to ? dirname(this.opts.to) : ".";
        if (typeof this.mapOpts.annotation === "string") from = dirname(resolve(from, this.mapOpts.annotation));
        file = relative(from, file);
        return file;
    }
    toUrl(path) {
        if (sep === "\\") path = path.replace(/\\/g, "/");
        return encodeURI(path).replace(/[#?]/g, encodeURIComponent);
    }
    toFileUrl(path) {
        if (pathToFileURL) return pathToFileURL(path).toString();
        else throw new Error("`map.absolute` option is not available in this PostCSS build");
    }
    sourcePath(node) {
        if (this.mapOpts.from) return this.toUrl(this.mapOpts.from);
        else if (this.usesFileUrls) return this.toFileUrl(node.source.input.from);
        else return this.toUrl(this.path(node.source.input.from));
    }
    generateString() {
        this.css = "";
        this.map = new SourceMapGenerator({
            file: this.outputFile()
        });
        let line = 1;
        let column = 1;
        let noSource = "<no source>";
        let mapping = {
            source: "",
            generated: {
                line: 0,
                column: 0
            },
            original: {
                line: 0,
                column: 0
            }
        };
        let lines, last;
        this.stringify(this.root, (str, node, type)=>{
            this.css += str;
            if (node && type !== "end") {
                mapping.generated.line = line;
                mapping.generated.column = column - 1;
                if (node.source && node.source.start) {
                    mapping.source = this.sourcePath(node);
                    mapping.original.line = node.source.start.line;
                    mapping.original.column = node.source.start.column - 1;
                    this.map.addMapping(mapping);
                } else {
                    mapping.source = noSource;
                    mapping.original.line = 1;
                    mapping.original.column = 0;
                    this.map.addMapping(mapping);
                }
            }
            lines = str.match(/\n/g);
            if (lines) {
                line += lines.length;
                last = str.lastIndexOf("\n");
                column = str.length - last;
            } else column += str.length;
            if (node && type !== "start") {
                let p = node.parent || {
                    raws: {}
                };
                let childless = node.type === "decl" || node.type === "atrule" && !node.nodes;
                if (!childless || node !== p.last || p.raws.semicolon) {
                    if (node.source && node.source.end) {
                        mapping.source = this.sourcePath(node);
                        mapping.original.line = node.source.end.line;
                        mapping.original.column = node.source.end.column - 1;
                        mapping.generated.line = line;
                        mapping.generated.column = column - 2;
                        this.map.addMapping(mapping);
                    } else {
                        mapping.source = noSource;
                        mapping.original.line = 1;
                        mapping.original.column = 0;
                        mapping.generated.line = line;
                        mapping.generated.column = column - 1;
                        this.map.addMapping(mapping);
                    }
                }
            }
        });
    }
    generate() {
        this.clearAnnotation();
        if (pathAvailable && sourceMapAvailable && this.isMap()) return this.generateMap();
        else {
            let result = "";
            this.stringify(this.root, (i)=>{
                result += i;
            });
            return [
                result
            ];
        }
    }
}
module.exports = MapGenerator;

},{"91ad75e9856644d":"fCgem","d7d3f4b3c85e89c0":"jhUEF","4b1599d5a5511897":"jhUEF","b3f2b26b354a6135":"jhUEF","376c58899937cbfc":"fb1UO"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("9c62938f1dccc73c");
const ieee754 = require("aceacb6a4531a9d2");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"9c62938f1dccc73c":"eIiSV","aceacb6a4531a9d2":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"fb1UO":[function(require,module,exports) {
"use strict";
let { SourceMapConsumer, SourceMapGenerator } = require("308bf4f109b473bc");
let { fileURLToPath, pathToFileURL } = require("fa4f50e6e68066fb");
let { resolve, isAbsolute } = require("f14874183395e1da");
let { nanoid } = require("1dfe3269871ea6b2");
let terminalHighlight = require("d3580bd2efb2d622");
let CssSyntaxError = require("fdd5724c326bf7ae");
let PreviousMap = require("2fce709b45ddf48f");
let fromOffsetCache = Symbol("fromOffsetCache");
let sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
let pathAvailable = Boolean(resolve && isAbsolute);
class Input {
    constructor(css, opts = {}){
        if (css === null || typeof css === "undefined" || typeof css === "object" && !css.toString) throw new Error(`PostCSS received ${css} instead of CSS string`);
        this.css = css.toString();
        if (this.css[0] === "\uFEFF" || this.css[0] === "￾") {
            this.hasBOM = true;
            this.css = this.css.slice(1);
        } else this.hasBOM = false;
        if (opts.from) {
            if (!pathAvailable || /^\w+:\/\//.test(opts.from) || isAbsolute(opts.from)) this.file = opts.from;
            else this.file = resolve(opts.from);
        }
        if (pathAvailable && sourceMapAvailable) {
            let map = new PreviousMap(this.css, opts);
            if (map.text) {
                this.map = map;
                let file = map.consumer().file;
                if (!this.file && file) this.file = this.mapResolve(file);
            }
        }
        if (!this.file) this.id = "<input css " + nanoid(6) + ">";
        if (this.map) this.map.file = this.from;
    }
    fromOffset(offset) {
        let lastLine, lineToIndex;
        if (!this[fromOffsetCache]) {
            let lines = this.css.split("\n");
            lineToIndex = new Array(lines.length);
            let prevIndex = 0;
            for(let i = 0, l = lines.length; i < l; i++){
                lineToIndex[i] = prevIndex;
                prevIndex += lines[i].length + 1;
            }
            this[fromOffsetCache] = lineToIndex;
        } else lineToIndex = this[fromOffsetCache];
        lastLine = lineToIndex[lineToIndex.length - 1];
        let min = 0;
        if (offset >= lastLine) min = lineToIndex.length - 1;
        else {
            let max = lineToIndex.length - 2;
            let mid;
            while(min < max){
                mid = min + (max - min >> 1);
                if (offset < lineToIndex[mid]) max = mid - 1;
                else if (offset >= lineToIndex[mid + 1]) min = mid + 1;
                else {
                    min = mid;
                    break;
                }
            }
        }
        return {
            line: min + 1,
            col: offset - lineToIndex[min] + 1
        };
    }
    error(message, line, column, opts = {}) {
        let result, endLine, endColumn;
        if (line && typeof line === "object") {
            let start = line;
            let end = column;
            if (typeof start.offset === "number") {
                let pos = this.fromOffset(start.offset);
                line = pos.line;
                column = pos.col;
            } else {
                line = start.line;
                column = start.column;
            }
            if (typeof end.offset === "number") {
                let pos = this.fromOffset(end.offset);
                endLine = pos.line;
                endColumn = pos.col;
            } else {
                endLine = end.line;
                endColumn = end.column;
            }
        } else if (!column) {
            let pos = this.fromOffset(line);
            line = pos.line;
            column = pos.col;
        }
        let origin = this.origin(line, column, endLine, endColumn);
        if (origin) result = new CssSyntaxError(message, origin.endLine === undefined ? origin.line : {
            line: origin.line,
            column: origin.column
        }, origin.endLine === undefined ? origin.column : {
            line: origin.endLine,
            column: origin.endColumn
        }, origin.source, origin.file, opts.plugin);
        else result = new CssSyntaxError(message, endLine === undefined ? line : {
            line,
            column
        }, endLine === undefined ? column : {
            line: endLine,
            column: endColumn
        }, this.css, this.file, opts.plugin);
        result.input = {
            line,
            column,
            endLine,
            endColumn,
            source: this.css
        };
        if (this.file) {
            if (pathToFileURL) result.input.url = pathToFileURL(this.file).toString();
            result.input.file = this.file;
        }
        return result;
    }
    origin(line, column, endLine, endColumn) {
        if (!this.map) return false;
        let consumer = this.map.consumer();
        let from = consumer.originalPositionFor({
            line,
            column
        });
        if (!from.source) return false;
        let to;
        if (typeof endLine === "number") to = consumer.originalPositionFor({
            line: endLine,
            column: endColumn
        });
        let fromUrl;
        if (isAbsolute(from.source)) fromUrl = pathToFileURL(from.source);
        else fromUrl = new URL(from.source, this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile));
        let result = {
            url: fromUrl.toString(),
            line: from.line,
            column: from.column,
            endLine: to && to.line,
            endColumn: to && to.column
        };
        if (fromUrl.protocol === "file:") {
            if (fileURLToPath) result.file = fileURLToPath(fromUrl);
            else /* c8 ignore next 2 */ throw new Error(`file: protocol is not available in this PostCSS build`);
        }
        let source = consumer.sourceContentFor(from.source);
        if (source) result.source = source;
        return result;
    }
    mapResolve(file) {
        if (/^\w+:\/\//.test(file)) return file;
        return resolve(this.map.consumer().sourceRoot || this.map.root || ".", file);
    }
    get from() {
        return this.file || this.id;
    }
    toJSON() {
        let json = {};
        for (let name of [
            "hasBOM",
            "css",
            "file",
            "id"
        ])if (this[name] != null) json[name] = this[name];
        if (this.map) {
            json.map = {
                ...this.map
            };
            if (json.map.consumerCache) json.map.consumerCache = undefined;
        }
        return json;
    }
}
module.exports = Input;
Input.default = Input;
if (terminalHighlight && terminalHighlight.registerInput) terminalHighlight.registerInput(Input);

},{"308bf4f109b473bc":"jhUEF","fa4f50e6e68066fb":"jhUEF","f14874183395e1da":"jhUEF","1dfe3269871ea6b2":"fO50M","d3580bd2efb2d622":"jhUEF","fdd5724c326bf7ae":"5TKyW","2fce709b45ddf48f":"cmiCo"}],"fO50M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nanoid", ()=>nanoid);
parcelHelpers.export(exports, "customAlphabet", ()=>customAlphabet);
let urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
let customAlphabet = (alphabet, defaultSize = 21)=>{
    return (size = defaultSize)=>{
        let id = "";
        let i = size;
        while(i--)id += alphabet[Math.random() * alphabet.length | 0];
        return id;
    };
};
let nanoid = (size = 21)=>{
    let id = "";
    let i = size;
    while(i--)id += urlAlphabet[Math.random() * 64 | 0];
    return id;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cmiCo":[function(require,module,exports) {
var Buffer = require("9942fa10d1030c5e").Buffer;
"use strict";
let { SourceMapConsumer, SourceMapGenerator } = require("a9cf17802fe70727");
let { existsSync, readFileSync } = require("8be0c628120271f3");
let { dirname, join } = require("d1a375d7fefead4e");
function fromBase64(str) {
    if (Buffer) return Buffer.from(str, "base64").toString();
    else /* c8 ignore next 2 */ return window.atob(str);
}
class PreviousMap {
    constructor(css, opts){
        if (opts.map === false) return;
        this.loadAnnotation(css);
        this.inline = this.startWith(this.annotation, "data:");
        let prev = opts.map ? opts.map.prev : undefined;
        let text = this.loadMap(opts.from, prev);
        if (!this.mapFile && opts.from) this.mapFile = opts.from;
        if (this.mapFile) this.root = dirname(this.mapFile);
        if (text) this.text = text;
    }
    consumer() {
        if (!this.consumerCache) this.consumerCache = new SourceMapConsumer(this.text);
        return this.consumerCache;
    }
    withContent() {
        return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
    }
    startWith(string, start) {
        if (!string) return false;
        return string.substr(0, start.length) === start;
    }
    getAnnotationURL(sourceMapString) {
        return sourceMapString.replace(/^\/\*\s*# sourceMappingURL=/, "").trim();
    }
    loadAnnotation(css) {
        let comments = css.match(/\/\*\s*# sourceMappingURL=/gm);
        if (!comments) return;
        // sourceMappingURLs from comments, strings, etc.
        let start = css.lastIndexOf(comments.pop());
        let end = css.indexOf("*/", start);
        if (start > -1 && end > -1) // Locate the last sourceMappingURL to avoid pickin
        this.annotation = this.getAnnotationURL(css.substring(start, end));
    }
    decodeInline(text) {
        let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
        let baseUri = /^data:application\/json;base64,/;
        let charsetUri = /^data:application\/json;charset=utf-?8,/;
        let uri = /^data:application\/json,/;
        if (charsetUri.test(text) || uri.test(text)) return decodeURIComponent(text.substr(RegExp.lastMatch.length));
        if (baseCharsetUri.test(text) || baseUri.test(text)) return fromBase64(text.substr(RegExp.lastMatch.length));
        let encoding = text.match(/data:application\/json;([^,]+),/)[1];
        throw new Error("Unsupported source map encoding " + encoding);
    }
    loadFile(path) {
        this.root = dirname(path);
        if (existsSync(path)) {
            this.mapFile = path;
            return readFileSync(path, "utf-8").toString().trim();
        }
    }
    loadMap(file, prev) {
        if (prev === false) return false;
        if (prev) {
            if (typeof prev === "string") return prev;
            else if (typeof prev === "function") {
                let prevPath = prev(file);
                if (prevPath) {
                    let map = this.loadFile(prevPath);
                    if (!map) throw new Error("Unable to load previous source map: " + prevPath.toString());
                    return map;
                }
            } else if (prev instanceof SourceMapConsumer) return SourceMapGenerator.fromSourceMap(prev).toString();
            else if (prev instanceof SourceMapGenerator) return prev.toString();
            else if (this.isMap(prev)) return JSON.stringify(prev);
            else throw new Error("Unsupported previous source map format: " + prev.toString());
        } else if (this.inline) return this.decodeInline(this.annotation);
        else if (this.annotation) {
            let map = this.annotation;
            if (file) map = join(dirname(file), map);
            return this.loadFile(map);
        }
    }
    isMap(map) {
        if (typeof map !== "object") return false;
        return typeof map.mappings === "string" || typeof map._mappings === "string" || Array.isArray(map.sections);
    }
}
module.exports = PreviousMap;
PreviousMap.default = PreviousMap;

},{"9942fa10d1030c5e":"fCgem","a9cf17802fe70727":"jhUEF","8be0c628120271f3":"jhUEF","d1a375d7fefead4e":"jhUEF"}],"1gj6C":[function(require,module,exports) {
"use strict";
let { isClean, my } = require("fe19f7ecb9c04826");
let Declaration = require("612b113f57da6436");
let Comment = require("7b441fc27c320a2c");
let Node = require("f2754be16c7a4192");
let parse, Rule, AtRule, Root;
function cleanSource(nodes) {
    return nodes.map((i)=>{
        if (i.nodes) i.nodes = cleanSource(i.nodes);
        delete i.source;
        return i;
    });
}
function markDirtyUp(node) {
    node[isClean] = false;
    if (node.proxyOf.nodes) for (let i of node.proxyOf.nodes)markDirtyUp(i);
}
class Container extends Node {
    push(child) {
        child.parent = this;
        this.proxyOf.nodes.push(child);
        return this;
    }
    each(callback) {
        if (!this.proxyOf.nodes) return undefined;
        let iterator = this.getIterator();
        let index, result;
        while(this.indexes[iterator] < this.proxyOf.nodes.length){
            index = this.indexes[iterator];
            result = callback(this.proxyOf.nodes[index], index);
            if (result === false) break;
            this.indexes[iterator] += 1;
        }
        delete this.indexes[iterator];
        return result;
    }
    walk(callback) {
        return this.each((child, i)=>{
            let result;
            try {
                result = callback(child, i);
            } catch (e) {
                throw child.addToError(e);
            }
            if (result !== false && child.walk) result = child.walk(callback);
            return result;
        });
    }
    walkDecls(prop, callback) {
        if (!callback) {
            callback = prop;
            return this.walk((child, i)=>{
                if (child.type === "decl") return callback(child, i);
            });
        }
        if (prop instanceof RegExp) return this.walk((child, i)=>{
            if (child.type === "decl" && prop.test(child.prop)) return callback(child, i);
        });
        return this.walk((child, i)=>{
            if (child.type === "decl" && child.prop === prop) return callback(child, i);
        });
    }
    walkRules(selector, callback) {
        if (!callback) {
            callback = selector;
            return this.walk((child, i)=>{
                if (child.type === "rule") return callback(child, i);
            });
        }
        if (selector instanceof RegExp) return this.walk((child, i)=>{
            if (child.type === "rule" && selector.test(child.selector)) return callback(child, i);
        });
        return this.walk((child, i)=>{
            if (child.type === "rule" && child.selector === selector) return callback(child, i);
        });
    }
    walkAtRules(name, callback) {
        if (!callback) {
            callback = name;
            return this.walk((child, i)=>{
                if (child.type === "atrule") return callback(child, i);
            });
        }
        if (name instanceof RegExp) return this.walk((child, i)=>{
            if (child.type === "atrule" && name.test(child.name)) return callback(child, i);
        });
        return this.walk((child, i)=>{
            if (child.type === "atrule" && child.name === name) return callback(child, i);
        });
    }
    walkComments(callback) {
        return this.walk((child, i)=>{
            if (child.type === "comment") return callback(child, i);
        });
    }
    append(...children) {
        for (let child of children){
            let nodes = this.normalize(child, this.last);
            for (let node of nodes)this.proxyOf.nodes.push(node);
        }
        this.markDirty();
        return this;
    }
    prepend(...children) {
        children = children.reverse();
        for (let child of children){
            let nodes = this.normalize(child, this.first, "prepend").reverse();
            for (let node of nodes)this.proxyOf.nodes.unshift(node);
            for(let id in this.indexes)this.indexes[id] = this.indexes[id] + nodes.length;
        }
        this.markDirty();
        return this;
    }
    cleanRaws(keepBetween) {
        super.cleanRaws(keepBetween);
        if (this.nodes) for (let node of this.nodes)node.cleanRaws(keepBetween);
    }
    insertBefore(exist, add) {
        let existIndex = this.index(exist);
        let type = existIndex === 0 ? "prepend" : false;
        let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();
        existIndex = this.index(exist);
        for (let node of nodes)this.proxyOf.nodes.splice(existIndex, 0, node);
        let index;
        for(let id in this.indexes){
            index = this.indexes[id];
            if (existIndex <= index) this.indexes[id] = index + nodes.length;
        }
        this.markDirty();
        return this;
    }
    insertAfter(exist, add) {
        let existIndex = this.index(exist);
        let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();
        existIndex = this.index(exist);
        for (let node of nodes)this.proxyOf.nodes.splice(existIndex + 1, 0, node);
        let index;
        for(let id in this.indexes){
            index = this.indexes[id];
            if (existIndex < index) this.indexes[id] = index + nodes.length;
        }
        this.markDirty();
        return this;
    }
    removeChild(child) {
        child = this.index(child);
        this.proxyOf.nodes[child].parent = undefined;
        this.proxyOf.nodes.splice(child, 1);
        let index;
        for(let id in this.indexes){
            index = this.indexes[id];
            if (index >= child) this.indexes[id] = index - 1;
        }
        this.markDirty();
        return this;
    }
    removeAll() {
        for (let node of this.proxyOf.nodes)node.parent = undefined;
        this.proxyOf.nodes = [];
        this.markDirty();
        return this;
    }
    replaceValues(pattern, opts, callback) {
        if (!callback) {
            callback = opts;
            opts = {};
        }
        this.walkDecls((decl)=>{
            if (opts.props && !opts.props.includes(decl.prop)) return;
            if (opts.fast && !decl.value.includes(opts.fast)) return;
            decl.value = decl.value.replace(pattern, callback);
        });
        this.markDirty();
        return this;
    }
    every(condition) {
        return this.nodes.every(condition);
    }
    some(condition) {
        return this.nodes.some(condition);
    }
    index(child) {
        if (typeof child === "number") return child;
        if (child.proxyOf) child = child.proxyOf;
        return this.proxyOf.nodes.indexOf(child);
    }
    get first() {
        if (!this.proxyOf.nodes) return undefined;
        return this.proxyOf.nodes[0];
    }
    get last() {
        if (!this.proxyOf.nodes) return undefined;
        return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];
    }
    normalize(nodes, sample) {
        if (typeof nodes === "string") nodes = cleanSource(parse(nodes).nodes);
        else if (Array.isArray(nodes)) {
            nodes = nodes.slice(0);
            for (let i of nodes)if (i.parent) i.parent.removeChild(i, "ignore");
        } else if (nodes.type === "root" && this.type !== "document") {
            nodes = nodes.nodes.slice(0);
            for (let i of nodes)if (i.parent) i.parent.removeChild(i, "ignore");
        } else if (nodes.type) nodes = [
            nodes
        ];
        else if (nodes.prop) {
            if (typeof nodes.value === "undefined") throw new Error("Value field is missed in node creation");
            else if (typeof nodes.value !== "string") nodes.value = String(nodes.value);
            nodes = [
                new Declaration(nodes)
            ];
        } else if (nodes.selector) nodes = [
            new Rule(nodes)
        ];
        else if (nodes.name) nodes = [
            new AtRule(nodes)
        ];
        else if (nodes.text) nodes = [
            new Comment(nodes)
        ];
        else throw new Error("Unknown node type in node creation");
        let processed = nodes.map((i)=>{
            /* c8 ignore next */ if (!i[my]) Container.rebuild(i);
            i = i.proxyOf;
            if (i.parent) i.parent.removeChild(i);
            if (i[isClean]) markDirtyUp(i);
            if (typeof i.raws.before === "undefined") {
                if (sample && typeof sample.raws.before !== "undefined") i.raws.before = sample.raws.before.replace(/\S/g, "");
            }
            i.parent = this.proxyOf;
            return i;
        });
        return processed;
    }
    getProxyProcessor() {
        return {
            set (node, prop, value) {
                if (node[prop] === value) return true;
                node[prop] = value;
                if (prop === "name" || prop === "params" || prop === "selector") node.markDirty();
                return true;
            },
            get (node, prop) {
                if (prop === "proxyOf") return node;
                else if (!node[prop]) return node[prop];
                else if (prop === "each" || typeof prop === "string" && prop.startsWith("walk")) return (...args)=>{
                    return node[prop](...args.map((i)=>{
                        if (typeof i === "function") return (child, index)=>i(child.toProxy(), index);
                        else return i;
                    }));
                };
                else if (prop === "every" || prop === "some") return (cb)=>{
                    return node[prop]((child, ...other)=>cb(child.toProxy(), ...other));
                };
                else if (prop === "root") return ()=>node.root().toProxy();
                else if (prop === "nodes") return node.nodes.map((i)=>i.toProxy());
                else if (prop === "first" || prop === "last") return node[prop].toProxy();
                else return node[prop];
            }
        };
    }
    getIterator() {
        if (!this.lastEach) this.lastEach = 0;
        if (!this.indexes) this.indexes = {};
        this.lastEach += 1;
        let iterator = this.lastEach;
        this.indexes[iterator] = 0;
        return iterator;
    }
}
Container.registerParse = (dependant)=>{
    parse = dependant;
};
Container.registerRule = (dependant)=>{
    Rule = dependant;
};
Container.registerAtRule = (dependant)=>{
    AtRule = dependant;
};
Container.registerRoot = (dependant)=>{
    Root = dependant;
};
module.exports = Container;
Container.default = Container;
/* c8 ignore start */ Container.rebuild = (node)=>{
    if (node.type === "atrule") Object.setPrototypeOf(node, AtRule.prototype);
    else if (node.type === "rule") Object.setPrototypeOf(node, Rule.prototype);
    else if (node.type === "decl") Object.setPrototypeOf(node, Declaration.prototype);
    else if (node.type === "comment") Object.setPrototypeOf(node, Comment.prototype);
    else if (node.type === "root") Object.setPrototypeOf(node, Root.prototype);
    node[my] = true;
    if (node.nodes) node.nodes.forEach((child)=>{
        Container.rebuild(child);
    });
} /* c8 ignore stop */ ;

},{"fe19f7ecb9c04826":"9Ej2B","612b113f57da6436":"2mU8a","7b441fc27c320a2c":"5CBjv","f2754be16c7a4192":"5azBO"}],"5CBjv":[function(require,module,exports) {
"use strict";
let Node = require("7f4ce483d6e184ba");
class Comment extends Node {
    constructor(defaults){
        super(defaults);
        this.type = "comment";
    }
}
module.exports = Comment;
Comment.default = Comment;

},{"7f4ce483d6e184ba":"5azBO"}],"dK3sP":[function(require,module,exports) {
"use strict";
let Container = require("4ddefed8be3a5f1");
let LazyResult, Processor;
class Document extends Container {
    constructor(defaults){
        // type needs to be passed to super, otherwise child roots won't be normalized correctly
        super({
            type: "document",
            ...defaults
        });
        if (!this.nodes) this.nodes = [];
    }
    toResult(opts = {}) {
        let lazy = new LazyResult(new Processor(), this, opts);
        return lazy.stringify();
    }
}
Document.registerLazyResult = (dependant)=>{
    LazyResult = dependant;
};
Document.registerProcessor = (dependant)=>{
    Processor = dependant;
};
module.exports = Document;
Document.default = Document;

},{"4ddefed8be3a5f1":"1gj6C"}],"dpzGz":[function(require,module,exports) {
/* eslint-disable no-console */ "use strict";
let printed = {};
module.exports = function warnOnce(message) {
    if (printed[message]) return;
    printed[message] = true;
    if (typeof console !== "undefined" && console.warn) console.warn(message);
};

},{}],"dmoqr":[function(require,module,exports) {
"use strict";
let Warning = require("733eab9114813576");
class Result {
    constructor(processor, root, opts){
        this.processor = processor;
        this.messages = [];
        this.root = root;
        this.opts = opts;
        this.css = undefined;
        this.map = undefined;
    }
    toString() {
        return this.css;
    }
    warn(text, opts = {}) {
        if (!opts.plugin) {
            if (this.lastPlugin && this.lastPlugin.postcssPlugin) opts.plugin = this.lastPlugin.postcssPlugin;
        }
        let warning = new Warning(text, opts);
        this.messages.push(warning);
        return warning;
    }
    warnings() {
        return this.messages.filter((i)=>i.type === "warning");
    }
    get content() {
        return this.css;
    }
}
module.exports = Result;
Result.default = Result;

},{"733eab9114813576":"lw5j2"}],"lw5j2":[function(require,module,exports) {
"use strict";
class Warning {
    constructor(text, opts = {}){
        this.type = "warning";
        this.text = text;
        if (opts.node && opts.node.source) {
            let range = opts.node.rangeBy(opts);
            this.line = range.start.line;
            this.column = range.start.column;
            this.endLine = range.end.line;
            this.endColumn = range.end.column;
        }
        for(let opt in opts)this[opt] = opts[opt];
    }
    toString() {
        if (this.node) return this.node.error(this.text, {
            plugin: this.plugin,
            index: this.index,
            word: this.word
        }).message;
        if (this.plugin) return this.plugin + ": " + this.text;
        return this.text;
    }
}
module.exports = Warning;
Warning.default = Warning;

},{}],"ioa1B":[function(require,module,exports) {
"use strict";
let Container = require("6494fda586fb17a1");
let Parser = require("61509346b7c32406");
let Input = require("b776f2c6c62c9360");
function parse(css, opts) {
    let input = new Input(css, opts);
    let parser = new Parser(input);
    try {
        parser.parse();
    } catch (e) {
        if (e.name === "CssSyntaxError" && opts && opts.from) {
            if (/\.scss$/i.test(opts.from)) e.message += "\nYou tried to parse SCSS with the standard CSS parser; try again with the postcss-scss parser";
            else if (/\.sass/i.test(opts.from)) e.message += "\nYou tried to parse Sass with the standard CSS parser; try again with the postcss-sass parser";
            else if (/\.less$/i.test(opts.from)) e.message += "\nYou tried to parse Less with the standard CSS parser; try again with the postcss-less parser";
        }
        throw e;
    }
    return parser.root;
}
module.exports = parse;
parse.default = parse;
Container.registerParse(parse);

},{"6494fda586fb17a1":"1gj6C","61509346b7c32406":"flcRV","b776f2c6c62c9360":"fb1UO"}],"flcRV":[function(require,module,exports) {
"use strict";
let Declaration = require("47ad52a08a7a676e");
let tokenizer = require("4a9961ca361e4099");
let Comment = require("149094ae0d56f3fb");
let AtRule = require("53d9a3501469ebf8");
let Root = require("df12142db9f2ac4");
let Rule = require("fca2d5ee75ced31e");
const SAFE_COMMENT_NEIGHBOR = {
    empty: true,
    space: true
};
function findLastWithPosition(tokens) {
    for(let i = tokens.length - 1; i >= 0; i--){
        let token = tokens[i];
        let pos = token[3] || token[2];
        if (pos) return pos;
    }
}
class Parser {
    constructor(input){
        this.input = input;
        this.root = new Root();
        this.current = this.root;
        this.spaces = "";
        this.semicolon = false;
        this.customProperty = false;
        this.createTokenizer();
        this.root.source = {
            input,
            start: {
                offset: 0,
                line: 1,
                column: 1
            }
        };
    }
    createTokenizer() {
        this.tokenizer = tokenizer(this.input);
    }
    parse() {
        let token;
        while(!this.tokenizer.endOfFile()){
            token = this.tokenizer.nextToken();
            switch(token[0]){
                case "space":
                    this.spaces += token[1];
                    break;
                case ";":
                    this.freeSemicolon(token);
                    break;
                case "}":
                    this.end(token);
                    break;
                case "comment":
                    this.comment(token);
                    break;
                case "at-word":
                    this.atrule(token);
                    break;
                case "{":
                    this.emptyRule(token);
                    break;
                default:
                    this.other(token);
                    break;
            }
        }
        this.endFile();
    }
    comment(token) {
        let node = new Comment();
        this.init(node, token[2]);
        node.source.end = this.getPosition(token[3] || token[2]);
        let text = token[1].slice(2, -2);
        if (/^\s*$/.test(text)) {
            node.text = "";
            node.raws.left = text;
            node.raws.right = "";
        } else {
            let match = text.match(/^(\s*)([^]*\S)(\s*)$/);
            node.text = match[2];
            node.raws.left = match[1];
            node.raws.right = match[3];
        }
    }
    emptyRule(token) {
        let node = new Rule();
        this.init(node, token[2]);
        node.selector = "";
        node.raws.between = "";
        this.current = node;
    }
    other(start) {
        let end = false;
        let type = null;
        let colon = false;
        let bracket = null;
        let brackets = [];
        let customProperty = start[1].startsWith("--");
        let tokens = [];
        let token = start;
        while(token){
            type = token[0];
            tokens.push(token);
            if (type === "(" || type === "[") {
                if (!bracket) bracket = token;
                brackets.push(type === "(" ? ")" : "]");
            } else if (customProperty && colon && type === "{") {
                if (!bracket) bracket = token;
                brackets.push("}");
            } else if (brackets.length === 0) {
                if (type === ";") {
                    if (colon) {
                        this.decl(tokens, customProperty);
                        return;
                    } else break;
                } else if (type === "{") {
                    this.rule(tokens);
                    return;
                } else if (type === "}") {
                    this.tokenizer.back(tokens.pop());
                    end = true;
                    break;
                } else if (type === ":") colon = true;
            } else if (type === brackets[brackets.length - 1]) {
                brackets.pop();
                if (brackets.length === 0) bracket = null;
            }
            token = this.tokenizer.nextToken();
        }
        if (this.tokenizer.endOfFile()) end = true;
        if (brackets.length > 0) this.unclosedBracket(bracket);
        if (end && colon) {
            if (!customProperty) while(tokens.length){
                token = tokens[tokens.length - 1][0];
                if (token !== "space" && token !== "comment") break;
                this.tokenizer.back(tokens.pop());
            }
            this.decl(tokens, customProperty);
        } else this.unknownWord(tokens);
    }
    rule(tokens) {
        tokens.pop();
        let node = new Rule();
        this.init(node, tokens[0][2]);
        node.raws.between = this.spacesAndCommentsFromEnd(tokens);
        this.raw(node, "selector", tokens);
        this.current = node;
    }
    decl(tokens, customProperty) {
        let node = new Declaration();
        this.init(node, tokens[0][2]);
        let last = tokens[tokens.length - 1];
        if (last[0] === ";") {
            this.semicolon = true;
            tokens.pop();
        }
        node.source.end = this.getPosition(last[3] || last[2] || findLastWithPosition(tokens));
        while(tokens[0][0] !== "word"){
            if (tokens.length === 1) this.unknownWord(tokens);
            node.raws.before += tokens.shift()[1];
        }
        node.source.start = this.getPosition(tokens[0][2]);
        node.prop = "";
        while(tokens.length){
            let type = tokens[0][0];
            if (type === ":" || type === "space" || type === "comment") break;
            node.prop += tokens.shift()[1];
        }
        node.raws.between = "";
        let token;
        while(tokens.length){
            token = tokens.shift();
            if (token[0] === ":") {
                node.raws.between += token[1];
                break;
            } else {
                if (token[0] === "word" && /\w/.test(token[1])) this.unknownWord([
                    token
                ]);
                node.raws.between += token[1];
            }
        }
        if (node.prop[0] === "_" || node.prop[0] === "*") {
            node.raws.before += node.prop[0];
            node.prop = node.prop.slice(1);
        }
        let firstSpaces = [];
        let next;
        while(tokens.length){
            next = tokens[0][0];
            if (next !== "space" && next !== "comment") break;
            firstSpaces.push(tokens.shift());
        }
        this.precheckMissedSemicolon(tokens);
        for(let i = tokens.length - 1; i >= 0; i--){
            token = tokens[i];
            if (token[1].toLowerCase() === "!important") {
                node.important = true;
                let string = this.stringFrom(tokens, i);
                string = this.spacesFromEnd(tokens) + string;
                if (string !== " !important") node.raws.important = string;
                break;
            } else if (token[1].toLowerCase() === "important") {
                let cache = tokens.slice(0);
                let str = "";
                for(let j = i; j > 0; j--){
                    let type = cache[j][0];
                    if (str.trim().indexOf("!") === 0 && type !== "space") break;
                    str = cache.pop()[1] + str;
                }
                if (str.trim().indexOf("!") === 0) {
                    node.important = true;
                    node.raws.important = str;
                    tokens = cache;
                }
            }
            if (token[0] !== "space" && token[0] !== "comment") break;
        }
        let hasWord = tokens.some((i)=>i[0] !== "space" && i[0] !== "comment");
        if (hasWord) {
            node.raws.between += firstSpaces.map((i)=>i[1]).join("");
            firstSpaces = [];
        }
        this.raw(node, "value", firstSpaces.concat(tokens), customProperty);
        if (node.value.includes(":") && !customProperty) this.checkMissedSemicolon(tokens);
    }
    atrule(token) {
        let node = new AtRule();
        node.name = token[1].slice(1);
        if (node.name === "") this.unnamedAtrule(node, token);
        this.init(node, token[2]);
        let type;
        let prev;
        let shift;
        let last = false;
        let open = false;
        let params = [];
        let brackets = [];
        while(!this.tokenizer.endOfFile()){
            token = this.tokenizer.nextToken();
            type = token[0];
            if (type === "(" || type === "[") brackets.push(type === "(" ? ")" : "]");
            else if (type === "{" && brackets.length > 0) brackets.push("}");
            else if (type === brackets[brackets.length - 1]) brackets.pop();
            if (brackets.length === 0) {
                if (type === ";") {
                    node.source.end = this.getPosition(token[2]);
                    this.semicolon = true;
                    break;
                } else if (type === "{") {
                    open = true;
                    break;
                } else if (type === "}") {
                    if (params.length > 0) {
                        shift = params.length - 1;
                        prev = params[shift];
                        while(prev && prev[0] === "space")prev = params[--shift];
                        if (prev) node.source.end = this.getPosition(prev[3] || prev[2]);
                    }
                    this.end(token);
                    break;
                } else params.push(token);
            } else params.push(token);
            if (this.tokenizer.endOfFile()) {
                last = true;
                break;
            }
        }
        node.raws.between = this.spacesAndCommentsFromEnd(params);
        if (params.length) {
            node.raws.afterName = this.spacesAndCommentsFromStart(params);
            this.raw(node, "params", params);
            if (last) {
                token = params[params.length - 1];
                node.source.end = this.getPosition(token[3] || token[2]);
                this.spaces = node.raws.between;
                node.raws.between = "";
            }
        } else {
            node.raws.afterName = "";
            node.params = "";
        }
        if (open) {
            node.nodes = [];
            this.current = node;
        }
    }
    end(token) {
        if (this.current.nodes && this.current.nodes.length) this.current.raws.semicolon = this.semicolon;
        this.semicolon = false;
        this.current.raws.after = (this.current.raws.after || "") + this.spaces;
        this.spaces = "";
        if (this.current.parent) {
            this.current.source.end = this.getPosition(token[2]);
            this.current = this.current.parent;
        } else this.unexpectedClose(token);
    }
    endFile() {
        if (this.current.parent) this.unclosedBlock();
        if (this.current.nodes && this.current.nodes.length) this.current.raws.semicolon = this.semicolon;
        this.current.raws.after = (this.current.raws.after || "") + this.spaces;
    }
    freeSemicolon(token) {
        this.spaces += token[1];
        if (this.current.nodes) {
            let prev = this.current.nodes[this.current.nodes.length - 1];
            if (prev && prev.type === "rule" && !prev.raws.ownSemicolon) {
                prev.raws.ownSemicolon = this.spaces;
                this.spaces = "";
            }
        }
    }
    // Helpers
    getPosition(offset) {
        let pos = this.input.fromOffset(offset);
        return {
            offset,
            line: pos.line,
            column: pos.col
        };
    }
    init(node, offset) {
        this.current.push(node);
        node.source = {
            start: this.getPosition(offset),
            input: this.input
        };
        node.raws.before = this.spaces;
        this.spaces = "";
        if (node.type !== "comment") this.semicolon = false;
    }
    raw(node, prop, tokens, customProperty) {
        let token, type;
        let length = tokens.length;
        let value = "";
        let clean = true;
        let next, prev;
        for(let i = 0; i < length; i += 1){
            token = tokens[i];
            type = token[0];
            if (type === "space" && i === length - 1 && !customProperty) clean = false;
            else if (type === "comment") {
                prev = tokens[i - 1] ? tokens[i - 1][0] : "empty";
                next = tokens[i + 1] ? tokens[i + 1][0] : "empty";
                if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {
                    if (value.slice(-1) === ",") clean = false;
                    else value += token[1];
                } else clean = false;
            } else value += token[1];
        }
        if (!clean) {
            let raw = tokens.reduce((all, i)=>all + i[1], "");
            node.raws[prop] = {
                value,
                raw
            };
        }
        node[prop] = value;
    }
    spacesAndCommentsFromEnd(tokens) {
        let lastTokenType;
        let spaces = "";
        while(tokens.length){
            lastTokenType = tokens[tokens.length - 1][0];
            if (lastTokenType !== "space" && lastTokenType !== "comment") break;
            spaces = tokens.pop()[1] + spaces;
        }
        return spaces;
    }
    spacesAndCommentsFromStart(tokens) {
        let next;
        let spaces = "";
        while(tokens.length){
            next = tokens[0][0];
            if (next !== "space" && next !== "comment") break;
            spaces += tokens.shift()[1];
        }
        return spaces;
    }
    spacesFromEnd(tokens) {
        let lastTokenType;
        let spaces = "";
        while(tokens.length){
            lastTokenType = tokens[tokens.length - 1][0];
            if (lastTokenType !== "space") break;
            spaces = tokens.pop()[1] + spaces;
        }
        return spaces;
    }
    stringFrom(tokens, from) {
        let result = "";
        for(let i = from; i < tokens.length; i++)result += tokens[i][1];
        tokens.splice(from, tokens.length - from);
        return result;
    }
    colon(tokens) {
        let brackets = 0;
        let token, type, prev;
        for (let [i, element] of tokens.entries()){
            token = element;
            type = token[0];
            if (type === "(") brackets += 1;
            if (type === ")") brackets -= 1;
            if (brackets === 0 && type === ":") {
                if (!prev) this.doubleColon(token);
                else if (prev[0] === "word" && prev[1] === "progid") continue;
                else return i;
            }
            prev = token;
        }
        return false;
    }
    // Errors
    unclosedBracket(bracket) {
        throw this.input.error("Unclosed bracket", {
            offset: bracket[2]
        }, {
            offset: bracket[2] + 1
        });
    }
    unknownWord(tokens) {
        throw this.input.error("Unknown word", {
            offset: tokens[0][2]
        }, {
            offset: tokens[0][2] + tokens[0][1].length
        });
    }
    unexpectedClose(token) {
        throw this.input.error("Unexpected }", {
            offset: token[2]
        }, {
            offset: token[2] + 1
        });
    }
    unclosedBlock() {
        let pos = this.current.source.start;
        throw this.input.error("Unclosed block", pos.line, pos.column);
    }
    doubleColon(token) {
        throw this.input.error("Double colon", {
            offset: token[2]
        }, {
            offset: token[2] + token[1].length
        });
    }
    unnamedAtrule(node, token) {
        throw this.input.error("At-rule without name", {
            offset: token[2]
        }, {
            offset: token[2] + token[1].length
        });
    }
    precheckMissedSemicolon() {
    // Hook for Safe Parser
    }
    checkMissedSemicolon(tokens) {
        let colon = this.colon(tokens);
        if (colon === false) return;
        let founded = 0;
        let token;
        for(let j = colon - 1; j >= 0; j--){
            token = tokens[j];
            if (token[0] !== "space") {
                founded += 1;
                if (founded === 2) break;
            }
        }
        // If the token is a word, e.g. `!important`, `red` or any other valid property's value.
        // Then we need to return the colon after that word token. [3] is the "end" colon of that word.
        // And because we need it after that one we do +1 to get the next one.
        throw this.input.error("Missed semicolon", token[0] === "word" ? token[3] + 1 : token[2]);
    }
}
module.exports = Parser;

},{"47ad52a08a7a676e":"2mU8a","4a9961ca361e4099":"bLUE2","149094ae0d56f3fb":"5CBjv","53d9a3501469ebf8":"kbVAt","df12142db9f2ac4":"hsDFv","fca2d5ee75ced31e":"4SFJx"}],"bLUE2":[function(require,module,exports) {
"use strict";
const SINGLE_QUOTE = "'".charCodeAt(0);
const DOUBLE_QUOTE = '"'.charCodeAt(0);
const BACKSLASH = "\\".charCodeAt(0);
const SLASH = "/".charCodeAt(0);
const NEWLINE = "\n".charCodeAt(0);
const SPACE = " ".charCodeAt(0);
const FEED = "\f".charCodeAt(0);
const TAB = "	".charCodeAt(0);
const CR = "\r".charCodeAt(0);
const OPEN_SQUARE = "[".charCodeAt(0);
const CLOSE_SQUARE = "]".charCodeAt(0);
const OPEN_PARENTHESES = "(".charCodeAt(0);
const CLOSE_PARENTHESES = ")".charCodeAt(0);
const OPEN_CURLY = "{".charCodeAt(0);
const CLOSE_CURLY = "}".charCodeAt(0);
const SEMICOLON = ";".charCodeAt(0);
const ASTERISK = "*".charCodeAt(0);
const COLON = ":".charCodeAt(0);
const AT = "@".charCodeAt(0);
const RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
const RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
const RE_BAD_BRACKET = /.[\n"'(/\\]/;
const RE_HEX_ESCAPE = /[\da-f]/i;
module.exports = function tokenizer(input, options = {}) {
    let css = input.css.valueOf();
    let ignore = options.ignoreErrors;
    let code, next, quote, content, escape;
    let escaped, escapePos, prev, n, currentToken;
    let length = css.length;
    let pos = 0;
    let buffer = [];
    let returned = [];
    function position() {
        return pos;
    }
    function unclosed(what) {
        throw input.error("Unclosed " + what, pos);
    }
    function endOfFile() {
        return returned.length === 0 && pos >= length;
    }
    function nextToken(opts) {
        if (returned.length) return returned.pop();
        if (pos >= length) return;
        let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;
        code = css.charCodeAt(pos);
        switch(code){
            case NEWLINE:
            case SPACE:
            case TAB:
            case CR:
            case FEED:
                next = pos;
                do {
                    next += 1;
                    code = css.charCodeAt(next);
                }while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);
                currentToken = [
                    "space",
                    css.slice(pos, next)
                ];
                pos = next - 1;
                break;
            case OPEN_SQUARE:
            case CLOSE_SQUARE:
            case OPEN_CURLY:
            case CLOSE_CURLY:
            case COLON:
            case SEMICOLON:
            case CLOSE_PARENTHESES:
                {
                    let controlChar = String.fromCharCode(code);
                    currentToken = [
                        controlChar,
                        controlChar,
                        pos
                    ];
                    break;
                }
            case OPEN_PARENTHESES:
                prev = buffer.length ? buffer.pop()[1] : "";
                n = css.charCodeAt(pos + 1);
                if (prev === "url" && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {
                    next = pos;
                    do {
                        escaped = false;
                        next = css.indexOf(")", next + 1);
                        if (next === -1) {
                            if (ignore || ignoreUnclosed) {
                                next = pos;
                                break;
                            } else unclosed("bracket");
                        }
                        escapePos = next;
                        while(css.charCodeAt(escapePos - 1) === BACKSLASH){
                            escapePos -= 1;
                            escaped = !escaped;
                        }
                    }while (escaped);
                    currentToken = [
                        "brackets",
                        css.slice(pos, next + 1),
                        pos,
                        next
                    ];
                    pos = next;
                } else {
                    next = css.indexOf(")", pos + 1);
                    content = css.slice(pos, next + 1);
                    if (next === -1 || RE_BAD_BRACKET.test(content)) currentToken = [
                        "(",
                        "(",
                        pos
                    ];
                    else {
                        currentToken = [
                            "brackets",
                            content,
                            pos,
                            next
                        ];
                        pos = next;
                    }
                }
                break;
            case SINGLE_QUOTE:
            case DOUBLE_QUOTE:
                quote = code === SINGLE_QUOTE ? "'" : '"';
                next = pos;
                do {
                    escaped = false;
                    next = css.indexOf(quote, next + 1);
                    if (next === -1) {
                        if (ignore || ignoreUnclosed) {
                            next = pos + 1;
                            break;
                        } else unclosed("string");
                    }
                    escapePos = next;
                    while(css.charCodeAt(escapePos - 1) === BACKSLASH){
                        escapePos -= 1;
                        escaped = !escaped;
                    }
                }while (escaped);
                currentToken = [
                    "string",
                    css.slice(pos, next + 1),
                    pos,
                    next
                ];
                pos = next;
                break;
            case AT:
                RE_AT_END.lastIndex = pos + 1;
                RE_AT_END.test(css);
                if (RE_AT_END.lastIndex === 0) next = css.length - 1;
                else next = RE_AT_END.lastIndex - 2;
                currentToken = [
                    "at-word",
                    css.slice(pos, next + 1),
                    pos,
                    next
                ];
                pos = next;
                break;
            case BACKSLASH:
                next = pos;
                escape = true;
                while(css.charCodeAt(next + 1) === BACKSLASH){
                    next += 1;
                    escape = !escape;
                }
                code = css.charCodeAt(next + 1);
                if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {
                    next += 1;
                    if (RE_HEX_ESCAPE.test(css.charAt(next))) {
                        while(RE_HEX_ESCAPE.test(css.charAt(next + 1)))next += 1;
                        if (css.charCodeAt(next + 1) === SPACE) next += 1;
                    }
                }
                currentToken = [
                    "word",
                    css.slice(pos, next + 1),
                    pos,
                    next
                ];
                pos = next;
                break;
            default:
                if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
                    next = css.indexOf("*/", pos + 2) + 1;
                    if (next === 0) {
                        if (ignore || ignoreUnclosed) next = css.length;
                        else unclosed("comment");
                    }
                    currentToken = [
                        "comment",
                        css.slice(pos, next + 1),
                        pos,
                        next
                    ];
                    pos = next;
                } else {
                    RE_WORD_END.lastIndex = pos + 1;
                    RE_WORD_END.test(css);
                    if (RE_WORD_END.lastIndex === 0) next = css.length - 1;
                    else next = RE_WORD_END.lastIndex - 2;
                    currentToken = [
                        "word",
                        css.slice(pos, next + 1),
                        pos,
                        next
                    ];
                    buffer.push(currentToken);
                    pos = next;
                }
                break;
        }
        pos++;
        return currentToken;
    }
    function back(token) {
        returned.push(token);
    }
    return {
        back,
        nextToken,
        endOfFile,
        position
    };
};

},{}],"kbVAt":[function(require,module,exports) {
"use strict";
let Container = require("70faab7fa86a1d67");
class AtRule extends Container {
    constructor(defaults){
        super(defaults);
        this.type = "atrule";
    }
    append(...children) {
        if (!this.proxyOf.nodes) this.nodes = [];
        return super.append(...children);
    }
    prepend(...children) {
        if (!this.proxyOf.nodes) this.nodes = [];
        return super.prepend(...children);
    }
}
module.exports = AtRule;
AtRule.default = AtRule;
Container.registerAtRule(AtRule);

},{"70faab7fa86a1d67":"1gj6C"}],"hsDFv":[function(require,module,exports) {
"use strict";
let Container = require("560b8aa33e20ea3e");
let LazyResult, Processor;
class Root extends Container {
    constructor(defaults){
        super(defaults);
        this.type = "root";
        if (!this.nodes) this.nodes = [];
    }
    removeChild(child, ignore) {
        let index = this.index(child);
        if (!ignore && index === 0 && this.nodes.length > 1) this.nodes[1].raws.before = this.nodes[index].raws.before;
        return super.removeChild(child);
    }
    normalize(child, sample, type) {
        let nodes = super.normalize(child);
        if (sample) {
            if (type === "prepend") {
                if (this.nodes.length > 1) sample.raws.before = this.nodes[1].raws.before;
                else delete sample.raws.before;
            } else if (this.first !== sample) for (let node of nodes)node.raws.before = sample.raws.before;
        }
        return nodes;
    }
    toResult(opts = {}) {
        let lazy = new LazyResult(new Processor(), this, opts);
        return lazy.stringify();
    }
}
Root.registerLazyResult = (dependant)=>{
    LazyResult = dependant;
};
Root.registerProcessor = (dependant)=>{
    Processor = dependant;
};
module.exports = Root;
Root.default = Root;
Container.registerRoot(Root);

},{"560b8aa33e20ea3e":"1gj6C"}],"4SFJx":[function(require,module,exports) {
"use strict";
let Container = require("d5e0f5e0b325cedb");
let list = require("221e506798aa56d3");
class Rule extends Container {
    constructor(defaults){
        super(defaults);
        this.type = "rule";
        if (!this.nodes) this.nodes = [];
    }
    get selectors() {
        return list.comma(this.selector);
    }
    set selectors(values) {
        let match = this.selector ? this.selector.match(/,\s*/) : null;
        let sep = match ? match[0] : "," + this.raw("between", "beforeOpen");
        this.selector = values.join(sep);
    }
}
module.exports = Rule;
Rule.default = Rule;
Container.registerRule(Rule);

},{"d5e0f5e0b325cedb":"1gj6C","221e506798aa56d3":"hZo3l"}],"hZo3l":[function(require,module,exports) {
"use strict";
let list = {
    split (string, separators, last) {
        let array = [];
        let current = "";
        let split = false;
        let func = 0;
        let inQuote = false;
        let prevQuote = "";
        let escape = false;
        for (let letter of string){
            if (escape) escape = false;
            else if (letter === "\\") escape = true;
            else if (inQuote) {
                if (letter === prevQuote) inQuote = false;
            } else if (letter === '"' || letter === "'") {
                inQuote = true;
                prevQuote = letter;
            } else if (letter === "(") func += 1;
            else if (letter === ")") {
                if (func > 0) func -= 1;
            } else if (func === 0) {
                if (separators.includes(letter)) split = true;
            }
            if (split) {
                if (current !== "") array.push(current.trim());
                current = "";
                split = false;
            } else current += letter;
        }
        if (last || current !== "") array.push(current.trim());
        return array;
    },
    space (string) {
        let spaces = [
            " ",
            "\n",
            "	"
        ];
        return list.split(string, spaces);
    },
    comma (string) {
        return list.split(string, [
            ","
        ], true);
    }
};
module.exports = list;
list.default = list;

},{}],"lU6wZ":[function(require,module,exports) {
"use strict";
let NoWorkResult = require("b4049d0a3e372cb2");
let LazyResult = require("9231cbb213c02603");
let Document = require("6f637386b6c47461");
let Root = require("1b2885e293f24ac6");
class Processor {
    constructor(plugins = []){
        this.version = "8.4.23";
        this.plugins = this.normalize(plugins);
    }
    use(plugin) {
        this.plugins = this.plugins.concat(this.normalize([
            plugin
        ]));
        return this;
    }
    process(css, opts = {}) {
        if (this.plugins.length === 0 && typeof opts.parser === "undefined" && typeof opts.stringifier === "undefined" && typeof opts.syntax === "undefined") return new NoWorkResult(this, css, opts);
        else return new LazyResult(this, css, opts);
    }
    normalize(plugins) {
        let normalized = [];
        for (let i of plugins){
            if (i.postcss === true) i = i();
            else if (i.postcss) i = i.postcss;
            if (typeof i === "object" && Array.isArray(i.plugins)) normalized = normalized.concat(i.plugins);
            else if (typeof i === "object" && i.postcssPlugin) normalized.push(i);
            else if (typeof i === "function") normalized.push(i);
            else if (typeof i === "object" && (i.parse || i.stringify)) throw new Error("PostCSS syntaxes cannot be used as plugins. Instead, please use one of the syntax/parser/stringifier options as outlined in your PostCSS runner documentation.");
            else throw new Error(i + " is not a PostCSS plugin");
        }
        return normalized;
    }
}
module.exports = Processor;
Processor.default = Processor;
Root.registerProcessor(Processor);
Document.registerProcessor(Processor);

},{"b4049d0a3e372cb2":"4PfYq","9231cbb213c02603":"580Su","6f637386b6c47461":"dK3sP","1b2885e293f24ac6":"hsDFv"}],"4PfYq":[function(require,module,exports) {
"use strict";
let MapGenerator = require("cac8a030679fbad6");
let stringify = require("9be69d36458d582b");
let warnOnce = require("791f97720f0dd0ae");
let parse = require("910fc79234e1506a");
const Result = require("96a14b02aaa17183");
class NoWorkResult {
    constructor(processor, css, opts){
        css = css.toString();
        this.stringified = false;
        this._processor = processor;
        this._css = css;
        this._opts = opts;
        this._map = undefined;
        let root;
        let str = stringify;
        this.result = new Result(this._processor, root, this._opts);
        this.result.css = css;
        let self = this;
        Object.defineProperty(this.result, "root", {
            get () {
                return self.root;
            }
        });
        let map = new MapGenerator(str, root, this._opts, css);
        if (map.isMap()) {
            let [generatedCSS, generatedMap] = map.generate();
            if (generatedCSS) this.result.css = generatedCSS;
            if (generatedMap) this.result.map = generatedMap;
        }
    }
    get [Symbol.toStringTag]() {
        return "NoWorkResult";
    }
    get processor() {
        return this.result.processor;
    }
    get opts() {
        return this.result.opts;
    }
    get css() {
        return this.result.css;
    }
    get content() {
        return this.result.css;
    }
    get map() {
        return this.result.map;
    }
    get root() {
        if (this._root) return this._root;
        let root;
        let parser = parse;
        try {
            root = parser(this._css, this._opts);
        } catch (error) {
            this.error = error;
        }
        if (this.error) throw this.error;
        else {
            this._root = root;
            return root;
        }
    }
    get messages() {
        return [];
    }
    warnings() {
        return [];
    }
    toString() {
        return this._css;
    }
    then(onFulfilled, onRejected) {
        if (!("from" in this._opts)) warnOnce("Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning.");
        return this.async().then(onFulfilled, onRejected);
    }
    catch(onRejected) {
        return this.async().catch(onRejected);
    }
    finally(onFinally) {
        return this.async().then(onFinally, onFinally);
    }
    async() {
        if (this.error) return Promise.reject(this.error);
        return Promise.resolve(this.result);
    }
    sync() {
        if (this.error) throw this.error;
        return this.result;
    }
}
module.exports = NoWorkResult;
NoWorkResult.default = NoWorkResult;

},{"cac8a030679fbad6":"ghfT0","9be69d36458d582b":"a0MwE","791f97720f0dd0ae":"dpzGz","910fc79234e1506a":"ioa1B","96a14b02aaa17183":"dmoqr"}],"iiNZS":[function(require,module,exports) {
"use strict";
let Declaration = require("4b43ae4fd3737621");
let PreviousMap = require("60700dde8b5be836");
let Comment = require("accf7cbbccc760da");
let AtRule = require("3cdc0b706b482706");
let Input = require("58554d265ddb6611");
let Root = require("c11a715055f82a3b");
let Rule = require("e55fa67de2c8e0eb");
function fromJSON(json, inputs) {
    if (Array.isArray(json)) return json.map((n)=>fromJSON(n));
    let { inputs: ownInputs, ...defaults } = json;
    if (ownInputs) {
        inputs = [];
        for (let input of ownInputs){
            let inputHydrated = {
                ...input,
                __proto__: Input.prototype
            };
            if (inputHydrated.map) inputHydrated.map = {
                ...inputHydrated.map,
                __proto__: PreviousMap.prototype
            };
            inputs.push(inputHydrated);
        }
    }
    if (defaults.nodes) defaults.nodes = json.nodes.map((n)=>fromJSON(n, inputs));
    if (defaults.source) {
        let { inputId, ...source } = defaults.source;
        defaults.source = source;
        if (inputId != null) defaults.source.input = inputs[inputId];
    }
    if (defaults.type === "root") return new Root(defaults);
    else if (defaults.type === "decl") return new Declaration(defaults);
    else if (defaults.type === "rule") return new Rule(defaults);
    else if (defaults.type === "comment") return new Comment(defaults);
    else if (defaults.type === "atrule") return new AtRule(defaults);
    else throw new Error("Unknown node type: " + json.type);
}
module.exports = fromJSON;
fromJSON.default = fromJSON;

},{"4b43ae4fd3737621":"2mU8a","60700dde8b5be836":"cmiCo","accf7cbbccc760da":"5CBjv","3cdc0b706b482706":"kbVAt","58554d265ddb6611":"fb1UO","c11a715055f82a3b":"hsDFv","e55fa67de2c8e0eb":"4SFJx"}],"1EIhI":[function(require,module,exports) {
let vendor = require("bfb3e9c70d13bb9b");
let Declaration = require("4c4b43637affc738");
let Resolution = require("ff076df3c71aa86");
let Transition = require("ecd7363190237b80");
let Processor = require("de69a76ba9a21516");
let Supports = require("e75d19467b86c89c");
let Browsers = require("1915fd16453fc356");
let Selector = require("d66828ac5e0ffd72");
let AtRule = require("4f1d46331977b479");
let Value = require("a6e809279cb6f5a0");
let utils = require("d84f478cb5dd21ef");
let hackFullscreen = require("597085795c15941d");
let hackPlaceholder = require("5b13bcd4d58e4644");
let hackPlaceholderShown = require("7b4c03e0bacf7500");
let hackFileSelectorButton = require("7a8082447cef2d86");
let hackFlex = require("8a4b3ddee1873eb3");
let hackOrder = require("a0c1b72c5981cc99");
let hackFilter = require("c9c8e98cda924a45");
let hackGridEnd = require("2af937782fc41dc");
let hackAnimation = require("d8ec7482deae1c1c");
let hackFlexFlow = require("82c2cc88f607627");
let hackFlexGrow = require("e80b8752488918ea");
let hackFlexWrap = require("4cfb3f41ec689a0d");
let hackGridArea = require("b3a63c4496b0877");
let hackPlaceSelf = require("14a809e23bf25fc6");
let hackGridStart = require("6c5ddb3bc705d1e1");
let hackAlignSelf = require("f19e010fd6d7e25a");
let hackAppearance = require("9529f6e5e87cf285");
let hackFlexBasis = require("833af5c0c234b23");
let hackMaskBorder = require("e80167f1af27537");
let hackMaskComposite = require("fb7981a4e9f5d5b9");
let hackAlignItems = require("36ca2fd5e1052c76");
let hackUserSelect = require("4f8365f024defa31");
let hackFlexShrink = require("54ee004a55f578bd");
let hackBreakProps = require("df670eaa89841443");
let hackWritingMode = require("e82f798be6f7719a");
let hackBorderImage = require("abb69a908111a5c6");
let hackAlignContent = require("dac8b02212fcafac");
let hackBorderRadius = require("bf98849af5a9dfce");
let hackBlockLogical = require("925802d1534d0132");
let hackGridTemplate = require("fc963f6404d59ac8");
let hackInlineLogical = require("e1b1c25054ecd160");
let hackGridRowAlign = require("7e1388b53f27875c");
let hackTransformDecl = require("891b4abb1fa6fd11");
let hackFlexDirection = require("1d49964532d1bfab");
let hackImageRendering = require("78555e1bccbe47b9");
let hackBackdropFilter = require("dcc1c2fb1c19a5bc");
let hackBackgroundClip = require("5c93ecce3f7d289a");
let hackTextDecoration = require("a8b86e243617729e");
let hackJustifyContent = require("a2ee14bc9d18344e");
let hackBackgroundSize = require("c46e66506f6864a");
let hackGridRowColumn = require("d72b3ff9ad6d46ae");
let hackGridRowsColumns = require("d5f74666ba0f828");
let hackGridColumnAlign = require("2ba4debf49a69241");
let hackPrintColorAdjust = require("bff770c76944b36e");
let hackOverscrollBehavior = require("f8f9df922cc0b747");
let hackGridTemplateAreas = require("4f614c8b85945ce3");
let hackTextEmphasisPosition = require("ca204ef3cb719de3");
let hackTextDecorationSkipInk = require("9b36851a79c62dfd");
let hackGradient = require("e76e705287930e0f");
let hackIntrinsic = require("8cfa01c7986056a4");
let hackPixelated = require("8523bdcf1a76e989");
let hackImageSet = require("e48967354adee700");
let hackCrossFade = require("4ec7b7f8e4e58b74");
let hackDisplayFlex = require("c78d232feb79addf");
let hackDisplayGrid = require("882f78e5804192af");
let hackFilterValue = require("f4e1628f76d184fb");
let hackAutofill = require("ac1eb8811e2db884");
Selector.hack(hackAutofill);
Selector.hack(hackFullscreen);
Selector.hack(hackPlaceholder);
Selector.hack(hackPlaceholderShown);
Selector.hack(hackFileSelectorButton);
Declaration.hack(hackFlex);
Declaration.hack(hackOrder);
Declaration.hack(hackFilter);
Declaration.hack(hackGridEnd);
Declaration.hack(hackAnimation);
Declaration.hack(hackFlexFlow);
Declaration.hack(hackFlexGrow);
Declaration.hack(hackFlexWrap);
Declaration.hack(hackGridArea);
Declaration.hack(hackPlaceSelf);
Declaration.hack(hackGridStart);
Declaration.hack(hackAlignSelf);
Declaration.hack(hackAppearance);
Declaration.hack(hackFlexBasis);
Declaration.hack(hackMaskBorder);
Declaration.hack(hackMaskComposite);
Declaration.hack(hackAlignItems);
Declaration.hack(hackUserSelect);
Declaration.hack(hackFlexShrink);
Declaration.hack(hackBreakProps);
Declaration.hack(hackWritingMode);
Declaration.hack(hackBorderImage);
Declaration.hack(hackAlignContent);
Declaration.hack(hackBorderRadius);
Declaration.hack(hackBlockLogical);
Declaration.hack(hackGridTemplate);
Declaration.hack(hackInlineLogical);
Declaration.hack(hackGridRowAlign);
Declaration.hack(hackTransformDecl);
Declaration.hack(hackFlexDirection);
Declaration.hack(hackImageRendering);
Declaration.hack(hackBackdropFilter);
Declaration.hack(hackBackgroundClip);
Declaration.hack(hackTextDecoration);
Declaration.hack(hackJustifyContent);
Declaration.hack(hackBackgroundSize);
Declaration.hack(hackGridRowColumn);
Declaration.hack(hackGridRowsColumns);
Declaration.hack(hackGridColumnAlign);
Declaration.hack(hackOverscrollBehavior);
Declaration.hack(hackGridTemplateAreas);
Declaration.hack(hackPrintColorAdjust);
Declaration.hack(hackTextEmphasisPosition);
Declaration.hack(hackTextDecorationSkipInk);
Value.hack(hackGradient);
Value.hack(hackIntrinsic);
Value.hack(hackPixelated);
Value.hack(hackImageSet);
Value.hack(hackCrossFade);
Value.hack(hackDisplayFlex);
Value.hack(hackDisplayGrid);
Value.hack(hackFilterValue);
let declsCache = new Map();
class Prefixes {
    constructor(data, browsers, options = {}){
        this.data = data;
        this.browsers = browsers;
        this.options = options;
        [this.add, this.remove] = this.preprocess(this.select(this.data));
        this.transition = new Transition(this);
        this.processor = new Processor(this);
    }
    /**
   * Return clone instance to remove all prefixes
   */ cleaner() {
        if (this.cleanerCache) return this.cleanerCache;
        if (this.browsers.selected.length) {
            let empty = new Browsers(this.browsers.data, []);
            this.cleanerCache = new Prefixes(this.data, empty, this.options);
        } else return this;
        return this.cleanerCache;
    }
    /**
   * Select prefixes from data, which is necessary for selected browsers
   */ select(list) {
        let selected = {
            add: {},
            remove: {}
        };
        for(let name in list){
            let data = list[name];
            let add = data.browsers.map((i)=>{
                let params = i.split(" ");
                return {
                    browser: `${params[0]} ${params[1]}`,
                    note: params[2]
                };
            });
            let notes = add.filter((i)=>i.note).map((i)=>`${this.browsers.prefix(i.browser)} ${i.note}`);
            notes = utils.uniq(notes);
            add = add.filter((i)=>this.browsers.isSelected(i.browser)).map((i)=>{
                let prefix = this.browsers.prefix(i.browser);
                if (i.note) return `${prefix} ${i.note}`;
                else return prefix;
            });
            add = this.sort(utils.uniq(add));
            if (this.options.flexbox === "no-2009") add = add.filter((i)=>!i.includes("2009"));
            let all = data.browsers.map((i)=>this.browsers.prefix(i));
            if (data.mistakes) all = all.concat(data.mistakes);
            all = all.concat(notes);
            all = utils.uniq(all);
            if (add.length) {
                selected.add[name] = add;
                if (add.length < all.length) selected.remove[name] = all.filter((i)=>!add.includes(i));
            } else selected.remove[name] = all;
        }
        return selected;
    }
    /**
   * Sort vendor prefixes
   */ sort(prefixes) {
        return prefixes.sort((a, b)=>{
            let aLength = utils.removeNote(a).length;
            let bLength = utils.removeNote(b).length;
            if (aLength === bLength) return b.length - a.length;
            else return bLength - aLength;
        });
    }
    /**
   * Cache prefixes data to fast CSS processing
   */ preprocess(selected) {
        let add = {
            "selectors": [],
            "@supports": new Supports(Prefixes, this)
        };
        for(let name in selected.add){
            let prefixes = selected.add[name];
            if (name === "@keyframes" || name === "@viewport") add[name] = new AtRule(name, prefixes, this);
            else if (name === "@resolution") add[name] = new Resolution(name, prefixes, this);
            else if (this.data[name].selector) add.selectors.push(Selector.load(name, prefixes, this));
            else {
                let props = this.data[name].props;
                if (props) {
                    let value = Value.load(name, prefixes, this);
                    for (let prop of props){
                        if (!add[prop]) add[prop] = {
                            values: []
                        };
                        add[prop].values.push(value);
                    }
                } else {
                    let values = add[name] && add[name].values || [];
                    add[name] = Declaration.load(name, prefixes, this);
                    add[name].values = values;
                }
            }
        }
        let remove = {
            selectors: []
        };
        for(let name in selected.remove){
            let prefixes = selected.remove[name];
            if (this.data[name].selector) {
                let selector = Selector.load(name, prefixes);
                for (let prefix of prefixes)remove.selectors.push(selector.old(prefix));
            } else if (name === "@keyframes" || name === "@viewport") for (let prefix of prefixes){
                let prefixed = `@${prefix}${name.slice(1)}`;
                remove[prefixed] = {
                    remove: true
                };
            }
            else if (name === "@resolution") remove[name] = new Resolution(name, prefixes, this);
            else {
                let props = this.data[name].props;
                if (props) {
                    let value = Value.load(name, [], this);
                    for (let prefix of prefixes){
                        let old = value.old(prefix);
                        if (old) for (let prop of props){
                            if (!remove[prop]) remove[prop] = {};
                            if (!remove[prop].values) remove[prop].values = [];
                            remove[prop].values.push(old);
                        }
                    }
                } else for (let p of prefixes){
                    let olds = this.decl(name).old(name, p);
                    if (name === "align-self") {
                        let a = add[name] && add[name].prefixes;
                        if (a) {
                            if (p === "-webkit- 2009" && a.includes("-webkit-")) continue;
                            else if (p === "-webkit-" && a.includes("-webkit- 2009")) continue;
                        }
                    }
                    for (let prefixed of olds){
                        if (!remove[prefixed]) remove[prefixed] = {};
                        remove[prefixed].remove = true;
                    }
                }
            }
        }
        return [
            add,
            remove
        ];
    }
    /**
   * Declaration loader with caching
   */ decl(prop) {
        if (!declsCache.has(prop)) declsCache.set(prop, Declaration.load(prop));
        return declsCache.get(prop);
    }
    /**
   * Return unprefixed version of property
   */ unprefixed(prop) {
        let value = this.normalize(vendor.unprefixed(prop));
        if (value === "flex-direction") value = "flex-flow";
        return value;
    }
    /**
   * Normalize prefix for remover
   */ normalize(prop) {
        return this.decl(prop).normalize(prop);
    }
    /**
   * Return prefixed version of property
   */ prefixed(prop, prefix) {
        prop = vendor.unprefixed(prop);
        return this.decl(prop).prefixed(prop, prefix);
    }
    /**
   * Return values, which must be prefixed in selected property
   */ values(type, prop) {
        let data = this[type];
        let global = data["*"] && data["*"].values;
        let values = data[prop] && data[prop].values;
        if (global && values) return utils.uniq(global.concat(values));
        else return global || values || [];
    }
    /**
   * Group declaration by unprefixed property to check them
   */ group(decl) {
        let rule = decl.parent;
        let index = rule.index(decl);
        let { length } = rule.nodes;
        let unprefixed = this.unprefixed(decl.prop);
        let checker = (step, callback)=>{
            index += step;
            while(index >= 0 && index < length){
                let other = rule.nodes[index];
                if (other.type === "decl") {
                    if (step === -1 && other.prop === unprefixed) {
                        if (!Browsers.withPrefix(other.value)) break;
                    }
                    if (this.unprefixed(other.prop) !== unprefixed) break;
                    else if (callback(other) === true) return true;
                    if (step === 1 && other.prop === unprefixed) {
                        if (!Browsers.withPrefix(other.value)) break;
                    }
                }
                index += step;
            }
            return false;
        };
        return {
            up (callback) {
                return checker(-1, callback);
            },
            down (callback) {
                return checker(1, callback);
            }
        };
    }
}
module.exports = Prefixes;

},{"bfb3e9c70d13bb9b":"926uR","4c4b43637affc738":"eJRSt","ff076df3c71aa86":"96Ywp","ecd7363190237b80":"ltOi8","de69a76ba9a21516":"iYSwf","e75d19467b86c89c":"cjWll","1915fd16453fc356":"dGs5H","d66828ac5e0ffd72":"lFkyP","4f1d46331977b479":"ixGmX","a6e809279cb6f5a0":"i2bKe","d84f478cb5dd21ef":"j2sRV","597085795c15941d":"21WlU","5b13bcd4d58e4644":"bfROY","7b4c03e0bacf7500":"04bRS","7a8082447cef2d86":"ceDQf","8a4b3ddee1873eb3":"5MJC9","a0c1b72c5981cc99":"kLOI0","c9c8e98cda924a45":"gsORo","2af937782fc41dc":"cfQIf","d8ec7482deae1c1c":"d89n7","82c2cc88f607627":"k7XCm","e80b8752488918ea":"dOvfz","4cfb3f41ec689a0d":"anJJ4","b3a63c4496b0877":"eSHPG","14a809e23bf25fc6":"foJhB","6c5ddb3bc705d1e1":"i40p5","f19e010fd6d7e25a":"eXAFe","9529f6e5e87cf285":"9zbtj","833af5c0c234b23":"713c3","e80167f1af27537":"2cBxP","fb7981a4e9f5d5b9":"lxxEp","36ca2fd5e1052c76":"hkwVN","4f8365f024defa31":"hxScT","54ee004a55f578bd":"ifLgz","df670eaa89841443":"8Pghi","e82f798be6f7719a":"5UHlb","abb69a908111a5c6":"2AMig","dac8b02212fcafac":"ethY1","bf98849af5a9dfce":"eopNU","925802d1534d0132":"2hr4f","fc963f6404d59ac8":"eQved","e1b1c25054ecd160":"4YDcH","7e1388b53f27875c":"b4Fjv","891b4abb1fa6fd11":"8hBMV","1d49964532d1bfab":"7AQT7","78555e1bccbe47b9":"61pla","dcc1c2fb1c19a5bc":"ifsLa","5c93ecce3f7d289a":"cTKQe","a8b86e243617729e":"2iGjq","a2ee14bc9d18344e":"120gd","c46e66506f6864a":"bsqmB","d72b3ff9ad6d46ae":"iKZkA","d5f74666ba0f828":"7qdUR","2ba4debf49a69241":"1L0m2","bff770c76944b36e":"6vDh7","f8f9df922cc0b747":"cCD0L","4f614c8b85945ce3":"l1eeB","ca204ef3cb719de3":"2288K","9b36851a79c62dfd":"i4nj3","e76e705287930e0f":"eKE95","8cfa01c7986056a4":"82TVI","8523bdcf1a76e989":"6JN8P","e48967354adee700":"22xbR","4ec7b7f8e4e58b74":"6PHL0","c78d232feb79addf":"jbk0I","882f78e5804192af":"mUeq2","f4e1628f76d184fb":"c8hJ9","ac1eb8811e2db884":"kD0Tm"}],"926uR":[function(require,module,exports) {
module.exports = {
    prefix (prop) {
        let match = prop.match(/^(-\w+-)/);
        if (match) return match[0];
        return "";
    },
    unprefixed (prop) {
        return prop.replace(/^-\w+-/, "");
    }
};

},{}],"eJRSt":[function(require,module,exports) {
let Prefixer = require("e0f4cfcb95e80469");
let Browsers = require("955f17c66e40b195");
let utils = require("d513829705a1885f");
class Declaration extends Prefixer {
    /**
   * Always true, because we already get prefixer by property name
   */ check() {
        return true;
    }
    /**
   * Return prefixed version of property
   */ prefixed(prop, prefix) {
        return prefix + prop;
    }
    /**
   * Return unprefixed version of property
   */ normalize(prop) {
        return prop;
    }
    /**
   * Check `value`, that it contain other prefixes, rather than `prefix`
   */ otherPrefixes(value, prefix) {
        for (let other of Browsers.prefixes()){
            if (other === prefix) continue;
            if (value.includes(other)) return value.replace(/var\([^)]+\)/, "").includes(other);
        }
        return false;
    }
    /**
   * Set prefix to declaration
   */ set(decl, prefix) {
        decl.prop = this.prefixed(decl.prop, prefix);
        return decl;
    }
    /**
   * Should we use visual cascade for prefixes
   */ needCascade(decl) {
        if (!decl._autoprefixerCascade) decl._autoprefixerCascade = this.all.options.cascade !== false && decl.raw("before").includes("\n");
        return decl._autoprefixerCascade;
    }
    /**
   * Return maximum length of possible prefixed property
   */ maxPrefixed(prefixes, decl) {
        if (decl._autoprefixerMax) return decl._autoprefixerMax;
        let max = 0;
        for (let prefix of prefixes){
            prefix = utils.removeNote(prefix);
            if (prefix.length > max) max = prefix.length;
        }
        decl._autoprefixerMax = max;
        return decl._autoprefixerMax;
    }
    /**
   * Calculate indentation to create visual cascade
   */ calcBefore(prefixes, decl, prefix = "") {
        let max = this.maxPrefixed(prefixes, decl);
        let diff = max - utils.removeNote(prefix).length;
        let before = decl.raw("before");
        if (diff > 0) before += Array(diff).fill(" ").join("");
        return before;
    }
    /**
   * Remove visual cascade
   */ restoreBefore(decl) {
        let lines = decl.raw("before").split("\n");
        let min = lines[lines.length - 1];
        this.all.group(decl).up((prefixed)=>{
            let array = prefixed.raw("before").split("\n");
            let last = array[array.length - 1];
            if (last.length < min.length) min = last;
        });
        lines[lines.length - 1] = min;
        decl.raws.before = lines.join("\n");
    }
    /**
   * Clone and insert new declaration
   */ insert(decl, prefix, prefixes) {
        let cloned = this.set(this.clone(decl), prefix);
        if (!cloned) return undefined;
        let already = decl.parent.some((i)=>i.prop === cloned.prop && i.value === cloned.value);
        if (already) return undefined;
        if (this.needCascade(decl)) cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        return decl.parent.insertBefore(decl, cloned);
    }
    /**
   * Did this declaration has this prefix above
   */ isAlready(decl, prefixed) {
        let already = this.all.group(decl).up((i)=>i.prop === prefixed);
        if (!already) already = this.all.group(decl).down((i)=>i.prop === prefixed);
        return already;
    }
    /**
   * Clone and add prefixes for declaration
   */ add(decl, prefix, prefixes, result) {
        let prefixed = this.prefixed(decl.prop, prefix);
        if (this.isAlready(decl, prefixed) || this.otherPrefixes(decl.value, prefix)) return undefined;
        return this.insert(decl, prefix, prefixes, result);
    }
    /**
   * Add spaces for visual cascade
   */ process(decl, result) {
        if (!this.needCascade(decl)) {
            super.process(decl, result);
            return;
        }
        let prefixes = super.process(decl, result);
        if (!prefixes || !prefixes.length) return;
        this.restoreBefore(decl);
        decl.raws.before = this.calcBefore(prefixes, decl);
    }
    /**
   * Return list of prefixed properties to clean old prefixes
   */ old(prop, prefix) {
        return [
            this.prefixed(prop, prefix)
        ];
    }
}
module.exports = Declaration;

},{"e0f4cfcb95e80469":"6bcfc","955f17c66e40b195":"dGs5H","d513829705a1885f":"j2sRV"}],"6bcfc":[function(require,module,exports) {
let Browsers = require("895e8d0fbd53807c");
let vendor = require("3a0b7ca054c66c89");
let utils = require("62a8c2f4e4964d64");
/**
 * Recursively clone objects
 */ function clone(obj, parent) {
    let cloned = new obj.constructor();
    for (let i of Object.keys(obj || {})){
        let value = obj[i];
        if (i === "parent" && typeof value === "object") {
            if (parent) cloned[i] = parent;
        } else if (i === "source" || i === null) cloned[i] = value;
        else if (Array.isArray(value)) cloned[i] = value.map((x)=>clone(x, cloned));
        else if (i !== "_autoprefixerPrefix" && i !== "_autoprefixerValues" && i !== "proxyCache") {
            if (typeof value === "object" && value !== null) value = clone(value, cloned);
            cloned[i] = value;
        }
    }
    return cloned;
}
class Prefixer {
    /**
   * Add hack to selected names
   */ static hack(klass) {
        if (!this.hacks) this.hacks = {};
        return klass.names.map((name)=>{
            this.hacks[name] = klass;
            return this.hacks[name];
        });
    }
    /**
   * Load hacks for some names
   */ static load(name, prefixes, all) {
        let Klass = this.hacks && this.hacks[name];
        if (Klass) return new Klass(name, prefixes, all);
        else return new this(name, prefixes, all);
    }
    /**
   * Clone node and clean autprefixer custom caches
   */ static clone(node, overrides) {
        let cloned = clone(node);
        for(let name in overrides)cloned[name] = overrides[name];
        return cloned;
    }
    constructor(name, prefixes, all){
        this.prefixes = prefixes;
        this.name = name;
        this.all = all;
    }
    /**
   * Find prefix in node parents
   */ parentPrefix(node) {
        let prefix;
        if (typeof node._autoprefixerPrefix !== "undefined") prefix = node._autoprefixerPrefix;
        else if (node.type === "decl" && node.prop[0] === "-") prefix = vendor.prefix(node.prop);
        else if (node.type === "root") prefix = false;
        else if (node.type === "rule" && node.selector.includes(":-") && /:(-\w+-)/.test(node.selector)) prefix = node.selector.match(/:(-\w+-)/)[1];
        else if (node.type === "atrule" && node.name[0] === "-") prefix = vendor.prefix(node.name);
        else prefix = this.parentPrefix(node.parent);
        if (!Browsers.prefixes().includes(prefix)) prefix = false;
        node._autoprefixerPrefix = prefix;
        return node._autoprefixerPrefix;
    }
    /**
   * Clone node with prefixes
   */ process(node, result) {
        if (!this.check(node)) return undefined;
        let parent = this.parentPrefix(node);
        let prefixes = this.prefixes.filter((prefix)=>!parent || parent === utils.removeNote(prefix));
        let added = [];
        for (let prefix of prefixes)if (this.add(node, prefix, added.concat([
            prefix
        ]), result)) added.push(prefix);
        return added;
    }
    /**
   * Shortcut for Prefixer.clone
   */ clone(node, overrides) {
        return Prefixer.clone(node, overrides);
    }
}
module.exports = Prefixer;

},{"895e8d0fbd53807c":"dGs5H","3a0b7ca054c66c89":"926uR","62a8c2f4e4964d64":"j2sRV"}],"96Ywp":[function(require,module,exports) {
let FractionJs = require("a0f204c5cb0a9db9");
let Prefixer = require("63637d3d5e990eb6");
let utils = require("6e922249ef276bea");
const REGEXP = /(min|max)-resolution\s*:\s*\d*\.?\d+(dppx|dpcm|dpi|x)/gi;
const SPLIT = /(min|max)-resolution(\s*:\s*)(\d*\.?\d+)(dppx|dpcm|dpi|x)/i;
class Resolution extends Prefixer {
    /**
   * Return prefixed query name
   */ prefixName(prefix, name) {
        if (prefix === "-moz-") return name + "--moz-device-pixel-ratio";
        else return prefix + name + "-device-pixel-ratio";
    }
    /**
   * Return prefixed query
   */ prefixQuery(prefix, name, colon, value, units) {
        value = new FractionJs(value);
        // 1dpcm = 2.54dpi
        // 1dppx = 96dpi
        if (units === "dpi") value = value.div(96);
        else if (units === "dpcm") value = value.mul(2.54).div(96);
        value = value.simplify();
        if (prefix === "-o-") value = value.n + "/" + value.d;
        return this.prefixName(prefix, name) + colon + value;
    }
    /**
   * Remove prefixed queries
   */ clean(rule) {
        if (!this.bad) {
            this.bad = [];
            for (let prefix of this.prefixes){
                this.bad.push(this.prefixName(prefix, "min"));
                this.bad.push(this.prefixName(prefix, "max"));
            }
        }
        rule.params = utils.editList(rule.params, (queries)=>{
            return queries.filter((query)=>this.bad.every((i)=>!query.includes(i)));
        });
    }
    /**
   * Add prefixed queries
   */ process(rule) {
        let parent = this.parentPrefix(rule);
        let prefixes = parent ? [
            parent
        ] : this.prefixes;
        rule.params = utils.editList(rule.params, (origin, prefixed)=>{
            for (let query of origin){
                if (!query.includes("min-resolution") && !query.includes("max-resolution")) {
                    prefixed.push(query);
                    continue;
                }
                for (let prefix of prefixes){
                    let processed = query.replace(REGEXP, (str)=>{
                        let parts = str.match(SPLIT);
                        return this.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);
                    });
                    prefixed.push(processed);
                }
                prefixed.push(query);
            }
            return utils.uniq(prefixed);
        });
    }
}
module.exports = Resolution;

},{"a0f204c5cb0a9db9":"iDLoJ","63637d3d5e990eb6":"6bcfc","6e922249ef276bea":"j2sRV"}],"iDLoJ":[function(require,module,exports) {
/**
 * @license Fraction.js v4.2.0 05/03/2022
 * https://www.xarg.org/2014/03/rational-numbers-in-javascript/
 *
 * Copyright (c) 2021, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/ /**
 *
 * This class offers the possibility to calculate fractions.
 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
 *
 * Array/Object form
 * [ 0 => <nominator>, 1 => <denominator> ]
 * [ n => <nominator>, d => <denominator> ]
 *
 * Integer form
 * - Single integer value
 *
 * Double form
 * - Single double value
 *
 * String form
 * 123.456 - a simple double
 * 123/456 - a string fraction
 * 123.'456' - a double with repeating decimal places
 * 123.(456) - synonym
 * 123.45'6' - a double with repeating last place
 * 123.45(6) - synonym
 *
 * Example:
 *
 * var f = new Fraction("9.4'31'");
 * f.mul([-4, 3]).div(4.9);
 *
 */ (function(root) {
    "use strict";
    // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
    // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
    // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
    var MAX_CYCLE_LEN = 2000;
    // Parsed data to avoid calling "new" all the time
    var P = {
        "s": 1,
        "n": 0,
        "d": 1
    };
    function assign(n, s) {
        if (isNaN(n = parseInt(n, 10))) throw Fraction["InvalidParameter"];
        return n * s;
    }
    // Creates a new Fraction internally without the need of the bulky constructor
    function newFraction(n, d) {
        if (d === 0) throw Fraction["DivisionByZero"];
        var f = Object.create(Fraction.prototype);
        f["s"] = n < 0 ? -1 : 1;
        n = n < 0 ? -n : n;
        var a = gcd(n, d);
        f["n"] = n / a;
        f["d"] = d / a;
        return f;
    }
    function factorize(num) {
        var factors = {};
        var n = num;
        var i = 2;
        var s = 4;
        while(s <= n){
            while(n % i === 0){
                n /= i;
                factors[i] = (factors[i] || 0) + 1;
            }
            s += 1 + 2 * i++;
        }
        if (n !== num) {
            if (n > 1) factors[n] = (factors[n] || 0) + 1;
        } else factors[num] = (factors[num] || 0) + 1;
        return factors;
    }
    var parse = function(p1, p2) {
        var n = 0, d = 1, s = 1;
        var v = 0, w = 0, x = 0, y = 1, z = 1;
        var A = 0, B = 1;
        var C = 1, D = 1;
        var N = 10000000;
        var M;
        if (p1 === undefined || p1 === null) ;
        else if (p2 !== undefined) {
            n = p1;
            d = p2;
            s = n * d;
            if (n % 1 !== 0 || d % 1 !== 0) throw Fraction["NonIntegerParameter"];
        } else switch(typeof p1){
            case "object":
                if ("d" in p1 && "n" in p1) {
                    n = p1["n"];
                    d = p1["d"];
                    if ("s" in p1) n *= p1["s"];
                } else if (0 in p1) {
                    n = p1[0];
                    if (1 in p1) d = p1[1];
                } else throw Fraction["InvalidParameter"];
                s = n * d;
                break;
            case "number":
                if (p1 < 0) {
                    s = p1;
                    p1 = -p1;
                }
                if (p1 % 1 === 0) n = p1;
                else if (p1 > 0) {
                    if (p1 >= 1) {
                        z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                        p1 /= z;
                    }
                    // Using Farey Sequences
                    // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/
                    while(B <= N && D <= N){
                        M = (A + C) / (B + D);
                        if (p1 === M) {
                            if (B + D <= N) {
                                n = A + C;
                                d = B + D;
                            } else if (D > B) {
                                n = C;
                                d = D;
                            } else {
                                n = A;
                                d = B;
                            }
                            break;
                        } else {
                            if (p1 > M) {
                                A += C;
                                B += D;
                            } else {
                                C += A;
                                D += B;
                            }
                            if (B > N) {
                                n = C;
                                d = D;
                            } else {
                                n = A;
                                d = B;
                            }
                        }
                    }
                    n *= z;
                } else if (isNaN(p1) || isNaN(p2)) d = n = NaN;
                break;
            case "string":
                B = p1.match(/\d+|./g);
                if (B === null) throw Fraction["InvalidParameter"];
                if (B[A] === "-") {
                    s = -1;
                    A++;
                } else if (B[A] === "+") A++;
                if (B.length === A + 1) w = assign(B[A++], s);
                else if (B[A + 1] === "." || B[A] === ".") {
                    if (B[A] !== ".") v = assign(B[A++], s);
                    A++;
                    // Check for decimal places
                    if (A + 1 === B.length || B[A + 1] === "(" && B[A + 3] === ")" || B[A + 1] === "'" && B[A + 3] === "'") {
                        w = assign(B[A], s);
                        y = Math.pow(10, B[A].length);
                        A++;
                    }
                    // Check for repeating places
                    if (B[A] === "(" && B[A + 2] === ")" || B[A] === "'" && B[A + 2] === "'") {
                        x = assign(B[A + 1], s);
                        z = Math.pow(10, B[A + 1].length) - 1;
                        A += 3;
                    }
                } else if (B[A + 1] === "/" || B[A + 1] === ":") {
                    w = assign(B[A], s);
                    y = assign(B[A + 2], 1);
                    A += 3;
                } else if (B[A + 3] === "/" && B[A + 1] === " ") {
                    v = assign(B[A], s);
                    w = assign(B[A + 2], s);
                    y = assign(B[A + 4], 1);
                    A += 5;
                }
                if (B.length <= A) {
                    d = y * z;
                    s = /* void */ n = x + d * v + z * w;
                    break;
                }
            default:
                throw Fraction["InvalidParameter"];
        }
        if (d === 0) throw Fraction["DivisionByZero"];
        P["s"] = s < 0 ? -1 : 1;
        P["n"] = Math.abs(n);
        P["d"] = Math.abs(d);
    };
    function modpow(b, e, m) {
        var r = 1;
        for(; e > 0; b = b * b % m, e >>= 1)if (e & 1) r = r * b % m;
        return r;
    }
    function cycleLen(n, d) {
        for(; d % 2 === 0; d /= 2);
        for(; d % 5 === 0; d /= 5);
        if (d === 1) return 0;
        // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
        // 10^(d-1) % d == 1
        // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
        // as we want to translate the numbers to strings.
        var rem = 10 % d;
        var t = 1;
        for(; rem !== 1; t++){
            rem = rem * 10 % d;
            if (t > MAX_CYCLE_LEN) return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
        }
        return t;
    }
    function cycleStart(n, d, len) {
        var rem1 = 1;
        var rem2 = modpow(10, len, d);
        for(var t = 0; t < 300; t++){
            // Solve 10^s == 10^(s+t) (mod d)
            if (rem1 === rem2) return t;
            rem1 = rem1 * 10 % d;
            rem2 = rem2 * 10 % d;
        }
        return 0;
    }
    function gcd(a, b) {
        if (!a) return b;
        if (!b) return a;
        while(true){
            a %= b;
            if (!a) return b;
            b %= a;
            if (!b) return a;
        }
    }
    /**
   * Module constructor
   *
   * @constructor
   * @param {number|Fraction=} a
   * @param {number=} b
   */ function Fraction(a, b) {
        parse(a, b);
        if (this instanceof Fraction) {
            a = gcd(P["d"], P["n"]); // Abuse variable a
            this["s"] = P["s"];
            this["n"] = P["n"] / a;
            this["d"] = P["d"] / a;
        } else return newFraction(P["s"] * P["n"], P["d"]);
    }
    Fraction["DivisionByZero"] = new Error("Division by Zero");
    Fraction["InvalidParameter"] = new Error("Invalid argument");
    Fraction["NonIntegerParameter"] = new Error("Parameters must be integer");
    Fraction.prototype = {
        "s": 1,
        "n": 0,
        "d": 1,
        /**
     * Calculates the absolute value
     *
     * Ex: new Fraction(-4).abs() => 4
     **/ "abs": function() {
            return newFraction(this["n"], this["d"]);
        },
        /**
     * Inverts the sign of the current fraction
     *
     * Ex: new Fraction(-4).neg() => 4
     **/ "neg": function() {
            return newFraction(-this["s"] * this["n"], this["d"]);
        },
        /**
     * Adds two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
     **/ "add": function(a, b) {
            parse(a, b);
            return newFraction(this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
        },
        /**
     * Subtracts two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
     **/ "sub": function(a, b) {
            parse(a, b);
            return newFraction(this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
        },
        /**
     * Multiplies two rational numbers
     *
     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
     **/ "mul": function(a, b) {
            parse(a, b);
            return newFraction(this["s"] * P["s"] * this["n"] * P["n"], this["d"] * P["d"]);
        },
        /**
     * Divides two rational numbers
     *
     * Ex: new Fraction("-17.(345)").inverse().div(3)
     **/ "div": function(a, b) {
            parse(a, b);
            return newFraction(this["s"] * P["s"] * this["n"] * P["d"], this["d"] * P["n"]);
        },
        /**
     * Clones the actual object
     *
     * Ex: new Fraction("-17.(345)").clone()
     **/ "clone": function() {
            return newFraction(this["s"] * this["n"], this["d"]);
        },
        /**
     * Calculates the modulo of two rational numbers - a more precise fmod
     *
     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
     **/ "mod": function(a, b) {
            if (isNaN(this["n"]) || isNaN(this["d"])) return new Fraction(NaN);
            if (a === undefined) return newFraction(this["s"] * this["n"] % this["d"], 1);
            parse(a, b);
            if (0 === P["n"] && 0 === this["d"]) throw Fraction["DivisionByZero"];
            /*
       * First silly attempt, kinda slow
       *
       return that["sub"]({
       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
       "d": num["d"],
       "s": this["s"]
       });*/ /*
       * New attempt: a1 / b1 = a2 / b2 * q + r
       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
       * => (b2 * a1 % a2 * b1) / (b1 * b2)
       */ return newFraction(this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]), P["d"] * this["d"]);
        },
        /**
     * Calculates the fractional gcd of two rational numbers
     *
     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
     */ "gcd": function(a, b) {
            parse(a, b);
            // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)
            return newFraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
        },
        /**
     * Calculates the fractional lcm of two rational numbers
     *
     * Ex: new Fraction(5,8).lcm(3,7) => 15
     */ "lcm": function(a, b) {
            parse(a, b);
            // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)
            if (P["n"] === 0 && this["n"] === 0) return newFraction(0, 1);
            return newFraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
        },
        /**
     * Calculates the ceil of a rational number
     *
     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
     **/ "ceil": function(places) {
            places = Math.pow(10, places || 0);
            if (isNaN(this["n"]) || isNaN(this["d"])) return new Fraction(NaN);
            return newFraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
        },
        /**
     * Calculates the floor of a rational number
     *
     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
     **/ "floor": function(places) {
            places = Math.pow(10, places || 0);
            if (isNaN(this["n"]) || isNaN(this["d"])) return new Fraction(NaN);
            return newFraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
        },
        /**
     * Rounds a rational numbers
     *
     * Ex: new Fraction('4.(3)').round() => (4 / 1)
     **/ "round": function(places) {
            places = Math.pow(10, places || 0);
            if (isNaN(this["n"]) || isNaN(this["d"])) return new Fraction(NaN);
            return newFraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
        },
        /**
     * Gets the inverse of the fraction, means numerator and denominator are exchanged
     *
     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
     **/ "inverse": function() {
            return newFraction(this["s"] * this["d"], this["n"]);
        },
        /**
     * Calculates the fraction to some rational exponent, if possible
     *
     * Ex: new Fraction(-1,2).pow(-3) => -8
     */ "pow": function(a, b) {
            parse(a, b);
            // Trivial case when exp is an integer
            if (P["d"] === 1) {
                if (P["s"] < 0) return newFraction(Math.pow(this["s"] * this["d"], P["n"]), Math.pow(this["n"], P["n"]));
                else return newFraction(Math.pow(this["s"] * this["n"], P["n"]), Math.pow(this["d"], P["n"]));
            }
            // Negative roots become complex
            //     (-a/b)^(c/d) = x
            // <=> (-1)^(c/d) * (a/b)^(c/d) = x
            // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°
            // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )
            // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.
            if (this["s"] < 0) return null;
            // Now prime factor n and d
            var N = factorize(this["n"]);
            var D = factorize(this["d"]);
            // Exponentiate and take root for n and d individually
            var n = 1;
            var d = 1;
            for(var k in N){
                if (k === "1") continue;
                if (k === "0") {
                    n = 0;
                    break;
                }
                N[k] *= P["n"];
                if (N[k] % P["d"] === 0) N[k] /= P["d"];
                else return null;
                n *= Math.pow(k, N[k]);
            }
            for(var k in D){
                if (k === "1") continue;
                D[k] *= P["n"];
                if (D[k] % P["d"] === 0) D[k] /= P["d"];
                else return null;
                d *= Math.pow(k, D[k]);
            }
            if (P["s"] < 0) return newFraction(d, n);
            return newFraction(n, d);
        },
        /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/ "equals": function(a, b) {
            parse(a, b);
            return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
        },
        /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/ "compare": function(a, b) {
            parse(a, b);
            var t = this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"];
            return (0 < t) - (t < 0);
        },
        "simplify": function(eps) {
            if (isNaN(this["n"]) || isNaN(this["d"])) return this;
            eps = eps || 0.001;
            var thisABS = this["abs"]();
            var cont = thisABS["toContinued"]();
            for(var i = 1; i < cont.length; i++){
                var s = newFraction(cont[i - 1], 1);
                for(var k = i - 2; k >= 0; k--)s = s["inverse"]()["add"](cont[k]);
                if (s["sub"](thisABS)["abs"]().valueOf() < eps) return s["mul"](this["s"]);
            }
            return this;
        },
        /**
     * Check if two rational numbers are divisible
     *
     * Ex: new Fraction(19.6).divisible(1.5);
     */ "divisible": function(a, b) {
            parse(a, b);
            return !(!(P["n"] * this["d"]) || this["n"] * P["d"] % (P["n"] * this["d"]));
        },
        /**
     * Returns a decimal representation of the fraction
     *
     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
     **/ "valueOf": function() {
            return this["s"] * this["n"] / this["d"];
        },
        /**
     * Returns a string-fraction representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toFraction(true) => "4 1/3"
     **/ "toFraction": function(excludeWhole) {
            var whole, str = "";
            var n = this["n"];
            var d = this["d"];
            if (this["s"] < 0) str += "-";
            if (d === 1) str += n;
            else {
                if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
                    str += whole;
                    str += " ";
                    n %= d;
                }
                str += n;
                str += "/";
                str += d;
            }
            return str;
        },
        /**
     * Returns a latex representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
     **/ "toLatex": function(excludeWhole) {
            var whole, str = "";
            var n = this["n"];
            var d = this["d"];
            if (this["s"] < 0) str += "-";
            if (d === 1) str += n;
            else {
                if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
                    str += whole;
                    n %= d;
                }
                str += "\\frac{";
                str += n;
                str += "}{";
                str += d;
                str += "}";
            }
            return str;
        },
        /**
     * Returns an array of continued fraction elements
     *
     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
     */ "toContinued": function() {
            var t;
            var a = this["n"];
            var b = this["d"];
            var res = [];
            if (isNaN(a) || isNaN(b)) return res;
            do {
                res.push(Math.floor(a / b));
                t = a % b;
                a = b;
                b = t;
            }while (a !== 1);
            return res;
        },
        /**
     * Creates a string representation of a fraction with all digits
     *
     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
     **/ "toString": function(dec) {
            var N = this["n"];
            var D = this["d"];
            if (isNaN(N) || isNaN(D)) return "NaN";
            dec = dec || 15; // 15 = decimal places when no repetation
            var cycLen = cycleLen(N, D); // Cycle length
            var cycOff = cycleStart(N, D, cycLen); // Cycle start
            var str = this["s"] < 0 ? "-" : "";
            str += N / D | 0;
            N %= D;
            N *= 10;
            if (N) str += ".";
            if (cycLen) {
                for(var i = cycOff; i--;){
                    str += N / D | 0;
                    N %= D;
                    N *= 10;
                }
                str += "(";
                for(var i = cycLen; i--;){
                    str += N / D | 0;
                    N %= D;
                    N *= 10;
                }
                str += ")";
            } else for(var i = dec; N && i--;){
                str += N / D | 0;
                N %= D;
                N *= 10;
            }
            return str;
        }
    };
    if (typeof define === "function" && define["amd"]) define([], function() {
        return Fraction;
    });
    else {
        Object.defineProperty(Fraction, "__esModule", {
            "value": true
        });
        Fraction["default"] = Fraction;
        Fraction["Fraction"] = Fraction;
        module["exports"] = Fraction;
    }
})(this);

},{}],"ltOi8":[function(require,module,exports) {
let { list } = require("8b36db8dc3d1c90f");
let parser = require("2ebe72c47fa5742e");
let Browsers = require("640642ee28215a80");
let vendor = require("6f59a380fb0bf8b0");
class Transition {
    constructor(prefixes){
        this.props = [
            "transition",
            "transition-property"
        ];
        this.prefixes = prefixes;
    }
    /**
   * Process transition and add prefixes for all necessary properties
   */ add(decl, result) {
        let prefix, prop;
        let add = this.prefixes.add[decl.prop];
        let vendorPrefixes = this.ruleVendorPrefixes(decl);
        let declPrefixes = vendorPrefixes || add && add.prefixes || [];
        let params = this.parse(decl.value);
        let names = params.map((i)=>this.findProp(i));
        let added = [];
        if (names.some((i)=>i[0] === "-")) return;
        for (let param of params){
            prop = this.findProp(param);
            if (prop[0] === "-") continue;
            let prefixer = this.prefixes.add[prop];
            if (!prefixer || !prefixer.prefixes) continue;
            for (prefix of prefixer.prefixes){
                if (vendorPrefixes && !vendorPrefixes.some((p)=>prefix.includes(p))) continue;
                let prefixed = this.prefixes.prefixed(prop, prefix);
                if (prefixed !== "-ms-transform" && !names.includes(prefixed)) {
                    if (!this.disabled(prop, prefix)) added.push(this.clone(prop, prefixed, param));
                }
            }
        }
        params = params.concat(added);
        let value = this.stringify(params);
        let webkitClean = this.stringify(this.cleanFromUnprefixed(params, "-webkit-"));
        if (declPrefixes.includes("-webkit-")) this.cloneBefore(decl, `-webkit-${decl.prop}`, webkitClean);
        this.cloneBefore(decl, decl.prop, webkitClean);
        if (declPrefixes.includes("-o-")) {
            let operaClean = this.stringify(this.cleanFromUnprefixed(params, "-o-"));
            this.cloneBefore(decl, `-o-${decl.prop}`, operaClean);
        }
        for (prefix of declPrefixes)if (prefix !== "-webkit-" && prefix !== "-o-") {
            let prefixValue = this.stringify(this.cleanOtherPrefixes(params, prefix));
            this.cloneBefore(decl, prefix + decl.prop, prefixValue);
        }
        if (value !== decl.value && !this.already(decl, decl.prop, value)) {
            this.checkForWarning(result, decl);
            decl.cloneBefore();
            decl.value = value;
        }
    }
    /**
   * Find property name
   */ findProp(param) {
        let prop = param[0].value;
        if (/^\d/.test(prop)) for (let [i, token] of param.entries()){
            if (i !== 0 && token.type === "word") return token.value;
        }
        return prop;
    }
    /**
   * Does we already have this declaration
   */ already(decl, prop, value) {
        return decl.parent.some((i)=>i.prop === prop && i.value === value);
    }
    /**
   * Add declaration if it is not exist
   */ cloneBefore(decl, prop, value) {
        if (!this.already(decl, prop, value)) decl.cloneBefore({
            prop,
            value
        });
    }
    /**
   * Show transition-property warning
   */ checkForWarning(result, decl) {
        if (decl.prop !== "transition-property") return;
        let isPrefixed = false;
        let hasAssociatedProp = false;
        decl.parent.each((i)=>{
            if (i.type !== "decl") return undefined;
            if (i.prop.indexOf("transition-") !== 0) return undefined;
            let values = list.comma(i.value);
            // check if current Rule's transition-property comma separated value list needs prefixes
            if (i.prop === "transition-property") {
                values.forEach((value)=>{
                    let lookup = this.prefixes.add[value];
                    if (lookup && lookup.prefixes && lookup.prefixes.length > 0) isPrefixed = true;
                });
                return undefined;
            }
            // check if another transition-* prop in current Rule has comma separated value list
            hasAssociatedProp = hasAssociatedProp || values.length > 1;
            return false;
        });
        if (isPrefixed && hasAssociatedProp) decl.warn(result, "Replace transition-property to transition, because Autoprefixer could not support any cases of transition-property and other transition-*");
    }
    /**
   * Process transition and remove all unnecessary properties
   */ remove(decl) {
        let params = this.parse(decl.value);
        params = params.filter((i)=>{
            let prop = this.prefixes.remove[this.findProp(i)];
            return !prop || !prop.remove;
        });
        let value = this.stringify(params);
        if (decl.value === value) return;
        if (params.length === 0) {
            decl.remove();
            return;
        }
        let double = decl.parent.some((i)=>{
            return i.prop === decl.prop && i.value === value;
        });
        let smaller = decl.parent.some((i)=>{
            return i !== decl && i.prop === decl.prop && i.value.length > value.length;
        });
        if (double || smaller) {
            decl.remove();
            return;
        }
        decl.value = value;
    }
    /**
   * Parse properties list to array
   */ parse(value) {
        let ast = parser(value);
        let result = [];
        let param = [];
        for (let node of ast.nodes){
            param.push(node);
            if (node.type === "div" && node.value === ",") {
                result.push(param);
                param = [];
            }
        }
        result.push(param);
        return result.filter((i)=>i.length > 0);
    }
    /**
   * Return properties string from array
   */ stringify(params) {
        if (params.length === 0) return "";
        let nodes = [];
        for (let param of params){
            if (param[param.length - 1].type !== "div") param.push(this.div(params));
            nodes = nodes.concat(param);
        }
        if (nodes[0].type === "div") nodes = nodes.slice(1);
        if (nodes[nodes.length - 1].type === "div") nodes = nodes.slice(0, -1);
        return parser.stringify({
            nodes
        });
    }
    /**
   * Return new param array with different name
   */ clone(origin, name, param) {
        let result = [];
        let changed = false;
        for (let i of param)if (!changed && i.type === "word" && i.value === origin) {
            result.push({
                type: "word",
                value: name
            });
            changed = true;
        } else result.push(i);
        return result;
    }
    /**
   * Find or create separator
   */ div(params) {
        for (let param of params)for (let node of param){
            if (node.type === "div" && node.value === ",") return node;
        }
        return {
            type: "div",
            value: ",",
            after: " "
        };
    }
    cleanOtherPrefixes(params, prefix) {
        return params.filter((param)=>{
            let current = vendor.prefix(this.findProp(param));
            return current === "" || current === prefix;
        });
    }
    /**
   * Remove all non-webkit prefixes and unprefixed params if we have prefixed
   */ cleanFromUnprefixed(params, prefix) {
        let remove = params.map((i)=>this.findProp(i)).filter((i)=>i.slice(0, prefix.length) === prefix).map((i)=>this.prefixes.unprefixed(i));
        let result = [];
        for (let param of params){
            let prop = this.findProp(param);
            let p = vendor.prefix(prop);
            if (!remove.includes(prop) && (p === prefix || p === "")) result.push(param);
        }
        return result;
    }
    /**
   * Check property for disabled by option
   */ disabled(prop, prefix) {
        let other = [
            "order",
            "justify-content",
            "align-self",
            "align-content"
        ];
        if (prop.includes("flex") || other.includes(prop)) {
            if (this.prefixes.options.flexbox === false) return true;
            if (this.prefixes.options.flexbox === "no-2009") return prefix.includes("2009");
        }
        return undefined;
    }
    /**
   * Check if transition prop is inside vendor specific rule
   */ ruleVendorPrefixes(decl) {
        let { parent } = decl;
        if (parent.type !== "rule") return false;
        else if (!parent.selector.includes(":-")) return false;
        let selectors = Browsers.prefixes().filter((s)=>parent.selector.includes(":" + s));
        return selectors.length > 0 ? selectors : false;
    }
}
module.exports = Transition;

},{"8b36db8dc3d1c90f":"gauyy","2ebe72c47fa5742e":"blMr1","640642ee28215a80":"dGs5H","6f59a380fb0bf8b0":"926uR"}],"blMr1":[function(require,module,exports) {
var parse = require("d2e3a4bb74d92b09");
var walk = require("4328bd2e3723e3e");
var stringify = require("861e318110eda059");
function ValueParser(value) {
    if (this instanceof ValueParser) {
        this.nodes = parse(value);
        return this;
    }
    return new ValueParser(value);
}
ValueParser.prototype.toString = function() {
    return Array.isArray(this.nodes) ? stringify(this.nodes) : "";
};
ValueParser.prototype.walk = function(cb, bubble) {
    walk(this.nodes, cb, bubble);
    return this;
};
ValueParser.unit = require("f3475aed26482d6");
ValueParser.walk = walk;
ValueParser.stringify = stringify;
module.exports = ValueParser;

},{"d2e3a4bb74d92b09":"8c0jO","4328bd2e3723e3e":"5phvw","861e318110eda059":"hal54","f3475aed26482d6":"lebww"}],"8c0jO":[function(require,module,exports) {
var openParentheses = "(".charCodeAt(0);
var closeParentheses = ")".charCodeAt(0);
var singleQuote = "'".charCodeAt(0);
var doubleQuote = '"'.charCodeAt(0);
var backslash = "\\".charCodeAt(0);
var slash = "/".charCodeAt(0);
var comma = ",".charCodeAt(0);
var colon = ":".charCodeAt(0);
var star = "*".charCodeAt(0);
var uLower = "u".charCodeAt(0);
var uUpper = "U".charCodeAt(0);
var plus = "+".charCodeAt(0);
var isUnicodeRange = /^[a-f0-9?-]+$/i;
module.exports = function(input) {
    var tokens = [];
    var value = input;
    var next, quote, prev, token, escape, escapePos, whitespacePos, parenthesesOpenPos;
    var pos = 0;
    var code = value.charCodeAt(pos);
    var max = value.length;
    var stack = [
        {
            nodes: tokens
        }
    ];
    var balanced = 0;
    var parent;
    var name = "";
    var before = "";
    var after = "";
    while(pos < max){
        // Whitespaces
        if (code <= 32) {
            next = pos;
            do {
                next += 1;
                code = value.charCodeAt(next);
            }while (code <= 32);
            token = value.slice(pos, next);
            prev = tokens[tokens.length - 1];
            if (code === closeParentheses && balanced) after = token;
            else if (prev && prev.type === "div") {
                prev.after = token;
                prev.sourceEndIndex += token.length;
            } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star && (!parent || parent && parent.type === "function" && parent.value !== "calc")) before = token;
            else tokens.push({
                type: "space",
                sourceIndex: pos,
                sourceEndIndex: next,
                value: token
            });
            pos = next;
        // Quotes
        } else if (code === singleQuote || code === doubleQuote) {
            next = pos;
            quote = code === singleQuote ? "'" : '"';
            token = {
                type: "string",
                sourceIndex: pos,
                quote: quote
            };
            do {
                escape = false;
                next = value.indexOf(quote, next + 1);
                if (~next) {
                    escapePos = next;
                    while(value.charCodeAt(escapePos - 1) === backslash){
                        escapePos -= 1;
                        escape = !escape;
                    }
                } else {
                    value += quote;
                    next = value.length - 1;
                    token.unclosed = true;
                }
            }while (escape);
            token.value = value.slice(pos + 1, next);
            token.sourceEndIndex = token.unclosed ? next : next + 1;
            tokens.push(token);
            pos = next + 1;
            code = value.charCodeAt(pos);
        // Comments
        } else if (code === slash && value.charCodeAt(pos + 1) === star) {
            next = value.indexOf("*/", pos);
            token = {
                type: "comment",
                sourceIndex: pos,
                sourceEndIndex: next + 2
            };
            if (next === -1) {
                token.unclosed = true;
                next = value.length;
                token.sourceEndIndex = next;
            }
            token.value = value.slice(pos + 2, next);
            tokens.push(token);
            pos = next + 2;
            code = value.charCodeAt(pos);
        // Operation within calc
        } else if ((code === slash || code === star) && parent && parent.type === "function" && parent.value === "calc") {
            token = value[pos];
            tokens.push({
                type: "word",
                sourceIndex: pos - before.length,
                sourceEndIndex: pos + token.length,
                value: token
            });
            pos += 1;
            code = value.charCodeAt(pos);
        // Dividers
        } else if (code === slash || code === comma || code === colon) {
            token = value[pos];
            tokens.push({
                type: "div",
                sourceIndex: pos - before.length,
                sourceEndIndex: pos + token.length,
                value: token,
                before: before,
                after: ""
            });
            before = "";
            pos += 1;
            code = value.charCodeAt(pos);
        // Open parentheses
        } else if (openParentheses === code) {
            // Whitespaces after open parentheses
            next = pos;
            do {
                next += 1;
                code = value.charCodeAt(next);
            }while (code <= 32);
            parenthesesOpenPos = pos;
            token = {
                type: "function",
                sourceIndex: pos - name.length,
                value: name,
                before: value.slice(parenthesesOpenPos + 1, next)
            };
            pos = next;
            if (name === "url" && code !== singleQuote && code !== doubleQuote) {
                next -= 1;
                do {
                    escape = false;
                    next = value.indexOf(")", next + 1);
                    if (~next) {
                        escapePos = next;
                        while(value.charCodeAt(escapePos - 1) === backslash){
                            escapePos -= 1;
                            escape = !escape;
                        }
                    } else {
                        value += ")";
                        next = value.length - 1;
                        token.unclosed = true;
                    }
                }while (escape);
                // Whitespaces before closed
                whitespacePos = next;
                do {
                    whitespacePos -= 1;
                    code = value.charCodeAt(whitespacePos);
                }while (code <= 32);
                if (parenthesesOpenPos < whitespacePos) {
                    if (pos !== whitespacePos + 1) token.nodes = [
                        {
                            type: "word",
                            sourceIndex: pos,
                            sourceEndIndex: whitespacePos + 1,
                            value: value.slice(pos, whitespacePos + 1)
                        }
                    ];
                    else token.nodes = [];
                    if (token.unclosed && whitespacePos + 1 !== next) {
                        token.after = "";
                        token.nodes.push({
                            type: "space",
                            sourceIndex: whitespacePos + 1,
                            sourceEndIndex: next,
                            value: value.slice(whitespacePos + 1, next)
                        });
                    } else {
                        token.after = value.slice(whitespacePos + 1, next);
                        token.sourceEndIndex = next;
                    }
                } else {
                    token.after = "";
                    token.nodes = [];
                }
                pos = next + 1;
                token.sourceEndIndex = token.unclosed ? next : pos;
                code = value.charCodeAt(pos);
                tokens.push(token);
            } else {
                balanced += 1;
                token.after = "";
                token.sourceEndIndex = pos + 1;
                tokens.push(token);
                stack.push(token);
                tokens = token.nodes = [];
                parent = token;
            }
            name = "";
        // Close parentheses
        } else if (closeParentheses === code && balanced) {
            pos += 1;
            code = value.charCodeAt(pos);
            parent.after = after;
            parent.sourceEndIndex += after.length;
            after = "";
            balanced -= 1;
            stack[stack.length - 1].sourceEndIndex = pos;
            stack.pop();
            parent = stack[balanced];
            tokens = parent.nodes;
        // Words
        } else {
            next = pos;
            do {
                if (code === backslash) next += 1;
                next += 1;
                code = value.charCodeAt(next);
            }while (next < max && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === star && parent && parent.type === "function" && parent.value === "calc" || code === slash && parent.type === "function" && parent.value === "calc" || code === closeParentheses && balanced));
            token = value.slice(pos, next);
            if (openParentheses === code) name = token;
            else if ((uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) && plus === token.charCodeAt(1) && isUnicodeRange.test(token.slice(2))) tokens.push({
                type: "unicode-range",
                sourceIndex: pos,
                sourceEndIndex: next,
                value: token
            });
            else tokens.push({
                type: "word",
                sourceIndex: pos,
                sourceEndIndex: next,
                value: token
            });
            pos = next;
        }
    }
    for(pos = stack.length - 1; pos; pos -= 1){
        stack[pos].unclosed = true;
        stack[pos].sourceEndIndex = value.length;
    }
    return stack[0].nodes;
};

},{}],"5phvw":[function(require,module,exports) {
module.exports = function walk(nodes, cb, bubble) {
    var i, max, node, result;
    for(i = 0, max = nodes.length; i < max; i += 1){
        node = nodes[i];
        if (!bubble) result = cb(node, i, nodes);
        if (result !== false && node.type === "function" && Array.isArray(node.nodes)) walk(node.nodes, cb, bubble);
        if (bubble) cb(node, i, nodes);
    }
};

},{}],"hal54":[function(require,module,exports) {
function stringifyNode(node, custom) {
    var type = node.type;
    var value = node.value;
    var buf;
    var customResult;
    if (custom && (customResult = custom(node)) !== undefined) return customResult;
    else if (type === "word" || type === "space") return value;
    else if (type === "string") {
        buf = node.quote || "";
        return buf + value + (node.unclosed ? "" : buf);
    } else if (type === "comment") return "/*" + value + (node.unclosed ? "" : "*/");
    else if (type === "div") return (node.before || "") + value + (node.after || "");
    else if (Array.isArray(node.nodes)) {
        buf = stringify(node.nodes, custom);
        if (type !== "function") return buf;
        return value + "(" + (node.before || "") + buf + (node.after || "") + (node.unclosed ? "" : ")");
    }
    return value;
}
function stringify(nodes, custom) {
    var result, i;
    if (Array.isArray(nodes)) {
        result = "";
        for(i = nodes.length - 1; ~i; i -= 1)result = stringifyNode(nodes[i], custom) + result;
        return result;
    }
    return stringifyNode(nodes, custom);
}
module.exports = stringify;

},{}],"lebww":[function(require,module,exports) {
var minus = "-".charCodeAt(0);
var plus = "+".charCodeAt(0);
var dot = ".".charCodeAt(0);
var exp = "e".charCodeAt(0);
var EXP = "E".charCodeAt(0);
// Check if three code points would start a number
// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number
function likeNumber(value) {
    var code = value.charCodeAt(0);
    var nextCode;
    if (code === plus || code === minus) {
        nextCode = value.charCodeAt(1);
        if (nextCode >= 48 && nextCode <= 57) return true;
        var nextNextCode = value.charCodeAt(2);
        if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) return true;
        return false;
    }
    if (code === dot) {
        nextCode = value.charCodeAt(1);
        if (nextCode >= 48 && nextCode <= 57) return true;
        return false;
    }
    if (code >= 48 && code <= 57) return true;
    return false;
}
// Consume a number
// https://www.w3.org/TR/css-syntax-3/#consume-number
module.exports = function(value) {
    var pos = 0;
    var length = value.length;
    var code;
    var nextCode;
    var nextNextCode;
    if (length === 0 || !likeNumber(value)) return false;
    code = value.charCodeAt(pos);
    if (code === plus || code === minus) pos++;
    while(pos < length){
        code = value.charCodeAt(pos);
        if (code < 48 || code > 57) break;
        pos += 1;
    }
    code = value.charCodeAt(pos);
    nextCode = value.charCodeAt(pos + 1);
    if (code === dot && nextCode >= 48 && nextCode <= 57) {
        pos += 2;
        while(pos < length){
            code = value.charCodeAt(pos);
            if (code < 48 || code > 57) break;
            pos += 1;
        }
    }
    code = value.charCodeAt(pos);
    nextCode = value.charCodeAt(pos + 1);
    nextNextCode = value.charCodeAt(pos + 2);
    if ((code === exp || code === EXP) && (nextCode >= 48 && nextCode <= 57 || (nextCode === plus || nextCode === minus) && nextNextCode >= 48 && nextNextCode <= 57)) {
        pos += nextCode === plus || nextCode === minus ? 3 : 2;
        while(pos < length){
            code = value.charCodeAt(pos);
            if (code < 48 || code > 57) break;
            pos += 1;
        }
    }
    return {
        number: value.slice(0, pos),
        unit: value.slice(pos)
    };
};

},{}],"iYSwf":[function(require,module,exports) {
let parser = require("bec51482b51f86c3");
let Value = require("bff53d7bb385b6bf");
let insertAreas = require("3b438bd3252e3e5e").insertAreas;
const OLD_LINEAR = /(^|[^-])linear-gradient\(\s*(top|left|right|bottom)/i;
const OLD_RADIAL = /(^|[^-])radial-gradient\(\s*\d+(\w*|%)\s+\d+(\w*|%)\s*,/i;
const IGNORE_NEXT = /(!\s*)?autoprefixer:\s*ignore\s+next/i;
const GRID_REGEX = /(!\s*)?autoprefixer\s*grid:\s*(on|off|(no-)?autoplace)/i;
const SIZES = [
    "width",
    "height",
    "min-width",
    "max-width",
    "min-height",
    "max-height",
    "inline-size",
    "min-inline-size",
    "max-inline-size",
    "block-size",
    "min-block-size",
    "max-block-size"
];
function hasGridTemplate(decl) {
    return decl.parent.some((i)=>i.prop === "grid-template" || i.prop === "grid-template-areas");
}
function hasRowsAndColumns(decl) {
    let hasRows = decl.parent.some((i)=>i.prop === "grid-template-rows");
    let hasColumns = decl.parent.some((i)=>i.prop === "grid-template-columns");
    return hasRows && hasColumns;
}
class Processor {
    constructor(prefixes){
        this.prefixes = prefixes;
    }
    /**
   * Add necessary prefixes
   */ add(css, result) {
        // At-rules
        let resolution = this.prefixes.add["@resolution"];
        let keyframes = this.prefixes.add["@keyframes"];
        let viewport = this.prefixes.add["@viewport"];
        let supports = this.prefixes.add["@supports"];
        css.walkAtRules((rule)=>{
            if (rule.name === "keyframes") {
                if (!this.disabled(rule, result)) return keyframes && keyframes.process(rule);
            } else if (rule.name === "viewport") {
                if (!this.disabled(rule, result)) return viewport && viewport.process(rule);
            } else if (rule.name === "supports") {
                if (this.prefixes.options.supports !== false && !this.disabled(rule, result)) return supports.process(rule);
            } else if (rule.name === "media" && rule.params.includes("-resolution")) {
                if (!this.disabled(rule, result)) return resolution && resolution.process(rule);
            }
            return undefined;
        });
        // Selectors
        css.walkRules((rule)=>{
            if (this.disabled(rule, result)) return undefined;
            return this.prefixes.add.selectors.map((selector)=>{
                return selector.process(rule, result);
            });
        });
        function insideGrid(decl) {
            return decl.parent.nodes.some((node)=>{
                if (node.type !== "decl") return false;
                let displayGrid = node.prop === "display" && /(inline-)?grid/.test(node.value);
                let gridTemplate = node.prop.startsWith("grid-template");
                let gridGap = /^grid-([A-z]+-)?gap/.test(node.prop);
                return displayGrid || gridTemplate || gridGap;
            });
        }
        function insideFlex(decl) {
            return decl.parent.some((node)=>{
                return node.prop === "display" && /(inline-)?flex/.test(node.value);
            });
        }
        let gridPrefixes = this.gridStatus(css, result) && this.prefixes.add["grid-area"] && this.prefixes.add["grid-area"].prefixes;
        css.walkDecls((decl)=>{
            if (this.disabledDecl(decl, result)) return undefined;
            let parent = decl.parent;
            let prop = decl.prop;
            let value = decl.value;
            if (prop === "color-adjust") {
                if (parent.every((i)=>i.prop !== "print-color-adjust")) result.warn("Replace color-adjust to print-color-adjust. The color-adjust shorthand is currently deprecated.", {
                    node: decl
                });
            } else if (prop === "grid-row-span") {
                result.warn("grid-row-span is not part of final Grid Layout. Use grid-row.", {
                    node: decl
                });
                return undefined;
            } else if (prop === "grid-column-span") {
                result.warn("grid-column-span is not part of final Grid Layout. Use grid-column.", {
                    node: decl
                });
                return undefined;
            } else if (prop === "display" && value === "box") {
                result.warn("You should write display: flex by final spec instead of display: box", {
                    node: decl
                });
                return undefined;
            } else if (prop === "text-emphasis-position") {
                if (value === "under" || value === "over") result.warn("You should use 2 values for text-emphasis-position For example, `under left` instead of just `under`.", {
                    node: decl
                });
            } else if (/^(align|justify|place)-(items|content)$/.test(prop) && insideFlex(decl)) {
                if (value === "start" || value === "end") result.warn(`${value} value has mixed support, consider using ` + `flex-${value} instead`, {
                    node: decl
                });
            } else if (prop === "text-decoration-skip" && value === "ink") result.warn("Replace text-decoration-skip: ink to text-decoration-skip-ink: auto, because spec had been changed", {
                node: decl
            });
            else {
                if (gridPrefixes && this.gridStatus(decl, result)) {
                    if (decl.value === "subgrid") result.warn("IE does not support subgrid", {
                        node: decl
                    });
                    if (/^(align|justify|place)-items$/.test(prop) && insideGrid(decl)) {
                        let fixed = prop.replace("-items", "-self");
                        result.warn(`IE does not support ${prop} on grid containers. ` + `Try using ${fixed} on child elements instead: ` + `${decl.parent.selector} > * { ${fixed}: ${decl.value} }`, {
                            node: decl
                        });
                    } else if (/^(align|justify|place)-content$/.test(prop) && insideGrid(decl)) result.warn(`IE does not support ${decl.prop} on grid containers`, {
                        node: decl
                    });
                    else if (prop === "display" && decl.value === "contents") {
                        result.warn("Please do not use display: contents; if you have grid setting enabled", {
                            node: decl
                        });
                        return undefined;
                    } else if (decl.prop === "grid-gap") {
                        let status = this.gridStatus(decl, result);
                        if (status === "autoplace" && !hasRowsAndColumns(decl) && !hasGridTemplate(decl)) result.warn("grid-gap only works if grid-template(-areas) is being used or both rows and columns have been declared and cells have not been manually placed inside the explicit grid", {
                            node: decl
                        });
                        else if ((status === true || status === "no-autoplace") && !hasGridTemplate(decl)) result.warn("grid-gap only works if grid-template(-areas) is being used", {
                            node: decl
                        });
                    } else if (prop === "grid-auto-columns") {
                        result.warn("grid-auto-columns is not supported by IE", {
                            node: decl
                        });
                        return undefined;
                    } else if (prop === "grid-auto-rows") {
                        result.warn("grid-auto-rows is not supported by IE", {
                            node: decl
                        });
                        return undefined;
                    } else if (prop === "grid-auto-flow") {
                        let hasRows = parent.some((i)=>i.prop === "grid-template-rows");
                        let hasCols = parent.some((i)=>i.prop === "grid-template-columns");
                        if (hasGridTemplate(decl)) result.warn("grid-auto-flow is not supported by IE", {
                            node: decl
                        });
                        else if (value.includes("dense")) result.warn("grid-auto-flow: dense is not supported by IE", {
                            node: decl
                        });
                        else if (!hasRows && !hasCols) result.warn("grid-auto-flow works only if grid-template-rows and grid-template-columns are present in the same rule", {
                            node: decl
                        });
                        return undefined;
                    } else if (value.includes("auto-fit")) {
                        result.warn("auto-fit value is not supported by IE", {
                            node: decl,
                            word: "auto-fit"
                        });
                        return undefined;
                    } else if (value.includes("auto-fill")) {
                        result.warn("auto-fill value is not supported by IE", {
                            node: decl,
                            word: "auto-fill"
                        });
                        return undefined;
                    } else if (prop.startsWith("grid-template") && value.includes("[")) result.warn("Autoprefixer currently does not support line names. Try using grid-template-areas instead.", {
                        node: decl,
                        word: "["
                    });
                }
                if (value.includes("radial-gradient")) {
                    if (OLD_RADIAL.test(decl.value)) result.warn("Gradient has outdated direction syntax. New syntax is like `closest-side at 0 0` instead of `0 0, closest-side`.", {
                        node: decl
                    });
                    else {
                        let ast = parser(value);
                        for (let i of ast.nodes)if (i.type === "function" && i.value === "radial-gradient") {
                            for (let word of i.nodes)if (word.type === "word") {
                                if (word.value === "cover") result.warn("Gradient has outdated direction syntax. Replace `cover` to `farthest-corner`.", {
                                    node: decl
                                });
                                else if (word.value === "contain") result.warn("Gradient has outdated direction syntax. Replace `contain` to `closest-side`.", {
                                    node: decl
                                });
                            }
                        }
                    }
                }
                if (value.includes("linear-gradient")) {
                    if (OLD_LINEAR.test(value)) result.warn("Gradient has outdated direction syntax. New syntax is like `to left` instead of `right`.", {
                        node: decl
                    });
                }
            }
            if (SIZES.includes(decl.prop)) {
                if (!decl.value.includes("-fill-available")) {
                    if (decl.value.includes("fill-available")) result.warn("Replace fill-available to stretch, because spec had been changed", {
                        node: decl
                    });
                    else if (decl.value.includes("fill")) {
                        let ast = parser(value);
                        if (ast.nodes.some((i)=>i.type === "word" && i.value === "fill")) result.warn("Replace fill to stretch, because spec had been changed", {
                            node: decl
                        });
                    }
                }
            }
            let prefixer;
            if (decl.prop === "transition" || decl.prop === "transition-property") // Transition
            return this.prefixes.transition.add(decl, result);
            else if (decl.prop === "align-self") {
                // align-self flexbox or grid
                let display = this.displayType(decl);
                if (display !== "grid" && this.prefixes.options.flexbox !== false) {
                    prefixer = this.prefixes.add["align-self"];
                    if (prefixer && prefixer.prefixes) prefixer.process(decl);
                }
                if (this.gridStatus(decl, result) !== false) {
                    prefixer = this.prefixes.add["grid-row-align"];
                    if (prefixer && prefixer.prefixes) return prefixer.process(decl, result);
                }
            } else if (decl.prop === "justify-self") // justify-self flexbox or grid
            {
                if (this.gridStatus(decl, result) !== false) {
                    prefixer = this.prefixes.add["grid-column-align"];
                    if (prefixer && prefixer.prefixes) return prefixer.process(decl, result);
                }
            } else if (decl.prop === "place-self") {
                prefixer = this.prefixes.add["place-self"];
                if (prefixer && prefixer.prefixes && this.gridStatus(decl, result) !== false) return prefixer.process(decl, result);
            } else {
                // Properties
                prefixer = this.prefixes.add[decl.prop];
                if (prefixer && prefixer.prefixes) return prefixer.process(decl, result);
            }
            return undefined;
        });
        // Insert grid-area prefixes. We need to be able to store the different
        // rules as a data and hack API is not enough for this
        if (this.gridStatus(css, result)) insertAreas(css, this.disabled);
        // Values
        return css.walkDecls((decl)=>{
            if (this.disabledValue(decl, result)) return;
            let unprefixed = this.prefixes.unprefixed(decl.prop);
            let list = this.prefixes.values("add", unprefixed);
            if (Array.isArray(list)) {
                for (let value of list)if (value.process) value.process(decl, result);
            }
            Value.save(this.prefixes, decl);
        });
    }
    /**
   * Remove unnecessary pefixes
   */ remove(css, result) {
        // At-rules
        let resolution = this.prefixes.remove["@resolution"];
        css.walkAtRules((rule, i)=>{
            if (this.prefixes.remove[`@${rule.name}`]) {
                if (!this.disabled(rule, result)) rule.parent.removeChild(i);
            } else if (rule.name === "media" && rule.params.includes("-resolution") && resolution) resolution.clean(rule);
        });
        // Selectors
        for (let checker of this.prefixes.remove.selectors)css.walkRules((rule, i)=>{
            if (checker.check(rule)) {
                if (!this.disabled(rule, result)) rule.parent.removeChild(i);
            }
        });
        return css.walkDecls((decl, i)=>{
            if (this.disabled(decl, result)) return;
            let rule = decl.parent;
            let unprefixed = this.prefixes.unprefixed(decl.prop);
            // Transition
            if (decl.prop === "transition" || decl.prop === "transition-property") this.prefixes.transition.remove(decl);
            // Properties
            if (this.prefixes.remove[decl.prop] && this.prefixes.remove[decl.prop].remove) {
                let notHack = this.prefixes.group(decl).down((other)=>{
                    return this.prefixes.normalize(other.prop) === unprefixed;
                });
                if (unprefixed === "flex-flow") notHack = true;
                if (decl.prop === "-webkit-box-orient") {
                    let hacks = {
                        "flex-direction": true,
                        "flex-flow": true
                    };
                    if (!decl.parent.some((j)=>hacks[j.prop])) return;
                }
                if (notHack && !this.withHackValue(decl)) {
                    if (decl.raw("before").includes("\n")) this.reduceSpaces(decl);
                    rule.removeChild(i);
                    return;
                }
            }
            // Values
            for (let checker of this.prefixes.values("remove", unprefixed)){
                if (!checker.check) continue;
                if (!checker.check(decl.value)) continue;
                unprefixed = checker.unprefixed;
                let notHack = this.prefixes.group(decl).down((other)=>{
                    return other.value.includes(unprefixed);
                });
                if (notHack) {
                    rule.removeChild(i);
                    return;
                }
            }
        });
    }
    /**
   * Some rare old values, which is not in standard
   */ withHackValue(decl) {
        return decl.prop === "-webkit-background-clip" && decl.value === "text";
    }
    /**
   * Check for grid/flexbox options.
   */ disabledValue(node, result) {
        if (this.gridStatus(node, result) === false && node.type === "decl") {
            if (node.prop === "display" && node.value.includes("grid")) return true;
        }
        if (this.prefixes.options.flexbox === false && node.type === "decl") {
            if (node.prop === "display" && node.value.includes("flex")) return true;
        }
        if (node.type === "decl" && node.prop === "content") return true;
        return this.disabled(node, result);
    }
    /**
   * Check for grid/flexbox options.
   */ disabledDecl(node, result) {
        if (this.gridStatus(node, result) === false && node.type === "decl") {
            if (node.prop.includes("grid") || node.prop === "justify-items") return true;
        }
        if (this.prefixes.options.flexbox === false && node.type === "decl") {
            let other = [
                "order",
                "justify-content",
                "align-items",
                "align-content"
            ];
            if (node.prop.includes("flex") || other.includes(node.prop)) return true;
        }
        return this.disabled(node, result);
    }
    /**
   * Check for control comment and global options
   */ disabled(node, result) {
        if (!node) return false;
        if (node._autoprefixerDisabled !== undefined) return node._autoprefixerDisabled;
        if (node.parent) {
            let p = node.prev();
            if (p && p.type === "comment" && IGNORE_NEXT.test(p.text)) {
                node._autoprefixerDisabled = true;
                node._autoprefixerSelfDisabled = true;
                return true;
            }
        }
        let value = null;
        if (node.nodes) {
            let status;
            node.each((i)=>{
                if (i.type !== "comment") return;
                if (/(!\s*)?autoprefixer:\s*(off|on)/i.test(i.text)) {
                    if (typeof status !== "undefined") result.warn("Second Autoprefixer control comment was ignored. Autoprefixer applies control comment to whole block, not to next rules.", {
                        node: i
                    });
                    else status = /on/i.test(i.text);
                }
            });
            if (status !== undefined) value = !status;
        }
        if (!node.nodes || value === null) {
            if (node.parent) {
                let isParentDisabled = this.disabled(node.parent, result);
                if (node.parent._autoprefixerSelfDisabled === true) value = false;
                else value = isParentDisabled;
            } else value = false;
        }
        node._autoprefixerDisabled = value;
        return value;
    }
    /**
   * Normalize spaces in cascade declaration group
   */ reduceSpaces(decl) {
        let stop = false;
        this.prefixes.group(decl).up(()=>{
            stop = true;
            return true;
        });
        if (stop) return;
        let parts = decl.raw("before").split("\n");
        let prevMin = parts[parts.length - 1].length;
        let diff = false;
        this.prefixes.group(decl).down((other)=>{
            parts = other.raw("before").split("\n");
            let last = parts.length - 1;
            if (parts[last].length > prevMin) {
                if (diff === false) diff = parts[last].length - prevMin;
                parts[last] = parts[last].slice(0, -diff);
                other.raws.before = parts.join("\n");
            }
        });
    }
    /**
   * Is it flebox or grid rule
   */ displayType(decl) {
        for (let i of decl.parent.nodes){
            if (i.prop !== "display") continue;
            if (i.value.includes("flex")) return "flex";
            if (i.value.includes("grid")) return "grid";
        }
        return false;
    }
    /**
   * Set grid option via control comment
   */ gridStatus(node, result) {
        if (!node) return false;
        if (node._autoprefixerGridStatus !== undefined) return node._autoprefixerGridStatus;
        let value = null;
        if (node.nodes) {
            let status;
            node.each((i)=>{
                if (i.type !== "comment") return;
                if (GRID_REGEX.test(i.text)) {
                    let hasAutoplace = /:\s*autoplace/i.test(i.text);
                    let noAutoplace = /no-autoplace/i.test(i.text);
                    if (typeof status !== "undefined") result.warn("Second Autoprefixer grid control comment was ignored. Autoprefixer applies control comments to the whole block, not to the next rules.", {
                        node: i
                    });
                    else if (hasAutoplace) status = "autoplace";
                    else if (noAutoplace) status = true;
                    else status = /on/i.test(i.text);
                }
            });
            if (status !== undefined) value = status;
        }
        if (node.type === "atrule" && node.name === "supports") {
            let params = node.params;
            if (params.includes("grid") && params.includes("auto")) value = false;
        }
        if (!node.nodes || value === null) {
            if (node.parent) {
                let isParentGrid = this.gridStatus(node.parent, result);
                if (node.parent._autoprefixerSelfDisabled === true) value = false;
                else value = isParentGrid;
            } else if (typeof this.prefixes.options.grid !== "undefined") value = this.prefixes.options.grid;
            else value = false;
        }
        node._autoprefixerGridStatus = value;
        return value;
    }
}
module.exports = Processor;

},{"bec51482b51f86c3":"blMr1","bff53d7bb385b6bf":"i2bKe","3b438bd3252e3e5e":"b4Ecd"}],"i2bKe":[function(require,module,exports) {
let Prefixer = require("2cb4670115f41c9f");
let OldValue = require("8eb1a399f8edd9e7");
let vendor = require("39bd7b8317aa31b0");
let utils = require("83cead24abc4c3cd");
class Value extends Prefixer {
    /**
   * Clone decl for each prefixed values
   */ static save(prefixes, decl) {
        let prop = decl.prop;
        let result = [];
        for(let prefix in decl._autoprefixerValues){
            let value = decl._autoprefixerValues[prefix];
            if (value === decl.value) continue;
            let item;
            let propPrefix = vendor.prefix(prop);
            if (propPrefix === "-pie-") continue;
            if (propPrefix === prefix) {
                item = decl.value = value;
                result.push(item);
                continue;
            }
            let prefixed = prefixes.prefixed(prop, prefix);
            let rule = decl.parent;
            if (!rule.every((i)=>i.prop !== prefixed)) {
                result.push(item);
                continue;
            }
            let trimmed = value.replace(/\s+/, " ");
            let already = rule.some((i)=>i.prop === decl.prop && i.value.replace(/\s+/, " ") === trimmed);
            if (already) {
                result.push(item);
                continue;
            }
            let cloned = this.clone(decl, {
                value
            });
            item = decl.parent.insertBefore(decl, cloned);
            result.push(item);
        }
        return result;
    }
    /**
   * Is declaration need to be prefixed
   */ check(decl) {
        let value = decl.value;
        if (!value.includes(this.name)) return false;
        return !!value.match(this.regexp());
    }
    /**
   * Lazy regexp loading
   */ regexp() {
        return this.regexpCache || (this.regexpCache = utils.regexp(this.name));
    }
    /**
   * Add prefix to values in string
   */ replace(string, prefix) {
        return string.replace(this.regexp(), `$1${prefix}$2`);
    }
    /**
   * Get value with comments if it was not changed
   */ value(decl) {
        if (decl.raws.value && decl.raws.value.value === decl.value) return decl.raws.value.raw;
        else return decl.value;
    }
    /**
   * Save values with next prefixed token
   */ add(decl, prefix) {
        if (!decl._autoprefixerValues) decl._autoprefixerValues = {};
        let value = decl._autoprefixerValues[prefix] || this.value(decl);
        let before;
        do {
            before = value;
            value = this.replace(value, prefix);
            if (value === false) return;
        }while (value !== before);
        decl._autoprefixerValues[prefix] = value;
    }
    /**
   * Return function to fast find prefixed value
   */ old(prefix) {
        return new OldValue(this.name, prefix + this.name);
    }
}
module.exports = Value;

},{"2cb4670115f41c9f":"6bcfc","8eb1a399f8edd9e7":"9k0Aa","39bd7b8317aa31b0":"926uR","83cead24abc4c3cd":"j2sRV"}],"9k0Aa":[function(require,module,exports) {
let utils = require("f860da7b7c47e812");
class OldValue {
    constructor(unprefixed, prefixed, string, regexp){
        this.unprefixed = unprefixed;
        this.prefixed = prefixed;
        this.string = string || prefixed;
        this.regexp = regexp || utils.regexp(prefixed);
    }
    /**
   * Check, that value contain old value
   */ check(value) {
        if (value.includes(this.string)) return !!value.match(this.regexp);
        return false;
    }
}
module.exports = OldValue;

},{"f860da7b7c47e812":"j2sRV"}],"b4Ecd":[function(require,module,exports) {
let parser = require("a891bc712a0603e1");
let list = require("c95c3c13e4db8500").list;
let uniq = require("9f22ee0a1315be58").uniq;
let escapeRegexp = require("9f22ee0a1315be58").escapeRegexp;
let splitSelector = require("9f22ee0a1315be58").splitSelector;
function convert(value) {
    if (value && value.length === 2 && value[0] === "span" && parseInt(value[1], 10) > 0) return [
        false,
        parseInt(value[1], 10)
    ];
    if (value && value.length === 1 && parseInt(value[0], 10) > 0) return [
        parseInt(value[0], 10),
        false
    ];
    return [
        false,
        false
    ];
}
exports.translate = translate;
function translate(values, startIndex, endIndex) {
    let startValue = values[startIndex];
    let endValue = values[endIndex];
    if (!startValue) return [
        false,
        false
    ];
    let [start, spanStart] = convert(startValue);
    let [end, spanEnd] = convert(endValue);
    if (start && !endValue) return [
        start,
        false
    ];
    if (spanStart && end) return [
        end - spanStart,
        spanStart
    ];
    if (start && spanEnd) return [
        start,
        spanEnd
    ];
    if (start && end) return [
        start,
        end - start
    ];
    return [
        false,
        false
    ];
}
exports.parse = parse;
function parse(decl) {
    let node = parser(decl.value);
    let values = [];
    let current = 0;
    values[current] = [];
    for (let i of node.nodes){
        if (i.type === "div") {
            current += 1;
            values[current] = [];
        } else if (i.type === "word") values[current].push(i.value);
    }
    return values;
}
exports.insertDecl = insertDecl;
function insertDecl(decl, prop, value) {
    if (value && !decl.parent.some((i)=>i.prop === `-ms-${prop}`)) decl.cloneBefore({
        prop: `-ms-${prop}`,
        value: value.toString()
    });
}
// Track transforms
exports.prefixTrackProp = prefixTrackProp;
function prefixTrackProp({ prop, prefix }) {
    return prefix + prop.replace("template-", "");
}
function transformRepeat({ nodes }, { gap }) {
    let { count, size } = nodes.reduce((result, node)=>{
        if (node.type === "div" && node.value === ",") result.key = "size";
        else result[result.key].push(parser.stringify(node));
        return result;
    }, {
        key: "count",
        size: [],
        count: []
    });
    // insert gap values
    if (gap) {
        size = size.filter((i)=>i.trim());
        let val = [];
        for(let i = 1; i <= count; i++)size.forEach((item, index)=>{
            if (index > 0 || i > 1) val.push(gap);
            val.push(item);
        });
        return val.join(" ");
    }
    return `(${size.join("")})[${count.join("")}]`;
}
exports.prefixTrackValue = prefixTrackValue;
function prefixTrackValue({ value, gap }) {
    let result = parser(value).nodes.reduce((nodes, node)=>{
        if (node.type === "function" && node.value === "repeat") return nodes.concat({
            type: "word",
            value: transformRepeat(node, {
                gap
            })
        });
        if (gap && node.type === "space") return nodes.concat({
            type: "space",
            value: " "
        }, {
            type: "word",
            value: gap
        }, node);
        return nodes.concat(node);
    }, []);
    return parser.stringify(result);
}
// Parse grid-template-areas
let DOTS = /^\.+$/;
function track(start, end) {
    return {
        start,
        end,
        span: end - start
    };
}
function getColumns(line) {
    return line.trim().split(/\s+/g);
}
exports.parseGridAreas = parseGridAreas;
function parseGridAreas({ rows, gap }) {
    return rows.reduce((areas, line, rowIndex)=>{
        if (gap.row) rowIndex *= 2;
        if (line.trim() === "") return areas;
        getColumns(line).forEach((area, columnIndex)=>{
            if (DOTS.test(area)) return;
            if (gap.column) columnIndex *= 2;
            if (typeof areas[area] === "undefined") areas[area] = {
                column: track(columnIndex + 1, columnIndex + 2),
                row: track(rowIndex + 1, rowIndex + 2)
            };
            else {
                let { column, row } = areas[area];
                column.start = Math.min(column.start, columnIndex + 1);
                column.end = Math.max(column.end, columnIndex + 2);
                column.span = column.end - column.start;
                row.start = Math.min(row.start, rowIndex + 1);
                row.end = Math.max(row.end, rowIndex + 2);
                row.span = row.end - row.start;
            }
        });
        return areas;
    }, {});
}
// Parse grid-template
function testTrack(node) {
    return node.type === "word" && /^\[.+]$/.test(node.value);
}
function verifyRowSize(result) {
    if (result.areas.length > result.rows.length) result.rows.push("auto");
    return result;
}
exports.parseTemplate = parseTemplate;
function parseTemplate({ decl, gap }) {
    let gridTemplate = parser(decl.value).nodes.reduce((result, node)=>{
        let { type, value } = node;
        if (testTrack(node) || type === "space") return result;
        // area
        if (type === "string") {
            result = verifyRowSize(result);
            result.areas.push(value);
        }
        // values and function
        if (type === "word" || type === "function") result[result.key].push(parser.stringify(node));
        // divider(/)
        if (type === "div" && value === "/") {
            result.key = "columns";
            result = verifyRowSize(result);
        }
        return result;
    }, {
        key: "rows",
        columns: [],
        rows: [],
        areas: []
    });
    return {
        areas: parseGridAreas({
            rows: gridTemplate.areas,
            gap
        }),
        columns: prefixTrackValue({
            value: gridTemplate.columns.join(" "),
            gap: gap.column
        }),
        rows: prefixTrackValue({
            value: gridTemplate.rows.join(" "),
            gap: gap.row
        })
    };
}
// Insert parsed grid areas
/**
 * Get an array of -ms- prefixed props and values
 * @param  {Object} [area] area object with column and row data
 * @param  {Boolean} [addRowSpan] should we add grid-column-row value?
 * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?
 * @return {Array<Object>}
 */ function getMSDecls(area, addRowSpan = false, addColumnSpan = false) {
    let result = [
        {
            prop: "-ms-grid-row",
            value: String(area.row.start)
        }
    ];
    if (area.row.span > 1 || addRowSpan) result.push({
        prop: "-ms-grid-row-span",
        value: String(area.row.span)
    });
    result.push({
        prop: "-ms-grid-column",
        value: String(area.column.start)
    });
    if (area.column.span > 1 || addColumnSpan) result.push({
        prop: "-ms-grid-column-span",
        value: String(area.column.span)
    });
    return result;
}
function getParentMedia(parent) {
    if (parent.type === "atrule" && parent.name === "media") return parent;
    if (!parent.parent) return false;
    return getParentMedia(parent.parent);
}
/**
 * change selectors for rules with duplicate grid-areas.
 * @param  {Array<Rule>} rules
 * @param  {Array<String>} templateSelectors
 * @return {Array<Rule>} rules with changed selectors
 */ function changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {
    ruleSelectors = ruleSelectors.map((selector)=>{
        let selectorBySpace = list.space(selector);
        let selectorByComma = list.comma(selector);
        if (selectorBySpace.length > selectorByComma.length) selector = selectorBySpace.slice(-1).join("");
        return selector;
    });
    return ruleSelectors.map((ruleSelector)=>{
        let newSelector = templateSelectors.map((tplSelector, index)=>{
            let space = index === 0 ? "" : " ";
            return `${space}${tplSelector} > ${ruleSelector}`;
        });
        return newSelector;
    });
}
/**
 * check if selector of rules are equal
 * @param  {Rule} ruleA
 * @param  {Rule} ruleB
 * @return {Boolean}
 */ function selectorsEqual(ruleA, ruleB) {
    return ruleA.selectors.some((sel)=>{
        return ruleB.selectors.includes(sel);
    });
}
/**
 * Parse data from all grid-template(-areas) declarations
 * @param  {Root} css css root
 * @return {Object} parsed data
 */ function parseGridTemplatesData(css) {
    let parsed = [];
    // we walk through every grid-template(-areas) declaration and store
    // data with the same area names inside the item
    css.walkDecls(/grid-template(-areas)?$/, (d)=>{
        let rule = d.parent;
        let media = getParentMedia(rule);
        let gap = getGridGap(d);
        let inheritedGap = inheritGridGap(d, gap);
        let { areas } = parseTemplate({
            decl: d,
            gap: inheritedGap || gap
        });
        let areaNames = Object.keys(areas);
        // skip node if it doesn't have areas
        if (areaNames.length === 0) return true;
        // check parsed array for item that include the same area names
        // return index of that item
        let index = parsed.reduce((acc, { allAreas }, idx)=>{
            let hasAreas = allAreas && areaNames.some((area)=>allAreas.includes(area));
            return hasAreas ? idx : acc;
        }, null);
        if (index !== null) {
            // index is found, add the grid-template data to that item
            let { allAreas, rules } = parsed[index];
            // check if rule has no duplicate area names
            let hasNoDuplicates = rules.some((r)=>{
                return r.hasDuplicates === false && selectorsEqual(r, rule);
            });
            let duplicatesFound = false;
            // check need to gather all duplicate area names
            let duplicateAreaNames = rules.reduce((acc, r)=>{
                if (!r.params && selectorsEqual(r, rule)) {
                    duplicatesFound = true;
                    return r.duplicateAreaNames;
                }
                if (!duplicatesFound) areaNames.forEach((name)=>{
                    if (r.areas[name]) acc.push(name);
                });
                return uniq(acc);
            }, []);
            // update grid-row/column-span values for areas with duplicate
            // area names. @see #1084 and #1146
            rules.forEach((r)=>{
                areaNames.forEach((name)=>{
                    let area = r.areas[name];
                    if (area && area.row.span !== areas[name].row.span) areas[name].row.updateSpan = true;
                    if (area && area.column.span !== areas[name].column.span) areas[name].column.updateSpan = true;
                });
            });
            parsed[index].allAreas = uniq([
                ...allAreas,
                ...areaNames
            ]);
            parsed[index].rules.push({
                hasDuplicates: !hasNoDuplicates,
                params: media.params,
                selectors: rule.selectors,
                node: rule,
                duplicateAreaNames,
                areas
            });
        } else // index is NOT found, push the new item to the parsed array
        parsed.push({
            allAreas: areaNames,
            areasCount: 0,
            rules: [
                {
                    hasDuplicates: false,
                    duplicateRules: [],
                    params: media.params,
                    selectors: rule.selectors,
                    node: rule,
                    duplicateAreaNames: [],
                    areas
                }
            ]
        });
        return undefined;
    });
    return parsed;
}
/**
 * insert prefixed grid-area declarations
 * @param  {Root}  css css root
 * @param  {Function} isDisabled check if the rule is disabled
 * @return {void}
 */ exports.insertAreas = insertAreas;
function insertAreas(css, isDisabled) {
    // parse grid-template declarations
    let gridTemplatesData = parseGridTemplatesData(css);
    // return undefined if no declarations found
    if (gridTemplatesData.length === 0) return undefined;
    // we need to store the rules that we will insert later
    let rulesToInsert = {};
    css.walkDecls("grid-area", (gridArea)=>{
        let gridAreaRule = gridArea.parent;
        let hasPrefixedRow = gridAreaRule.first.prop === "-ms-grid-row";
        let gridAreaMedia = getParentMedia(gridAreaRule);
        if (isDisabled(gridArea)) return undefined;
        let gridAreaRuleIndex = css.index(gridAreaMedia || gridAreaRule);
        let value = gridArea.value;
        // found the data that matches grid-area identifier
        let data = gridTemplatesData.filter((d)=>d.allAreas.includes(value))[0];
        if (!data) return true;
        let lastArea = data.allAreas[data.allAreas.length - 1];
        let selectorBySpace = list.space(gridAreaRule.selector);
        let selectorByComma = list.comma(gridAreaRule.selector);
        let selectorIsComplex = selectorBySpace.length > 1 && selectorBySpace.length > selectorByComma.length;
        // prevent doubling of prefixes
        if (hasPrefixedRow) return false;
        // create the empty object with the key as the last area name
        // e.g if we have templates with "a b c" values, "c" will be the last area
        if (!rulesToInsert[lastArea]) rulesToInsert[lastArea] = {};
        let lastRuleIsSet = false;
        // walk through every grid-template rule data
        for (let rule of data.rules){
            let area = rule.areas[value];
            let hasDuplicateName = rule.duplicateAreaNames.includes(value);
            // if we can't find the area name, update lastRule and continue
            if (!area) {
                let lastRule = rulesToInsert[lastArea].lastRule;
                let lastRuleIndex;
                if (lastRule) lastRuleIndex = css.index(lastRule);
                else /* c8 ignore next 2 */ lastRuleIndex = -1;
                if (gridAreaRuleIndex > lastRuleIndex) rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;
                continue;
            }
            // for grid-templates inside media rule we need to create empty
            // array to push prefixed grid-area rules later
            if (rule.params && !rulesToInsert[lastArea][rule.params]) rulesToInsert[lastArea][rule.params] = [];
            if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {
                // grid-template has no duplicates and not inside media rule
                getMSDecls(area, false, false).reverse().forEach((i)=>gridAreaRule.prepend(Object.assign(i, {
                        raws: {
                            between: gridArea.raws.between
                        }
                    })));
                rulesToInsert[lastArea].lastRule = gridAreaRule;
                lastRuleIsSet = true;
            } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {
                // grid-template has duplicates and not inside media rule
                let cloned = gridAreaRule.clone();
                cloned.removeAll();
                getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach((i)=>cloned.prepend(Object.assign(i, {
                        raws: {
                            between: gridArea.raws.between
                        }
                    })));
                cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);
                if (rulesToInsert[lastArea].lastRule) rulesToInsert[lastArea].lastRule.after(cloned);
                rulesToInsert[lastArea].lastRule = cloned;
                lastRuleIsSet = true;
            } else if (rule.hasDuplicates && !rule.params && selectorIsComplex && gridAreaRule.selector.includes(rule.selectors[0])) {
                // grid-template has duplicates and not inside media rule
                // and the selector is complex
                gridAreaRule.walkDecls(/-ms-grid-(row|column)/, (d)=>d.remove());
                getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach((i)=>gridAreaRule.prepend(Object.assign(i, {
                        raws: {
                            between: gridArea.raws.between
                        }
                    })));
            } else if (rule.params) {
                // grid-template is inside media rule
                // if we're inside media rule, we need to store prefixed rules
                // inside rulesToInsert object to be able to preserve the order of media
                // rules and merge them easily
                let cloned = gridAreaRule.clone();
                cloned.removeAll();
                getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach((i)=>cloned.prepend(Object.assign(i, {
                        raws: {
                            between: gridArea.raws.between
                        }
                    })));
                if (rule.hasDuplicates && hasDuplicateName) cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);
                cloned.raws = rule.node.raws;
                if (css.index(rule.node.parent) > gridAreaRuleIndex) // append the prefixed rules right inside media rule
                // with grid-template
                rule.node.parent.append(cloned);
                else // store the rule to insert later
                rulesToInsert[lastArea][rule.params].push(cloned);
                // set new rule as last rule ONLY if we didn't set lastRule for
                // this grid-area before
                if (!lastRuleIsSet) rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;
            }
        }
        return undefined;
    });
    // append stored rules inside the media rules
    Object.keys(rulesToInsert).forEach((area)=>{
        let data = rulesToInsert[area];
        let lastRule = data.lastRule;
        Object.keys(data).reverse().filter((p)=>p !== "lastRule").forEach((params)=>{
            if (data[params].length > 0 && lastRule) {
                lastRule.after({
                    name: "media",
                    params
                });
                lastRule.next().append(data[params]);
            }
        });
    });
    return undefined;
}
/**
 * Warn user if grid area identifiers are not found
 * @param  {Object} areas
 * @param  {Declaration} decl
 * @param  {Result} result
 * @return {void}
 */ exports.warnMissedAreas = warnMissedAreas;
function warnMissedAreas(areas, decl, result) {
    let missed = Object.keys(areas);
    decl.root().walkDecls("grid-area", (gridArea)=>{
        missed = missed.filter((e)=>e !== gridArea.value);
    });
    if (missed.length > 0) decl.warn(result, "Can not find grid areas: " + missed.join(", "));
    return undefined;
}
/**
 * compare selectors with grid-area rule and grid-template rule
 * show warning if grid-template selector is not found
 * (this function used for grid-area rule)
 * @param  {Declaration} decl
 * @param  {Result} result
 * @return {void}
 */ exports.warnTemplateSelectorNotFound = warnTemplateSelectorNotFound;
function warnTemplateSelectorNotFound(decl, result) {
    let rule = decl.parent;
    let root = decl.root();
    let duplicatesFound = false;
    // slice selector array. Remove the last part (for comparison)
    let slicedSelectorArr = list.space(rule.selector).filter((str)=>str !== ">").slice(0, -1);
    // we need to compare only if selector is complex.
    // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex
    if (slicedSelectorArr.length > 0) {
        let gridTemplateFound = false;
        let foundAreaSelector = null;
        root.walkDecls(/grid-template(-areas)?$/, (d)=>{
            let parent = d.parent;
            let templateSelectors = parent.selectors;
            let { areas } = parseTemplate({
                decl: d,
                gap: getGridGap(d)
            });
            let hasArea = areas[decl.value];
            // find the the matching selectors
            for (let tplSelector of templateSelectors){
                if (gridTemplateFound) break;
                let tplSelectorArr = list.space(tplSelector).filter((str)=>str !== ">");
                gridTemplateFound = tplSelectorArr.every((item, idx)=>item === slicedSelectorArr[idx]);
            }
            if (gridTemplateFound || !hasArea) return true;
            if (!foundAreaSelector) foundAreaSelector = parent.selector;
            // if we found the duplicate area with different selector
            if (foundAreaSelector && foundAreaSelector !== parent.selector) duplicatesFound = true;
            return undefined;
        });
        // warn user if we didn't find template
        if (!gridTemplateFound && duplicatesFound) decl.warn(result, "Autoprefixer cannot find a grid-template " + `containing the duplicate grid-area "${decl.value}" ` + `with full selector matching: ${slicedSelectorArr.join(" ")}`);
    }
}
/**
 * warn user if both grid-area and grid-(row|column)
 * declarations are present in the same rule
 * @param  {Declaration} decl
 * @param  {Result} result
 * @return {void}
 */ exports.warnIfGridRowColumnExists = warnIfGridRowColumnExists;
function warnIfGridRowColumnExists(decl, result) {
    let rule = decl.parent;
    let decls = [];
    rule.walkDecls(/^grid-(row|column)/, (d)=>{
        if (!d.prop.endsWith("-end") && !d.value.startsWith("span") && !d.prop.endsWith("-gap")) decls.push(d);
    });
    if (decls.length > 0) decls.forEach((d)=>{
        d.warn(result, "You already have a grid-area declaration present in the rule. " + `You should use either grid-area or ${d.prop}, not both`);
    });
    return undefined;
}
// Gap utils
exports.getGridGap = getGridGap;
function getGridGap(decl) {
    let gap = {};
    // try to find gap
    let testGap = /^(grid-)?((row|column)-)?gap$/;
    decl.parent.walkDecls(testGap, ({ prop, value })=>{
        if (/^(grid-)?gap$/.test(prop)) {
            let [row, , column] = parser(value).nodes;
            gap.row = row && parser.stringify(row);
            gap.column = column ? parser.stringify(column) : gap.row;
        }
        if (/^(grid-)?row-gap$/.test(prop)) gap.row = value;
        if (/^(grid-)?column-gap$/.test(prop)) gap.column = value;
    });
    return gap;
}
/**
 * parse media parameters (for example 'min-width: 500px')
 * @param  {String} params parameter to parse
 * @return {}
 */ function parseMediaParams(params) {
    if (!params) return [];
    let parsed = parser(params);
    let prop;
    let value;
    parsed.walk((node)=>{
        if (node.type === "word" && /min|max/g.test(node.value)) prop = node.value;
        else if (node.value.includes("px")) value = parseInt(node.value.replace(/\D/g, ""));
    });
    return [
        prop,
        value
    ];
}
/**
 * Compare the selectors and decide if we
 * need to inherit gap from compared selector or not.
 * @type {String} selA
 * @type {String} selB
 * @return {Boolean}
 */ function shouldInheritGap(selA, selB) {
    let result;
    // get arrays of selector split in 3-deep array
    let splitSelectorArrA = splitSelector(selA);
    let splitSelectorArrB = splitSelector(selB);
    if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) // abort if selectorA has lower descendant specificity then selectorB
    // (e.g '.grid' and '.hello .world .grid')
    return false;
    else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {
        // if selectorA has higher descendant specificity then selectorB
        // (e.g '.foo .bar .grid' and '.grid')
        let idx = splitSelectorArrA[0].reduce((res, [item], index)=>{
            let firstSelectorPart = splitSelectorArrB[0][0][0];
            if (item === firstSelectorPart) return index;
            return false;
        }, false);
        if (idx) result = splitSelectorArrB[0].every((arr, index)=>{
            return arr.every((part, innerIndex)=>// because selectorA has more space elements, we need to slice
                // selectorA array by 'idx' number to compare them
                splitSelectorArrA[0].slice(idx)[index][innerIndex] === part);
        });
    } else // if selectorA has the same descendant specificity as selectorB
    // this condition covers cases such as: '.grid.foo.bar' and '.grid'
    result = splitSelectorArrB.some((byCommaArr)=>{
        return byCommaArr.every((bySpaceArr, index)=>{
            return bySpaceArr.every((part, innerIndex)=>splitSelectorArrA[0][index][innerIndex] === part);
        });
    });
    return result;
}
/**
 * inherit grid gap values from the closest rule above
 * with the same selector
 * @param  {Declaration} decl
 * @param  {Object} gap gap values
 * @return {Object | Boolean} return gap values or false (if not found)
 */ exports.inheritGridGap = inheritGridGap;
function inheritGridGap(decl, gap) {
    let rule = decl.parent;
    let mediaRule = getParentMedia(rule);
    let root = rule.root();
    // get an array of selector split in 3-deep array
    let splitSelectorArr = splitSelector(rule.selector);
    // abort if the rule already has gaps
    if (Object.keys(gap).length > 0) return false;
    // e.g ['min-width']
    let [prop] = parseMediaParams(mediaRule.params);
    let lastBySpace = splitSelectorArr[0];
    // get escaped value from the selector
    // if we have '.grid-2.foo.bar' selector, will be '\.grid\-2'
    let escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0]);
    let regexp = new RegExp(`(${escaped}$)|(${escaped}[,.])`);
    // find the closest rule with the same selector
    let closestRuleGap;
    root.walkRules(regexp, (r)=>{
        let gridGap;
        // abort if are checking the same rule
        if (rule.toString() === r.toString()) return false;
        // find grid-gap values
        r.walkDecls("grid-gap", (d)=>gridGap = getGridGap(d));
        // skip rule without gaps
        if (!gridGap || Object.keys(gridGap).length === 0) return true;
        // skip rules that should not be inherited from
        if (!shouldInheritGap(rule.selector, r.selector)) return true;
        let media = getParentMedia(r);
        if (media) {
            // if we are inside media, we need to check that media props match
            // e.g ('min-width' === 'min-width')
            let propToCompare = parseMediaParams(media.params)[0];
            if (propToCompare === prop) {
                closestRuleGap = gridGap;
                return true;
            }
        } else {
            closestRuleGap = gridGap;
            return true;
        }
        return undefined;
    });
    // if we find the closest gap object
    if (closestRuleGap && Object.keys(closestRuleGap).length > 0) return closestRuleGap;
    return false;
}
exports.warnGridGap = warnGridGap;
function warnGridGap({ gap, hasColumns, decl, result }) {
    let hasBothGaps = gap.row && gap.column;
    if (!hasColumns && (hasBothGaps || gap.column && !gap.row)) {
        delete gap.column;
        decl.warn(result, "Can not implement grid-gap without grid-template-columns");
    }
}
/**
 * normalize the grid-template-rows/columns values
 * @param  {String} str grid-template-rows/columns value
 * @return {Array} normalized array with values
 * @example
 * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')
 * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']
 */ function normalizeRowColumn(str) {
    let normalized = parser(str).nodes.reduce((result, node)=>{
        if (node.type === "function" && node.value === "repeat") {
            let key = "count";
            let [count, value] = node.nodes.reduce((acc, n)=>{
                if (n.type === "word" && key === "count") {
                    acc[0] = Math.abs(parseInt(n.value));
                    return acc;
                }
                if (n.type === "div" && n.value === ",") {
                    key = "value";
                    return acc;
                }
                if (key === "value") acc[1] += parser.stringify(n);
                return acc;
            }, [
                0,
                ""
            ]);
            if (count) for(let i = 0; i < count; i++)result.push(value);
            return result;
        }
        if (node.type === "space") return result;
        return result.concat(parser.stringify(node));
    }, []);
    return normalized;
}
exports.autoplaceGridItems = autoplaceGridItems;
/**
 * Autoplace grid items
 * @param {Declaration} decl
 * @param {Result} result
 * @param {Object} gap gap values
 * @param {String} autoflowValue grid-auto-flow value
 * @return {void}
 * @see https://github.com/postcss/autoprefixer/issues/1148
 */ function autoplaceGridItems(decl, result, gap, autoflowValue = "row") {
    let { parent } = decl;
    let rowDecl = parent.nodes.find((i)=>i.prop === "grid-template-rows");
    let rows = normalizeRowColumn(rowDecl.value);
    let columns = normalizeRowColumn(decl.value);
    // Build array of area names with dummy values. If we have 3 columns and
    // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']
    let filledRows = rows.map((_, rowIndex)=>{
        return Array.from({
            length: columns.length
        }, (v, k)=>k + rowIndex * columns.length + 1).join(" ");
    });
    let areas = parseGridAreas({
        rows: filledRows,
        gap
    });
    let keys = Object.keys(areas);
    let items = keys.map((i)=>areas[i]);
    // Change the order of cells if grid-auto-flow value is 'column'
    if (autoflowValue.includes("column")) items = items.sort((a, b)=>a.column.start - b.column.start);
    // Insert new rules
    items.reverse().forEach((item, index)=>{
        let { column, row } = item;
        let nodeSelector = parent.selectors.map((sel)=>sel + ` > *:nth-child(${keys.length - index})`).join(", ");
        // create new rule
        let node = parent.clone().removeAll();
        // change rule selector
        node.selector = nodeSelector;
        // insert prefixed row/column values
        node.append({
            prop: "-ms-grid-row",
            value: row.start
        });
        node.append({
            prop: "-ms-grid-column",
            value: column.start
        });
        // insert rule
        parent.after(node);
    });
    return undefined;
}

},{"a891bc712a0603e1":"blMr1","c95c3c13e4db8500":"gauyy","9f22ee0a1315be58":"j2sRV"}],"cjWll":[function(require,module,exports) {
let featureQueries = require("3513c82b2e4cdd15");
let feature = require("52cef2e69e5fb2c5");
let { parse } = require("fa6b47a9febaaac8");
let Browsers = require("d2025c2406fbca0a");
let brackets = require("a683604b4b5f9c0f");
let Value = require("e8dd5f73e9c22775");
let utils = require("ddb94a243e928a61");
let data = feature(featureQueries);
let supported = [];
for(let browser in data.stats){
    let versions = data.stats[browser];
    for(let version in versions){
        let support = versions[version];
        if (/y/.test(support)) supported.push(browser + " " + version);
    }
}
class Supports {
    constructor(Prefixes, all){
        this.Prefixes = Prefixes;
        this.all = all;
    }
    /**
   * Return prefixer only with @supports supported browsers
   */ prefixer() {
        if (this.prefixerCache) return this.prefixerCache;
        let filtered = this.all.browsers.selected.filter((i)=>{
            return supported.includes(i);
        });
        let browsers = new Browsers(this.all.browsers.data, filtered, this.all.options);
        this.prefixerCache = new this.Prefixes(this.all.data, browsers, this.all.options);
        return this.prefixerCache;
    }
    /**
   * Parse string into declaration property and value
   */ parse(str) {
        let parts = str.split(":");
        let prop = parts[0];
        let value = parts[1];
        if (!value) value = "";
        return [
            prop.trim(),
            value.trim()
        ];
    }
    /**
   * Create virtual rule to process it by prefixer
   */ virtual(str) {
        let [prop, value] = this.parse(str);
        let rule = parse("a{}").first;
        rule.append({
            prop,
            value,
            raws: {
                before: ""
            }
        });
        return rule;
    }
    /**
   * Return array of Declaration with all necessary prefixes
   */ prefixed(str) {
        let rule = this.virtual(str);
        if (this.disabled(rule.first)) return rule.nodes;
        let result = {
            warn: ()=>null
        };
        let prefixer = this.prefixer().add[rule.first.prop];
        prefixer && prefixer.process && prefixer.process(rule.first, result);
        for (let decl of rule.nodes){
            for (let value of this.prefixer().values("add", rule.first.prop))value.process(decl);
            Value.save(this.all, decl);
        }
        return rule.nodes;
    }
    /**
   * Return true if brackets node is "not" word
   */ isNot(node) {
        return typeof node === "string" && /not\s*/i.test(node);
    }
    /**
   * Return true if brackets node is "or" word
   */ isOr(node) {
        return typeof node === "string" && /\s*or\s*/i.test(node);
    }
    /**
   * Return true if brackets node is (prop: value)
   */ isProp(node) {
        return typeof node === "object" && node.length === 1 && typeof node[0] === "string";
    }
    /**
   * Return true if prefixed property has no unprefixed
   */ isHack(all, unprefixed) {
        let check = new RegExp(`(\\(|\\s)${utils.escapeRegexp(unprefixed)}:`);
        return !check.test(all);
    }
    /**
   * Return true if we need to remove node
   */ toRemove(str, all) {
        let [prop, value] = this.parse(str);
        let unprefixed = this.all.unprefixed(prop);
        let cleaner = this.all.cleaner();
        if (cleaner.remove[prop] && cleaner.remove[prop].remove && !this.isHack(all, unprefixed)) return true;
        for (let checker of cleaner.values("remove", unprefixed)){
            if (checker.check(value)) return true;
        }
        return false;
    }
    /**
   * Remove all unnecessary prefixes
   */ remove(nodes, all) {
        let i = 0;
        while(i < nodes.length){
            if (!this.isNot(nodes[i - 1]) && this.isProp(nodes[i]) && this.isOr(nodes[i + 1])) {
                if (this.toRemove(nodes[i][0], all)) {
                    nodes.splice(i, 2);
                    continue;
                }
                i += 2;
                continue;
            }
            if (typeof nodes[i] === "object") nodes[i] = this.remove(nodes[i], all);
            i += 1;
        }
        return nodes;
    }
    /**
   * Clean brackets with one child
   */ cleanBrackets(nodes) {
        return nodes.map((i)=>{
            if (typeof i !== "object") return i;
            if (i.length === 1 && typeof i[0] === "object") return this.cleanBrackets(i[0]);
            return this.cleanBrackets(i);
        });
    }
    /**
   * Add " or " between properties and convert it to brackets format
   */ convert(progress) {
        let result = [
            ""
        ];
        for (let i of progress){
            result.push([
                `${i.prop}: ${i.value}`
            ]);
            result.push(" or ");
        }
        result[result.length - 1] = "";
        return result;
    }
    /**
   * Compress value functions into a string nodes
   */ normalize(nodes) {
        if (typeof nodes !== "object") return nodes;
        nodes = nodes.filter((i)=>i !== "");
        if (typeof nodes[0] === "string") {
            let firstNode = nodes[0].trim();
            if (firstNode.includes(":") || firstNode === "selector" || firstNode === "not selector") return [
                brackets.stringify(nodes)
            ];
        }
        return nodes.map((i)=>this.normalize(i));
    }
    /**
   * Add prefixes
   */ add(nodes, all) {
        return nodes.map((i)=>{
            if (this.isProp(i)) {
                let prefixed = this.prefixed(i[0]);
                if (prefixed.length > 1) return this.convert(prefixed);
                return i;
            }
            if (typeof i === "object") return this.add(i, all);
            return i;
        });
    }
    /**
   * Add prefixed declaration
   */ process(rule) {
        let ast = brackets.parse(rule.params);
        ast = this.normalize(ast);
        ast = this.remove(ast, rule.params);
        ast = this.add(ast, rule.params);
        ast = this.cleanBrackets(ast);
        rule.params = brackets.stringify(ast);
    }
    /**
   * Check global options
   */ disabled(node) {
        if (!this.all.options.grid) {
            if (node.prop === "display" && node.value.includes("grid")) return true;
            if (node.prop.includes("grid") || node.prop === "justify-items") return true;
        }
        if (this.all.options.flexbox === false) {
            if (node.prop === "display" && node.value.includes("flex")) return true;
            let other = [
                "order",
                "justify-content",
                "align-items",
                "align-content"
            ];
            if (node.prop.includes("flex") || other.includes(node.prop)) return true;
        }
        return false;
    }
}
module.exports = Supports;

},{"3513c82b2e4cdd15":"eURwk","52cef2e69e5fb2c5":"8Fe8m","fa6b47a9febaaac8":"gauyy","d2025c2406fbca0a":"dGs5H","a683604b4b5f9c0f":"fBvJC","e8dd5f73e9c22775":"i2bKe","ddb94a243e928a61":"j2sRV"}],"eURwk":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "1 2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 HC wB I y J E F G A B C K L H M N O z i IC JC"
        },
        D: {
            "1": "7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 I y J E F G A B C K L H M N O z i"
        },
        E: {
            "1": "G A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J E F LC 2B MC NC OC"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h uB",
            "2": "G B C UC VC WC XC tB EC YC"
        },
        G: {
            "1": "eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "F 2B ZC FC aC bC cC dC"
        },
        H: {
            "1": "tC"
        },
        I: {
            "1": "D yC zC",
            "2": "wB I uC vC wC xC FC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "CSS Feature Queries"
};

},{}],"8Fe8m":[function(require,module,exports) {
"use strict";
const statuses = require("6049d9f006090ec1");
const supported = require("6829894733354f96");
const browsers = require("e087109c7d9f75af").browsers;
const versions = require("534ad0cd8ef5d61f").browserVersions;
const MATH2LOG = Math.log(2);
function unpackSupport(cipher) {
    // bit flags
    let stats = Object.keys(supported).reduce((list, support)=>{
        if (cipher & supported[support]) list.push(support);
        return list;
    }, []);
    // notes
    let notes = cipher >> 7;
    let notesArray = [];
    while(notes){
        let note = Math.floor(Math.log(notes) / MATH2LOG) + 1;
        notesArray.unshift(`#${note}`);
        notes -= Math.pow(2, note - 1);
    }
    return stats.concat(notesArray).join(" ");
}
function unpackFeature(packed) {
    let unpacked = {
        status: statuses[packed.B],
        title: packed.C
    };
    unpacked.stats = Object.keys(packed.A).reduce((browserStats, key)=>{
        let browser = packed.A[key];
        browserStats[browsers[key]] = Object.keys(browser).reduce((stats, support)=>{
            let packedVersions = browser[support].split(" ");
            let unpacked2 = unpackSupport(support);
            packedVersions.forEach((v)=>stats[versions[v]] = unpacked2);
            return stats;
        }, {});
        return browserStats;
    }, {});
    return unpacked;
}
module.exports = unpackFeature;
module.exports.default = unpackFeature;

},{"6049d9f006090ec1":"2ZxWW","6829894733354f96":"dMYWv","e087109c7d9f75af":"1klRD","534ad0cd8ef5d61f":"gSgrO"}],"2ZxWW":[function(require,module,exports) {
module.exports = {
    1: "ls",
    2: "rec",
    3: "pr",
    4: "cr",
    5: "wd",
    6: "other",
    7: "unoff" // Unofficial, Editor's Draft or W3C "Note"
};

},{}],"dMYWv":[function(require,module,exports) {
module.exports = {
    y: 1,
    n: 2,
    a: 4,
    p: 8,
    u: 16,
    x: 32,
    d: 64
};

},{}],"fBvJC":[function(require,module,exports) {
function last(array) {
    return array[array.length - 1];
}
let brackets = {
    /**
   * Parse string to nodes tree
   */ parse (str) {
        let current = [
            ""
        ];
        let stack = [
            current
        ];
        for (let sym of str){
            if (sym === "(") {
                current = [
                    ""
                ];
                last(stack).push(current);
                stack.push(current);
                continue;
            }
            if (sym === ")") {
                stack.pop();
                current = last(stack);
                current.push("");
                continue;
            }
            current[current.length - 1] += sym;
        }
        return stack[0];
    },
    /**
   * Generate output string by nodes tree
   */ stringify (ast) {
        let result = "";
        for (let i of ast){
            if (typeof i === "object") {
                result += `(${brackets.stringify(i)})`;
                continue;
            }
            result += i;
        }
        return result;
    }
};
module.exports = brackets;

},{}],"lFkyP":[function(require,module,exports) {
let { list } = require("7b552ea9446bc2bc");
let OldSelector = require("342f993faec02e89");
let Prefixer = require("9d478dd5398b03d6");
let Browsers = require("a94ed2f3211e3b18");
let utils = require("6c02944623c45270");
class Selector extends Prefixer {
    constructor(name, prefixes, all){
        super(name, prefixes, all);
        this.regexpCache = new Map();
    }
    /**
   * Is rule selectors need to be prefixed
   */ check(rule) {
        if (rule.selector.includes(this.name)) return !!rule.selector.match(this.regexp());
        return false;
    }
    /**
   * Return prefixed version of selector
   */ prefixed(prefix) {
        return this.name.replace(/^(\W*)/, `$1${prefix}`);
    }
    /**
   * Lazy loadRegExp for name
   */ regexp(prefix) {
        if (!this.regexpCache.has(prefix)) {
            let name = prefix ? this.prefixed(prefix) : this.name;
            this.regexpCache.set(prefix, new RegExp(`(^|[^:"'=])${utils.escapeRegexp(name)}`, "gi"));
        }
        return this.regexpCache.get(prefix);
    }
    /**
   * All possible prefixes
   */ possible() {
        return Browsers.prefixes();
    }
    /**
   * Return all possible selector prefixes
   */ prefixeds(rule) {
        if (rule._autoprefixerPrefixeds) {
            if (rule._autoprefixerPrefixeds[this.name]) return rule._autoprefixerPrefixeds;
        } else rule._autoprefixerPrefixeds = {};
        let prefixeds = {};
        if (rule.selector.includes(",")) {
            let ruleParts = list.comma(rule.selector);
            let toProcess = ruleParts.filter((el)=>el.includes(this.name));
            for (let prefix of this.possible())prefixeds[prefix] = toProcess.map((el)=>this.replace(el, prefix)).join(", ");
        } else for (let prefix of this.possible())prefixeds[prefix] = this.replace(rule.selector, prefix);
        rule._autoprefixerPrefixeds[this.name] = prefixeds;
        return rule._autoprefixerPrefixeds;
    }
    /**
   * Is rule already prefixed before
   */ already(rule, prefixeds, prefix) {
        let index = rule.parent.index(rule) - 1;
        while(index >= 0){
            let before = rule.parent.nodes[index];
            if (before.type !== "rule") return false;
            let some = false;
            for(let key in prefixeds[this.name]){
                let prefixed = prefixeds[this.name][key];
                if (before.selector === prefixed) {
                    if (prefix === key) return true;
                    else {
                        some = true;
                        break;
                    }
                }
            }
            if (!some) return false;
            index -= 1;
        }
        return false;
    }
    /**
   * Replace selectors by prefixed one
   */ replace(selector, prefix) {
        return selector.replace(this.regexp(), `$1${this.prefixed(prefix)}`);
    }
    /**
   * Clone and add prefixes for at-rule
   */ add(rule, prefix) {
        let prefixeds = this.prefixeds(rule);
        if (this.already(rule, prefixeds, prefix)) return;
        let cloned = this.clone(rule, {
            selector: prefixeds[this.name][prefix]
        });
        rule.parent.insertBefore(rule, cloned);
    }
    /**
   * Return function to fast find prefixed selector
   */ old(prefix) {
        return new OldSelector(this, prefix);
    }
}
module.exports = Selector;

},{"7b552ea9446bc2bc":"gauyy","342f993faec02e89":"dh6iT","9d478dd5398b03d6":"6bcfc","a94ed2f3211e3b18":"dGs5H","6c02944623c45270":"j2sRV"}],"dh6iT":[function(require,module,exports) {
class OldSelector {
    constructor(selector, prefix){
        this.prefix = prefix;
        this.prefixed = selector.prefixed(this.prefix);
        this.regexp = selector.regexp(this.prefix);
        this.prefixeds = selector.possible().map((x)=>[
                selector.prefixed(x),
                selector.regexp(x)
            ]);
        this.unprefixed = selector.name;
        this.nameRegexp = selector.regexp();
    }
    /**
   * Is rule a hack without unprefixed version bottom
   */ isHack(rule) {
        let index = rule.parent.index(rule) + 1;
        let rules = rule.parent.nodes;
        while(index < rules.length){
            let before = rules[index].selector;
            if (!before) return true;
            if (before.includes(this.unprefixed) && before.match(this.nameRegexp)) return false;
            let some = false;
            for (let [string, regexp] of this.prefixeds)if (before.includes(string) && before.match(regexp)) {
                some = true;
                break;
            }
            if (!some) return true;
            index += 1;
        }
        return true;
    }
    /**
   * Does rule contain an unnecessary prefixed selector
   */ check(rule) {
        if (!rule.selector.includes(this.prefixed)) return false;
        if (!rule.selector.match(this.regexp)) return false;
        if (this.isHack(rule)) return false;
        return true;
    }
}
module.exports = OldSelector;

},{}],"ixGmX":[function(require,module,exports) {
let Prefixer = require("51d00360ce5ac52d");
class AtRule extends Prefixer {
    /**
   * Clone and add prefixes for at-rule
   */ add(rule, prefix) {
        let prefixed = prefix + rule.name;
        let already = rule.parent.some((i)=>i.name === prefixed && i.params === rule.params);
        if (already) return undefined;
        let cloned = this.clone(rule, {
            name: prefixed
        });
        return rule.parent.insertBefore(rule, cloned);
    }
    /**
   * Clone node with prefixes
   */ process(node) {
        let parent = this.parentPrefix(node);
        for (let prefix of this.prefixes)if (!parent || parent === prefix) this.add(node, prefix);
    }
}
module.exports = AtRule;

},{"51d00360ce5ac52d":"6bcfc"}],"21WlU":[function(require,module,exports) {
let Selector = require("39ea6f4ad3340730");
class Fullscreen extends Selector {
    /**
   * Return different selectors depend on prefix
   */ prefixed(prefix) {
        if (prefix === "-webkit-") return ":-webkit-full-screen";
        if (prefix === "-moz-") return ":-moz-full-screen";
        return `:${prefix}fullscreen`;
    }
}
Fullscreen.names = [
    ":fullscreen"
];
module.exports = Fullscreen;

},{"39ea6f4ad3340730":"lFkyP"}],"bfROY":[function(require,module,exports) {
let Selector = require("d86017aa14cf66a1");
class Placeholder extends Selector {
    /**
   * Add old mozilla to possible prefixes
   */ possible() {
        return super.possible().concat([
            "-moz- old",
            "-ms- old"
        ]);
    }
    /**
   * Return different selectors depend on prefix
   */ prefixed(prefix) {
        if (prefix === "-webkit-") return "::-webkit-input-placeholder";
        if (prefix === "-ms-") return "::-ms-input-placeholder";
        if (prefix === "-ms- old") return ":-ms-input-placeholder";
        if (prefix === "-moz- old") return ":-moz-placeholder";
        return `::${prefix}placeholder`;
    }
}
Placeholder.names = [
    "::placeholder"
];
module.exports = Placeholder;

},{"d86017aa14cf66a1":"lFkyP"}],"04bRS":[function(require,module,exports) {
let Selector = require("1252579d5666dabf");
class PlaceholderShown extends Selector {
    /**
   * Return different selectors depend on prefix
   */ prefixed(prefix) {
        if (prefix === "-ms-") return ":-ms-input-placeholder";
        return `:${prefix}placeholder-shown`;
    }
}
PlaceholderShown.names = [
    ":placeholder-shown"
];
module.exports = PlaceholderShown;

},{"1252579d5666dabf":"lFkyP"}],"ceDQf":[function(require,module,exports) {
let Selector = require("f67ecbea45639841");
let utils = require("e1d7889c7572c472");
class FileSelectorButton extends Selector {
    constructor(name, prefixes, all){
        super(name, prefixes, all);
        if (this.prefixes) this.prefixes = utils.uniq(this.prefixes.map(()=>"-webkit-"));
    }
    /**
   * Return different selectors depend on prefix
   */ prefixed(prefix) {
        if (prefix === "-webkit-") return "::-webkit-file-upload-button";
        return `::${prefix}file-selector-button`;
    }
}
FileSelectorButton.names = [
    "::file-selector-button"
];
module.exports = FileSelectorButton;

},{"f67ecbea45639841":"lFkyP","e1d7889c7572c472":"j2sRV"}],"5MJC9":[function(require,module,exports) {
let list = require("3facb4602d301d95").list;
let flexSpec = require("145580568d472101");
let Declaration = require("f2813ce7ee0060e7");
class Flex extends Declaration {
    /**
   * Change property name for 2009 spec
   */ prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) return prefix + "box-flex";
        return super.prefixed(prop, prefix);
    }
    /**
   * Return property name by final spec
   */ normalize() {
        return "flex";
    }
    /**
   * Spec 2009 supports only first argument
   * Spec 2012 disallows unitless basis
   */ set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2009) {
            decl.value = list.space(decl.value)[0];
            decl.value = Flex.oldValues[decl.value] || decl.value;
            return super.set(decl, prefix);
        }
        if (spec === 2012) {
            let components = list.space(decl.value);
            if (components.length === 3 && components[2] === "0") decl.value = components.slice(0, 2).concat("0px").join(" ");
        }
        return super.set(decl, prefix);
    }
}
Flex.names = [
    "flex",
    "box-flex"
];
Flex.oldValues = {
    auto: "1",
    none: "0"
};
module.exports = Flex;

},{"3facb4602d301d95":"gauyy","145580568d472101":"at1Im","f2813ce7ee0060e7":"eJRSt"}],"at1Im":[function(require,module,exports) {
/**
 * Return flexbox spec versions by prefix
 */ module.exports = function(prefix) {
    let spec;
    if (prefix === "-webkit- 2009" || prefix === "-moz-") spec = 2009;
    else if (prefix === "-ms-") spec = 2012;
    else if (prefix === "-webkit-") spec = "final";
    if (prefix === "-webkit- 2009") prefix = "-webkit-";
    return [
        spec,
        prefix
    ];
};

},{}],"kLOI0":[function(require,module,exports) {
let flexSpec = require("6b216798b3a9dd6f");
let Declaration = require("12904640d1a0fc79");
class Order extends Declaration {
    /**
   * Change property name for 2009 and 2012 specs
   */ prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) return prefix + "box-ordinal-group";
        if (spec === 2012) return prefix + "flex-order";
        return super.prefixed(prop, prefix);
    }
    /**
   * Return property name by final spec
   */ normalize() {
        return "order";
    }
    /**
   * Fix value for 2009 spec
   */ set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2009 && /\d/.test(decl.value)) {
            decl.value = (parseInt(decl.value) + 1).toString();
            return super.set(decl, prefix);
        }
        return super.set(decl, prefix);
    }
}
Order.names = [
    "order",
    "flex-order",
    "box-ordinal-group"
];
module.exports = Order;

},{"6b216798b3a9dd6f":"at1Im","12904640d1a0fc79":"eJRSt"}],"gsORo":[function(require,module,exports) {
let Declaration = require("82856f3d55f8a353");
class Filter extends Declaration {
    /**
   * Check is it Internet Explorer filter
   */ check(decl) {
        let v = decl.value;
        return !v.toLowerCase().includes("alpha(") && !v.includes("DXImageTransform.Microsoft") && !v.includes("data:image/svg+xml");
    }
}
Filter.names = [
    "filter"
];
module.exports = Filter;

},{"82856f3d55f8a353":"eJRSt"}],"cfQIf":[function(require,module,exports) {
let Declaration = require("2f2a0c9e35423c30");
let { isPureNumber } = require("4f783e63d3e1379");
class GridEnd extends Declaration {
    /**
   * Change repeating syntax for IE
   */ insert(decl, prefix, prefixes, result) {
        if (prefix !== "-ms-") return super.insert(decl, prefix, prefixes);
        let clonedDecl = this.clone(decl);
        let startProp = decl.prop.replace(/end$/, "start");
        let spanProp = prefix + decl.prop.replace(/end$/, "span");
        if (decl.parent.some((i)=>i.prop === spanProp)) return undefined;
        clonedDecl.prop = spanProp;
        if (decl.value.includes("span")) clonedDecl.value = decl.value.replace(/span\s/i, "");
        else {
            let startDecl;
            decl.parent.walkDecls(startProp, (d)=>{
                startDecl = d;
            });
            if (startDecl) {
                if (isPureNumber(startDecl.value)) {
                    let value = Number(decl.value) - Number(startDecl.value) + "";
                    clonedDecl.value = value;
                } else return undefined;
            } else decl.warn(result, `Can not prefix ${decl.prop} (${startProp} is not found)`);
        }
        decl.cloneBefore(clonedDecl);
        return undefined;
    }
}
GridEnd.names = [
    "grid-row-end",
    "grid-column-end"
];
module.exports = GridEnd;

},{"2f2a0c9e35423c30":"eJRSt","4f783e63d3e1379":"j2sRV"}],"d89n7":[function(require,module,exports) {
let Declaration = require("bb1231c913fbb30f");
class Animation extends Declaration {
    /**
   * Don’t add prefixes for modern values.
   */ check(decl) {
        return !decl.value.split(/\s+/).some((i)=>{
            let lower = i.toLowerCase();
            return lower === "reverse" || lower === "alternate-reverse";
        });
    }
}
Animation.names = [
    "animation",
    "animation-direction"
];
module.exports = Animation;

},{"bb1231c913fbb30f":"eJRSt"}],"k7XCm":[function(require,module,exports) {
let flexSpec = require("b600b8cdbe9297c7");
let Declaration = require("929da8da3c8e219d");
class FlexFlow extends Declaration {
    /**
   * Use two properties for 2009 spec
   */ insert(decl, prefix, prefixes) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec !== 2009) return super.insert(decl, prefix, prefixes);
        let values = decl.value.split(/\s+/).filter((i)=>i !== "wrap" && i !== "nowrap" && "wrap-reverse");
        if (values.length === 0) return undefined;
        let already = decl.parent.some((i)=>i.prop === prefix + "box-orient" || i.prop === prefix + "box-direction");
        if (already) return undefined;
        let value = values[0];
        let orient = value.includes("row") ? "horizontal" : "vertical";
        let dir = value.includes("reverse") ? "reverse" : "normal";
        let cloned = this.clone(decl);
        cloned.prop = prefix + "box-orient";
        cloned.value = orient;
        if (this.needCascade(decl)) cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        decl.parent.insertBefore(decl, cloned);
        cloned = this.clone(decl);
        cloned.prop = prefix + "box-direction";
        cloned.value = dir;
        if (this.needCascade(decl)) cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        return decl.parent.insertBefore(decl, cloned);
    }
}
FlexFlow.names = [
    "flex-flow",
    "box-direction",
    "box-orient"
];
module.exports = FlexFlow;

},{"b600b8cdbe9297c7":"at1Im","929da8da3c8e219d":"eJRSt"}],"dOvfz":[function(require,module,exports) {
let flexSpec = require("e7daf33de4552635");
let Declaration = require("20ec425b586873cf");
class Flex extends Declaration {
    /**
   * Return property name by final spec
   */ normalize() {
        return "flex";
    }
    /**
   * Return flex property for 2009 and 2012 specs
   */ prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) return prefix + "box-flex";
        if (spec === 2012) return prefix + "flex-positive";
        return super.prefixed(prop, prefix);
    }
}
Flex.names = [
    "flex-grow",
    "flex-positive"
];
module.exports = Flex;

},{"e7daf33de4552635":"at1Im","20ec425b586873cf":"eJRSt"}],"anJJ4":[function(require,module,exports) {
let flexSpec = require("cb862a02397df743");
let Declaration = require("d72f399f7a59c1f2");
class FlexWrap extends Declaration {
    /**
   * Don't add prefix for 2009 spec
   */ set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec !== 2009) return super.set(decl, prefix);
        return undefined;
    }
}
FlexWrap.names = [
    "flex-wrap"
];
module.exports = FlexWrap;

},{"cb862a02397df743":"at1Im","d72f399f7a59c1f2":"eJRSt"}],"eSHPG":[function(require,module,exports) {
let Declaration = require("a7d1aed648e74cf0");
let utils = require("820151b2832e0efe");
class GridArea extends Declaration {
    /**
   * Translate grid-area to separate -ms- prefixed properties
   */ insert(decl, prefix, prefixes, result) {
        if (prefix !== "-ms-") return super.insert(decl, prefix, prefixes);
        let values = utils.parse(decl);
        let [rowStart, rowSpan] = utils.translate(values, 0, 2);
        let [columnStart, columnSpan] = utils.translate(values, 1, 3);
        [
            [
                "grid-row",
                rowStart
            ],
            [
                "grid-row-span",
                rowSpan
            ],
            [
                "grid-column",
                columnStart
            ],
            [
                "grid-column-span",
                columnSpan
            ]
        ].forEach(([prop, value])=>{
            utils.insertDecl(decl, prop, value);
        });
        utils.warnTemplateSelectorNotFound(decl, result);
        utils.warnIfGridRowColumnExists(decl, result);
        return undefined;
    }
}
GridArea.names = [
    "grid-area"
];
module.exports = GridArea;

},{"a7d1aed648e74cf0":"eJRSt","820151b2832e0efe":"b4Ecd"}],"foJhB":[function(require,module,exports) {
let Declaration = require("76868ceddd9a6f7b");
let utils = require("de7533d24538c416");
class PlaceSelf extends Declaration {
    /**
   * Translate place-self to separate -ms- prefixed properties
   */ insert(decl, prefix, prefixes) {
        if (prefix !== "-ms-") return super.insert(decl, prefix, prefixes);
        // prevent doubling of prefixes
        if (decl.parent.some((i)=>i.prop === "-ms-grid-row-align")) return undefined;
        let [[first, second]] = utils.parse(decl);
        if (second) {
            utils.insertDecl(decl, "grid-row-align", first);
            utils.insertDecl(decl, "grid-column-align", second);
        } else {
            utils.insertDecl(decl, "grid-row-align", first);
            utils.insertDecl(decl, "grid-column-align", first);
        }
        return undefined;
    }
}
PlaceSelf.names = [
    "place-self"
];
module.exports = PlaceSelf;

},{"76868ceddd9a6f7b":"eJRSt","de7533d24538c416":"b4Ecd"}],"i40p5":[function(require,module,exports) {
let Declaration = require("a5461a5f709f9704");
class GridStart extends Declaration {
    /**
   * Do not add prefix for unsupported value in IE
   */ check(decl) {
        let value = decl.value;
        return !value.includes("/") && !value.includes("span");
    }
    /**
   * Return a final spec property
   */ normalize(prop) {
        return prop.replace("-start", "");
    }
    /**
   * Change property name for IE
   */ prefixed(prop, prefix) {
        let result = super.prefixed(prop, prefix);
        if (prefix === "-ms-") result = result.replace("-start", "");
        return result;
    }
}
GridStart.names = [
    "grid-row-start",
    "grid-column-start"
];
module.exports = GridStart;

},{"a5461a5f709f9704":"eJRSt"}],"eXAFe":[function(require,module,exports) {
let flexSpec = require("495c0ef882b01f4c");
let Declaration = require("a2ba1d6ab4d7bd72");
class AlignSelf extends Declaration {
    check(decl) {
        return decl.parent && !decl.parent.some((i)=>{
            return i.prop && i.prop.startsWith("grid-");
        });
    }
    /**
   * Change property name for 2012 specs
   */ prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012) return prefix + "flex-item-align";
        return super.prefixed(prop, prefix);
    }
    /**
   * Return property name by final spec
   */ normalize() {
        return "align-self";
    }
    /**
   * Change value for 2012 spec and ignore prefix for 2009
   */ set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2012) {
            decl.value = AlignSelf.oldValues[decl.value] || decl.value;
            return super.set(decl, prefix);
        }
        if (spec === "final") return super.set(decl, prefix);
        return undefined;
    }
}
AlignSelf.names = [
    "align-self",
    "flex-item-align"
];
AlignSelf.oldValues = {
    "flex-end": "end",
    "flex-start": "start"
};
module.exports = AlignSelf;

},{"495c0ef882b01f4c":"at1Im","a2ba1d6ab4d7bd72":"eJRSt"}],"9zbtj":[function(require,module,exports) {
let Declaration = require("fd82426aaefc8f8");
let utils = require("e78e498a65448c27");
class Appearance extends Declaration {
    constructor(name, prefixes, all){
        super(name, prefixes, all);
        if (this.prefixes) this.prefixes = utils.uniq(this.prefixes.map((i)=>{
            if (i === "-ms-") return "-webkit-";
            return i;
        }));
    }
}
Appearance.names = [
    "appearance"
];
module.exports = Appearance;

},{"fd82426aaefc8f8":"eJRSt","e78e498a65448c27":"j2sRV"}],"713c3":[function(require,module,exports) {
let flexSpec = require("ad6eb59125e251a9");
let Declaration = require("197405036555b1d6");
class FlexBasis extends Declaration {
    /**
   * Return property name by final spec
   */ normalize() {
        return "flex-basis";
    }
    /**
   * Return flex property for 2012 spec
   */ prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012) return prefix + "flex-preferred-size";
        return super.prefixed(prop, prefix);
    }
    /**
   * Ignore 2009 spec and use flex property for 2012
   */ set(decl, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012 || spec === "final") return super.set(decl, prefix);
        return undefined;
    }
}
FlexBasis.names = [
    "flex-basis",
    "flex-preferred-size"
];
module.exports = FlexBasis;

},{"ad6eb59125e251a9":"at1Im","197405036555b1d6":"eJRSt"}],"2cBxP":[function(require,module,exports) {
let Declaration = require("cddb25a1e60806fa");
class MaskBorder extends Declaration {
    /**
   * Return property name by final spec
   */ normalize() {
        return this.name.replace("box-image", "border");
    }
    /**
   * Return flex property for 2012 spec
   */ prefixed(prop, prefix) {
        let result = super.prefixed(prop, prefix);
        if (prefix === "-webkit-") result = result.replace("border", "box-image");
        return result;
    }
}
MaskBorder.names = [
    "mask-border",
    "mask-border-source",
    "mask-border-slice",
    "mask-border-width",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-box-image",
    "mask-box-image-source",
    "mask-box-image-slice",
    "mask-box-image-width",
    "mask-box-image-outset",
    "mask-box-image-repeat"
];
module.exports = MaskBorder;

},{"cddb25a1e60806fa":"eJRSt"}],"lxxEp":[function(require,module,exports) {
let Declaration = require("b69f21d517abb1d4");
class MaskComposite extends Declaration {
    /**
   * Prefix mask-composite for webkit
   */ insert(decl, prefix, prefixes) {
        let isCompositeProp = decl.prop === "mask-composite";
        let compositeValues;
        if (isCompositeProp) compositeValues = decl.value.split(",");
        else compositeValues = decl.value.match(MaskComposite.regexp) || [];
        compositeValues = compositeValues.map((el)=>el.trim()).filter((el)=>el);
        let hasCompositeValues = compositeValues.length;
        let compositeDecl;
        if (hasCompositeValues) {
            compositeDecl = this.clone(decl);
            compositeDecl.value = compositeValues.map((value)=>MaskComposite.oldValues[value] || value).join(", ");
            if (compositeValues.includes("intersect")) compositeDecl.value += ", xor";
            compositeDecl.prop = prefix + "mask-composite";
        }
        if (isCompositeProp) {
            if (!hasCompositeValues) return undefined;
            if (this.needCascade(decl)) compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);
            return decl.parent.insertBefore(decl, compositeDecl);
        }
        let cloned = this.clone(decl);
        cloned.prop = prefix + cloned.prop;
        if (hasCompositeValues) cloned.value = cloned.value.replace(MaskComposite.regexp, "");
        if (this.needCascade(decl)) cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        decl.parent.insertBefore(decl, cloned);
        if (!hasCompositeValues) return decl;
        if (this.needCascade(decl)) compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);
        return decl.parent.insertBefore(decl, compositeDecl);
    }
}
MaskComposite.names = [
    "mask",
    "mask-composite"
];
MaskComposite.oldValues = {
    add: "source-over",
    subtract: "source-out",
    intersect: "source-in",
    exclude: "xor"
};
MaskComposite.regexp = new RegExp(`\\s+(${Object.keys(MaskComposite.oldValues).join("|")})\\b(?!\\))\\s*(?=[,])`, "ig");
module.exports = MaskComposite;

},{"b69f21d517abb1d4":"eJRSt"}],"hkwVN":[function(require,module,exports) {
let flexSpec = require("ef93c0b8c49e63da");
let Declaration = require("67f9a0a266a18893");
class AlignItems extends Declaration {
    /**
   * Change property name for 2009 and 2012 specs
   */ prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) return prefix + "box-align";
        if (spec === 2012) return prefix + "flex-align";
        return super.prefixed(prop, prefix);
    }
    /**
   * Return property name by final spec
   */ normalize() {
        return "align-items";
    }
    /**
   * Change value for 2009 and 2012 specs
   */ set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2009 || spec === 2012) decl.value = AlignItems.oldValues[decl.value] || decl.value;
        return super.set(decl, prefix);
    }
}
AlignItems.names = [
    "align-items",
    "flex-align",
    "box-align"
];
AlignItems.oldValues = {
    "flex-end": "end",
    "flex-start": "start"
};
module.exports = AlignItems;

},{"ef93c0b8c49e63da":"at1Im","67f9a0a266a18893":"eJRSt"}],"hxScT":[function(require,module,exports) {
let Declaration = require("86db5a3d96187ef7");
class UserSelect extends Declaration {
    /**
   * Change prefixed value for IE
   */ set(decl, prefix) {
        if (prefix === "-ms-" && decl.value === "contain") decl.value = "element";
        return super.set(decl, prefix);
    }
    /**
   * Avoid prefixing all in IE
   */ insert(decl, prefix, prefixes) {
        if (decl.value === "all" && prefix === "-ms-") return undefined;
        else return super.insert(decl, prefix, prefixes);
    }
}
UserSelect.names = [
    "user-select"
];
module.exports = UserSelect;

},{"86db5a3d96187ef7":"eJRSt"}],"ifLgz":[function(require,module,exports) {
let flexSpec = require("967f473f5bcf4c77");
let Declaration = require("c0a485b04111246b");
class FlexShrink extends Declaration {
    /**
   * Return property name by final spec
   */ normalize() {
        return "flex-shrink";
    }
    /**
   * Return flex property for 2012 spec
   */ prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012) return prefix + "flex-negative";
        return super.prefixed(prop, prefix);
    }
    /**
   * Ignore 2009 spec and use flex property for 2012
   */ set(decl, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012 || spec === "final") return super.set(decl, prefix);
        return undefined;
    }
}
FlexShrink.names = [
    "flex-shrink",
    "flex-negative"
];
module.exports = FlexShrink;

},{"967f473f5bcf4c77":"at1Im","c0a485b04111246b":"eJRSt"}],"8Pghi":[function(require,module,exports) {
let Declaration = require("d0c78e00013bbc16");
class BreakProps extends Declaration {
    /**
   * Change name for -webkit- and -moz- prefix
   */ prefixed(prop, prefix) {
        return `${prefix}column-${prop}`;
    }
    /**
   * Return property name by final spec
   */ normalize(prop) {
        if (prop.includes("inside")) return "break-inside";
        if (prop.includes("before")) return "break-before";
        return "break-after";
    }
    /**
   * Change prefixed value for avoid-column and avoid-page
   */ set(decl, prefix) {
        if (decl.prop === "break-inside" && decl.value === "avoid-column" || decl.value === "avoid-page") decl.value = "avoid";
        return super.set(decl, prefix);
    }
    /**
   * Don’t prefix some values
   */ insert(decl, prefix, prefixes) {
        if (decl.prop !== "break-inside") return super.insert(decl, prefix, prefixes);
        if (/region/i.test(decl.value) || /page/i.test(decl.value)) return undefined;
        return super.insert(decl, prefix, prefixes);
    }
}
BreakProps.names = [
    "break-inside",
    "page-break-inside",
    "column-break-inside",
    "break-before",
    "page-break-before",
    "column-break-before",
    "break-after",
    "page-break-after",
    "column-break-after"
];
module.exports = BreakProps;

},{"d0c78e00013bbc16":"eJRSt"}],"5UHlb":[function(require,module,exports) {
let Declaration = require("6033483f3e4f469");
class WritingMode extends Declaration {
    insert(decl, prefix, prefixes) {
        if (prefix === "-ms-") {
            let cloned = this.set(this.clone(decl), prefix);
            if (this.needCascade(decl)) cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
            let direction = "ltr";
            decl.parent.nodes.forEach((i)=>{
                if (i.prop === "direction") {
                    if (i.value === "rtl" || i.value === "ltr") direction = i.value;
                }
            });
            cloned.value = WritingMode.msValues[direction][decl.value] || decl.value;
            return decl.parent.insertBefore(decl, cloned);
        }
        return super.insert(decl, prefix, prefixes);
    }
}
WritingMode.names = [
    "writing-mode"
];
WritingMode.msValues = {
    ltr: {
        "horizontal-tb": "lr-tb",
        "vertical-rl": "tb-rl",
        "vertical-lr": "tb-lr"
    },
    rtl: {
        "horizontal-tb": "rl-tb",
        "vertical-rl": "bt-rl",
        "vertical-lr": "bt-lr"
    }
};
module.exports = WritingMode;

},{"6033483f3e4f469":"eJRSt"}],"2AMig":[function(require,module,exports) {
let Declaration = require("6162b8916a667ec1");
class BorderImage extends Declaration {
    /**
   * Remove fill parameter for prefixed declarations
   */ set(decl, prefix) {
        decl.value = decl.value.replace(/\s+fill(\s)/, "$1");
        return super.set(decl, prefix);
    }
}
BorderImage.names = [
    "border-image"
];
module.exports = BorderImage;

},{"6162b8916a667ec1":"eJRSt"}],"ethY1":[function(require,module,exports) {
let flexSpec = require("7e1bc017c220287d");
let Declaration = require("49dee6c8be180c06");
class AlignContent extends Declaration {
    /**
   * Change property name for 2012 spec
   */ prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012) return prefix + "flex-line-pack";
        return super.prefixed(prop, prefix);
    }
    /**
   * Return property name by final spec
   */ normalize() {
        return "align-content";
    }
    /**
   * Change value for 2012 spec and ignore prefix for 2009
   */ set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2012) {
            decl.value = AlignContent.oldValues[decl.value] || decl.value;
            return super.set(decl, prefix);
        }
        if (spec === "final") return super.set(decl, prefix);
        return undefined;
    }
}
AlignContent.names = [
    "align-content",
    "flex-line-pack"
];
AlignContent.oldValues = {
    "flex-end": "end",
    "flex-start": "start",
    "space-between": "justify",
    "space-around": "distribute"
};
module.exports = AlignContent;

},{"7e1bc017c220287d":"at1Im","49dee6c8be180c06":"eJRSt"}],"eopNU":[function(require,module,exports) {
let Declaration = require("3bb0b88b84f0108e");
class BorderRadius extends Declaration {
    /**
   * Change syntax, when add Mozilla prefix
   */ prefixed(prop, prefix) {
        if (prefix === "-moz-") return prefix + (BorderRadius.toMozilla[prop] || prop);
        return super.prefixed(prop, prefix);
    }
    /**
   * Return unprefixed version of property
   */ normalize(prop) {
        return BorderRadius.toNormal[prop] || prop;
    }
}
BorderRadius.names = [
    "border-radius"
];
BorderRadius.toMozilla = {};
BorderRadius.toNormal = {};
for (let ver of [
    "top",
    "bottom"
])for (let hor of [
    "left",
    "right"
]){
    let normal = `border-${ver}-${hor}-radius`;
    let mozilla = `border-radius-${ver}${hor}`;
    BorderRadius.names.push(normal);
    BorderRadius.names.push(mozilla);
    BorderRadius.toMozilla[normal] = mozilla;
    BorderRadius.toNormal[mozilla] = normal;
}
module.exports = BorderRadius;

},{"3bb0b88b84f0108e":"eJRSt"}],"2hr4f":[function(require,module,exports) {
let Declaration = require("306b771e4c822f78");
class BlockLogical extends Declaration {
    /**
   * Use old syntax for -moz- and -webkit-
   */ prefixed(prop, prefix) {
        if (prop.includes("-start")) return prefix + prop.replace("-block-start", "-before");
        return prefix + prop.replace("-block-end", "-after");
    }
    /**
   * Return property name by spec
   */ normalize(prop) {
        if (prop.includes("-before")) return prop.replace("-before", "-block-start");
        return prop.replace("-after", "-block-end");
    }
}
BlockLogical.names = [
    "border-block-start",
    "border-block-end",
    "margin-block-start",
    "margin-block-end",
    "padding-block-start",
    "padding-block-end",
    "border-before",
    "border-after",
    "margin-before",
    "margin-after",
    "padding-before",
    "padding-after"
];
module.exports = BlockLogical;

},{"306b771e4c822f78":"eJRSt"}],"eQved":[function(require,module,exports) {
let Declaration = require("a44c7701a93b58a6");
let { parseTemplate, warnMissedAreas, getGridGap, warnGridGap, inheritGridGap } = require("5a72b0d9a2ee7682");
class GridTemplate extends Declaration {
    /**
   * Translate grid-template to separate -ms- prefixed properties
   */ insert(decl, prefix, prefixes, result) {
        if (prefix !== "-ms-") return super.insert(decl, prefix, prefixes);
        if (decl.parent.some((i)=>i.prop === "-ms-grid-rows")) return undefined;
        let gap = getGridGap(decl);
        /**
     * we must insert inherited gap values in some cases:
     * if we are inside media query && if we have no grid-gap value
     */ let inheritedGap = inheritGridGap(decl, gap);
        let { rows, columns, areas } = parseTemplate({
            decl,
            gap: inheritedGap || gap
        });
        let hasAreas = Object.keys(areas).length > 0;
        let hasRows = Boolean(rows);
        let hasColumns = Boolean(columns);
        warnGridGap({
            gap,
            hasColumns,
            decl,
            result
        });
        warnMissedAreas(areas, decl, result);
        if (hasRows && hasColumns || hasAreas) decl.cloneBefore({
            prop: "-ms-grid-rows",
            value: rows,
            raws: {}
        });
        if (hasColumns) decl.cloneBefore({
            prop: "-ms-grid-columns",
            value: columns,
            raws: {}
        });
        return decl;
    }
}
GridTemplate.names = [
    "grid-template"
];
module.exports = GridTemplate;

},{"a44c7701a93b58a6":"eJRSt","5a72b0d9a2ee7682":"b4Ecd"}],"4YDcH":[function(require,module,exports) {
let Declaration = require("83954edbf58fe815");
class InlineLogical extends Declaration {
    /**
   * Use old syntax for -moz- and -webkit-
   */ prefixed(prop, prefix) {
        return prefix + prop.replace("-inline", "");
    }
    /**
   * Return property name by spec
   */ normalize(prop) {
        return prop.replace(/(margin|padding|border)-(start|end)/, "$1-inline-$2");
    }
}
InlineLogical.names = [
    "border-inline-start",
    "border-inline-end",
    "margin-inline-start",
    "margin-inline-end",
    "padding-inline-start",
    "padding-inline-end",
    "border-start",
    "border-end",
    "margin-start",
    "margin-end",
    "padding-start",
    "padding-end"
];
module.exports = InlineLogical;

},{"83954edbf58fe815":"eJRSt"}],"b4Fjv":[function(require,module,exports) {
let Declaration = require("5a6354ba227ab442");
class GridRowAlign extends Declaration {
    /**
   * Do not prefix flexbox values
   */ check(decl) {
        return !decl.value.includes("flex-") && decl.value !== "baseline";
    }
    /**
   * Change property name for IE
   */ prefixed(prop, prefix) {
        return prefix + "grid-row-align";
    }
    /**
   * Change IE property back
   */ normalize() {
        return "align-self";
    }
}
GridRowAlign.names = [
    "grid-row-align"
];
module.exports = GridRowAlign;

},{"5a6354ba227ab442":"eJRSt"}],"8hBMV":[function(require,module,exports) {
let Declaration = require("a2bd2134dd1c248a");
class TransformDecl extends Declaration {
    /**
   * Recursively check all parents for @keyframes
   */ keyframeParents(decl) {
        let { parent } = decl;
        while(parent){
            if (parent.type === "atrule" && parent.name === "keyframes") return true;
            ({ parent } = parent);
        }
        return false;
    }
    /**
   * Is transform contain 3D commands
   */ contain3d(decl) {
        if (decl.prop === "transform-origin") return false;
        for (let func of TransformDecl.functions3d){
            if (decl.value.includes(`${func}(`)) return true;
        }
        return false;
    }
    /**
   * Replace rotateZ to rotate for IE 9
   */ set(decl, prefix) {
        decl = super.set(decl, prefix);
        if (prefix === "-ms-") decl.value = decl.value.replace(/rotatez/gi, "rotate");
        return decl;
    }
    /**
   * Don't add prefix for IE in keyframes
   */ insert(decl, prefix, prefixes) {
        if (prefix === "-ms-") {
            if (!this.contain3d(decl) && !this.keyframeParents(decl)) return super.insert(decl, prefix, prefixes);
        } else if (prefix === "-o-") {
            if (!this.contain3d(decl)) return super.insert(decl, prefix, prefixes);
        } else return super.insert(decl, prefix, prefixes);
        return undefined;
    }
}
TransformDecl.names = [
    "transform",
    "transform-origin"
];
TransformDecl.functions3d = [
    "matrix3d",
    "translate3d",
    "translateZ",
    "scale3d",
    "scaleZ",
    "rotate3d",
    "rotateX",
    "rotateY",
    "perspective"
];
module.exports = TransformDecl;

},{"a2bd2134dd1c248a":"eJRSt"}],"7AQT7":[function(require,module,exports) {
let flexSpec = require("c37a4ea7d3a89c64");
let Declaration = require("908718cc6d9e8247");
class FlexDirection extends Declaration {
    /**
   * Return property name by final spec
   */ normalize() {
        return "flex-direction";
    }
    /**
   * Use two properties for 2009 spec
   */ insert(decl, prefix, prefixes) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec !== 2009) return super.insert(decl, prefix, prefixes);
        let already = decl.parent.some((i)=>i.prop === prefix + "box-orient" || i.prop === prefix + "box-direction");
        if (already) return undefined;
        let v = decl.value;
        let orient, dir;
        if (v === "inherit" || v === "initial" || v === "unset") {
            orient = v;
            dir = v;
        } else {
            orient = v.includes("row") ? "horizontal" : "vertical";
            dir = v.includes("reverse") ? "reverse" : "normal";
        }
        let cloned = this.clone(decl);
        cloned.prop = prefix + "box-orient";
        cloned.value = orient;
        if (this.needCascade(decl)) cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        decl.parent.insertBefore(decl, cloned);
        cloned = this.clone(decl);
        cloned.prop = prefix + "box-direction";
        cloned.value = dir;
        if (this.needCascade(decl)) cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        return decl.parent.insertBefore(decl, cloned);
    }
    /**
   * Clean two properties for 2009 spec
   */ old(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) return [
            prefix + "box-orient",
            prefix + "box-direction"
        ];
        else return super.old(prop, prefix);
    }
}
FlexDirection.names = [
    "flex-direction",
    "box-direction",
    "box-orient"
];
module.exports = FlexDirection;

},{"c37a4ea7d3a89c64":"at1Im","908718cc6d9e8247":"eJRSt"}],"61pla":[function(require,module,exports) {
let Declaration = require("8162f9426a74fdb9");
class ImageRendering extends Declaration {
    /**
   * Add hack only for crisp-edges
   */ check(decl) {
        return decl.value === "pixelated";
    }
    /**
   * Change property name for IE
   */ prefixed(prop, prefix) {
        if (prefix === "-ms-") return "-ms-interpolation-mode";
        return super.prefixed(prop, prefix);
    }
    /**
   * Change property and value for IE
   */ set(decl, prefix) {
        if (prefix !== "-ms-") return super.set(decl, prefix);
        decl.prop = "-ms-interpolation-mode";
        decl.value = "nearest-neighbor";
        return decl;
    }
    /**
   * Return property name by spec
   */ normalize() {
        return "image-rendering";
    }
    /**
   * Warn on old value
   */ process(node, result) {
        return super.process(node, result);
    }
}
ImageRendering.names = [
    "image-rendering",
    "interpolation-mode"
];
module.exports = ImageRendering;

},{"8162f9426a74fdb9":"eJRSt"}],"ifsLa":[function(require,module,exports) {
let Declaration = require("4308144f33bd851f");
let utils = require("606955712459e6c2");
class BackdropFilter extends Declaration {
    constructor(name, prefixes, all){
        super(name, prefixes, all);
        if (this.prefixes) this.prefixes = utils.uniq(this.prefixes.map((i)=>{
            return i === "-ms-" ? "-webkit-" : i;
        }));
    }
}
BackdropFilter.names = [
    "backdrop-filter"
];
module.exports = BackdropFilter;

},{"4308144f33bd851f":"eJRSt","606955712459e6c2":"j2sRV"}],"cTKQe":[function(require,module,exports) {
let Declaration = require("53e72af4a24d9609");
let utils = require("bb3e4cc0032d4cba");
class BackgroundClip extends Declaration {
    constructor(name, prefixes, all){
        super(name, prefixes, all);
        if (this.prefixes) this.prefixes = utils.uniq(this.prefixes.map((i)=>{
            return i === "-ms-" ? "-webkit-" : i;
        }));
    }
    check(decl) {
        return decl.value.toLowerCase() === "text";
    }
}
BackgroundClip.names = [
    "background-clip"
];
module.exports = BackgroundClip;

},{"53e72af4a24d9609":"eJRSt","bb3e4cc0032d4cba":"j2sRV"}],"2iGjq":[function(require,module,exports) {
let Declaration = require("42b897d0086dc363");
const BASIC = [
    "none",
    "underline",
    "overline",
    "line-through",
    "blink",
    "inherit",
    "initial",
    "unset"
];
class TextDecoration extends Declaration {
    /**
   * Do not add prefixes for basic values.
   */ check(decl) {
        return decl.value.split(/\s+/).some((i)=>!BASIC.includes(i));
    }
}
TextDecoration.names = [
    "text-decoration"
];
module.exports = TextDecoration;

},{"42b897d0086dc363":"eJRSt"}],"120gd":[function(require,module,exports) {
let flexSpec = require("46b32d438eaf0564");
let Declaration = require("526d2e59cf7d19fa");
class JustifyContent extends Declaration {
    /**
   * Change property name for 2009 and 2012 specs
   */ prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) return prefix + "box-pack";
        if (spec === 2012) return prefix + "flex-pack";
        return super.prefixed(prop, prefix);
    }
    /**
   * Return property name by final spec
   */ normalize() {
        return "justify-content";
    }
    /**
   * Change value for 2009 and 2012 specs
   */ set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2009 || spec === 2012) {
            let value = JustifyContent.oldValues[decl.value] || decl.value;
            decl.value = value;
            if (spec !== 2009 || value !== "distribute") return super.set(decl, prefix);
        } else if (spec === "final") return super.set(decl, prefix);
        return undefined;
    }
}
JustifyContent.names = [
    "justify-content",
    "flex-pack",
    "box-pack"
];
JustifyContent.oldValues = {
    "flex-end": "end",
    "flex-start": "start",
    "space-between": "justify",
    "space-around": "distribute"
};
module.exports = JustifyContent;

},{"46b32d438eaf0564":"at1Im","526d2e59cf7d19fa":"eJRSt"}],"bsqmB":[function(require,module,exports) {
let Declaration = require("56491ca57ba62a54");
class BackgroundSize extends Declaration {
    /**
   * Duplication parameter for -webkit- browsers
   */ set(decl, prefix) {
        let value = decl.value.toLowerCase();
        if (prefix === "-webkit-" && !value.includes(" ") && value !== "contain" && value !== "cover") decl.value = decl.value + " " + decl.value;
        return super.set(decl, prefix);
    }
}
BackgroundSize.names = [
    "background-size"
];
module.exports = BackgroundSize;

},{"56491ca57ba62a54":"eJRSt"}],"iKZkA":[function(require,module,exports) {
let Declaration = require("d9dadf4004f594fd");
let utils = require("ed4ba80f59ba8ebc");
class GridRowColumn extends Declaration {
    /**
   * Translate grid-row / grid-column to separate -ms- prefixed properties
   */ insert(decl, prefix, prefixes) {
        if (prefix !== "-ms-") return super.insert(decl, prefix, prefixes);
        let values = utils.parse(decl);
        let [start, span] = utils.translate(values, 0, 1);
        let hasStartValueSpan = values[0] && values[0].includes("span");
        if (hasStartValueSpan) span = values[0].join("").replace(/\D/g, "");
        [
            [
                decl.prop,
                start
            ],
            [
                `${decl.prop}-span`,
                span
            ]
        ].forEach(([prop, value])=>{
            utils.insertDecl(decl, prop, value);
        });
        return undefined;
    }
}
GridRowColumn.names = [
    "grid-row",
    "grid-column"
];
module.exports = GridRowColumn;

},{"d9dadf4004f594fd":"eJRSt","ed4ba80f59ba8ebc":"b4Ecd"}],"7qdUR":[function(require,module,exports) {
let Declaration = require("72c28542ef06127c");
let { prefixTrackProp, prefixTrackValue, autoplaceGridItems, getGridGap, inheritGridGap } = require("db65b9ba652e6b25");
let Processor = require("2859ddd35fcc4bdb");
class GridRowsColumns extends Declaration {
    /**
   * Change property name for IE
   */ prefixed(prop, prefix) {
        if (prefix === "-ms-") return prefixTrackProp({
            prop,
            prefix
        });
        return super.prefixed(prop, prefix);
    }
    /**
   * Change IE property back
   */ normalize(prop) {
        return prop.replace(/^grid-(rows|columns)/, "grid-template-$1");
    }
    insert(decl, prefix, prefixes, result) {
        if (prefix !== "-ms-") return super.insert(decl, prefix, prefixes);
        let { parent, prop, value } = decl;
        let isRowProp = prop.includes("rows");
        let isColumnProp = prop.includes("columns");
        let hasGridTemplate = parent.some((i)=>i.prop === "grid-template" || i.prop === "grid-template-areas");
        /**
     * Not to prefix rows declaration if grid-template(-areas) is present
     */ if (hasGridTemplate && isRowProp) return false;
        let processor = new Processor({
            options: {}
        });
        let status = processor.gridStatus(parent, result);
        let gap = getGridGap(decl);
        gap = inheritGridGap(decl, gap) || gap;
        let gapValue = isRowProp ? gap.row : gap.column;
        if ((status === "no-autoplace" || status === true) && !hasGridTemplate) gapValue = null;
        let prefixValue = prefixTrackValue({
            value,
            gap: gapValue
        });
        /**
     * Insert prefixes
     */ decl.cloneBefore({
            prop: prefixTrackProp({
                prop,
                prefix
            }),
            value: prefixValue
        });
        let autoflow = parent.nodes.find((i)=>i.prop === "grid-auto-flow");
        let autoflowValue = "row";
        if (autoflow && !processor.disabled(autoflow, result)) autoflowValue = autoflow.value.trim();
        if (status === "autoplace") {
            /**
       * Show warning if grid-template-rows decl is not found
       */ let rowDecl = parent.nodes.find((i)=>i.prop === "grid-template-rows");
            if (!rowDecl && hasGridTemplate) return undefined;
            else if (!rowDecl && !hasGridTemplate) {
                decl.warn(result, "Autoplacement does not work without grid-template-rows property");
                return undefined;
            }
            /**
       * Show warning if grid-template-columns decl is not found
       */ let columnDecl = parent.nodes.find((i)=>{
                return i.prop === "grid-template-columns";
            });
            if (!columnDecl && !hasGridTemplate) decl.warn(result, "Autoplacement does not work without grid-template-columns property");
            /**
       * Autoplace grid items
       */ if (isColumnProp && !hasGridTemplate) autoplaceGridItems(decl, result, gap, autoflowValue);
        }
        return undefined;
    }
}
GridRowsColumns.names = [
    "grid-template-rows",
    "grid-template-columns",
    "grid-rows",
    "grid-columns"
];
module.exports = GridRowsColumns;

},{"72c28542ef06127c":"eJRSt","db65b9ba652e6b25":"b4Ecd","2859ddd35fcc4bdb":"iYSwf"}],"1L0m2":[function(require,module,exports) {
let Declaration = require("fb77376d4189f29");
class GridColumnAlign extends Declaration {
    /**
   * Do not prefix flexbox values
   */ check(decl) {
        return !decl.value.includes("flex-") && decl.value !== "baseline";
    }
    /**
   * Change property name for IE
   */ prefixed(prop, prefix) {
        return prefix + "grid-column-align";
    }
    /**
   * Change IE property back
   */ normalize() {
        return "justify-self";
    }
}
GridColumnAlign.names = [
    "grid-column-align"
];
module.exports = GridColumnAlign;

},{"fb77376d4189f29":"eJRSt"}],"6vDh7":[function(require,module,exports) {
let Declaration = require("4f0bb197cd2f7034");
class PrintColorAdjust extends Declaration {
    /**
   * Change property name for WebKit-based browsers
   */ prefixed(prop, prefix) {
        if (prefix === "-moz-") return "color-adjust";
        else return prefix + "print-color-adjust";
    }
    /**
   * Return property name by spec
   */ normalize() {
        return "print-color-adjust";
    }
}
PrintColorAdjust.names = [
    "print-color-adjust",
    "color-adjust"
];
module.exports = PrintColorAdjust;

},{"4f0bb197cd2f7034":"eJRSt"}],"cCD0L":[function(require,module,exports) {
let Declaration = require("92c7011fd1a55ea1");
class OverscrollBehavior extends Declaration {
    /**
   * Change property name for IE
   */ prefixed(prop, prefix) {
        return prefix + "scroll-chaining";
    }
    /**
   * Return property name by spec
   */ normalize() {
        return "overscroll-behavior";
    }
    /**
   * Change value for IE
   */ set(decl, prefix) {
        if (decl.value === "auto") decl.value = "chained";
        else if (decl.value === "none" || decl.value === "contain") decl.value = "none";
        return super.set(decl, prefix);
    }
}
OverscrollBehavior.names = [
    "overscroll-behavior",
    "scroll-chaining"
];
module.exports = OverscrollBehavior;

},{"92c7011fd1a55ea1":"eJRSt"}],"l1eeB":[function(require,module,exports) {
let Declaration = require("de527bb646a7c989");
let { parseGridAreas, warnMissedAreas, prefixTrackProp, prefixTrackValue, getGridGap, warnGridGap, inheritGridGap } = require("4cf9315f32790ae2");
function getGridRows(tpl) {
    return tpl.trim().slice(1, -1).split(/["']\s*["']?/g);
}
class GridTemplateAreas extends Declaration {
    /**
   * Translate grid-template-areas to separate -ms- prefixed properties
   */ insert(decl, prefix, prefixes, result) {
        if (prefix !== "-ms-") return super.insert(decl, prefix, prefixes);
        let hasColumns = false;
        let hasRows = false;
        let parent = decl.parent;
        let gap = getGridGap(decl);
        gap = inheritGridGap(decl, gap) || gap;
        // remove already prefixed rows
        // to prevent doubling prefixes
        parent.walkDecls(/-ms-grid-rows/, (i)=>i.remove());
        // add empty tracks to rows
        parent.walkDecls(/grid-template-(rows|columns)/, (trackDecl)=>{
            if (trackDecl.prop === "grid-template-rows") {
                hasRows = true;
                let { prop, value } = trackDecl;
                trackDecl.cloneBefore({
                    prop: prefixTrackProp({
                        prop,
                        prefix
                    }),
                    value: prefixTrackValue({
                        value,
                        gap: gap.row
                    })
                });
            } else hasColumns = true;
        });
        let gridRows = getGridRows(decl.value);
        if (hasColumns && !hasRows && gap.row && gridRows.length > 1) decl.cloneBefore({
            prop: "-ms-grid-rows",
            value: prefixTrackValue({
                value: `repeat(${gridRows.length}, auto)`,
                gap: gap.row
            }),
            raws: {}
        });
        // warnings
        warnGridGap({
            gap,
            hasColumns,
            decl,
            result
        });
        let areas = parseGridAreas({
            rows: gridRows,
            gap
        });
        warnMissedAreas(areas, decl, result);
        return decl;
    }
}
GridTemplateAreas.names = [
    "grid-template-areas"
];
module.exports = GridTemplateAreas;

},{"de527bb646a7c989":"eJRSt","4cf9315f32790ae2":"b4Ecd"}],"2288K":[function(require,module,exports) {
let Declaration = require("97e107f6174c7fd7");
class TextEmphasisPosition extends Declaration {
    set(decl, prefix) {
        if (prefix === "-webkit-") decl.value = decl.value.replace(/\s*(right|left)\s*/i, "");
        return super.set(decl, prefix);
    }
}
TextEmphasisPosition.names = [
    "text-emphasis-position"
];
module.exports = TextEmphasisPosition;

},{"97e107f6174c7fd7":"eJRSt"}],"i4nj3":[function(require,module,exports) {
let Declaration = require("c87a7703544ccd66");
class TextDecorationSkipInk extends Declaration {
    /**
   * Change prefix for ink value
   */ set(decl, prefix) {
        if (decl.prop === "text-decoration-skip-ink" && decl.value === "auto") {
            decl.prop = prefix + "text-decoration-skip";
            decl.value = "ink";
            return decl;
        } else return super.set(decl, prefix);
    }
}
TextDecorationSkipInk.names = [
    "text-decoration-skip-ink",
    "text-decoration-skip"
];
module.exports = TextDecorationSkipInk;

},{"c87a7703544ccd66":"eJRSt"}],"eKE95":[function(require,module,exports) {
let parser = require("634a7dd10d9e55c3");
let range = require("f5109df4f53c6475");
let OldValue = require("9b0943b25fc23ef0");
let Value = require("9d2c0798b451b05d");
let utils = require("5a483e3b19a5e325");
let IS_DIRECTION = /top|left|right|bottom/gi;
class Gradient extends Value {
    /**
   * Change degrees for webkit prefix
   */ replace(string, prefix) {
        let ast = parser(string);
        for (let node of ast.nodes){
            let gradientName = this.name // gradient name
            ;
            if (node.type === "function" && node.value === gradientName) {
                node.nodes = this.newDirection(node.nodes);
                node.nodes = this.normalize(node.nodes, gradientName);
                if (prefix === "-webkit- old") {
                    let changes = this.oldWebkit(node);
                    if (!changes) return false;
                } else {
                    node.nodes = this.convertDirection(node.nodes);
                    node.value = prefix + node.value;
                }
            }
        }
        return ast.toString();
    }
    /**
   * Replace first token
   */ replaceFirst(params, ...words) {
        let prefix = words.map((i)=>{
            if (i === " ") return {
                type: "space",
                value: i
            };
            return {
                type: "word",
                value: i
            };
        });
        return prefix.concat(params.slice(1));
    }
    /**
   * Convert angle unit to deg
   */ normalizeUnit(str, full) {
        let num = parseFloat(str);
        let deg = num / full * 360;
        return `${deg}deg`;
    }
    /**
   * Normalize angle
   */ normalize(nodes, gradientName) {
        if (!nodes[0]) return nodes;
        if (/-?\d+(.\d+)?grad/.test(nodes[0].value)) nodes[0].value = this.normalizeUnit(nodes[0].value, 400);
        else if (/-?\d+(.\d+)?rad/.test(nodes[0].value)) nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI);
        else if (/-?\d+(.\d+)?turn/.test(nodes[0].value)) nodes[0].value = this.normalizeUnit(nodes[0].value, 1);
        else if (nodes[0].value.includes("deg")) {
            let num = parseFloat(nodes[0].value);
            num = range.wrap(0, 360, num);
            nodes[0].value = `${num}deg`;
        }
        if (gradientName === "linear-gradient" || gradientName === "repeating-linear-gradient") {
            let direction = nodes[0].value;
            // Unitless zero for `<angle>` values are allowed in CSS gradients and transforms.
            // Spec: https://github.com/w3c/csswg-drafts/commit/602789171429b2231223ab1e5acf8f7f11652eb3
            if (direction === "0deg" || direction === "0") nodes = this.replaceFirst(nodes, "to", " ", "top");
            else if (direction === "90deg") nodes = this.replaceFirst(nodes, "to", " ", "right");
            else if (direction === "180deg") nodes = this.replaceFirst(nodes, "to", " ", "bottom") // default value
            ;
            else if (direction === "270deg") nodes = this.replaceFirst(nodes, "to", " ", "left");
        }
        return nodes;
    }
    /**
   * Replace old direction to new
   */ newDirection(params) {
        if (params[0].value === "to") return params;
        IS_DIRECTION.lastIndex = 0 // reset search index of global regexp
        ;
        if (!IS_DIRECTION.test(params[0].value)) return params;
        params.unshift({
            type: "word",
            value: "to"
        }, {
            type: "space",
            value: " "
        });
        for(let i = 2; i < params.length; i++){
            if (params[i].type === "div") break;
            if (params[i].type === "word") params[i].value = this.revertDirection(params[i].value);
        }
        return params;
    }
    /**
   * Look for at word
   */ isRadial(params) {
        let state = "before";
        for (let param of params){
            if (state === "before" && param.type === "space") state = "at";
            else if (state === "at" && param.value === "at") state = "after";
            else if (state === "after" && param.type === "space") return true;
            else if (param.type === "div") break;
            else state = "before";
        }
        return false;
    }
    /**
   * Change new direction to old
   */ convertDirection(params) {
        if (params.length > 0) {
            if (params[0].value === "to") this.fixDirection(params);
            else if (params[0].value.includes("deg")) this.fixAngle(params);
            else if (this.isRadial(params)) this.fixRadial(params);
        }
        return params;
    }
    /**
   * Replace `to top left` to `bottom right`
   */ fixDirection(params) {
        params.splice(0, 2);
        for (let param of params){
            if (param.type === "div") break;
            if (param.type === "word") param.value = this.revertDirection(param.value);
        }
    }
    /**
   * Add 90 degrees
   */ fixAngle(params) {
        let first = params[0].value;
        first = parseFloat(first);
        first = Math.abs(450 - first) % 360;
        first = this.roundFloat(first, 3);
        params[0].value = `${first}deg`;
    }
    /**
   * Fix radial direction syntax
   */ fixRadial(params) {
        let first = [];
        let second = [];
        let a, b, c, i, next;
        for(i = 0; i < params.length - 2; i++){
            a = params[i];
            b = params[i + 1];
            c = params[i + 2];
            if (a.type === "space" && b.value === "at" && c.type === "space") {
                next = i + 3;
                break;
            } else first.push(a);
        }
        let div;
        for(i = next; i < params.length; i++)if (params[i].type === "div") {
            div = params[i];
            break;
        } else second.push(params[i]);
        params.splice(0, i, ...second, div, ...first);
    }
    revertDirection(word) {
        return Gradient.directions[word.toLowerCase()] || word;
    }
    /**
   * Round float and save digits under dot
   */ roundFloat(float, digits) {
        return parseFloat(float.toFixed(digits));
    }
    /**
   * Convert to old webkit syntax
   */ oldWebkit(node) {
        let { nodes } = node;
        let string = parser.stringify(node.nodes);
        if (this.name !== "linear-gradient") return false;
        if (nodes[0] && nodes[0].value.includes("deg")) return false;
        if (string.includes("px") || string.includes("-corner") || string.includes("-side")) return false;
        let params = [
            []
        ];
        for (let i of nodes){
            params[params.length - 1].push(i);
            if (i.type === "div" && i.value === ",") params.push([]);
        }
        this.oldDirection(params);
        this.colorStops(params);
        node.nodes = [];
        for (let param of params)node.nodes = node.nodes.concat(param);
        node.nodes.unshift({
            type: "word",
            value: "linear"
        }, this.cloneDiv(node.nodes));
        node.value = "-webkit-gradient";
        return true;
    }
    /**
   * Change direction syntax to old webkit
   */ oldDirection(params) {
        let div = this.cloneDiv(params[0]);
        if (params[0][0].value !== "to") return params.unshift([
            {
                type: "word",
                value: Gradient.oldDirections.bottom
            },
            div
        ]);
        else {
            let words = [];
            for (let node of params[0].slice(2))if (node.type === "word") words.push(node.value.toLowerCase());
            words = words.join(" ");
            let old = Gradient.oldDirections[words] || words;
            params[0] = [
                {
                    type: "word",
                    value: old
                },
                div
            ];
            return params[0];
        }
    }
    /**
   * Get div token from exists parameters
   */ cloneDiv(params) {
        for (let i of params){
            if (i.type === "div" && i.value === ",") return i;
        }
        return {
            type: "div",
            value: ",",
            after: " "
        };
    }
    /**
   * Change colors syntax to old webkit
   */ colorStops(params) {
        let result = [];
        for(let i = 0; i < params.length; i++){
            let pos;
            let param = params[i];
            let item;
            if (i === 0) continue;
            let color = parser.stringify(param[0]);
            if (param[1] && param[1].type === "word") pos = param[1].value;
            else if (param[2] && param[2].type === "word") pos = param[2].value;
            let stop;
            if (i === 1 && (!pos || pos === "0%")) stop = `from(${color})`;
            else if (i === params.length - 1 && (!pos || pos === "100%")) stop = `to(${color})`;
            else if (pos) stop = `color-stop(${pos}, ${color})`;
            else stop = `color-stop(${color})`;
            let div = param[param.length - 1];
            params[i] = [
                {
                    type: "word",
                    value: stop
                }
            ];
            if (div.type === "div" && div.value === ",") item = params[i].push(div);
            result.push(item);
        }
        return result;
    }
    /**
   * Remove old WebKit gradient too
   */ old(prefix) {
        if (prefix === "-webkit-") {
            let type;
            if (this.name === "linear-gradient") type = "linear";
            else if (this.name === "repeating-linear-gradient") type = "repeating-linear";
            else if (this.name === "repeating-radial-gradient") type = "repeating-radial";
            else type = "radial";
            let string = "-gradient";
            let regexp = utils.regexp(`-webkit-(${type}-gradient|gradient\\(\\s*${type})`, false);
            return new OldValue(this.name, prefix + this.name, string, regexp);
        } else return super.old(prefix);
    }
    /**
   * Do not add non-webkit prefixes for list-style and object
   */ add(decl, prefix) {
        let p = decl.prop;
        if (p.includes("mask")) {
            if (prefix === "-webkit-" || prefix === "-webkit- old") return super.add(decl, prefix);
        } else if (p === "list-style" || p === "list-style-image" || p === "content") {
            if (prefix === "-webkit-" || prefix === "-webkit- old") return super.add(decl, prefix);
        } else return super.add(decl, prefix);
        return undefined;
    }
}
Gradient.names = [
    "linear-gradient",
    "repeating-linear-gradient",
    "radial-gradient",
    "repeating-radial-gradient"
];
Gradient.directions = {
    top: "bottom",
    left: "right",
    bottom: "top",
    right: "left"
};
// Direction to replace
Gradient.oldDirections = {
    "top": "left bottom, left top",
    "left": "right top, left top",
    "bottom": "left top, left bottom",
    "right": "left top, right top",
    "top right": "left bottom, right top",
    "top left": "right bottom, left top",
    "right top": "left bottom, right top",
    "right bottom": "left top, right bottom",
    "bottom right": "left top, right bottom",
    "bottom left": "right top, left bottom",
    "left top": "right bottom, left top",
    "left bottom": "right top, left bottom"
};
module.exports = Gradient;

},{"634a7dd10d9e55c3":"blMr1","f5109df4f53c6475":"gBkXT","9b0943b25fc23ef0":"9k0Aa","9d2c0798b451b05d":"i2bKe","5a483e3b19a5e325":"j2sRV"}],"gBkXT":[function(require,module,exports) {
"use strict";
module.exports = {
    wrap: wrapRange,
    limit: limitRange,
    validate: validateRange,
    test: testRange,
    curry: curry,
    name: name
};
function wrapRange(min, max, value) {
    var maxLessMin = max - min;
    return ((value - min) % maxLessMin + maxLessMin) % maxLessMin + min;
}
function limitRange(min, max, value) {
    return Math.max(min, Math.min(max, value));
}
function validateRange(min, max, value, minExclusive, maxExclusive) {
    if (!testRange(min, max, value, minExclusive, maxExclusive)) throw new Error(value + " is outside of range [" + min + "," + max + ")");
    return value;
}
function testRange(min, max, value, minExclusive, maxExclusive) {
    return !(value < min || value > max || maxExclusive && value === max || minExclusive && value === min);
}
function name(min, max, minExcl, maxExcl) {
    return (minExcl ? "(" : "[") + min + "," + max + (maxExcl ? ")" : "]");
}
function curry(min, max, minExclusive, maxExclusive) {
    var boundNameFn = name.bind(null, min, max, minExclusive, maxExclusive);
    return {
        wrap: wrapRange.bind(null, min, max),
        limit: limitRange.bind(null, min, max),
        validate: function(value) {
            return validateRange(min, max, value, minExclusive, maxExclusive);
        },
        test: function(value) {
            return testRange(min, max, value, minExclusive, maxExclusive);
        },
        toString: boundNameFn,
        name: boundNameFn
    };
}

},{}],"82TVI":[function(require,module,exports) {
let OldValue = require("6f8bea42189aacad");
let Value = require("d79a8af6fc94e4f1");
function regexp(name) {
    return new RegExp(`(^|[\\s,(])(${name}($|[\\s),]))`, "gi");
}
class Intrinsic extends Value {
    regexp() {
        if (!this.regexpCache) this.regexpCache = regexp(this.name);
        return this.regexpCache;
    }
    isStretch() {
        return this.name === "stretch" || this.name === "fill" || this.name === "fill-available";
    }
    replace(string, prefix) {
        if (prefix === "-moz-" && this.isStretch()) return string.replace(this.regexp(), "$1-moz-available$3");
        if (prefix === "-webkit-" && this.isStretch()) return string.replace(this.regexp(), "$1-webkit-fill-available$3");
        return super.replace(string, prefix);
    }
    old(prefix) {
        let prefixed = prefix + this.name;
        if (this.isStretch()) {
            if (prefix === "-moz-") prefixed = "-moz-available";
            else if (prefix === "-webkit-") prefixed = "-webkit-fill-available";
        }
        return new OldValue(this.name, prefixed, prefixed, regexp(prefixed));
    }
    add(decl, prefix) {
        if (decl.prop.includes("grid") && prefix !== "-webkit-") return undefined;
        return super.add(decl, prefix);
    }
}
Intrinsic.names = [
    "max-content",
    "min-content",
    "fit-content",
    "fill",
    "fill-available",
    "stretch"
];
module.exports = Intrinsic;

},{"6f8bea42189aacad":"9k0Aa","d79a8af6fc94e4f1":"i2bKe"}],"6JN8P":[function(require,module,exports) {
let OldValue = require("e9fe6bcf3f89d667");
let Value = require("b966cdcd5dd13899");
class Pixelated extends Value {
    /**
   * Use non-standard name for WebKit and Firefox
   */ replace(string, prefix) {
        if (prefix === "-webkit-") return string.replace(this.regexp(), "$1-webkit-optimize-contrast");
        if (prefix === "-moz-") return string.replace(this.regexp(), "$1-moz-crisp-edges");
        return super.replace(string, prefix);
    }
    /**
   * Different name for WebKit and Firefox
   */ old(prefix) {
        if (prefix === "-webkit-") return new OldValue(this.name, "-webkit-optimize-contrast");
        if (prefix === "-moz-") return new OldValue(this.name, "-moz-crisp-edges");
        return super.old(prefix);
    }
}
Pixelated.names = [
    "pixelated"
];
module.exports = Pixelated;

},{"e9fe6bcf3f89d667":"9k0Aa","b966cdcd5dd13899":"i2bKe"}],"22xbR":[function(require,module,exports) {
let Value = require("d35f757602144894");
class ImageSet extends Value {
    /**
   * Use non-standard name for WebKit and Firefox
   */ replace(string, prefix) {
        let fixed = super.replace(string, prefix);
        if (prefix === "-webkit-") fixed = fixed.replace(/("[^"]+"|'[^']+')(\s+\d+\w)/gi, "url($1)$2");
        return fixed;
    }
}
ImageSet.names = [
    "image-set"
];
module.exports = ImageSet;

},{"d35f757602144894":"i2bKe"}],"6PHL0":[function(require,module,exports) {
let list = require("9a58da467ae94979").list;
let Value = require("fb7e453ae2c98742");
class CrossFade extends Value {
    replace(string, prefix) {
        return list.space(string).map((value)=>{
            if (value.slice(0, +this.name.length + 1) !== this.name + "(") return value;
            let close = value.lastIndexOf(")");
            let after = value.slice(close + 1);
            let args = value.slice(this.name.length + 1, close);
            if (prefix === "-webkit-") {
                let match = args.match(/\d*.?\d+%?/);
                if (match) {
                    args = args.slice(match[0].length).trim();
                    args += `, ${match[0]}`;
                } else args += ", 0.5";
            }
            return prefix + this.name + "(" + args + ")" + after;
        }).join(" ");
    }
}
CrossFade.names = [
    "cross-fade"
];
module.exports = CrossFade;

},{"9a58da467ae94979":"gauyy","fb7e453ae2c98742":"i2bKe"}],"jbk0I":[function(require,module,exports) {
let flexSpec = require("3d17f9adf5f97543");
let OldValue = require("e2de4a2234cad15c");
let Value = require("a6017105b56c1b15");
class DisplayFlex extends Value {
    constructor(name, prefixes){
        super(name, prefixes);
        if (name === "display-flex") this.name = "flex";
    }
    /**
   * Faster check for flex value
   */ check(decl) {
        return decl.prop === "display" && decl.value === this.name;
    }
    /**
   * Return value by spec
   */ prefixed(prefix) {
        let spec, value;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) {
            if (this.name === "flex") value = "box";
            else value = "inline-box";
        } else if (spec === 2012) {
            if (this.name === "flex") value = "flexbox";
            else value = "inline-flexbox";
        } else if (spec === "final") value = this.name;
        return prefix + value;
    }
    /**
   * Add prefix to value depend on flebox spec version
   */ replace(string, prefix) {
        return this.prefixed(prefix);
    }
    /**
   * Change value for old specs
   */ old(prefix) {
        let prefixed = this.prefixed(prefix);
        if (!prefixed) return undefined;
        return new OldValue(this.name, prefixed);
    }
}
DisplayFlex.names = [
    "display-flex",
    "inline-flex"
];
module.exports = DisplayFlex;

},{"3d17f9adf5f97543":"at1Im","e2de4a2234cad15c":"9k0Aa","a6017105b56c1b15":"i2bKe"}],"mUeq2":[function(require,module,exports) {
let Value = require("7501467e58d8c3f4");
class DisplayGrid extends Value {
    constructor(name, prefixes){
        super(name, prefixes);
        if (name === "display-grid") this.name = "grid";
    }
    /**
   * Faster check for flex value
   */ check(decl) {
        return decl.prop === "display" && decl.value === this.name;
    }
}
DisplayGrid.names = [
    "display-grid",
    "inline-grid"
];
module.exports = DisplayGrid;

},{"7501467e58d8c3f4":"i2bKe"}],"c8hJ9":[function(require,module,exports) {
let Value = require("9b2b79fdf3381432");
class FilterValue extends Value {
    constructor(name, prefixes){
        super(name, prefixes);
        if (name === "filter-function") this.name = "filter";
    }
}
FilterValue.names = [
    "filter",
    "filter-function"
];
module.exports = FilterValue;

},{"9b2b79fdf3381432":"i2bKe"}],"kD0Tm":[function(require,module,exports) {
let Selector = require("71e9ff1a5ee9577f");
let utils = require("c3c2cad72fb44f18");
class Autofill extends Selector {
    constructor(name, prefixes, all){
        super(name, prefixes, all);
        if (this.prefixes) this.prefixes = utils.uniq(this.prefixes.map(()=>"-webkit-"));
    }
    /**
   * Return different selectors depend on prefix
   */ prefixed(prefix) {
        if (prefix === "-webkit-") return ":-webkit-autofill";
        return `:${prefix}autofill`;
    }
}
Autofill.names = [
    ":autofill"
];
module.exports = Autofill;

},{"71e9ff1a5ee9577f":"lFkyP","c3c2cad72fb44f18":"j2sRV"}],"eWph3":[function(require,module,exports) {
let unpack = require("99a19e28a61129e2");
function browsersSort(a, b) {
    a = a.split(" ");
    b = b.split(" ");
    if (a[0] > b[0]) return 1;
    else if (a[0] < b[0]) return -1;
    else return Math.sign(parseFloat(a[1]) - parseFloat(b[1]));
}
// Convert Can I Use data
function f(data, opts, callback) {
    data = unpack(data);
    if (!callback) [callback, opts] = [
        opts,
        {}
    ];
    let match = opts.match || /\sx($|\s)/;
    let need = [];
    for(let browser in data.stats){
        let versions = data.stats[browser];
        for(let version in versions){
            let support = versions[version];
            if (support.match(match)) need.push(browser + " " + version);
        }
    }
    callback(need.sort(browsersSort));
}
// Add data for all properties
let result = {};
function prefix(names, data) {
    for (let name of names)result[name] = Object.assign({}, data);
}
function add(names, data) {
    for (let name of names)result[name].browsers = result[name].browsers.concat(data.browsers).sort(browsersSort);
}
module.exports = result;
// Border Radius
let prefixBorderRadius = require("b035850e458a350c");
f(prefixBorderRadius, (browsers)=>prefix([
        "border-radius",
        "border-top-left-radius",
        "border-top-right-radius",
        "border-bottom-right-radius",
        "border-bottom-left-radius"
    ], {
        mistakes: [
            "-khtml-",
            "-ms-",
            "-o-"
        ],
        feature: "border-radius",
        browsers
    }));
// Box Shadow
let prefixBoxshadow = require("e39d14bc5293b3f4");
f(prefixBoxshadow, (browsers)=>prefix([
        "box-shadow"
    ], {
        mistakes: [
            "-khtml-"
        ],
        feature: "css-boxshadow",
        browsers
    }));
// Animation
let prefixAnimation = require("b3bd29e205d34453");
f(prefixAnimation, (browsers)=>prefix([
        "animation",
        "animation-name",
        "animation-duration",
        "animation-delay",
        "animation-direction",
        "animation-fill-mode",
        "animation-iteration-count",
        "animation-play-state",
        "animation-timing-function",
        "@keyframes"
    ], {
        mistakes: [
            "-khtml-",
            "-ms-"
        ],
        feature: "css-animation",
        browsers
    }));
// Transition
let prefixTransition = require("2999dd7f2e63ef13");
f(prefixTransition, (browsers)=>prefix([
        "transition",
        "transition-property",
        "transition-duration",
        "transition-delay",
        "transition-timing-function"
    ], {
        mistakes: [
            "-khtml-",
            "-ms-"
        ],
        browsers,
        feature: "css-transitions"
    }));
// Transform 2D
let prefixTransform2d = require("286c0b408df5d1be");
f(prefixTransform2d, (browsers)=>prefix([
        "transform",
        "transform-origin"
    ], {
        feature: "transforms2d",
        browsers
    }));
// Transform 3D
let prefixTransforms3d = require("569b1488407ec85a");
f(prefixTransforms3d, (browsers)=>{
    prefix([
        "perspective",
        "perspective-origin"
    ], {
        feature: "transforms3d",
        browsers
    });
    return prefix([
        "transform-style"
    ], {
        mistakes: [
            "-ms-",
            "-o-"
        ],
        browsers,
        feature: "transforms3d"
    });
});
f(prefixTransforms3d, {
    match: /y\sx|y\s#2/
}, (browsers)=>prefix([
        "backface-visibility"
    ], {
        mistakes: [
            "-ms-",
            "-o-"
        ],
        feature: "transforms3d",
        browsers
    }));
// Gradients
let prefixGradients = require("df57827c6269a176");
f(prefixGradients, {
    match: /y\sx/
}, (browsers)=>prefix([
        "linear-gradient",
        "repeating-linear-gradient",
        "radial-gradient",
        "repeating-radial-gradient"
    ], {
        props: [
            "background",
            "background-image",
            "border-image",
            "mask",
            "list-style",
            "list-style-image",
            "content",
            "mask-image"
        ],
        mistakes: [
            "-ms-"
        ],
        feature: "css-gradients",
        browsers
    }));
f(prefixGradients, {
    match: /a\sx/
}, (browsers)=>{
    browsers = browsers.map((i)=>{
        if (/firefox|op/.test(i)) return i;
        else return `${i} old`;
    });
    return add([
        "linear-gradient",
        "repeating-linear-gradient",
        "radial-gradient",
        "repeating-radial-gradient"
    ], {
        feature: "css-gradients",
        browsers
    });
});
// Box sizing
let prefixBoxsizing = require("1987114b97aa6b95");
f(prefixBoxsizing, (browsers)=>prefix([
        "box-sizing"
    ], {
        feature: "css3-boxsizing",
        browsers
    }));
// Filter Effects
let prefixFilters = require("61b67130255aa4ea");
f(prefixFilters, (browsers)=>prefix([
        "filter"
    ], {
        feature: "css-filters",
        browsers
    }));
// filter() function
let prefixFilterFunction = require("2f20eb8138b9c801");
f(prefixFilterFunction, (browsers)=>prefix([
        "filter-function"
    ], {
        props: [
            "background",
            "background-image",
            "border-image",
            "mask",
            "list-style",
            "list-style-image",
            "content",
            "mask-image"
        ],
        feature: "css-filter-function",
        browsers
    }));
// Backdrop-filter
let prefixBackdrop = require("cc477886a5d970b5");
f(prefixBackdrop, {
    match: /y\sx|y\s#2/
}, (browsers)=>prefix([
        "backdrop-filter"
    ], {
        feature: "css-backdrop-filter",
        browsers
    }));
// element() function
let prefixElementFunction = require("7de45ce5d22a4304");
f(prefixElementFunction, (browsers)=>prefix([
        "element"
    ], {
        props: [
            "background",
            "background-image",
            "border-image",
            "mask",
            "list-style",
            "list-style-image",
            "content",
            "mask-image"
        ],
        feature: "css-element-function",
        browsers
    }));
// Multicolumns
let prefixMulticolumns = require("8ed2b1efa9d7d9c8");
f(prefixMulticolumns, (browsers)=>{
    prefix([
        "columns",
        "column-width",
        "column-gap",
        "column-rule",
        "column-rule-color",
        "column-rule-width",
        "column-count",
        "column-rule-style",
        "column-span",
        "column-fill"
    ], {
        feature: "multicolumn",
        browsers
    });
    let noff = browsers.filter((i)=>!/firefox/.test(i));
    prefix([
        "break-before",
        "break-after",
        "break-inside"
    ], {
        feature: "multicolumn",
        browsers: noff
    });
});
// User select
let prefixUserSelect = require("fee73e0db9e79125");
f(prefixUserSelect, (browsers)=>prefix([
        "user-select"
    ], {
        mistakes: [
            "-khtml-"
        ],
        feature: "user-select-none",
        browsers
    }));
// Flexible Box Layout
let prefixFlexbox = require("39a07feee3fd7566");
f(prefixFlexbox, {
    match: /a\sx/
}, (browsers)=>{
    browsers = browsers.map((i)=>{
        if (/ie|firefox/.test(i)) return i;
        else return `${i} 2009`;
    });
    prefix([
        "display-flex",
        "inline-flex"
    ], {
        props: [
            "display"
        ],
        feature: "flexbox",
        browsers
    });
    prefix([
        "flex",
        "flex-grow",
        "flex-shrink",
        "flex-basis"
    ], {
        feature: "flexbox",
        browsers
    });
    prefix([
        "flex-direction",
        "flex-wrap",
        "flex-flow",
        "justify-content",
        "order",
        "align-items",
        "align-self",
        "align-content"
    ], {
        feature: "flexbox",
        browsers
    });
});
f(prefixFlexbox, {
    match: /y\sx/
}, (browsers)=>{
    add([
        "display-flex",
        "inline-flex"
    ], {
        feature: "flexbox",
        browsers
    });
    add([
        "flex",
        "flex-grow",
        "flex-shrink",
        "flex-basis"
    ], {
        feature: "flexbox",
        browsers
    });
    add([
        "flex-direction",
        "flex-wrap",
        "flex-flow",
        "justify-content",
        "order",
        "align-items",
        "align-self",
        "align-content"
    ], {
        feature: "flexbox",
        browsers
    });
});
// calc() unit
let prefixCalc = require("c8f9dab3ca36028e");
f(prefixCalc, (browsers)=>prefix([
        "calc"
    ], {
        props: [
            "*"
        ],
        feature: "calc",
        browsers
    }));
// Background options
let prefixBackgroundOptions = require("89838ba3eb709d68");
f(prefixBackgroundOptions, (browsers)=>prefix([
        "background-origin",
        "background-size"
    ], {
        feature: "background-img-opts",
        browsers
    }));
// background-clip: text
let prefixBackgroundClipText = require("abe67a58efc73ba0");
f(prefixBackgroundClipText, (browsers)=>prefix([
        "background-clip"
    ], {
        feature: "background-clip-text",
        browsers
    }));
// Font feature settings
let prefixFontFeature = require("f053ca332c55774b");
f(prefixFontFeature, (browsers)=>prefix([
        "font-feature-settings",
        "font-variant-ligatures",
        "font-language-override"
    ], {
        feature: "font-feature",
        browsers
    }));
// CSS font-kerning property
let prefixFontKerning = require("ad30601cfae1c0c3");
f(prefixFontKerning, (browsers)=>prefix([
        "font-kerning"
    ], {
        feature: "font-kerning",
        browsers
    }));
// Border image
let prefixBorderImage = require("976cbd312ec5e6c8");
f(prefixBorderImage, (browsers)=>prefix([
        "border-image"
    ], {
        feature: "border-image",
        browsers
    }));
// Selection selector
let prefixSelection = require("8e83a905b768c399");
f(prefixSelection, (browsers)=>prefix([
        "::selection"
    ], {
        selector: true,
        feature: "css-selection",
        browsers
    }));
// Placeholder selector
let prefixPlaceholder = require("34efdb36ecfe42a7");
f(prefixPlaceholder, (browsers)=>{
    prefix([
        "::placeholder"
    ], {
        selector: true,
        feature: "css-placeholder",
        browsers: browsers.concat([
            "ie 10 old",
            "ie 11 old",
            "firefox 18 old"
        ])
    });
});
// Placeholder-shown selector
let prefixPlaceholderShown = require("c15979c26d40d357");
f(prefixPlaceholderShown, (browsers)=>{
    prefix([
        ":placeholder-shown"
    ], {
        selector: true,
        feature: "css-placeholder-shown",
        browsers
    });
});
// Hyphenation
let prefixHyphens = require("61b293a3af841ae5");
f(prefixHyphens, (browsers)=>prefix([
        "hyphens"
    ], {
        feature: "css-hyphens",
        browsers
    }));
// Fullscreen selector
let prefixFullscreen = require("a0d58f3fcb9086f0");
f(prefixFullscreen, (browsers)=>prefix([
        ":fullscreen"
    ], {
        selector: true,
        feature: "fullscreen",
        browsers
    }));
f(prefixFullscreen, {
    match: /x(\s#2|$)/
}, (browsers)=>prefix([
        "::backdrop"
    ], {
        selector: true,
        feature: "fullscreen",
        browsers
    }));
// File selector button
let prefixFileSelectorButton = require("8fec301951787a84");
f(prefixFileSelectorButton, (browsers)=>prefix([
        "::file-selector-button"
    ], {
        selector: true,
        feature: "file-selector-button",
        browsers
    }));
// :autofill
let prefixAutofill = require("e2e07ab159ea14f7");
f(prefixAutofill, (browsers)=>prefix([
        ":autofill"
    ], {
        selector: true,
        feature: "css-autofill",
        browsers
    }));
// Tab size
let prefixTabsize = require("2028e463c58bcc62");
f(prefixTabsize, (browsers)=>prefix([
        "tab-size"
    ], {
        feature: "css3-tabsize",
        browsers
    }));
// Intrinsic & extrinsic sizing
let prefixIntrinsic = require("1c4f8fd2ebe9e25c");
let sizeProps = [
    "width",
    "min-width",
    "max-width",
    "height",
    "min-height",
    "max-height",
    "inline-size",
    "min-inline-size",
    "max-inline-size",
    "block-size",
    "min-block-size",
    "max-block-size",
    "grid",
    "grid-template",
    "grid-template-rows",
    "grid-template-columns",
    "grid-auto-columns",
    "grid-auto-rows"
];
f(prefixIntrinsic, (browsers)=>prefix([
        "max-content",
        "min-content"
    ], {
        props: sizeProps,
        feature: "intrinsic-width",
        browsers
    }));
f(prefixIntrinsic, {
    match: /x|\s#4/
}, (browsers)=>prefix([
        "fill",
        "fill-available"
    ], {
        props: sizeProps,
        feature: "intrinsic-width",
        browsers
    }));
f(prefixIntrinsic, {
    match: /x|\s#5/
}, (browsers)=>prefix([
        "fit-content"
    ], {
        props: sizeProps,
        feature: "intrinsic-width",
        browsers
    }));
// Stretch value
let prefixStretch = require("bc6113b3669f374b");
f(prefixStretch, (browsers)=>prefix([
        "stretch"
    ], {
        props: sizeProps,
        feature: "css-width-stretch",
        browsers
    }));
// Zoom cursors
let prefixCursorsNewer = require("dd6e7f745f59223f");
f(prefixCursorsNewer, (browsers)=>prefix([
        "zoom-in",
        "zoom-out"
    ], {
        props: [
            "cursor"
        ],
        feature: "css3-cursors-newer",
        browsers
    }));
// Grab cursors
let prefixCursorsGrab = require("7023784dae640551");
f(prefixCursorsGrab, (browsers)=>prefix([
        "grab",
        "grabbing"
    ], {
        props: [
            "cursor"
        ],
        feature: "css3-cursors-grab",
        browsers
    }));
// Sticky position
let prefixSticky = require("80f4eb961089e3f5");
f(prefixSticky, (browsers)=>prefix([
        "sticky"
    ], {
        props: [
            "position"
        ],
        feature: "css-sticky",
        browsers
    }));
// Pointer Events
let prefixPointer = require("3a4fe6f8cb485bb5");
f(prefixPointer, (browsers)=>prefix([
        "touch-action"
    ], {
        feature: "pointer",
        browsers
    }));
// Text decoration
let prefixDecoration = require("b734329c6641bc96");
f(prefixDecoration, {
    match: /x.*#[235]/
}, (browsers)=>prefix([
        "text-decoration-skip",
        "text-decoration-skip-ink"
    ], {
        feature: "text-decoration",
        browsers
    }));
let prefixDecorationShorthand = require("33ee6e27203bc25b");
f(prefixDecorationShorthand, (browsers)=>prefix([
        "text-decoration"
    ], {
        feature: "text-decoration",
        browsers
    }));
let prefixDecorationColor = require("e22cfb39aaa80187");
f(prefixDecorationColor, (browsers)=>prefix([
        "text-decoration-color"
    ], {
        feature: "text-decoration",
        browsers
    }));
let prefixDecorationLine = require("9be3e91980608c88");
f(prefixDecorationLine, (browsers)=>prefix([
        "text-decoration-line"
    ], {
        feature: "text-decoration",
        browsers
    }));
let prefixDecorationStyle = require("dc218af6bc9da6cc");
f(prefixDecorationStyle, (browsers)=>prefix([
        "text-decoration-style"
    ], {
        feature: "text-decoration",
        browsers
    }));
// Text Size Adjust
let prefixTextSizeAdjust = require("f088e18ce91f955e");
f(prefixTextSizeAdjust, (browsers)=>prefix([
        "text-size-adjust"
    ], {
        feature: "text-size-adjust",
        browsers
    }));
// CSS Masks
let prefixCssMasks = require("fbe71b54565e6ea7");
f(prefixCssMasks, (browsers)=>{
    prefix([
        "mask-clip",
        "mask-composite",
        "mask-image",
        "mask-origin",
        "mask-repeat",
        "mask-border-repeat",
        "mask-border-source"
    ], {
        feature: "css-masks",
        browsers
    });
    prefix([
        "mask",
        "mask-position",
        "mask-size",
        "mask-border",
        "mask-border-outset",
        "mask-border-width",
        "mask-border-slice"
    ], {
        feature: "css-masks",
        browsers
    });
});
// CSS clip-path property
let prefixClipPath = require("b0d453cd4d4214cf");
f(prefixClipPath, (browsers)=>prefix([
        "clip-path"
    ], {
        feature: "css-clip-path",
        browsers
    }));
// Fragmented Borders and Backgrounds
let prefixBoxdecoration = require("171c6bd2beec8044");
f(prefixBoxdecoration, (browsers)=>prefix([
        "box-decoration-break"
    ], {
        feature: "css-boxdecorationbreak",
        browsers
    }));
// CSS3 object-fit/object-position
let prefixObjectFit = require("4158e7957b6a91de");
f(prefixObjectFit, (browsers)=>prefix([
        "object-fit",
        "object-position"
    ], {
        feature: "object-fit",
        browsers
    }));
// CSS Shapes
let prefixShapes = require("af57849329dbd876");
f(prefixShapes, (browsers)=>prefix([
        "shape-margin",
        "shape-outside",
        "shape-image-threshold"
    ], {
        feature: "css-shapes",
        browsers
    }));
// CSS3 text-overflow
let prefixTextOverflow = require("e04a05e79b4e7f0f");
f(prefixTextOverflow, (browsers)=>prefix([
        "text-overflow"
    ], {
        feature: "text-overflow",
        browsers
    }));
// Viewport at-rule
let prefixDeviceadaptation = require("96611be0719de70b");
f(prefixDeviceadaptation, (browsers)=>prefix([
        "@viewport"
    ], {
        feature: "css-deviceadaptation",
        browsers
    }));
// Resolution Media Queries
let prefixResolut = require("d4027e002a43009d");
f(prefixResolut, {
    match: /( x($| )|a #2)/
}, (browsers)=>prefix([
        "@resolution"
    ], {
        feature: "css-media-resolution",
        browsers
    }));
// CSS text-align-last
let prefixTextAlignLast = require("45fb2ace7d08ba8");
f(prefixTextAlignLast, (browsers)=>prefix([
        "text-align-last"
    ], {
        feature: "css-text-align-last",
        browsers
    }));
// Crisp Edges Image Rendering Algorithm
let prefixCrispedges = require("83cdfb6625869403");
f(prefixCrispedges, {
    match: /y x|a x #1/
}, (browsers)=>prefix([
        "pixelated"
    ], {
        props: [
            "image-rendering"
        ],
        feature: "css-crisp-edges",
        browsers
    }));
f(prefixCrispedges, {
    match: /a x #2/
}, (browsers)=>prefix([
        "image-rendering"
    ], {
        feature: "css-crisp-edges",
        browsers
    }));
// Logical Properties
let prefixLogicalProps = require("1f31111071997426");
f(prefixLogicalProps, (browsers)=>prefix([
        "border-inline-start",
        "border-inline-end",
        "margin-inline-start",
        "margin-inline-end",
        "padding-inline-start",
        "padding-inline-end"
    ], {
        feature: "css-logical-props",
        browsers
    }));
f(prefixLogicalProps, {
    match: /x\s#2/
}, (browsers)=>prefix([
        "border-block-start",
        "border-block-end",
        "margin-block-start",
        "margin-block-end",
        "padding-block-start",
        "padding-block-end"
    ], {
        feature: "css-logical-props",
        browsers
    }));
// CSS appearance
let prefixAppearance = require("37fb493ccfe247e0");
f(prefixAppearance, {
    match: /#2|x/
}, (browsers)=>prefix([
        "appearance"
    ], {
        feature: "css-appearance",
        browsers
    }));
// CSS Scroll snap points
let prefixSnappoints = require("ccba5afeae2eef5b");
f(prefixSnappoints, (browsers)=>prefix([
        "scroll-snap-type",
        "scroll-snap-coordinate",
        "scroll-snap-destination",
        "scroll-snap-points-x",
        "scroll-snap-points-y"
    ], {
        feature: "css-snappoints",
        browsers
    }));
// CSS Regions
let prefixRegions = require("5bc38cf6327a4cda");
f(prefixRegions, (browsers)=>prefix([
        "flow-into",
        "flow-from",
        "region-fragment"
    ], {
        feature: "css-regions",
        browsers
    }));
// CSS image-set
let prefixImageSet = require("14fab534b2344319");
f(prefixImageSet, (browsers)=>prefix([
        "image-set"
    ], {
        props: [
            "background",
            "background-image",
            "border-image",
            "cursor",
            "mask",
            "mask-image",
            "list-style",
            "list-style-image",
            "content"
        ],
        feature: "css-image-set",
        browsers
    }));
// Writing Mode
let prefixWritingMode = require("865d3d49fcd42073");
f(prefixWritingMode, {
    match: /a|x/
}, (browsers)=>prefix([
        "writing-mode"
    ], {
        feature: "css-writing-mode",
        browsers
    }));
// Cross-Fade Function
let prefixCrossFade = require("44b978989beade12");
f(prefixCrossFade, (browsers)=>prefix([
        "cross-fade"
    ], {
        props: [
            "background",
            "background-image",
            "border-image",
            "mask",
            "list-style",
            "list-style-image",
            "content",
            "mask-image"
        ],
        feature: "css-cross-fade",
        browsers
    }));
// Read Only selector
let prefixReadOnly = require("9944501936850e95");
f(prefixReadOnly, (browsers)=>prefix([
        ":read-only",
        ":read-write"
    ], {
        selector: true,
        feature: "css-read-only-write",
        browsers
    }));
// Text Emphasize
let prefixTextEmphasis = require("7585591375b6a735");
f(prefixTextEmphasis, (browsers)=>prefix([
        "text-emphasis",
        "text-emphasis-position",
        "text-emphasis-style",
        "text-emphasis-color"
    ], {
        feature: "text-emphasis",
        browsers
    }));
// CSS Grid Layout
let prefixGrid = require("881f2d0a842a5494");
f(prefixGrid, (browsers)=>{
    prefix([
        "display-grid",
        "inline-grid"
    ], {
        props: [
            "display"
        ],
        feature: "css-grid",
        browsers
    });
    prefix([
        "grid-template-columns",
        "grid-template-rows",
        "grid-row-start",
        "grid-column-start",
        "grid-row-end",
        "grid-column-end",
        "grid-row",
        "grid-column",
        "grid-area",
        "grid-template",
        "grid-template-areas",
        "place-self"
    ], {
        feature: "css-grid",
        browsers
    });
});
f(prefixGrid, {
    match: /a x/
}, (browsers)=>prefix([
        "grid-column-align",
        "grid-row-align"
    ], {
        feature: "css-grid",
        browsers
    }));
// CSS text-spacing
let prefixTextSpacing = require("aa9393bc1c07f75a");
f(prefixTextSpacing, (browsers)=>prefix([
        "text-spacing"
    ], {
        feature: "css-text-spacing",
        browsers
    }));
// :any-link selector
let prefixAnyLink = require("cde76a47a708fb5d");
f(prefixAnyLink, (browsers)=>prefix([
        ":any-link"
    ], {
        selector: true,
        feature: "css-any-link",
        browsers
    }));
// unicode-bidi
let bidiIsolate = require("4c42611f7a159bbd");
f(bidiIsolate, (browsers)=>prefix([
        "isolate"
    ], {
        props: [
            "unicode-bidi"
        ],
        feature: "css-unicode-bidi",
        browsers
    }));
let bidiPlaintext = require("664e67c70e918a06");
f(bidiPlaintext, (browsers)=>prefix([
        "plaintext"
    ], {
        props: [
            "unicode-bidi"
        ],
        feature: "css-unicode-bidi",
        browsers
    }));
let bidiOverride = require("d2b9b57a3e6da222");
f(bidiOverride, {
    match: /y x/
}, (browsers)=>prefix([
        "isolate-override"
    ], {
        props: [
            "unicode-bidi"
        ],
        feature: "css-unicode-bidi",
        browsers
    }));
// overscroll-behavior selector
let prefixOverscroll = require("8eb28da30c966653");
f(prefixOverscroll, {
    match: /a #1/
}, (browsers)=>prefix([
        "overscroll-behavior"
    ], {
        feature: "css-overscroll-behavior",
        browsers
    }));
// text-orientation
let prefixTextOrientation = require("6fbd83676c2ea0fd");
f(prefixTextOrientation, (browsers)=>prefix([
        "text-orientation"
    ], {
        feature: "css-text-orientation",
        browsers
    }));
// print-color-adjust
let prefixPrintAdjust = require("4a8235548c1a19b4");
f(prefixPrintAdjust, (browsers)=>prefix([
        "print-color-adjust",
        "color-adjust"
    ], {
        feature: "css-print-color-adjust",
        browsers
    }));

},{"99a19e28a61129e2":"8Fe8m","b035850e458a350c":"2uKlP","e39d14bc5293b3f4":"gfUB6","b3bd29e205d34453":"8bbL1","2999dd7f2e63ef13":"aYGPv","286c0b408df5d1be":"8cbBD","569b1488407ec85a":"fyeoH","df57827c6269a176":"ehCDb","1987114b97aa6b95":"anuF4","61b67130255aa4ea":"5syfP","2f20eb8138b9c801":"7h55z","cc477886a5d970b5":"jAM4a","7de45ce5d22a4304":"lehVO","8ed2b1efa9d7d9c8":"4N4Wg","fee73e0db9e79125":"i2zHQ","39a07feee3fd7566":"7cT7b","c8f9dab3ca36028e":"cKdsf","89838ba3eb709d68":"2IXvD","abe67a58efc73ba0":"2oaUs","f053ca332c55774b":"3ZZhi","ad30601cfae1c0c3":"6N0Fe","976cbd312ec5e6c8":"8y74w","8e83a905b768c399":"9xVv4","34efdb36ecfe42a7":"3PAh9","c15979c26d40d357":"5Cca0","61b293a3af841ae5":"7uTc6","a0d58f3fcb9086f0":"3Q7QH","8fec301951787a84":"5tdjV","e2e07ab159ea14f7":"8YCh9","2028e463c58bcc62":"9DbFb","1c4f8fd2ebe9e25c":"aLWe9","bc6113b3669f374b":"fdwX5","dd6e7f745f59223f":"jQl58","7023784dae640551":"hfq8O","80f4eb961089e3f5":"86xlT","3a4fe6f8cb485bb5":"af8Nk","b734329c6641bc96":"eWhth","33ee6e27203bc25b":"9qHYr","e22cfb39aaa80187":"67gyf","9be3e91980608c88":"g7tIT","dc218af6bc9da6cc":"xMIiJ","f088e18ce91f955e":"c8z1H","fbe71b54565e6ea7":"320J3","b0d453cd4d4214cf":"6p215","171c6bd2beec8044":"74BrZ","4158e7957b6a91de":"efBNa","af57849329dbd876":"iC7Na","e04a05e79b4e7f0f":"l7Lfq","96611be0719de70b":"2YCOD","d4027e002a43009d":"5ncnY","45fb2ace7d08ba8":"855JK","83cdfb6625869403":"lS0qz","1f31111071997426":"85Pd7","37fb493ccfe247e0":"e6RSr","ccba5afeae2eef5b":"d5kdf","5bc38cf6327a4cda":"550HK","14fab534b2344319":"7mS4b","865d3d49fcd42073":"hdi6D","44b978989beade12":"eTrsm","9944501936850e95":"8B7GT","7585591375b6a735":"bVqf0","881f2d0a842a5494":"e0FO2","aa9393bc1c07f75a":"5pxlz","cde76a47a708fb5d":"1cdXm","4c42611f7a159bbd":"jJrdx","664e67c70e918a06":"akbkN","d2b9b57a3e6da222":"1xazV","8eb28da30c966653":"htcSj","6fbd83676c2ea0fd":"c1ESd","4a8235548c1a19b4":"31QDf"}],"2uKlP":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "G A B",
            "2": "J E F GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "257": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB",
            "289": "wB IC JC",
            "292": "HC"
        },
        D: {
            "1": "0 1 2 3 4 5 6 7 8 9 y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "I"
        },
        E: {
            "1": "y E F G A B C K L H OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "33": "I LC 2B",
            "129": "J MC NC"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h WC XC tB EC YC uB",
            "2": "G UC VC"
        },
        G: {
            "1": "F ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "33": "2B"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "wB I D vC wC xC FC yC zC",
            "33": "uC"
        },
        J: {
            "1": "E A"
        },
        K: {
            "1": "B C j tB EC uB",
            "2": "A"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "257": "FD"
        }
    },
    B: 4,
    C: "CSS3 Border-radius (rounded corners)"
};

},{}],"gfUB6":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "G A B",
            "2": "J E F GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB",
            "33": "IC JC"
        },
        D: {
            "1": "0 1 2 3 4 5 6 7 8 9 A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "I y J E F G"
        },
        E: {
            "1": "J E F G A B C K L H MC NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "33": "y",
            "164": "I LC 2B"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h WC XC tB EC YC uB",
            "2": "G UC VC"
        },
        G: {
            "1": "F aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "33": "ZC FC",
            "164": "2B"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "I D xC FC yC zC",
            "164": "wB uC vC wC"
        },
        J: {
            "1": "A",
            "33": "E"
        },
        K: {
            "1": "B C j tB EC uB",
            "2": "A"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "CSS3 Box-shadow"
};

},{}],"8bbL1":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "A B",
            "2": "J E F G GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "0 1 2 3 4 5 6 7 8 9 M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I IC JC",
            "33": "y J E F G A B C K L H"
        },
        D: {
            "1": "MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB"
        },
        E: {
            "1": "G A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "LC 2B",
            "33": "J E F MC NC OC",
            "292": "I y"
        },
        F: {
            "1": "9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h uB",
            "2": "G B UC VC WC XC tB EC YC",
            "33": "0 1 2 3 4 5 6 7 8 C H M N O z i"
        },
        G: {
            "1": "eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "33": "F bC cC dC",
            "164": "2B ZC FC aC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "33": "I xC FC yC zC",
            "164": "wB uC vC wC"
        },
        J: {
            "33": "E A"
        },
        K: {
            "1": "j uB",
            "2": "A B C tB EC"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 5,
    C: "CSS Animation"
};

},{}],"aYGPv":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "A B",
            "2": "J E F G GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "0 1 2 3 4 5 6 7 8 9 M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB IC JC",
            "33": "y J E F G A B C K L H",
            "164": "I"
        },
        D: {
            "1": "5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "0 1 2 3 4 I y J E F G A B C K L H M N O z i"
        },
        E: {
            "1": "E F G A B C K L H NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "33": "J MC",
            "164": "I y LC 2B"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h uB",
            "2": "G UC VC",
            "33": "C",
            "164": "B WC XC tB EC YC"
        },
        G: {
            "1": "F cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "33": "bC",
            "164": "2B ZC FC aC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D yC zC",
            "33": "wB I uC vC wC xC FC"
        },
        J: {
            "1": "A",
            "33": "E"
        },
        K: {
            "1": "j uB",
            "33": "C",
            "164": "A B tB EC"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 5,
    C: "CSS3 Transitions"
};

},{}],"8cbBD":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "GC",
            "8": "J E F",
            "129": "A B",
            "161": "G"
        },
        B: {
            "1": "N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "129": "C K L H M"
        },
        C: {
            "1": "0 1 2 3 4 5 6 7 8 9 M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB",
            "33": "I y J E F G A B C K L H IC JC"
        },
        D: {
            "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB"
        },
        E: {
            "1": "G A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "33": "I y J E F LC 2B MC NC OC"
        },
        F: {
            "1": "2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h uB",
            "2": "G UC VC",
            "33": "0 1 B C H M N O z i WC XC tB EC YC"
        },
        G: {
            "1": "eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "33": "F 2B ZC FC aC bC cC dC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "33": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "33": "E A"
        },
        K: {
            "1": "B C j tB EC uB",
            "2": "A"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "CSS3 2D Transforms"
};

},{}],"fyeoH":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G GC",
            "132": "A B"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "0 1 2 3 4 5 6 7 8 9 M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y J E F G IC JC",
            "33": "A B C K L H"
        },
        D: {
            "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "I y J E F G A B",
            "33": "0 1 2 3 4 5 6 7 8 9 C K L H M N O z i AB BB CB DB EB"
        },
        E: {
            "1": "6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "LC 2B",
            "33": "I y J E F MC NC OC",
            "257": "G A B C K L H PC 3B tB uB 4B QC RC 5B"
        },
        F: {
            "1": "2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 H M N O z i"
        },
        G: {
            "1": "6B 7B 8B vB 9B AC BC CC DC",
            "33": "F 2B ZC FC aC bC cC dC",
            "257": "eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "uC vC wC",
            "33": "wB I xC FC yC zC"
        },
        J: {
            "33": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "132": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 5,
    C: "CSS3 3D Transforms"
};

},{}],"ehCDb":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "A B",
            "2": "J E F G GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB IC",
            "260": "0 1 2 3 4 5 6 7 8 9 M N O z i AB BB CB DB EB",
            "292": "I y J E F G A B C K L H JC"
        },
        D: {
            "1": "5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "0 1 2 3 4 A B C K L H M N O z i",
            "548": "I y J E F G"
        },
        E: {
            "1": "6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "LC 2B",
            "260": "E F G A B C K L H NC OC PC 3B tB uB 4B QC RC 5B",
            "292": "J MC",
            "804": "I y"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h uB",
            "2": "G B UC VC WC XC",
            "33": "C YC",
            "164": "tB EC"
        },
        G: {
            "1": "6B 7B 8B vB 9B AC BC CC DC",
            "260": "F cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B",
            "292": "aC bC",
            "804": "2B ZC FC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D yC zC",
            "33": "I xC FC",
            "548": "wB uC vC wC"
        },
        J: {
            "1": "A",
            "548": "E"
        },
        K: {
            "1": "j uB",
            "2": "A B",
            "33": "C",
            "164": "tB EC"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "CSS Gradients"
};

},{}],"anuF4":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "F G A B",
            "8": "J E GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "33": "0 1 2 3 4 5 6 7 HC wB I y J E F G A B C K L H M N O z i IC JC"
        },
        D: {
            "1": "0 1 2 3 4 5 6 7 8 9 A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "I y J E F G"
        },
        E: {
            "1": "J E F G A B C K L H MC NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "33": "I y LC 2B"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h UC VC WC XC tB EC YC uB",
            "2": "G"
        },
        G: {
            "1": "F aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "33": "2B ZC FC"
        },
        H: {
            "1": "tC"
        },
        I: {
            "1": "I D xC FC yC zC",
            "33": "wB uC vC wC"
        },
        J: {
            "1": "A",
            "33": "E"
        },
        K: {
            "1": "A B C j tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 5,
    C: "CSS3 Box-sizing"
};

},{}],"5syfP":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "1028": "K L H M N O",
            "1346": "C"
        },
        C: {
            "1": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB IC",
            "196": "DB",
            "516": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB JC"
        },
        D: {
            "1": "WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "I y J E F G A B C K L H M N",
            "33": "0 1 2 3 4 5 6 7 8 9 O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB"
        },
        E: {
            "1": "A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y LC 2B MC",
            "33": "J E F G NC OC"
        },
        F: {
            "1": "JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB"
        },
        G: {
            "1": "fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC",
            "33": "F bC cC dC eC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC",
            "33": "yC zC"
        },
        J: {
            "2": "E",
            "33": "A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "33": "I 1C 2C"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 5,
    C: "CSS Filter Effects"
};

},{}],"7h55z":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "2": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B IC JC"
        },
        D: {
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "1": "A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J E F LC 2B MC NC OC",
            "33": "G"
        },
        F: {
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h UC VC WC XC tB EC YC uB"
        },
        G: {
            "1": "gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "F 2B ZC FC aC bC cC dC",
            "33": "eC fC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "2": "wB I D uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "2": "A B C j tB EC uB"
        },
        L: {
            "2": "D"
        },
        M: {
            "2": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "2": "0C"
        },
        P: {
            "2": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "2": "4B"
        },
        R: {
            "2": "ED"
        },
        S: {
            "2": "FD GD"
        }
    },
    B: 5,
    C: "CSS filter() function"
};

},{}],"jAM4a":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M",
            "257": "N O"
        },
        C: {
            "1": "o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB IC JC",
            "578": "lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n"
        },
        D: {
            "1": "qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB",
            "194": "QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB"
        },
        E: {
            "2": "I y J E F LC 2B MC NC OC",
            "33": "G A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC"
        },
        F: {
            "1": "fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB UC VC WC XC tB EC YC uB",
            "194": "DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB"
        },
        G: {
            "2": "F 2B ZC FC aC bC cC dC",
            "33": "eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 7C 8C 9C AD vB BD CD DD",
            "2": "I",
            "194": "1C 2C 3C 4C 5C 3B 6C"
        },
        Q: {
            "2": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "2": "FD GD"
        }
    },
    B: 7,
    C: "CSS Backdrop Filter"
};

},{}],"lehVO":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "2": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "33": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "164": "HC wB IC JC"
        },
        D: {
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "2": "I y J E F G A B C K L H LC 2B MC NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC"
        },
        F: {
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h UC VC WC XC tB EC YC uB"
        },
        G: {
            "2": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "2": "wB I D uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "2": "A B C j tB EC uB"
        },
        L: {
            "2": "D"
        },
        M: {
            "33": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "2": "0C"
        },
        P: {
            "2": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "2": "4B"
        },
        R: {
            "2": "ED"
        },
        S: {
            "33": "FD GD"
        }
    },
    B: 5,
    C: "CSS element() function"
};

},{}],"4N4Wg":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "A B",
            "2": "J E F G GC"
        },
        B: {
            "1": "C K L H M N O",
            "516": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "132": "VB WB XB YB ZB aB bB xB cB yB dB eB fB",
            "164": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB IC JC",
            "516": "gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a",
            "1028": "b c d e f g h k l m n o p q r s t u v w x D 0B 1B"
        },
        D: {
            "420": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB",
            "516": "TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "1": "A B C K L H 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "132": "G PC",
            "164": "E F OC",
            "420": "I y J LC 2B MC NC"
        },
        F: {
            "1": "C tB EC YC uB",
            "2": "G B UC VC WC XC",
            "420": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB",
            "516": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        G: {
            "1": "gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "132": "eC fC",
            "164": "F cC dC",
            "420": "2B ZC FC aC bC"
        },
        H: {
            "1": "tC"
        },
        I: {
            "420": "wB I uC vC wC xC FC yC zC",
            "516": "D"
        },
        J: {
            "420": "E A"
        },
        K: {
            "1": "C tB EC uB",
            "2": "A B",
            "516": "j"
        },
        L: {
            "516": "D"
        },
        M: {
            "1028": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "516": "0C"
        },
        P: {
            "1": "i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "420": "I"
        },
        Q: {
            "516": "4B"
        },
        R: {
            "516": "ED"
        },
        S: {
            "164": "FD GD"
        }
    },
    B: 4,
    C: "CSS3 Multiple column layout"
};

},{}],"i2zHQ":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G GC",
            "33": "A B"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "33": "C K L H M N O"
        },
        C: {
            "1": "kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "33": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB IC JC"
        },
        D: {
            "1": "XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB"
        },
        E: {
            "1": "TC",
            "33": "I y J E F G A B C K L H LC 2B MC NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC"
        },
        F: {
            "1": "KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB"
        },
        G: {
            "33": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "33": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "33": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "33": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "33": "I 1C"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "33": "FD"
        }
    },
    B: 5,
    C: "CSS user-select: none"
};

},{}],"7cT7b":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G GC",
            "1028": "B",
            "1316": "A"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "164": "0 HC wB I y J E F G A B C K L H M N O z i IC JC",
            "516": "1 2 3 4 5 6"
        },
        D: {
            "1": "8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "0 1 2 3 4 5 6 7",
            "164": "I y J E F G A B C K L H M N O z i"
        },
        E: {
            "1": "G A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "33": "E F NC OC",
            "164": "I y J LC 2B MC"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h uB",
            "2": "G B C UC VC WC XC tB EC YC",
            "33": "H M"
        },
        G: {
            "1": "eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "33": "F cC dC",
            "164": "2B ZC FC aC bC"
        },
        H: {
            "1": "tC"
        },
        I: {
            "1": "D yC zC",
            "164": "wB I uC vC wC xC FC"
        },
        J: {
            "1": "A",
            "164": "E"
        },
        K: {
            "1": "j uB",
            "2": "A B C tB EC"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "B",
            "292": "A"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "CSS Flexible Box Layout Module"
};

},{}],"cKdsf":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F GC",
            "260": "G",
            "516": "A B"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "0 1 2 3 4 5 6 7 8 9 M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB IC JC",
            "33": "I y J E F G A B C K L H"
        },
        D: {
            "1": "5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "I y J E F G A B C K L H M N O",
            "33": "0 1 2 3 4 z i"
        },
        E: {
            "1": "E F G A B C K L H NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y LC 2B MC",
            "33": "J"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB"
        },
        G: {
            "1": "F cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC",
            "33": "bC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC",
            "132": "yC zC"
        },
        J: {
            "1": "A",
            "2": "E"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "calc() as CSS unit value"
};

},{}],"2IXvD":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "G A B",
            "2": "J E F GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB IC",
            "36": "JC"
        },
        D: {
            "1": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "516": "I y J E F G A B C K L"
        },
        E: {
            "1": "E F G A B C K L H OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "772": "I y J LC 2B MC NC"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h WC XC tB EC YC uB",
            "2": "G UC",
            "36": "VC"
        },
        G: {
            "1": "F cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "4": "2B ZC FC bC",
            "516": "aC"
        },
        H: {
            "132": "tC"
        },
        I: {
            "1": "D yC zC",
            "36": "uC",
            "516": "wB I xC FC",
            "548": "vC wC"
        },
        J: {
            "1": "E A"
        },
        K: {
            "1": "A B C j tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "CSS3 Background-image options"
};

},{}],"2oaUs":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "H M N O",
            "33": "C K L P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB IC JC"
        },
        D: {
            "33": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "1": "L H QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "16": "LC 2B",
            "33": "I y J E F G A B C K MC NC OC PC 3B tB uB 4B"
        },
        F: {
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        G: {
            "1": "qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "16": "2B ZC FC aC",
            "33": "F bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "16": "wB uC vC wC",
            "33": "I D xC FC yC zC"
        },
        J: {
            "33": "E A"
        },
        K: {
            "16": "A B C tB EC uB",
            "33": "j"
        },
        L: {
            "33": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "33": "0C"
        },
        P: {
            "33": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "33": "4B"
        },
        R: {
            "33": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 7,
    C: "Background-clip: text"
};

},{}],"3ZZhi":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "A B",
            "2": "J E F G GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB IC JC",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB",
            "164": "I y J E F G A B C K L"
        },
        D: {
            "1": "RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "I y J E F G A B C K L H",
            "33": "0 1 2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB",
            "292": "M N O z i"
        },
        E: {
            "1": "A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "E F G LC 2B NC OC",
            "4": "I y J MC"
        },
        F: {
            "1": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB"
        },
        G: {
            "1": "fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "F cC dC eC",
            "4": "2B ZC FC aC bC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC",
            "33": "yC zC"
        },
        J: {
            "2": "E",
            "33": "A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "33": "I"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 2,
    C: "CSS font-feature-settings"
};

},{}],"6N0Fe":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 HC wB I y J E F G A B C K L H M N O z i IC JC",
            "194": "3 4 5 6 7 8 9 AB BB CB"
        },
        D: {
            "1": "CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 I y J E F G A B C K L H M N O z i",
            "33": "8 9 AB BB"
        },
        E: {
            "1": "A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J LC 2B MC NC",
            "33": "E F G OC"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C H UC VC WC XC tB EC YC uB",
            "33": "M N O z"
        },
        G: {
            "1": "kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC bC cC",
            "33": "F dC eC fC gC hC iC jC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D zC",
            "2": "wB I uC vC wC xC FC",
            "33": "yC"
        },
        J: {
            "2": "E",
            "33": "A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "CSS3 font-kerning"
};

},{}],"8y74w":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "B",
            "2": "J E F G A GC"
        },
        B: {
            "1": "L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "129": "C K"
        },
        C: {
            "1": "TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB",
            "260": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB",
            "804": "I y J E F G A B C K L IC JC"
        },
        D: {
            "1": "ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "260": "UB VB WB XB YB",
            "388": "9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB",
            "1412": "0 1 2 3 4 5 6 7 8 H M N O z i",
            "1956": "I y J E F G A B C K L"
        },
        E: {
            "1": "6B 7B 8B vB 9B AC BC CC DC SC TC",
            "129": "A B C K L H PC 3B tB uB 4B QC RC 5B",
            "1412": "J E F G NC OC",
            "1956": "I y LC 2B MC"
        },
        F: {
            "1": "MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G UC VC",
            "260": "HB IB JB KB LB",
            "388": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB",
            "1796": "WC XC",
            "1828": "B C tB EC YC uB"
        },
        G: {
            "1": "6B 7B 8B vB 9B AC BC CC DC",
            "129": "fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B",
            "1412": "F bC cC dC eC",
            "1956": "2B ZC FC aC"
        },
        H: {
            "1828": "tC"
        },
        I: {
            "1": "D",
            "388": "yC zC",
            "1956": "wB I uC vC wC xC FC"
        },
        J: {
            "1412": "A",
            "1924": "E"
        },
        K: {
            "1": "j",
            "2": "A",
            "1828": "B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "B",
            "2": "A"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "260": "1C 2C",
            "388": "I"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "260": "FD"
        }
    },
    B: 4,
    C: "CSS3 Border images"
};

},{}],"9xVv4":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "G A B",
            "2": "J E F GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "33": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB IC JC"
        },
        D: {
            "1": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "1": "I y J E F G A B C K L H LC 2B MC NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h UC VC WC XC tB EC YC uB",
            "2": "G"
        },
        G: {
            "2": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D yC zC",
            "2": "wB I uC vC wC xC FC"
        },
        J: {
            "1": "A",
            "2": "E"
        },
        K: {
            "1": "C j EC uB",
            "16": "A B tB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "33": "FD"
        }
    },
    B: 5,
    C: "::selection CSS pseudo-element"
};

},{}],"3PAh9":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "36": "C K L H M N O"
        },
        C: {
            "1": "UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y J E F G A B C K L H M N O IC JC",
            "33": "0 1 2 3 4 5 6 7 8 9 z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB"
        },
        D: {
            "1": "aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "36": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB"
        },
        E: {
            "1": "B C K L H 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I LC 2B",
            "36": "y J E F G A MC NC OC PC"
        },
        F: {
            "1": "NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "36": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB"
        },
        G: {
            "1": "hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC",
            "36": "F FC aC bC cC dC eC fC gC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "36": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "36": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "36": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "36": "I 1C 2C"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "33": "FD"
        }
    },
    B: 5,
    C: "::placeholder CSS pseudo-element"
};

},{}],"5Cca0":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G GC",
            "292": "A B"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB IC JC",
            "164": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB"
        },
        D: {
            "1": "QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB"
        },
        E: {
            "1": "G A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J E F LC 2B MC NC OC"
        },
        F: {
            "1": "DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB UC VC WC XC tB EC YC uB"
        },
        G: {
            "1": "eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "F 2B ZC FC aC bC cC dC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "164": "FD"
        }
    },
    B: 5,
    C: ":placeholder-shown CSS pseudo-class"
};

},{}],"7uTc6":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G GC",
            "33": "A B"
        },
        B: {
            "1": "q r s t u v w x D",
            "33": "C K L H M N O",
            "132": "P Q R S T U V W",
            "260": "X Y Z a b c d e f g h k l m n o p"
        },
        C: {
            "1": "MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y IC JC",
            "33": "0 1 2 3 4 5 6 7 8 9 J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB"
        },
        D: {
            "1": "X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB",
            "132": "YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W"
        },
        E: {
            "2": "I y LC 2B",
            "33": "J E F G A B C K L H MC NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC"
        },
        F: {
            "1": "a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB UC VC WC XC tB EC YC uB",
            "132": "LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z"
        },
        G: {
            "2": "2B ZC",
            "33": "F FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "4": "0C"
        },
        P: {
            "1": "i 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I",
            "132": "1C"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "CSS Hyphenation"
};

},{}],"3Q7QH":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A GC",
            "548": "B"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "516": "C K L H M N O"
        },
        C: {
            "1": "fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y J E F G IC JC",
            "676": "0 1 2 3 4 5 6 7 8 9 A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB",
            "1700": "QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB"
        },
        D: {
            "1": "mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "I y J E F G A B C K L",
            "676": "H M N O z",
            "804": "0 1 2 3 4 5 6 7 8 9 i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB"
        },
        E: {
            "1": "CC DC SC TC",
            "2": "I y LC 2B",
            "548": "6B 7B 8B vB 9B AC BC",
            "676": "MC",
            "804": "J E F G A B C K L H NC OC PC 3B tB uB 4B QC RC 5B"
        },
        F: {
            "1": "fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h uB",
            "2": "G B C UC VC WC XC tB EC YC",
            "804": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB"
        },
        G: {
            "2": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC",
            "2052": "kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "2": "wB I D uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E",
            "292": "A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A",
            "548": "B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 3B 6C 7C 8C 9C AD vB BD CD DD",
            "804": "I 1C 2C 3C 4C 5C"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 1,
    C: "Full Screen API"
};

},{}],"5tdjV":[function(require,module,exports) {
module.exports = {
    A: {
        D: {
            "1": "Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X"
        },
        L: {
            "1": "D"
        },
        B: {
            "1": "Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "33": "C K L H M N O P Q R S T U V W X"
        },
        C: {
            "1": "zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R IC JC"
        },
        M: {
            "1": "D"
        },
        A: {
            "2": "J E F G GC",
            "33": "A B"
        },
        F: {
            "1": "pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        E: {
            "1": "H QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC",
            "2": "TC",
            "33": "I y J E F G A B C K L LC 2B MC NC OC PC 3B tB uB 4B"
        },
        G: {
            "1": "rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "33": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC"
        },
        P: {
            "1": "i AD vB BD CD DD",
            "33": "I 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC",
            "33": "yC zC"
        }
    },
    B: 6,
    C: "::file-selector-button CSS pseudo-element"
};

},{}],"8YCh9":[function(require,module,exports) {
module.exports = {
    A: {
        D: {
            "33": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        L: {
            "33": "D"
        },
        B: {
            "2": "C K L H M N O",
            "33": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U IC JC"
        },
        M: {
            "1": "D"
        },
        A: {
            "2": "J E F G A B GC"
        },
        F: {
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        K: {
            "2": "A B C tB EC uB",
            "33": "j"
        },
        E: {
            "1": "H RC 5B 6B 7B 8B vB 9B AC BC CC DC SC",
            "2": "TC",
            "33": "I y J E F G A B C K L LC 2B MC NC OC PC 3B tB uB 4B QC"
        },
        G: {
            "1": "sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "33": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC"
        },
        P: {
            "33": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        I: {
            "2": "wB I uC vC wC xC FC",
            "33": "D yC zC"
        }
    },
    B: 6,
    C: ":autofill CSS pseudo-class"
};

},{}],"9DbFb":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB IC JC",
            "33": "WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z",
            "164": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB"
        },
        D: {
            "1": "LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "I y J E F G A B C K L H M N O z i",
            "132": "0 1 2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB"
        },
        E: {
            "1": "L H 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J LC 2B MC",
            "132": "E F G A B C K NC OC PC 3B tB uB"
        },
        F: {
            "1": "8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G UC VC WC",
            "132": "0 1 2 3 4 5 6 7 H M N O z i",
            "164": "B C XC tB EC YC uB"
        },
        G: {
            "1": "pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC bC",
            "132": "F cC dC eC fC gC hC iC jC kC lC mC nC oC"
        },
        H: {
            "164": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC",
            "132": "yC zC"
        },
        J: {
            "132": "E A"
        },
        K: {
            "1": "j",
            "2": "A",
            "164": "B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "164": "FD GD"
        }
    },
    B: 4,
    C: "CSS3 tab-size"
};

},{}],"aLWe9":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "2": "C K L H M N O",
            "1025": "d e f g h k l m n o p q r s t u v w x D",
            "1537": "P Q R S T U V W X Y Z a b c"
        },
        C: {
            "2": "HC",
            "932": "0 1 2 3 4 5 6 7 8 9 wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB IC JC",
            "2308": "hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B"
        },
        D: {
            "2": "0 I y J E F G A B C K L H M N O z i",
            "545": "1 2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB",
            "1025": "d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "1537": "PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c"
        },
        E: {
            "1": "vB 9B AC BC CC DC SC TC",
            "2": "I y J LC 2B MC",
            "516": "B C K L H tB uB 4B QC RC 5B 6B 7B 8B",
            "548": "G A PC 3B",
            "676": "E F NC OC"
        },
        F: {
            "2": "G B C UC VC WC XC tB EC YC uB",
            "513": "DB",
            "545": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB",
            "1025": "e f g h",
            "1537": "CB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d"
        },
        G: {
            "1": "vB 9B AC BC CC DC",
            "2": "2B ZC FC aC bC",
            "516": "qC rC sC 5B 6B 7B 8B",
            "548": "eC fC gC hC iC jC kC lC mC nC oC pC",
            "676": "F cC dC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "2": "wB I uC vC wC xC FC",
            "545": "yC zC",
            "1025": "D"
        },
        J: {
            "2": "E",
            "545": "A"
        },
        K: {
            "2": "A B C tB EC uB",
            "1025": "j"
        },
        L: {
            "1025": "D"
        },
        M: {
            "2308": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1537": "0C"
        },
        P: {
            "545": "I",
            "1025": "i BD CD DD",
            "1537": "1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB"
        },
        Q: {
            "1537": "4B"
        },
        R: {
            "1537": "ED"
        },
        S: {
            "932": "FD",
            "2308": "GD"
        }
    },
    B: 5,
    C: "Intrinsic & Extrinsic Sizing"
};

},{}],"fdwX5":[function(require,module,exports) {
module.exports = {
    A: {
        D: {
            "2": "0 I y J E F G A B C K L H M N O z i",
            "33": "1 2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        L: {
            "33": "D"
        },
        B: {
            "2": "C K L H M N O",
            "33": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "2": "HC",
            "33": "0 1 2 3 4 5 6 7 8 9 wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B IC JC"
        },
        M: {
            "33": "D"
        },
        A: {
            "2": "J E F G A B GC"
        },
        F: {
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        K: {
            "2": "A B C tB EC uB",
            "33": "j"
        },
        E: {
            "2": "I y J LC 2B MC NC TC",
            "33": "E F G A B C K L H OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC"
        },
        G: {
            "2": "2B ZC FC aC bC",
            "33": "F cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        P: {
            "2": "I",
            "33": "i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        I: {
            "2": "wB I uC vC wC xC FC",
            "33": "D yC zC"
        }
    },
    B: 6,
    C: "width: stretch property"
};

},{}],"jQl58":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "33": "0 1 2 HC wB I y J E F G A B C K L H M N O z i IC JC"
        },
        D: {
            "1": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB"
        },
        E: {
            "1": "G A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "33": "I y J E F LC 2B MC NC OC"
        },
        F: {
            "1": "3 4 5 6 7 8 9 C AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h YC uB",
            "2": "G B UC VC WC XC tB EC",
            "33": "0 1 2 H M N O z i"
        },
        G: {
            "2": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "33": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "2": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "2": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "2": "FD GD"
        }
    },
    B: 2,
    C: "CSS3 Cursors: zoom-in & zoom-out"
};

},{}],"hfq8O":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L"
        },
        C: {
            "1": "6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "33": "0 1 2 3 4 5 HC wB I y J E F G A B C K L H M N O z i IC JC"
        },
        D: {
            "1": "jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB"
        },
        E: {
            "1": "B C K L H tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "33": "I y J E F G A LC 2B MC NC OC PC 3B"
        },
        F: {
            "1": "C YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h YC uB",
            "2": "G B UC VC WC XC tB EC",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB"
        },
        G: {
            "2": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "33": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "2": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "2": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "2": "FD GD"
        }
    },
    B: 2,
    C: "CSS grab & grabbing cursors"
};

},{}],"86xlT":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H",
            "1028": "P Q R S T U V W X Y Z",
            "4100": "M N O"
        },
        C: {
            "1": "xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 HC wB I y J E F G A B C K L H M N O z i IC JC",
            "194": "5 6 7 8 9 AB",
            "516": "BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB"
        },
        D: {
            "1": "a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 I y J E F G A B C K L H M N O z i GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB",
            "322": "2 3 4 5 6 7 8 9 AB BB CB DB EB FB VB WB XB YB",
            "1028": "ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z"
        },
        E: {
            "1": "K L H 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J LC 2B MC",
            "33": "F G A B C OC PC 3B tB uB",
            "2084": "E NC"
        },
        F: {
            "1": "sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB UC VC WC XC tB EC YC uB",
            "322": "IB JB KB",
            "1028": "LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB"
        },
        G: {
            "1": "mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC",
            "33": "F dC eC fC gC hC iC jC kC lC",
            "2084": "bC cC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1028": "0C"
        },
        P: {
            "1": "i 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I 1C"
        },
        Q: {
            "1028": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "516": "FD"
        }
    },
    B: 5,
    C: "CSS position:sticky"
};

},{}],"af8Nk":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "B",
            "2": "J E F G GC",
            "164": "A"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y IC JC",
            "8": "0 1 2 3 4 5 6 7 8 9 J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB",
            "328": "KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB"
        },
        D: {
            "1": "YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 I y J E F G A B C K L H M N O z i",
            "8": "1 2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB",
            "584": "VB WB XB"
        },
        E: {
            "1": "K L H 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J LC 2B MC",
            "8": "E F G A B C NC OC PC 3B tB",
            "1096": "uB"
        },
        F: {
            "1": "LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "8": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB",
            "584": "IB JB KB"
        },
        G: {
            "1": "nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "8": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC",
            "6148": "mC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "8": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "8": "E A"
        },
        K: {
            "1": "j",
            "2": "A",
            "8": "B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "B",
            "36": "A"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "1C",
            "8": "I"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "328": "FD"
        }
    },
    B: 2,
    C: "Pointer events"
};

},{}],"eWhth":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "2": "C K L H M N O",
            "2052": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "2": "HC wB I y IC JC",
            "1028": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "1060": "0 1 2 3 4 5 6 7 8 9 J E F G A B C K L H M N O z i AB BB CB DB EB"
        },
        D: {
            "2": "0 1 2 3 4 I y J E F G A B C K L H M N O z i",
            "226": "5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB",
            "2052": "aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "2": "I y J E LC 2B MC NC",
            "772": "K L H uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "804": "F G A B C PC 3B tB",
            "1316": "OC"
        },
        F: {
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB UC VC WC XC tB EC YC uB",
            "226": "EB FB GB HB IB JB KB LB MB",
            "2052": "NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        G: {
            "2": "2B ZC FC aC bC cC",
            "292": "F dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "2": "A B C tB EC uB",
            "2052": "j"
        },
        L: {
            "2052": "D"
        },
        M: {
            "1028": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "2052": "0C"
        },
        P: {
            "2": "I 1C 2C",
            "2052": "i 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "2052": "4B"
        },
        R: {
            "2052": "ED"
        },
        S: {
            "1028": "FD GD"
        }
    },
    B: 4,
    C: "text-decoration styling"
};

},{}],"9qHYr":[function(require,module,exports) {
module.exports = {
    A: {
        D: {
            "1": "aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB"
        },
        L: {
            "1": "D"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "0 1 2 3 4 5 6 7 8 9 J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y IC JC"
        },
        M: {
            "1": "D"
        },
        A: {
            "2": "J E F G A B GC"
        },
        F: {
            "1": "NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB UC VC WC XC tB EC YC uB"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        E: {
            "2": "I y J E LC 2B MC NC OC TC",
            "33": "F G A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC"
        },
        G: {
            "2": "2B ZC FC aC bC cC",
            "33": "F dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        P: {
            "1": "i 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I 1C 2C"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        }
    },
    B: 6,
    C: "text-decoration shorthand property"
};

},{}],"67gyf":[function(require,module,exports) {
module.exports = {
    A: {
        D: {
            "1": "aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB"
        },
        L: {
            "1": "D"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y IC JC",
            "33": "0 1 2 3 4 5 6 7 8 9 J E F G A B C K L H M N O z i AB BB CB DB EB"
        },
        M: {
            "1": "D"
        },
        A: {
            "2": "J E F G A B GC"
        },
        F: {
            "1": "NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB UC VC WC XC tB EC YC uB"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        E: {
            "1": "K L H uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC",
            "2": "I y J E LC 2B MC NC OC TC",
            "33": "F G A B C PC 3B tB"
        },
        G: {
            "1": "lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC bC cC",
            "33": "F dC eC fC gC hC iC jC kC"
        },
        P: {
            "1": "i 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I 1C 2C"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        }
    },
    B: 6,
    C: "text-decoration-color property"
};

},{}],"g7tIT":[function(require,module,exports) {
module.exports = {
    A: {
        D: {
            "1": "aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB"
        },
        L: {
            "1": "D"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y IC JC",
            "33": "0 1 2 3 4 5 6 7 8 9 J E F G A B C K L H M N O z i AB BB CB DB EB"
        },
        M: {
            "1": "D"
        },
        A: {
            "2": "J E F G A B GC"
        },
        F: {
            "1": "NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB UC VC WC XC tB EC YC uB"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        E: {
            "1": "K L H uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC",
            "2": "I y J E LC 2B MC NC OC TC",
            "33": "F G A B C PC 3B tB"
        },
        G: {
            "1": "lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC bC cC",
            "33": "F dC eC fC gC hC iC jC kC"
        },
        P: {
            "1": "i 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I 1C 2C"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        }
    },
    B: 6,
    C: "text-decoration-line property"
};

},{}],"xMIiJ":[function(require,module,exports) {
module.exports = {
    A: {
        D: {
            "1": "aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB"
        },
        L: {
            "1": "D"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y IC JC",
            "33": "0 1 2 3 4 5 6 7 8 9 J E F G A B C K L H M N O z i AB BB CB DB EB"
        },
        M: {
            "1": "D"
        },
        A: {
            "2": "J E F G A B GC"
        },
        F: {
            "1": "NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB UC VC WC XC tB EC YC uB"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        E: {
            "1": "K L H uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC",
            "2": "I y J E LC 2B MC NC OC TC",
            "33": "F G A B C PC 3B tB"
        },
        G: {
            "1": "lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC bC cC",
            "33": "F dC eC fC gC hC iC jC kC"
        },
        P: {
            "1": "i 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I 1C 2C"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        }
    },
    B: 6,
    C: "text-decoration-style property"
};

},{}],"c8z1H":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "33": "C K L H M N O"
        },
        C: {
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B IC JC"
        },
        D: {
            "1": "XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB",
            "258": "5"
        },
        E: {
            "2": "I y J E F G A B C K L H LC 2B NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "258": "MC"
        },
        F: {
            "1": "MB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB NB UC VC WC XC tB EC YC uB"
        },
        G: {
            "2": "2B ZC FC",
            "33": "F aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "33": "D"
        },
        N: {
            "161": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "2": "FD GD"
        }
    },
    B: 7,
    C: "CSS text-size-adjust"
};

},{}],"320J3":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "2": "C K L H M",
            "164": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "3138": "N",
            "12292": "O"
        },
        C: {
            "1": "WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB",
            "260": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB IC JC"
        },
        D: {
            "164": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "1": "6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "LC 2B",
            "164": "I y J E F G A B C K L H MC NC OC PC 3B tB uB 4B QC RC 5B"
        },
        F: {
            "2": "G B C UC VC WC XC tB EC YC uB",
            "164": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        G: {
            "1": "6B 7B 8B vB 9B AC BC CC DC",
            "164": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B"
        },
        H: {
            "2": "tC"
        },
        I: {
            "164": "D yC zC",
            "676": "wB I uC vC wC xC FC"
        },
        J: {
            "164": "E A"
        },
        K: {
            "2": "A B C tB EC uB",
            "164": "j"
        },
        L: {
            "164": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "164": "0C"
        },
        P: {
            "164": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "164": "4B"
        },
        R: {
            "164": "ED"
        },
        S: {
            "1": "GD",
            "260": "FD"
        }
    },
    B: 4,
    C: "CSS Masks"
};

},{}],"6p215":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "2": "C K L H M N",
            "260": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "3138": "O"
        },
        C: {
            "1": "XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB",
            "132": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB IC JC",
            "644": "QB RB SB TB UB VB WB"
        },
        D: {
            "2": "0 1 2 I y J E F G A B C K L H M N O z i",
            "260": "YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "292": "3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB"
        },
        E: {
            "2": "I y J LC 2B MC NC",
            "260": "L H 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "292": "E F G A B C K OC PC 3B tB uB"
        },
        F: {
            "2": "G B C UC VC WC XC tB EC YC uB",
            "260": "LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "292": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB"
        },
        G: {
            "2": "2B ZC FC aC bC",
            "260": "mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "292": "F cC dC eC fC gC hC iC jC kC lC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "2": "wB I uC vC wC xC FC",
            "260": "D",
            "292": "yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "2": "A B C tB EC uB",
            "260": "j"
        },
        L: {
            "260": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "260": "0C"
        },
        P: {
            "292": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "260": "4B"
        },
        R: {
            "260": "ED"
        },
        S: {
            "1": "GD",
            "644": "FD"
        }
    },
    B: 4,
    C: "CSS clip-path property (for HTML)"
};

},{}],"74BrZ":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "2": "C K L H M N O",
            "164": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB IC JC"
        },
        D: {
            "2": "0 I y J E F G A B C K L H M N O z i",
            "164": "1 2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "2": "I y J LC 2B MC",
            "164": "E F G A B C K L H NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC"
        },
        F: {
            "2": "G UC VC WC XC",
            "129": "B C tB EC YC uB",
            "164": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        G: {
            "2": "2B ZC FC aC bC",
            "164": "F cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "132": "tC"
        },
        I: {
            "2": "wB I uC vC wC xC FC",
            "164": "D yC zC"
        },
        J: {
            "2": "E",
            "164": "A"
        },
        K: {
            "2": "A",
            "129": "B C tB EC uB",
            "164": "j"
        },
        L: {
            "164": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "164": "0C"
        },
        P: {
            "164": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "164": "4B"
        },
        R: {
            "164": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "CSS box-decoration-break"
};

},{}],"efBNa":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H",
            "260": "M N O"
        },
        C: {
            "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB IC JC"
        },
        D: {
            "1": "BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB"
        },
        E: {
            "1": "A B C K L H 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J E LC 2B MC NC",
            "132": "F G OC PC"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G H M N O UC VC WC",
            "33": "B C XC tB EC YC uB"
        },
        G: {
            "1": "gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC bC cC",
            "132": "F dC eC fC"
        },
        H: {
            "33": "tC"
        },
        I: {
            "1": "D zC",
            "2": "wB I uC vC wC xC FC yC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A",
            "33": "B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "CSS3 object-fit/object-position"
};

},{}],"iC7Na":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB IC JC",
            "322": "UB VB WB XB YB ZB aB bB xB cB yB"
        },
        D: {
            "1": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB",
            "194": "DB EB FB"
        },
        E: {
            "1": "B C K L H 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J E LC 2B MC NC",
            "33": "F G A OC PC"
        },
        F: {
            "1": "3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 G B C H M N O z i UC VC WC XC tB EC YC uB"
        },
        G: {
            "1": "hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC bC cC",
            "33": "F dC eC fC gC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "2": "FD"
        }
    },
    B: 4,
    C: "CSS Shapes Level 1"
};

},{}],"l7Lfq":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "1": "J E F G A B",
            "2": "GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "0 1 2 3 4 5 6 7 8 9 E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "8": "HC wB I y J IC JC"
        },
        D: {
            "1": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "1": "I y J E F G A B C K L H LC 2B MC NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC"
        },
        F: {
            "1": "0 1 2 3 4 5 6 7 8 9 B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h tB EC YC uB",
            "33": "G UC VC WC XC"
        },
        G: {
            "1": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "1": "tC"
        },
        I: {
            "1": "wB I D uC vC wC xC FC yC zC"
        },
        J: {
            "1": "E A"
        },
        K: {
            "1": "j uB",
            "33": "A B C tB EC"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "1": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 2,
    C: "CSS3 Text-overflow"
};

},{}],"2YCOD":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G GC",
            "164": "A B"
        },
        B: {
            "66": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "164": "C K L H M N O"
        },
        C: {
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B IC JC"
        },
        D: {
            "2": "0 1 2 3 4 5 6 7 I y J E F G A B C K L H M N O z i",
            "66": "8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "2": "I y J E F G A B C K L H LC 2B MC NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC"
        },
        F: {
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB UC VC WC XC tB EC YC uB",
            "66": "JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        G: {
            "2": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "292": "tC"
        },
        I: {
            "2": "wB I D uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "2": "A j",
            "292": "B C tB EC uB"
        },
        L: {
            "2": "D"
        },
        M: {
            "2": "D"
        },
        N: {
            "164": "A B"
        },
        O: {
            "2": "0C"
        },
        P: {
            "2": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "66": "4B"
        },
        R: {
            "2": "ED"
        },
        S: {
            "2": "FD GD"
        }
    },
    B: 5,
    C: "CSS Device Adaptation"
};

},{}],"5ncnY":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F GC",
            "132": "G A B"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "1028": "C K L H M N O"
        },
        C: {
            "1": "dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB",
            "260": "I y J E F G A B C K L H IC JC",
            "1028": "0 1 2 3 4 5 6 7 8 9 M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB"
        },
        D: {
            "1": "jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "548": "0 1 2 3 4 5 6 7 I y J E F G A B C K L H M N O z i",
            "1028": "8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB"
        },
        E: {
            "1": "vB 9B AC BC CC DC SC TC",
            "2": "LC 2B",
            "548": "I y J E F G A B C K L H MC NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B"
        },
        F: {
            "1": "YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h uB",
            "2": "G",
            "548": "B C UC VC WC XC tB EC YC",
            "1028": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB"
        },
        G: {
            "1": "vB 9B AC BC CC DC",
            "16": "2B",
            "548": "F ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B"
        },
        H: {
            "132": "tC"
        },
        I: {
            "1": "D",
            "16": "uC vC",
            "548": "wB I wC xC FC",
            "1028": "yC zC"
        },
        J: {
            "548": "E A"
        },
        K: {
            "1": "j uB",
            "548": "A B C tB EC"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "132": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 3B 6C 7C 8C 9C AD vB BD CD DD",
            "1028": "I 1C 2C 3C 4C 5C"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "Media Queries: resolution feature"
};

},{}],"855JK":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "132": "J E F G A B GC"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "4": "C K L H M N O"
        },
        C: {
            "1": "SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y J E F G A B IC JC",
            "33": "0 1 2 3 4 5 6 7 8 9 C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB"
        },
        D: {
            "1": "QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB",
            "322": "EB FB GB HB IB JB KB LB MB NB OB PB"
        },
        E: {
            "1": "vB 9B AC BC CC DC SC TC",
            "2": "I y J E F G A B C K L H LC 2B MC NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B"
        },
        F: {
            "1": "DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 G B C H M N O z i UC VC WC XC tB EC YC uB",
            "578": "1 2 3 4 5 6 7 8 9 AB BB CB"
        },
        G: {
            "1": "vB 9B AC BC CC DC",
            "2": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "132": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "33": "FD"
        }
    },
    B: 4,
    C: "CSS3 text-align-last"
};

},{}],"lS0qz":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J GC",
            "2340": "E F G A B"
        },
        B: {
            "2": "C K L H M N O",
            "1025": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB IC",
            "513": "gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b",
            "545": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB JC"
        },
        D: {
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB",
            "1025": "KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "1": "A B C K L H 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y LC 2B MC",
            "164": "J",
            "4644": "E F G NC OC PC"
        },
        F: {
            "2": "0 1 2 3 4 5 6 G B H M N O z i UC VC WC XC tB EC",
            "545": "C YC uB",
            "1025": "7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        G: {
            "1": "gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC",
            "4260": "aC bC",
            "4644": "F cC dC eC fC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "2": "wB I uC vC wC xC FC yC zC",
            "1025": "D"
        },
        J: {
            "2": "E",
            "4260": "A"
        },
        K: {
            "2": "A B tB EC",
            "545": "C uB",
            "1025": "j"
        },
        L: {
            "1025": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2340": "A B"
        },
        O: {
            "1025": "0C"
        },
        P: {
            "1025": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1025": "4B"
        },
        R: {
            "1025": "ED"
        },
        S: {
            "1": "GD",
            "4097": "FD"
        }
    },
    B: 4,
    C: "Crisp edges/pixelated images"
};

},{}],"85Pd7":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O",
            "1028": "W X",
            "1540": "P Q R S T U V"
        },
        C: {
            "1": "hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC",
            "164": "0 1 2 3 4 5 6 7 8 9 wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB IC JC",
            "1540": "KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB"
        },
        D: {
            "1": "Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "292": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB",
            "1028": "W X",
            "1540": "kB lB mB nB j oB pB qB rB sB P Q R S T U V"
        },
        E: {
            "1": "H RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "292": "I y J E F G A B C LC 2B MC NC OC PC 3B tB",
            "1540": "K L uB 4B",
            "5124": "QC"
        },
        F: {
            "1": "qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "292": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB",
            "1028": "oB pB",
            "1540": "ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j"
        },
        G: {
            "1": "sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "292": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC",
            "1540": "lC mC nC oC pC qC",
            "5124": "rC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "292": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "292": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "292": "0C"
        },
        P: {
            "1": "i AD vB BD CD DD",
            "292": "I 1C 2C 3C 4C 5C",
            "1540": "3B 6C 7C 8C 9C"
        },
        Q: {
            "1540": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "1540": "FD"
        }
    },
    B: 5,
    C: "CSS Logical Properties"
};

},{}],"e6RSr":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "33": "S",
            "164": "P Q R",
            "388": "C K L H M N O"
        },
        C: {
            "1": "Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "164": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P",
            "676": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB IC JC"
        },
        D: {
            "1": "T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "33": "S",
            "164": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R"
        },
        E: {
            "1": "6B 7B 8B vB 9B AC BC CC DC SC TC",
            "164": "I y J E F G A B C K L H LC 2B MC NC OC PC 3B tB uB 4B QC RC 5B"
        },
        F: {
            "1": "j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "lB mB nB",
            "164": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB"
        },
        G: {
            "1": "6B 7B 8B vB 9B AC BC CC DC",
            "164": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "164": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "164": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A",
            "388": "B"
        },
        O: {
            "164": "0C"
        },
        P: {
            "164": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "164": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "164": "FD"
        }
    },
    B: 5,
    C: "CSS Appearance"
};

},{}],"d5kdf":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G GC",
            "6308": "A",
            "6436": "B"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "6436": "C K L H M N O"
        },
        C: {
            "1": "jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IC JC",
            "2052": "IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB"
        },
        D: {
            "1": "kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB",
            "8258": "hB iB jB"
        },
        E: {
            "1": "B C K L H tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J E F LC 2B MC NC OC",
            "3108": "G A PC 3B"
        },
        F: {
            "1": "fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB UC VC WC XC tB EC YC uB",
            "8258": "XB YB ZB aB bB cB dB eB"
        },
        G: {
            "1": "iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "F 2B ZC FC aC bC cC dC",
            "3108": "eC fC gC hC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I 1C 2C 3C 4C 5C"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "2052": "FD"
        }
    },
    B: 4,
    C: "CSS Scroll Snap"
};

},{}],"550HK":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G GC",
            "420": "A B"
        },
        B: {
            "2": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "420": "C K L H M N O"
        },
        C: {
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B IC JC"
        },
        D: {
            "2": "I y J E F G A B C K L EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "36": "H M N O",
            "66": "0 1 2 3 4 5 6 7 8 9 z i AB BB CB DB"
        },
        E: {
            "2": "I y J C K L H LC 2B MC tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "33": "E F G A B NC OC PC 3B"
        },
        F: {
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h UC VC WC XC tB EC YC uB"
        },
        G: {
            "2": "2B ZC FC aC bC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "33": "F cC dC eC fC gC hC iC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "2": "wB I D uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "2": "A B C j tB EC uB"
        },
        L: {
            "2": "D"
        },
        M: {
            "2": "D"
        },
        N: {
            "420": "A B"
        },
        O: {
            "2": "0C"
        },
        P: {
            "2": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "2": "4B"
        },
        R: {
            "2": "ED"
        },
        S: {
            "2": "FD GD"
        }
    },
    B: 5,
    C: "CSS Regions"
};

},{}],"7mS4b":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "2": "C K L H M N O",
            "164": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x",
            "2049": "D"
        },
        C: {
            "1": "D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U IC JC",
            "66": "V W",
            "2305": "Y Z a b c d e f g h k l m n o p q r s t u v w x",
            "2820": "X"
        },
        D: {
            "1": "0B 1B KC",
            "2": "I y J E F G A B C K L H M N O z i",
            "164": "0 1 2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x",
            "2049": "D"
        },
        E: {
            "1": "TC",
            "2": "I y LC 2B MC",
            "132": "A B C K 3B tB uB 4B",
            "164": "J E F G NC OC PC",
            "1540": "L H QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC"
        },
        F: {
            "2": "G B C UC VC WC XC tB EC YC uB",
            "164": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        G: {
            "2": "2B ZC FC aC",
            "132": "gC hC iC jC kC lC mC nC oC pC",
            "164": "F bC cC dC eC fC",
            "1540": "qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "2": "wB I uC vC wC xC FC",
            "164": "D yC zC"
        },
        J: {
            "2": "E",
            "164": "A"
        },
        K: {
            "2": "A B C tB EC uB",
            "164": "j"
        },
        L: {
            "2049": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "164": "0C"
        },
        P: {
            "164": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "164": "4B"
        },
        R: {
            "164": "ED"
        },
        S: {
            "2": "FD GD"
        }
    },
    B: 5,
    C: "CSS image-set"
};

},{}],"hdi6D":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "132": "J E F G A B GC"
        },
        B: {
            "1": "C K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB IC JC",
            "322": "FB GB HB IB JB"
        },
        D: {
            "1": "RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "I y J",
            "16": "E",
            "33": "0 1 2 3 4 5 6 7 8 9 F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB"
        },
        E: {
            "1": "B C K L H tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I LC 2B",
            "16": "y",
            "33": "J E F G A MC NC OC PC 3B"
        },
        F: {
            "1": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB"
        },
        G: {
            "1": "iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "16": "2B ZC FC",
            "33": "F aC bC cC dC eC fC gC hC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "uC vC wC",
            "33": "wB I xC FC yC zC"
        },
        J: {
            "33": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "36": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "33": "I"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 2,
    C: "CSS writing-mode property"
};

},{}],"eTrsm":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "2": "C K L H M N O",
            "33": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B IC JC"
        },
        D: {
            "2": "I y J E F G A B C K L H M",
            "33": "0 1 2 3 4 5 6 7 8 9 N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "1": "A B C K L H 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y LC 2B",
            "33": "J E F G MC NC OC PC"
        },
        F: {
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        G: {
            "1": "gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC",
            "33": "F aC bC cC dC eC fC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "2": "wB I uC vC wC xC FC",
            "33": "D yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "2": "A B C tB EC uB",
            "33": "j"
        },
        L: {
            "33": "D"
        },
        M: {
            "2": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "33": "0C"
        },
        P: {
            "33": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "33": "4B"
        },
        R: {
            "33": "ED"
        },
        S: {
            "2": "FD GD"
        }
    },
    B: 4,
    C: "CSS Cross-Fade Function"
};

},{}],"8B7GT":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "K L H M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C"
        },
        C: {
            "1": "sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "16": "HC",
            "33": "0 1 2 3 4 5 6 7 8 9 wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB IC JC"
        },
        D: {
            "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "16": "I y J E F G A B C K L",
            "132": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB"
        },
        E: {
            "1": "G A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "16": "LC 2B",
            "132": "I y J E F MC NC OC"
        },
        F: {
            "1": "2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "16": "G B UC VC WC XC tB",
            "132": "0 1 C H M N O z i EC YC uB"
        },
        G: {
            "1": "eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "16": "2B ZC",
            "132": "F FC aC bC cC dC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "16": "uC vC",
            "132": "wB I wC xC FC yC zC"
        },
        J: {
            "1": "A",
            "132": "E"
        },
        K: {
            "1": "j",
            "2": "A B tB",
            "132": "C EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "33": "FD"
        }
    },
    B: 1,
    C: "CSS :read-only and :read-write selectors"
};

},{}],"bVqf0":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "k l m n o p q r s t u v w x D",
            "2": "C K L H M N O",
            "164": "P Q R S T U V W X Y Z a b c d e f g h"
        },
        C: {
            "1": "PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB IC JC",
            "322": "OB"
        },
        D: {
            "1": "k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 I y J E F G A B C K L H M N O z i",
            "164": "4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h"
        },
        E: {
            "1": "F G A B C K L H OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J LC 2B MC",
            "164": "E NC"
        },
        F: {
            "1": "V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "164": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U"
        },
        G: {
            "1": "F cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC bC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC",
            "164": "yC zC"
        },
        J: {
            "2": "E",
            "164": "A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "164": "0C"
        },
        P: {
            "1": "i CD DD",
            "164": "I 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD"
        },
        Q: {
            "164": "4B"
        },
        R: {
            "164": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "text-emphasis styling"
};

},{}],"e0FO2":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F GC",
            "8": "G",
            "292": "A B"
        },
        B: {
            "1": "M N O P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "292": "C K L H"
        },
        C: {
            "1": "XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y J E F G A B C K L H M N O IC JC",
            "8": "0 1 2 3 4 5 6 7 8 9 z i AB BB CB DB EB FB GB HB IB",
            "584": "JB KB LB MB NB OB PB QB RB SB TB UB",
            "1025": "VB WB"
        },
        D: {
            "1": "bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 I y J E F G A B C K L H M N O z i",
            "8": "4 5 6 7",
            "200": "8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB",
            "1025": "aB"
        },
        E: {
            "1": "B C K L H 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y LC 2B MC",
            "8": "J E F G A NC OC PC"
        },
        F: {
            "1": "NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 G B C H M N O z i UC VC WC XC tB EC YC uB",
            "200": "7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB"
        },
        G: {
            "1": "hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC",
            "8": "F bC cC dC eC fC gC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC",
            "8": "FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "292": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "1C",
            "8": "I"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 4,
    C: "CSS Grid Layout (level 1)"
};

},{}],"5pxlz":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E GC",
            "161": "F G A B"
        },
        B: {
            "2": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "161": "C K L H M N O"
        },
        C: {
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B IC JC"
        },
        D: {
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        E: {
            "2": "I y J E F G A B C K L H LC 2B MC NC OC PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC"
        },
        F: {
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h UC VC WC XC tB EC YC uB"
        },
        G: {
            "2": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "2": "wB I D uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "2": "A B C j tB EC uB"
        },
        L: {
            "2": "D"
        },
        M: {
            "2": "D"
        },
        N: {
            "16": "A B"
        },
        O: {
            "2": "0C"
        },
        P: {
            "2": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        Q: {
            "2": "4B"
        },
        R: {
            "2": "ED"
        },
        S: {
            "2": "FD GD"
        }
    },
    B: 5,
    C: "CSS Text 4 text-spacing"
};

},{}],"1cdXm":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "16": "HC",
            "33": "0 1 2 3 4 5 6 7 8 9 wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB IC JC"
        },
        D: {
            "1": "gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "16": "I y J E F G A B C K L",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB"
        },
        E: {
            "1": "G A B C K L H PC 3B tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "16": "I y J LC 2B MC",
            "33": "E F NC OC"
        },
        F: {
            "1": "VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB"
        },
        G: {
            "1": "eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "16": "2B ZC FC aC",
            "33": "F bC cC dC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "16": "wB I uC vC wC xC FC",
            "33": "yC zC"
        },
        J: {
            "16": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "16": "I",
            "33": "1C 2C 3C 4C"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "33": "FD"
        }
    },
    B: 5,
    C: "CSS :any-link selector"
};

},{}],"jJrdx":[function(require,module,exports) {
module.exports = {
    A: {
        D: {
            "1": "RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "I y J E F G A B C K L H",
            "33": "0 1 2 3 4 5 6 7 8 9 M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB"
        },
        L: {
            "1": "D"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y J E F G IC JC",
            "33": "0 1 2 3 4 5 6 7 8 9 A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB"
        },
        M: {
            "1": "D"
        },
        A: {
            "2": "J E F G A B GC"
        },
        F: {
            "1": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        E: {
            "1": "B C K L H tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC",
            "2": "I y LC 2B MC TC",
            "33": "J E F G A NC OC PC 3B"
        },
        G: {
            "1": "iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC",
            "33": "F bC cC dC eC fC gC hC"
        },
        P: {
            "1": "i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        }
    },
    B: 6,
    C: "isolate from unicode-bidi"
};

},{}],"akbkN":[function(require,module,exports) {
module.exports = {
    A: {
        D: {
            "1": "RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB"
        },
        L: {
            "1": "D"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y J E F G IC JC",
            "33": "0 1 2 3 4 5 6 7 8 9 A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB"
        },
        M: {
            "1": "D"
        },
        A: {
            "2": "J E F G A B GC"
        },
        F: {
            "1": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB UC VC WC XC tB EC YC uB"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        E: {
            "1": "B C K L H tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC",
            "2": "I y LC 2B MC TC",
            "33": "J E F G A NC OC PC 3B"
        },
        G: {
            "1": "iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC",
            "33": "F bC cC dC eC fC gC hC"
        },
        P: {
            "1": "i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        }
    },
    B: 6,
    C: "plaintext from unicode-bidi"
};

},{}],"1xazV":[function(require,module,exports) {
module.exports = {
    A: {
        D: {
            "1": "RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB"
        },
        L: {
            "1": "D"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "HC wB I y J E F G A B C K L H M IC JC",
            "33": "0 1 2 3 4 5 6 7 8 9 N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB"
        },
        M: {
            "1": "D"
        },
        A: {
            "2": "J E F G A B GC"
        },
        F: {
            "1": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB UC VC WC XC tB EC YC uB"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        E: {
            "1": "B C K L H tB uB 4B QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC",
            "2": "I y J LC 2B MC NC TC",
            "33": "E F G A OC PC 3B"
        },
        G: {
            "1": "iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC bC",
            "33": "F cC dC eC fC gC hC"
        },
        P: {
            "1": "i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        }
    },
    B: 6,
    C: "isolate-override from unicode-bidi"
};

},{}],"htcSj":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G GC",
            "132": "A B"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "132": "C K L H M N",
            "516": "O"
        },
        C: {
            "1": "xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB IC JC"
        },
        D: {
            "1": "gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB",
            "260": "eB fB"
        },
        E: {
            "1": "vB 9B AC BC CC DC SC TC",
            "2": "I y J E F G A B C K L LC 2B MC NC OC PC 3B tB uB 4B",
            "1090": "H QC RC 5B 6B 7B 8B"
        },
        F: {
            "1": "VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB UC VC WC XC tB EC YC uB",
            "260": "TB UB"
        },
        G: {
            "1": "vB 9B AC BC CC DC",
            "2": "F 2B ZC FC aC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC",
            "1090": "rC sC 5B 6B 7B 8B"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "132": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I 1C 2C 3C"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "GD",
            "2": "FD"
        }
    },
    B: 5,
    C: "CSS overscroll-behavior"
};

},{}],"c1ESd":[function(require,module,exports) {
module.exports = {
    A: {
        A: {
            "2": "J E F G A B GC"
        },
        B: {
            "1": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D",
            "2": "C K L H M N O"
        },
        C: {
            "1": "KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB IC JC",
            "194": "HB IB JB"
        },
        D: {
            "1": "RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC",
            "2": "0 1 2 3 4 5 6 7 8 9 I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB"
        },
        E: {
            "1": "L H QC RC 5B 6B 7B 8B vB 9B AC BC CC DC SC TC",
            "2": "I y J E F G LC 2B MC NC OC PC",
            "16": "A",
            "33": "B C K 3B tB uB 4B"
        },
        F: {
            "1": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h",
            "2": "0 1 2 3 4 5 6 7 8 9 G B C H M N O z i AB BB CB DB UC VC WC XC tB EC YC uB"
        },
        G: {
            "1": "gC hC iC jC kC lC mC nC oC pC qC rC sC 5B 6B 7B 8B vB 9B AC BC CC DC",
            "2": "F 2B ZC FC aC bC cC dC eC fC"
        },
        H: {
            "2": "tC"
        },
        I: {
            "1": "D",
            "2": "wB I uC vC wC xC FC yC zC"
        },
        J: {
            "2": "E A"
        },
        K: {
            "1": "j",
            "2": "A B C tB EC uB"
        },
        L: {
            "1": "D"
        },
        M: {
            "1": "D"
        },
        N: {
            "2": "A B"
        },
        O: {
            "1": "0C"
        },
        P: {
            "1": "i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD",
            "2": "I"
        },
        Q: {
            "1": "4B"
        },
        R: {
            "1": "ED"
        },
        S: {
            "1": "FD GD"
        }
    },
    B: 2,
    C: "CSS text-orientation"
};

},{}],"31QDf":[function(require,module,exports) {
module.exports = {
    A: {
        D: {
            "2": "I y J E F G A B C K L H M",
            "33": "0 1 2 3 4 5 6 7 8 9 N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D 0B 1B KC"
        },
        L: {
            "33": "D"
        },
        B: {
            "2": "C K L H M N O",
            "33": "P Q R S T U V W X Y Z a b c d e f g h k l m n o p q r s t u v w x D"
        },
        C: {
            "1": "g h k l m n o p q r s t u v w x D 0B 1B",
            "2": "0 1 2 3 4 5 6 7 8 9 HC wB I y J E F G A B C K L H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB IC JC",
            "33": "RB SB TB UB VB WB XB YB ZB aB bB xB cB yB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f"
        },
        M: {
            "1": "D"
        },
        A: {
            "2": "J E F G A B GC"
        },
        F: {
            "2": "G B C UC VC WC XC tB EC YC uB",
            "33": "0 1 2 3 4 5 6 7 8 9 H M N O z i AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB j oB pB qB rB sB P Q R zB S T U V W X Y Z a b c d e f g h"
        },
        K: {
            "2": "A B C tB EC uB",
            "33": "j"
        },
        E: {
            "1": "6B 7B 8B vB 9B AC BC CC DC SC",
            "2": "I y LC 2B MC TC",
            "33": "J E F G A B C K L H NC OC PC 3B tB uB 4B QC RC 5B"
        },
        G: {
            "1": "6B 7B 8B vB 9B AC BC CC DC",
            "2": "2B ZC FC aC",
            "33": "F bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC 5B"
        },
        P: {
            "33": "I i 1C 2C 3C 4C 5C 3B 6C 7C 8C 9C AD vB BD CD DD"
        },
        I: {
            "2": "wB I uC vC wC xC FC",
            "33": "D yC zC"
        }
    },
    B: 6,
    C: "print-color-adjust property"
};

},{}],"bGWG3":[function(require,module,exports) {
let browserslist = require("e5b53a9216317f47");
function capitalize(str) {
    return str.slice(0, 1).toUpperCase() + str.slice(1);
}
const NAMES = {
    ie: "IE",
    ie_mob: "IE Mobile",
    ios_saf: "iOS Safari",
    op_mini: "Opera Mini",
    op_mob: "Opera Mobile",
    and_chr: "Chrome for Android",
    and_ff: "Firefox for Android",
    and_uc: "UC for Android",
    and_qq: "QQ Browser",
    kaios: "KaiOS Browser",
    baidu: "Baidu Browser",
    samsung: "Samsung Internet"
};
function prefix(name, prefixes, note) {
    let out = `  ${name}`;
    if (note) out += " *";
    out += ": ";
    out += prefixes.map((i)=>i.replace(/^-(.*)-$/g, "$1")).join(", ");
    out += "\n";
    return out;
}
module.exports = function(prefixes) {
    if (prefixes.browsers.selected.length === 0) return "No browsers selected";
    let versions = {};
    for (let browser of prefixes.browsers.selected){
        let parts = browser.split(" ");
        let name = parts[0];
        let version = parts[1];
        name = NAMES[name] || capitalize(name);
        if (versions[name]) versions[name].push(version);
        else versions[name] = [
            version
        ];
    }
    let out = "Browsers:\n";
    for(let browser in versions){
        let list = versions[browser];
        list = list.sort((a, b)=>parseFloat(b) - parseFloat(a));
        out += `  ${browser}: ${list.join(", ")}\n`;
    }
    let coverage = browserslist.coverage(prefixes.browsers.selected);
    let round = Math.round(coverage * 100) / 100.0;
    out += `\nThese browsers account for ${round}% of all users globally\n`;
    let atrules = [];
    for(let name in prefixes.add){
        let data = prefixes.add[name];
        if (name[0] === "@" && data.prefixes) atrules.push(prefix(name, data.prefixes));
    }
    if (atrules.length > 0) out += `\nAt-Rules:\n${atrules.sort().join("")}`;
    let selectors = [];
    for (let selector of prefixes.add.selectors)if (selector.prefixes) selectors.push(prefix(selector.name, selector.prefixes));
    if (selectors.length > 0) out += `\nSelectors:\n${selectors.sort().join("")}`;
    let values = [];
    let props = [];
    let hadGrid = false;
    for(let name in prefixes.add){
        let data = prefixes.add[name];
        if (name[0] !== "@" && data.prefixes) {
            let grid = name.indexOf("grid-") === 0;
            if (grid) hadGrid = true;
            props.push(prefix(name, data.prefixes, grid));
        }
        if (!Array.isArray(data.values)) continue;
        for (let value of data.values){
            let grid = value.name.includes("grid");
            if (grid) hadGrid = true;
            let string = prefix(value.name, value.prefixes, grid);
            if (!values.includes(string)) values.push(string);
        }
    }
    if (props.length > 0) out += `\nProperties:\n${props.sort().join("")}`;
    if (values.length > 0) out += `\nValues:\n${values.sort().join("")}`;
    if (hadGrid) out += "\n* - Prefixes will be added only on grid: true option.\n";
    if (!atrules.length && !selectors.length && !props.length && !values.length) out += "\nAwesome! Your browsers don't require any vendor prefixes.\nNow you can remove Autoprefixer from build steps.";
    return out;
};

},{"e5b53a9216317f47":"h32Zo"}],"iX81K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chartViewJs = require("./chartView.js");
var _chartViewJsDefault = parcelHelpers.interopDefault(_chartViewJs);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _helpersJs = require("../../utilities/helpers.js");
var _configJs = require("../../utilities/config.js");
var _spriteSvg = require("url:../../../../sprite.svg");
var _spriteSvgDefault = parcelHelpers.interopDefault(_spriteSvg);
var _chartjsPluginScrollBar = require("chartjs-plugin-scroll-bar");
var _chartjsPluginScrollBarDefault = parcelHelpers.interopDefault(_chartjsPluginScrollBar);
var _chartjsPluginDoughnutlabelV3 = require("chartjs-plugin-doughnutlabel-v3");
var _chartjsPluginDoughnutlabelV3Default = parcelHelpers.interopDefault(_chartjsPluginDoughnutlabelV3);
class BaseView extends (0, _chartViewJsDefault.default) {
    initialize(initFunction) {
        initFunction() // controlShowDashboard
        ;
        (0, _autoDefault.default).register((0, _chartjsPluginDoughnutlabelV3Default.default), (0, _chartjsPluginScrollBarDefault.default));
        this._maxArrLen = 10;
        this._popularDevicesCountChart = document.getElementById("popularDevicesCount");
        this._popularDevicesValueChart = document.getElementById("popularDevicesValue");
        this._popularModelsCountChart = document.getElementById("popularModelsCount");
        this._popularModelsValueChart = document.getElementById("popularModelsValue");
        this._devicesStatusChart = document.getElementById("devicesStatus");
        this._devicesAgeChart = document.getElementById("devicesAge");
        this._devicesAgeChart = document.getElementById("devicesAge");
        this._usersChart = document.getElementById("users");
        this._usersLoanChart = document.getElementById("usersLoan");
        this._budgetChart = document.getElementById("budget");
    }
    initializeChart(overview) {
        const data = overview;
        const num = 100;
        console.log(String(num.toFixed(2)));
        this.topDevices = data[0];
        this.topDevicesValue = data[1];
        this.topModels = data[2];
        this.topModelsValue = data[3];
        this.devicesStatus = data[4];
        this.devicesAge = data[5];
        this.users = data[6];
        this.usersLoan = data[7];
        this.costPerYear = data[8];
        this.totalCostPerYear = data[9];
        const totals = this._aggregate(this.topDevices, this.topDevicesValue, this.users, this.usersLoan);
        this.totalDevices = totals[0];
        this.totalDeviceValue = totals[1].toFixed(2);
        this.totalUsers = totals[2];
        this.totalLoan = totals[3];
        const avgs = this._average(this.devicesAge);
        this.avgAge = avgs[0];
        const percents = this._percentageLoan(this.devicesStatus);
        this.percentLoan = percents[0];
        // DEVICE AND DEVICE VALUES
        this._renderDoughnutChart(this._popularDevicesCountChart, this.topDevices, this.doughnutData.bind(this), [
            "Count: ",
            "Total Devices",
            this.totalDevices
        ]);
        this._renderDoughnutChart(this._popularDevicesValueChart, this.topDevicesValue, this.doughnutData.bind(this), [
            "Value: $",
            "Total Value",
            `$${this.totalDeviceValue}`,
            true
        ]);
        // MODEL AND MODEL VALUES
        this._renderAggregateBarChart(this._popularModelsCountChart, [
            this.topDevices,
            this.topModels
        ], this.popularModelsData.bind(this), "y");
        this._renderAggregateBarChart(this._popularModelsValueChart, [
            this.topDevicesValue,
            this.topModelsValue
        ], this.popularModelValuesData.bind(this), "y");
        // STATUS AND AGES
        this._renderDoughnutChart(this._devicesStatusChart, this.devicesStatus, this.doughnutData.bind(this), [
            "Count: ",
            "Availability",
            this.percentLoan
        ]);
        this._renderDoughnutChart(this._devicesAgeChart, this.devicesAge, this.doughnutData.bind(this), [
            "Count: ",
            "Average Age",
            `${this.avgAge} years`,
            false,
            " years"
        ]);
        this._renderDoughnutChart(this._usersChart, this.users, this.doughnutData.bind(this), [
            "Users: ",
            "Total Users",
            this.totalUsers
        ]);
        this._renderDoughnutChart(this._usersLoanChart, this.usersLoan, this.doughnutData.bind(this), [
            "Devices: ",
            "Total Devices",
            this.totalLoan
        ]);
        this._renderAggregateBarChart(this._budgetChart, [
            this.topDevices,
            this.costPerYear
        ], this.topDevicesBudgetData.bind(this), "x", true);
    }
    _aggregate(...arr) {
        const aggregateArr = [];
        arr.forEach((innerArr)=>{
            const total = innerArr.reduce((counter, el)=>{
                counter += el.value;
                return counter;
            }, 0);
            aggregateArr.push(total);
        });
        console.log(aggregateArr);
        return aggregateArr;
    }
    _average(...arr) {
        const avgArr = [];
        arr.forEach((innerArr)=>{
            const totalCount = this._aggregate(innerArr);
            console.log(totalCount);
            const avg = innerArr.reduce((counter, el)=>{
                if (innerArr.length !== 0) counter += el.key * (el.value / totalCount);
                return counter;
            }, 0);
            avgArr.push(avg.toFixed(2));
        });
        return avgArr;
    }
    _percentageLoan(...arr) {
        const percentArr = [];
        arr.forEach((innerArr)=>{
            const totalCount = this._aggregate(innerArr);
            console.log(totalCount);
            const percent = innerArr.reduce((counter, el)=>{
                if (el.key !== "loaned") return counter;
                console.log(el);
                return counter += el.value / totalCount * 100;
            }, 0);
            percentArr.push(`${(100 - percent).toFixed(2)}%`);
        });
        return percentArr;
    }
}
exports.default = new BaseView();

},{"./chartView.js":"ajDpB","../../utilities/helpers.js":"ePVjH","../../utilities/config.js":"4wtf3","url:../../../../sprite.svg":"63C6q","chartjs-plugin-scroll-bar":"8lBBf","chartjs-plugin-doughnutlabel-v3":"cwHk7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","chart.js/auto":"hCqnV"}],"ajDpB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _configJs = require("../../utilities/config.js");
var _showViewJs = require("../../utilities/showView.js");
var _showViewJsDefault = parcelHelpers.interopDefault(_showViewJs);
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
class ChartView extends (0, _showViewJsDefault.default) {
    // HELPERS
    // FOR DOUGHNUTS
    _filterChartArr(arr) {
        const copiedArr = arr.slice();
        if (arr.length > this._maxArrLen) {
            const othersArr = copiedArr.slice(this._maxArrLen - 1);
            copiedArr.splice(this._maxArrLen - 1, copiedArr.length - (this._maxArrLen - 1));
            const otherCount = othersArr.reduce((others, other)=>{
                others += other.value;
                return others;
            }, 0);
            copiedArr.push({
                "key": "Others",
                "value": otherCount
            });
        }
        console.log(copiedArr);
        return [
            copiedArr,
            copiedArr.length
        ];
    }
    // FOR REDUCE AGGREGATIONS
    _groupChartArrRank(parentArr, childArr) {
        const data = childArr;
        console.log(data);
        // Group data by device type
        const groupedData = {};
        data.forEach((item)=>{
            if (!groupedData[item.device_type]) groupedData[item.device_type] = [];
            groupedData[item.device_type].push(item);
        });
        // parentArr.forEach((parentType) => console.log(parentType.key))
        const groupedArr = parentArr.map((parentType)=>groupedData[parentType.key]);
        // Find the maximum length among the arrays to determine the number of elements in each sub-array
        const maxLength = Math.max(...groupedArr.map((arr)=>arr.length));
        // Create the result array of arrays
        const result = Array.from({
            length: maxLength
        }, (_, index)=>groupedArr.map((arr)=>arr[index]));
        return result;
    }
    // FOR YEARLY AGGREGATIONS
    _groupChartArrYear(parentArr, childArr) {
        const data = childArr;
        console.log(data);
        const firstYear = Math.min(...data.map((obj)=>obj.key));
        const currentDate = new Date;
        const currentYear = currentDate.getFullYear();
        let yearArr = [];
        for(let i = firstYear; i <= currentYear; i++)yearArr.push(i);
        // Group data by device type
        const groupedData = {};
        data.forEach((item)=>{
            if (!groupedData[item.device_type]) groupedData[item.device_type] = [];
            groupedData[item.device_type].push(item);
        });
        console.log(groupedData);
        const groupedArr = parentArr.map((parentDeviceType)=>{
            // console.log(parentDeviceType);
            return {
                [parentDeviceType.key]: yearArr.map((year)=>{
                    // console.log(year);
                    const foundChildDeviceType = groupedData[parentDeviceType.key].find((childDeviceType)=>{
                        return parseInt(childDeviceType.key) === parseInt(year);
                    });
                    return foundChildDeviceType?.value || 0;
                })
            };
        });
        return [
            yearArr,
            groupedArr
        ];
    }
    // FOR DOUGHNUTS
    doughnutData(oldArr, label, isCurrency = false, suffix) {
        const tempArr = oldArr;
        console.log(tempArr);
        // years
        let arr;
        if (suffix) {
            arr = tempArr.map((el)=>({
                    ...el,
                    key: String(el.key) + suffix
                }));
            console.log(arr);
        } else arr = tempArr;
        console.log(arr);
        const [realArr, arrLen] = this._filterChartArr(arr);
        return [
            {
                labels: realArr.map((component)=>String(component.key)),
                datasets: [
                    {
                        data: realArr.map((component)=>String(component.value)),
                        hoverOffset: 4,
                        backgroundColor: (0, _configJs.COLORSCALE).slice(0, arrLen)
                    }
                ]
            },
            {
                title: function(context) {
                    return `${context[0].label}`;
                },
                label: function(context) {
                    if (isCurrency) console.log(context.formattedValue);
                    const value = isCurrency ? parseFloat(context.formattedValue.replaceAll(",", "")).toFixed(2) : context.formattedValue;
                    return `${label}${value}`;
                }
            }
        ];
    }
    // FOR AGGREGATION
    popularModelsData(arrs) {
        const [deviceArr, modelArr] = arrs;
        const result = this._groupChartArrRank(deviceArr, modelArr);
        return [
            {
                labels: result[0].map((type)=>type.device_type),
                datasets: result.map((innerArr, index)=>({
                        label: innerArr.map((data)=>data?.model_name),
                        data: innerArr.map((data)=>data?.model_count || 0),
                        backgroundColor: innerArr.map(()=>(0, _configJs.COLORSCALE)[index % (0, _configJs.COLORSCALE).length])
                    }))
            },
            {
                title: function(context) {
                    console.log(context);
                    const value = context[0].dataset.label[context[0].dataIndex] || "";
                    return `Model: ${value}`;
                },
                label: function(context) {
                    console.log(context);
                    return `Count: ${context.formattedValue}`;
                }
            },
            {
                x: {
                    ticks: {
                        stepSize: 20
                    },
                    stacked: true
                },
                y: {
                    stacked: true,
                    min: 0,
                    max: 9
                }
            },
            {
                enable: true,
                scrollType: "vertical",
                scrollSize: 10
            }
        ];
    }
    // FOR AGGREGATION
    popularModelValuesData(arrs) {
        const [deviceArr, modelArr] = arrs;
        console.log(modelArr);
        const result = this._groupChartArrRank(deviceArr, modelArr);
        console.log(result);
        return [
            {
                labels: result[0].map((type)=>type.device_type),
                datasets: result.map((innerArr, index)=>({
                        label: innerArr.map((data)=>data?.model_name),
                        data: innerArr.map((data)=>data?.model_value || 0),
                        backgroundColor: innerArr.map(()=>(0, _configJs.COLORSCALE)[index % (0, _configJs.COLORSCALE).length])
                    }))
            },
            {
                title: function(context) {
                    // console.log(context);
                    const value = context[0].dataset.label[context[0].dataIndex] || "";
                    return `Model: ${value}`;
                },
                label: function(context) {
                    const value = context.parsed.x.toFixed(2);
                    return `Cost: $${value}`;
                }
            },
            {
                x: {
                    stacked: true
                },
                y: {
                    stacked: true,
                    min: 0,
                    max: 9
                }
            },
            {
                enable: true,
                scrollType: "vertical",
                scrollSize: 10
            }
        ];
    }
    // FOR AGGREGATION
    topDevicesBudgetData(arrs) {
        const [deviceArr, modelArr] = arrs;
        console.log(modelArr);
        const [yearArr, groupedArr] = this._groupChartArrYear(deviceArr, modelArr);
        // console.log(this.totalCostPerYear.find((obj) => obj['key'] === 2009)?.value);
        console.log(yearArr);
        console.log(this.totalCostPerYear);
        const labelsArr = yearArr.map((year)=>[
                `${year}`,
                `$${parseFloat(this.totalCostPerYear.find((obj)=>parseInt(obj["key"]) === year)?.value || 0).toFixed(2)}`
            ]);
        console.log(labelsArr);
        return [
            {
                labels: labelsArr,
                datasets: groupedArr.map((deviceType, index)=>{
                    return {
                        label: Object.keys(deviceType)[0],
                        data: Object.values(deviceType)[0],
                        backgroundColor: (0, _configJs.COLORSCALE)[index % (0, _configJs.COLORSCALE).length]
                    };
                })
            },
            {
                title: function(context) {
                    console.log(context);
                    console.log(context[0].dataset.label);
                    const value = context[0].dataset.label || "";
                    return `Type: ${value}`;
                },
                label: function(context) {
                    console.log(context);
                    const value = context.parsed.y.toFixed(2);
                    return `Expenditure: $${value}`;
                }
            },
            {
                x: {
                    stacked: true,
                    min: 0,
                    max: 15
                },
                y: {
                    stacked: true
                }
            },
            {
                enable: true,
                scrollType: "Horizontal",
                scrollSize: 16
            }
        ];
    }
    _renderAggregateBarChart(el, arrs, getDataFunction, indexAxis = "x", display = false) {
        const [data, callbacks, scales, scrollBar] = getDataFunction(arrs);
        console.log(data, callbacks, scales);
        const chart = new (0, _autoDefault.default)(el, {
            // TYPE OF CHART
            type: "bar",
            data: data,
            options: {
                layout: {
                    padding: 20
                },
                indexAxis: indexAxis,
                scales: scales,
                plugins: {
                    scrollBar: scrollBar,
                    legend: {
                        display: display
                    },
                    tooltip: {
                        callbacks: callbacks
                    }
                },
                animation: {
                    animateScale: true
                },
                onHover: (event, elements)=>{
                    const chartElement = event.native.target;
                    if (elements.length > 0) chartElement.style.cursor = "pointer";
                    else chartElement.style.cursor = "default";
                }
            }
        });
    }
    _renderDoughnutChart(el, arr, getDataFunction, text) {
        const label = text[0];
        const title = text[1];
        const value = text[2];
        const isCurrency = text[3];
        const suffix = text[4];
        console.log(label, title, value, isCurrency, suffix);
        const [data, callbacks] = getDataFunction(arr, label, isCurrency, suffix);
        console.log(text);
        console.log(value);
        new (0, _autoDefault.default)(el, {
            // TYPE OF CHART
            type: "doughnut",
            data: data,
            options: {
                plugins: {
                    tooltip: {
                        enabled: true,
                        callbacks: callbacks
                    },
                    legend: {
                        display: true,
                        position: "right",
                        maxWidth: 120,
                        labels: {
                            boxWidth: 10
                        }
                    },
                    doughnutLabel: {
                        labels: [
                            {
                                text: title,
                                color: "black",
                                font: {
                                    size: "10",
                                    weight: "bold"
                                }
                            },
                            {
                                text: value,
                                color: "black",
                                font: {
                                    size: "13",
                                    weight: "bold"
                                }
                            }
                        ]
                    }
                },
                animation: {
                    animateScale: true
                },
                onHover: (event, elements)=>{
                    const chartElement = event.native.target;
                    if (elements.length > 0) chartElement.style.cursor = "pointer";
                    else chartElement.style.cursor = "default";
                }
            }
        });
    }
}
exports.default = ChartView;

},{"../../utilities/config.js":"4wtf3","../../utilities/showView.js":"so2IN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","chart.js/auto":"hCqnV"}],"hCqnV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chartMjs = require("../dist/chart.mjs");
(0, _chartMjs.Chart).register(...(0, _chartMjs.registerables));
exports.default = (0, _chartMjs.Chart);

},{"../dist/chart.mjs":"d3eK4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d3eK4":[function(require,module,exports) {
/*!
 * Chart.js v3.9.1
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaults", ()=>(0, _helpersSegmentMjs.d));
parcelHelpers.export(exports, "Animation", ()=>Animation);
parcelHelpers.export(exports, "Animations", ()=>Animations);
parcelHelpers.export(exports, "ArcElement", ()=>ArcElement);
parcelHelpers.export(exports, "BarController", ()=>BarController);
parcelHelpers.export(exports, "BarElement", ()=>BarElement);
parcelHelpers.export(exports, "BasePlatform", ()=>BasePlatform);
parcelHelpers.export(exports, "BasicPlatform", ()=>BasicPlatform);
parcelHelpers.export(exports, "BubbleController", ()=>BubbleController);
parcelHelpers.export(exports, "CategoryScale", ()=>CategoryScale);
parcelHelpers.export(exports, "Chart", ()=>Chart);
parcelHelpers.export(exports, "DatasetController", ()=>DatasetController);
parcelHelpers.export(exports, "Decimation", ()=>plugin_decimation);
parcelHelpers.export(exports, "DomPlatform", ()=>DomPlatform);
parcelHelpers.export(exports, "DoughnutController", ()=>DoughnutController);
parcelHelpers.export(exports, "Element", ()=>Element);
parcelHelpers.export(exports, "Filler", ()=>index);
parcelHelpers.export(exports, "Interaction", ()=>Interaction);
parcelHelpers.export(exports, "Legend", ()=>plugin_legend);
parcelHelpers.export(exports, "LineController", ()=>LineController);
parcelHelpers.export(exports, "LineElement", ()=>LineElement);
parcelHelpers.export(exports, "LinearScale", ()=>LinearScale);
parcelHelpers.export(exports, "LogarithmicScale", ()=>LogarithmicScale);
parcelHelpers.export(exports, "PieController", ()=>PieController);
parcelHelpers.export(exports, "PointElement", ()=>PointElement);
parcelHelpers.export(exports, "PolarAreaController", ()=>PolarAreaController);
parcelHelpers.export(exports, "RadarController", ()=>RadarController);
parcelHelpers.export(exports, "RadialLinearScale", ()=>RadialLinearScale);
parcelHelpers.export(exports, "Scale", ()=>Scale);
parcelHelpers.export(exports, "ScatterController", ()=>ScatterController);
parcelHelpers.export(exports, "SubTitle", ()=>plugin_subtitle);
parcelHelpers.export(exports, "Ticks", ()=>Ticks);
parcelHelpers.export(exports, "TimeScale", ()=>TimeScale);
parcelHelpers.export(exports, "TimeSeriesScale", ()=>TimeSeriesScale);
parcelHelpers.export(exports, "Title", ()=>plugin_title);
parcelHelpers.export(exports, "Tooltip", ()=>plugin_tooltip);
parcelHelpers.export(exports, "_adapters", ()=>adapters);
parcelHelpers.export(exports, "_detectPlatform", ()=>_detectPlatform);
parcelHelpers.export(exports, "animator", ()=>animator);
parcelHelpers.export(exports, "controllers", ()=>controllers);
parcelHelpers.export(exports, "elements", ()=>elements);
parcelHelpers.export(exports, "layouts", ()=>layouts);
parcelHelpers.export(exports, "plugins", ()=>plugins);
parcelHelpers.export(exports, "registerables", ()=>registerables);
parcelHelpers.export(exports, "registry", ()=>registry);
parcelHelpers.export(exports, "scales", ()=>scales);
var _helpersSegmentMjs = require("./chunks/helpers.segment.mjs");
class Animator {
    constructor(){
        this._request = null;
        this._charts = new Map();
        this._running = false;
        this._lastDate = undefined;
    }
    _notify(chart, anims, date, type) {
        const callbacks = anims.listeners[type];
        const numSteps = anims.duration;
        callbacks.forEach((fn)=>fn({
                chart,
                initial: anims.initial,
                numSteps,
                currentStep: Math.min(date - anims.start, numSteps)
            }));
    }
    _refresh() {
        if (this._request) return;
        this._running = true;
        this._request = (0, _helpersSegmentMjs.r).call(window, ()=>{
            this._update();
            this._request = null;
            if (this._running) this._refresh();
        });
    }
    _update(date = Date.now()) {
        let remaining = 0;
        this._charts.forEach((anims, chart)=>{
            if (!anims.running || !anims.items.length) return;
            const items = anims.items;
            let i = items.length - 1;
            let draw = false;
            let item;
            for(; i >= 0; --i){
                item = items[i];
                if (item._active) {
                    if (item._total > anims.duration) anims.duration = item._total;
                    item.tick(date);
                    draw = true;
                } else {
                    items[i] = items[items.length - 1];
                    items.pop();
                }
            }
            if (draw) {
                chart.draw();
                this._notify(chart, anims, date, "progress");
            }
            if (!items.length) {
                anims.running = false;
                this._notify(chart, anims, date, "complete");
                anims.initial = false;
            }
            remaining += items.length;
        });
        this._lastDate = date;
        if (remaining === 0) this._running = false;
    }
    _getAnims(chart) {
        const charts = this._charts;
        let anims = charts.get(chart);
        if (!anims) {
            anims = {
                running: false,
                initial: true,
                items: [],
                listeners: {
                    complete: [],
                    progress: []
                }
            };
            charts.set(chart, anims);
        }
        return anims;
    }
    listen(chart, event, cb) {
        this._getAnims(chart).listeners[event].push(cb);
    }
    add(chart, items) {
        if (!items || !items.length) return;
        this._getAnims(chart).items.push(...items);
    }
    has(chart) {
        return this._getAnims(chart).items.length > 0;
    }
    start(chart) {
        const anims = this._charts.get(chart);
        if (!anims) return;
        anims.running = true;
        anims.start = Date.now();
        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);
        this._refresh();
    }
    running(chart) {
        if (!this._running) return false;
        const anims = this._charts.get(chart);
        if (!anims || !anims.running || !anims.items.length) return false;
        return true;
    }
    stop(chart) {
        const anims = this._charts.get(chart);
        if (!anims || !anims.items.length) return;
        const items = anims.items;
        let i = items.length - 1;
        for(; i >= 0; --i)items[i].cancel();
        anims.items = [];
        this._notify(chart, anims, Date.now(), "complete");
    }
    remove(chart) {
        return this._charts.delete(chart);
    }
}
var animator = new Animator();
const transparent = "transparent";
const interpolators = {
    boolean (from, to, factor) {
        return factor > 0.5 ? to : from;
    },
    color (from, to, factor) {
        const c0 = (0, _helpersSegmentMjs.c)(from || transparent);
        const c1 = c0.valid && (0, _helpersSegmentMjs.c)(to || transparent);
        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
    },
    number (from, to, factor) {
        return from + (to - from) * factor;
    }
};
class Animation {
    constructor(cfg, target, prop, to){
        const currentValue = target[prop];
        to = (0, _helpersSegmentMjs.a)([
            cfg.to,
            to,
            currentValue,
            cfg.from
        ]);
        const from = (0, _helpersSegmentMjs.a)([
            cfg.from,
            currentValue,
            to
        ]);
        this._active = true;
        this._fn = cfg.fn || interpolators[cfg.type || typeof from];
        this._easing = (0, _helpersSegmentMjs.e)[cfg.easing] || (0, _helpersSegmentMjs.e).linear;
        this._start = Math.floor(Date.now() + (cfg.delay || 0));
        this._duration = this._total = Math.floor(cfg.duration);
        this._loop = !!cfg.loop;
        this._target = target;
        this._prop = prop;
        this._from = from;
        this._to = to;
        this._promises = undefined;
    }
    active() {
        return this._active;
    }
    update(cfg, to, date) {
        if (this._active) {
            this._notify(false);
            const currentValue = this._target[this._prop];
            const elapsed = date - this._start;
            const remain = this._duration - elapsed;
            this._start = date;
            this._duration = Math.floor(Math.max(remain, cfg.duration));
            this._total += elapsed;
            this._loop = !!cfg.loop;
            this._to = (0, _helpersSegmentMjs.a)([
                cfg.to,
                to,
                currentValue,
                cfg.from
            ]);
            this._from = (0, _helpersSegmentMjs.a)([
                cfg.from,
                currentValue,
                to
            ]);
        }
    }
    cancel() {
        if (this._active) {
            this.tick(Date.now());
            this._active = false;
            this._notify(false);
        }
    }
    tick(date) {
        const elapsed = date - this._start;
        const duration = this._duration;
        const prop = this._prop;
        const from = this._from;
        const loop = this._loop;
        const to = this._to;
        let factor;
        this._active = from !== to && (loop || elapsed < duration);
        if (!this._active) {
            this._target[prop] = to;
            this._notify(true);
            return;
        }
        if (elapsed < 0) {
            this._target[prop] = from;
            return;
        }
        factor = elapsed / duration % 2;
        factor = loop && factor > 1 ? 2 - factor : factor;
        factor = this._easing(Math.min(1, Math.max(0, factor)));
        this._target[prop] = this._fn(from, to, factor);
    }
    wait() {
        const promises = this._promises || (this._promises = []);
        return new Promise((res, rej)=>{
            promises.push({
                res,
                rej
            });
        });
    }
    _notify(resolved) {
        const method = resolved ? "res" : "rej";
        const promises = this._promises || [];
        for(let i = 0; i < promises.length; i++)promises[i][method]();
    }
}
const numbers = [
    "x",
    "y",
    "borderWidth",
    "radius",
    "tension"
];
const colors = [
    "color",
    "borderColor",
    "backgroundColor"
];
(0, _helpersSegmentMjs.d).set("animation", {
    delay: undefined,
    duration: 1000,
    easing: "easeOutQuart",
    fn: undefined,
    from: undefined,
    loop: undefined,
    to: undefined,
    type: undefined
});
const animationOptions = Object.keys((0, _helpersSegmentMjs.d).animation);
(0, _helpersSegmentMjs.d).describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (name)=>name !== "onProgress" && name !== "onComplete" && name !== "fn"
});
(0, _helpersSegmentMjs.d).set("animations", {
    colors: {
        type: "color",
        properties: colors
    },
    numbers: {
        type: "number",
        properties: numbers
    }
});
(0, _helpersSegmentMjs.d).describe("animations", {
    _fallback: "animation"
});
(0, _helpersSegmentMjs.d).set("transitions", {
    active: {
        animation: {
            duration: 400
        }
    },
    resize: {
        animation: {
            duration: 0
        }
    },
    show: {
        animations: {
            colors: {
                from: "transparent"
            },
            visible: {
                type: "boolean",
                duration: 0
            }
        }
    },
    hide: {
        animations: {
            colors: {
                to: "transparent"
            },
            visible: {
                type: "boolean",
                easing: "linear",
                fn: (v)=>v | 0
            }
        }
    }
});
class Animations {
    constructor(chart, config){
        this._chart = chart;
        this._properties = new Map();
        this.configure(config);
    }
    configure(config) {
        if (!(0, _helpersSegmentMjs.i)(config)) return;
        const animatedProps = this._properties;
        Object.getOwnPropertyNames(config).forEach((key)=>{
            const cfg = config[key];
            if (!(0, _helpersSegmentMjs.i)(cfg)) return;
            const resolved = {};
            for (const option of animationOptions)resolved[option] = cfg[option];
            ((0, _helpersSegmentMjs.b)(cfg.properties) && cfg.properties || [
                key
            ]).forEach((prop)=>{
                if (prop === key || !animatedProps.has(prop)) animatedProps.set(prop, resolved);
            });
        });
    }
    _animateOptions(target, values) {
        const newOptions = values.options;
        const options = resolveTargetOptions(target, newOptions);
        if (!options) return [];
        const animations = this._createAnimations(options, newOptions);
        if (newOptions.$shared) awaitAll(target.options.$animations, newOptions).then(()=>{
            target.options = newOptions;
        }, ()=>{});
        return animations;
    }
    _createAnimations(target, values) {
        const animatedProps = this._properties;
        const animations = [];
        const running = target.$animations || (target.$animations = {});
        const props = Object.keys(values);
        const date = Date.now();
        let i;
        for(i = props.length - 1; i >= 0; --i){
            const prop = props[i];
            if (prop.charAt(0) === "$") continue;
            if (prop === "options") {
                animations.push(...this._animateOptions(target, values));
                continue;
            }
            const value = values[prop];
            let animation = running[prop];
            const cfg = animatedProps.get(prop);
            if (animation) {
                if (cfg && animation.active()) {
                    animation.update(cfg, value, date);
                    continue;
                } else animation.cancel();
            }
            if (!cfg || !cfg.duration) {
                target[prop] = value;
                continue;
            }
            running[prop] = animation = new Animation(cfg, target, prop, value);
            animations.push(animation);
        }
        return animations;
    }
    update(target, values) {
        if (this._properties.size === 0) {
            Object.assign(target, values);
            return;
        }
        const animations = this._createAnimations(target, values);
        if (animations.length) {
            animator.add(this._chart, animations);
            return true;
        }
    }
}
function awaitAll(animations, properties) {
    const running = [];
    const keys = Object.keys(properties);
    for(let i = 0; i < keys.length; i++){
        const anim = animations[keys[i]];
        if (anim && anim.active()) running.push(anim.wait());
    }
    return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
    if (!newOptions) return;
    let options = target.options;
    if (!options) {
        target.options = newOptions;
        return;
    }
    if (options.$shared) target.options = options = Object.assign({}, options, {
        $shared: false,
        $animations: {}
    });
    return options;
}
function scaleClip(scale, allowedOverflow) {
    const opts = scale && scale.options || {};
    const reverse = opts.reverse;
    const min = opts.min === undefined ? allowedOverflow : 0;
    const max = opts.max === undefined ? allowedOverflow : 0;
    return {
        start: reverse ? max : min,
        end: reverse ? min : max
    };
}
function defaultClip(xScale, yScale, allowedOverflow) {
    if (allowedOverflow === false) return false;
    const x = scaleClip(xScale, allowedOverflow);
    const y = scaleClip(yScale, allowedOverflow);
    return {
        top: y.end,
        right: x.end,
        bottom: y.start,
        left: x.start
    };
}
function toClip(value) {
    let t, r, b, l;
    if ((0, _helpersSegmentMjs.i)(value)) {
        t = value.top;
        r = value.right;
        b = value.bottom;
        l = value.left;
    } else t = r = b = l = value;
    return {
        top: t,
        right: r,
        bottom: b,
        left: l,
        disabled: value === false
    };
}
function getSortedDatasetIndices(chart, filterVisible) {
    const keys = [];
    const metasets = chart._getSortedDatasetMetas(filterVisible);
    let i, ilen;
    for(i = 0, ilen = metasets.length; i < ilen; ++i)keys.push(metasets[i].index);
    return keys;
}
function applyStack(stack, value, dsIndex, options = {}) {
    const keys = stack.keys;
    const singleMode = options.mode === "single";
    let i, ilen, datasetIndex, otherValue;
    if (value === null) return;
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        datasetIndex = +keys[i];
        if (datasetIndex === dsIndex) {
            if (options.all) continue;
            break;
        }
        otherValue = stack.values[datasetIndex];
        if ((0, _helpersSegmentMjs.g)(otherValue) && (singleMode || value === 0 || (0, _helpersSegmentMjs.s)(value) === (0, _helpersSegmentMjs.s)(otherValue))) value += otherValue;
    }
    return value;
}
function convertObjectDataToArray(data) {
    const keys = Object.keys(data);
    const adata = new Array(keys.length);
    let i, ilen, key;
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        key = keys[i];
        adata[i] = {
            x: key,
            y: data[key]
        };
    }
    return adata;
}
function isStacked(scale, meta) {
    const stacked = scale && scale.options.stacked;
    return stacked || stacked === undefined && meta.stack !== undefined;
}
function getStackKey(indexScale, valueScale, meta) {
    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
    const { min, max, minDefined, maxDefined } = scale.getUserBounds();
    return {
        min: minDefined ? min : Number.NEGATIVE_INFINITY,
        max: maxDefined ? max : Number.POSITIVE_INFINITY
    };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
    const subStack = stacks[stackKey] || (stacks[stackKey] = {});
    return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){
        const value = stack[meta.index];
        if (positive && value > 0 || !positive && value < 0) return meta.index;
    }
    return null;
}
function updateStacks(controller, parsed) {
    const { chart, _cachedMeta: meta } = controller;
    const stacks = chart._stacks || (chart._stacks = {});
    const { iScale, vScale, index: datasetIndex } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const key = getStackKey(iScale, vScale, meta);
    const ilen = parsed.length;
    let stack;
    for(let i = 0; i < ilen; ++i){
        const item = parsed[i];
        const { [iAxis]: index, [vAxis]: value } = item;
        const itemStacks = item._stacks || (item._stacks = {});
        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
        stack[datasetIndex] = value;
        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
    }
}
function getFirstScaleId(chart, axis) {
    const scales = chart.scales;
    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();
}
function createDatasetContext(parent, index) {
    return (0, _helpersSegmentMjs.h)(parent, {
        active: false,
        dataset: undefined,
        datasetIndex: index,
        index,
        mode: "default",
        type: "dataset"
    });
}
function createDataContext(parent, index, element) {
    return (0, _helpersSegmentMjs.h)(parent, {
        active: false,
        dataIndex: index,
        parsed: undefined,
        raw: undefined,
        element,
        index,
        mode: "default",
        type: "data"
    });
}
function clearStacks(meta, items) {
    const datasetIndex = meta.controller.index;
    const axis = meta.vScale && meta.vScale.axis;
    if (!axis) return;
    items = items || meta._parsed;
    for (const parsed of items){
        const stacks = parsed._stacks;
        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) return;
        delete stacks[axis][datasetIndex];
    }
}
const isDirectUpdateMode = (mode)=>mode === "reset" || mode === "none";
const cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {
        keys: getSortedDatasetIndices(chart, true),
        values: null
    };
class DatasetController {
    constructor(chart, datasetIndex){
        this.chart = chart;
        this._ctx = chart.ctx;
        this.index = datasetIndex;
        this._cachedDataOpts = {};
        this._cachedMeta = this.getMeta();
        this._type = this._cachedMeta.type;
        this.options = undefined;
        this._parsing = false;
        this._data = undefined;
        this._objectData = undefined;
        this._sharedOptions = undefined;
        this._drawStart = undefined;
        this._drawCount = undefined;
        this.enableOptionSharing = false;
        this.supportsDecimation = false;
        this.$context = undefined;
        this._syncList = [];
        this.initialize();
    }
    initialize() {
        const meta = this._cachedMeta;
        this.configure();
        this.linkScales();
        meta._stacked = isStacked(meta.vScale, meta);
        this.addElements();
    }
    updateIndex(datasetIndex) {
        if (this.index !== datasetIndex) clearStacks(this._cachedMeta);
        this.index = datasetIndex;
    }
    linkScales() {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        const chooseId = (axis, x, y, r)=>axis === "x" ? x : axis === "r" ? r : y;
        const xid = meta.xAxisID = (0, _helpersSegmentMjs.v)(dataset.xAxisID, getFirstScaleId(chart, "x"));
        const yid = meta.yAxisID = (0, _helpersSegmentMjs.v)(dataset.yAxisID, getFirstScaleId(chart, "y"));
        const rid = meta.rAxisID = (0, _helpersSegmentMjs.v)(dataset.rAxisID, getFirstScaleId(chart, "r"));
        const indexAxis = meta.indexAxis;
        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
        meta.xScale = this.getScaleForId(xid);
        meta.yScale = this.getScaleForId(yid);
        meta.rScale = this.getScaleForId(rid);
        meta.iScale = this.getScaleForId(iid);
        meta.vScale = this.getScaleForId(vid);
    }
    getDataset() {
        return this.chart.data.datasets[this.index];
    }
    getMeta() {
        return this.chart.getDatasetMeta(this.index);
    }
    getScaleForId(scaleID) {
        return this.chart.scales[scaleID];
    }
    _getOtherScale(scale) {
        const meta = this._cachedMeta;
        return scale === meta.iScale ? meta.vScale : meta.iScale;
    }
    reset() {
        this._update("reset");
    }
    _destroy() {
        const meta = this._cachedMeta;
        if (this._data) (0, _helpersSegmentMjs.u)(this._data, this);
        if (meta._stacked) clearStacks(meta);
    }
    _dataCheck() {
        const dataset = this.getDataset();
        const data = dataset.data || (dataset.data = []);
        const _data = this._data;
        if ((0, _helpersSegmentMjs.i)(data)) this._data = convertObjectDataToArray(data);
        else if (_data !== data) {
            if (_data) {
                (0, _helpersSegmentMjs.u)(_data, this);
                const meta = this._cachedMeta;
                clearStacks(meta);
                meta._parsed = [];
            }
            if (data && Object.isExtensible(data)) (0, _helpersSegmentMjs.l)(data, this);
            this._syncList = [];
            this._data = data;
        }
    }
    addElements() {
        const meta = this._cachedMeta;
        this._dataCheck();
        if (this.datasetElementType) meta.dataset = new this.datasetElementType();
    }
    buildOrUpdateElements(resetNewElements) {
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        let stackChanged = false;
        this._dataCheck();
        const oldStacked = meta._stacked;
        meta._stacked = isStacked(meta.vScale, meta);
        if (meta.stack !== dataset.stack) {
            stackChanged = true;
            clearStacks(meta);
            meta.stack = dataset.stack;
        }
        this._resyncElements(resetNewElements);
        if (stackChanged || oldStacked !== meta._stacked) updateStacks(this, meta._parsed);
    }
    configure() {
        const config = this.chart.config;
        const scopeKeys = config.datasetScopeKeys(this._type);
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
        this.options = config.createResolver(scopes, this.getContext());
        this._parsing = this.options.parsing;
        this._cachedDataOpts = {};
    }
    parse(start, count) {
        const { _cachedMeta: meta, _data: data } = this;
        const { iScale, _stacked } = meta;
        const iAxis = iScale.axis;
        let sorted = start === 0 && count === data.length ? true : meta._sorted;
        let prev = start > 0 && meta._parsed[start - 1];
        let i, cur, parsed;
        if (this._parsing === false) {
            meta._parsed = data;
            meta._sorted = true;
            parsed = data;
        } else {
            if ((0, _helpersSegmentMjs.b)(data[start])) parsed = this.parseArrayData(meta, data, start, count);
            else if ((0, _helpersSegmentMjs.i)(data[start])) parsed = this.parseObjectData(meta, data, start, count);
            else parsed = this.parsePrimitiveData(meta, data, start, count);
            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
            for(i = 0; i < count; ++i){
                meta._parsed[i + start] = cur = parsed[i];
                if (sorted) {
                    if (isNotInOrderComparedToPrev()) sorted = false;
                    prev = cur;
                }
            }
            meta._sorted = sorted;
        }
        if (_stacked) updateStacks(this, parsed);
    }
    parsePrimitiveData(meta, data, start, count) {
        const { iScale, vScale } = meta;
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const labels = iScale.getLabels();
        const singleScale = iScale === vScale;
        const parsed = new Array(count);
        let i, ilen, index;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            parsed[i] = {
                [iAxis]: singleScale || iScale.parse(labels[index], index),
                [vAxis]: vScale.parse(data[index], index)
            };
        }
        return parsed;
    }
    parseArrayData(meta, data, start, count) {
        const { xScale, yScale } = meta;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            item = data[index];
            parsed[i] = {
                x: xScale.parse(item[0], index),
                y: yScale.parse(item[1], index)
            };
        }
        return parsed;
    }
    parseObjectData(meta, data, start, count) {
        const { xScale, yScale } = meta;
        const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            item = data[index];
            parsed[i] = {
                x: xScale.parse((0, _helpersSegmentMjs.f)(item, xAxisKey), index),
                y: yScale.parse((0, _helpersSegmentMjs.f)(item, yAxisKey), index)
            };
        }
        return parsed;
    }
    getParsed(index) {
        return this._cachedMeta._parsed[index];
    }
    getDataElement(index) {
        return this._cachedMeta.data[index];
    }
    applyStack(scale, parsed, mode) {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const value = parsed[scale.axis];
        const stack = {
            keys: getSortedDatasetIndices(chart, true),
            values: parsed._stacks[scale.axis]
        };
        return applyStack(stack, value, meta.index, {
            mode
        });
    }
    updateRangeFromParsed(range, scale, parsed, stack) {
        const parsedValue = parsed[scale.axis];
        let value = parsedValue === null ? NaN : parsedValue;
        const values = stack && parsed._stacks[scale.axis];
        if (stack && values) {
            stack.values = values;
            value = applyStack(stack, parsedValue, this._cachedMeta.index);
        }
        range.min = Math.min(range.min, value);
        range.max = Math.max(range.max, value);
    }
    getMinMax(scale, canStack) {
        const meta = this._cachedMeta;
        const _parsed = meta._parsed;
        const sorted = meta._sorted && scale === meta.iScale;
        const ilen = _parsed.length;
        const otherScale = this._getOtherScale(scale);
        const stack = createStack(canStack, meta, this.chart);
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
        let i, parsed;
        function _skip() {
            parsed = _parsed[i];
            const otherValue = parsed[otherScale.axis];
            return !(0, _helpersSegmentMjs.g)(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
        }
        for(i = 0; i < ilen; ++i){
            if (_skip()) continue;
            this.updateRangeFromParsed(range, scale, parsed, stack);
            if (sorted) break;
        }
        if (sorted) for(i = ilen - 1; i >= 0; --i){
            if (_skip()) continue;
            this.updateRangeFromParsed(range, scale, parsed, stack);
            break;
        }
        return range;
    }
    getAllParsedValues(scale) {
        const parsed = this._cachedMeta._parsed;
        const values = [];
        let i, ilen, value;
        for(i = 0, ilen = parsed.length; i < ilen; ++i){
            value = parsed[i][scale.axis];
            if ((0, _helpersSegmentMjs.g)(value)) values.push(value);
        }
        return values;
    }
    getMaxOverflow() {
        return false;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const vScale = meta.vScale;
        const parsed = this.getParsed(index);
        return {
            label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
            value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
        };
    }
    _update(mode) {
        const meta = this._cachedMeta;
        this.update(mode || "default");
        meta._clip = toClip((0, _helpersSegmentMjs.v)(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
    }
    update(mode) {}
    draw() {
        const ctx = this._ctx;
        const chart = this.chart;
        const meta = this._cachedMeta;
        const elements = meta.data || [];
        const area = chart.chartArea;
        const active = [];
        const start = this._drawStart || 0;
        const count = this._drawCount || elements.length - start;
        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
        let i;
        if (meta.dataset) meta.dataset.draw(ctx, area, start, count);
        for(i = start; i < start + count; ++i){
            const element = elements[i];
            if (element.hidden) continue;
            if (element.active && drawActiveElementsOnTop) active.push(element);
            else element.draw(ctx, area);
        }
        for(i = 0; i < active.length; ++i)active[i].draw(ctx, area);
    }
    getStyle(index, active) {
        const mode = active ? "active" : "default";
        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
    }
    getContext(index, active, mode) {
        const dataset = this.getDataset();
        let context;
        if (index >= 0 && index < this._cachedMeta.data.length) {
            const element = this._cachedMeta.data[index];
            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));
            context.parsed = this.getParsed(index);
            context.raw = dataset.data[index];
            context.index = context.dataIndex = index;
        } else {
            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
            context.dataset = dataset;
            context.index = context.datasetIndex = this.index;
        }
        context.active = !!active;
        context.mode = mode;
        return context;
    }
    resolveDatasetElementOptions(mode) {
        return this._resolveElementOptions(this.datasetElementType.id, mode);
    }
    resolveDataElementOptions(index, mode) {
        return this._resolveElementOptions(this.dataElementType.id, mode, index);
    }
    _resolveElementOptions(elementType, mode = "default", index) {
        const active = mode === "active";
        const cache = this._cachedDataOpts;
        const cacheKey = elementType + "-" + mode;
        const cached = cache[cacheKey];
        const sharing = this.enableOptionSharing && (0, _helpersSegmentMjs.j)(index);
        if (cached) return cloneIfNotShared(cached, sharing);
        const config = this.chart.config;
        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
        const prefixes = active ? [
            `${elementType}Hover`,
            "hover",
            elementType,
            ""
        ] : [
            elementType,
            ""
        ];
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
        const names = Object.keys((0, _helpersSegmentMjs.d).elements[elementType]);
        const context = ()=>this.getContext(index, active);
        const values = config.resolveNamedOptions(scopes, names, context, prefixes);
        if (values.$shared) {
            values.$shared = sharing;
            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
        }
        return values;
    }
    _resolveAnimations(index, transition, active) {
        const chart = this.chart;
        const cache = this._cachedDataOpts;
        const cacheKey = `animation-${transition}`;
        const cached = cache[cacheKey];
        if (cached) return cached;
        let options;
        if (chart.options.animation !== false) {
            const config = this.chart.config;
            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
            options = config.createResolver(scopes, this.getContext(index, active, transition));
        }
        const animations = new Animations(chart, options && options.animations);
        if (options && options._cacheable) cache[cacheKey] = Object.freeze(animations);
        return animations;
    }
    getSharedOptions(options) {
        if (!options.$shared) return;
        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
    }
    includeOptions(mode, sharedOptions) {
        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
    }
    _getSharedOptions(start, mode) {
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const previouslySharedOptions = this._sharedOptions;
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
        return {
            sharedOptions,
            includeOptions
        };
    }
    updateElement(element, index, properties, mode) {
        if (isDirectUpdateMode(mode)) Object.assign(element, properties);
        else this._resolveAnimations(index, mode).update(element, properties);
    }
    updateSharedOptions(sharedOptions, mode, newOptions) {
        if (sharedOptions && !isDirectUpdateMode(mode)) this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
    }
    _setStyle(element, index, mode, active) {
        element.active = active;
        const options = this.getStyle(index, active);
        this._resolveAnimations(index, mode, active).update(element, {
            options: !active && this.getSharedOptions(options) || options
        });
    }
    removeHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, "active", false);
    }
    setHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, "active", true);
    }
    _removeDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) this._setStyle(element, undefined, "active", false);
    }
    _setDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) this._setStyle(element, undefined, "active", true);
    }
    _resyncElements(resetNewElements) {
        const data = this._data;
        const elements = this._cachedMeta.data;
        for (const [method, arg1, arg2] of this._syncList)this[method](arg1, arg2);
        this._syncList = [];
        const numMeta = elements.length;
        const numData = data.length;
        const count = Math.min(numData, numMeta);
        if (count) this.parse(0, count);
        if (numData > numMeta) this._insertElements(numMeta, numData - numMeta, resetNewElements);
        else if (numData < numMeta) this._removeElements(numData, numMeta - numData);
    }
    _insertElements(start, count, resetNewElements = true) {
        const meta = this._cachedMeta;
        const data = meta.data;
        const end = start + count;
        let i;
        const move = (arr)=>{
            arr.length += count;
            for(i = arr.length - 1; i >= end; i--)arr[i] = arr[i - count];
        };
        move(data);
        for(i = start; i < end; ++i)data[i] = new this.dataElementType();
        if (this._parsing) move(meta._parsed);
        this.parse(start, count);
        if (resetNewElements) this.updateElements(data, start, count, "reset");
    }
    updateElements(element, start, count, mode) {}
    _removeElements(start, count) {
        const meta = this._cachedMeta;
        if (this._parsing) {
            const removed = meta._parsed.splice(start, count);
            if (meta._stacked) clearStacks(meta, removed);
        }
        meta.data.splice(start, count);
    }
    _sync(args) {
        if (this._parsing) this._syncList.push(args);
        else {
            const [method, arg1, arg2] = args;
            this[method](arg1, arg2);
        }
        this.chart._dataChanges.push([
            this.index,
            ...args
        ]);
    }
    _onDataPush() {
        const count = arguments.length;
        this._sync([
            "_insertElements",
            this.getDataset().data.length - count,
            count
        ]);
    }
    _onDataPop() {
        this._sync([
            "_removeElements",
            this._cachedMeta.data.length - 1,
            1
        ]);
    }
    _onDataShift() {
        this._sync([
            "_removeElements",
            0,
            1
        ]);
    }
    _onDataSplice(start, count) {
        if (count) this._sync([
            "_removeElements",
            start,
            count
        ]);
        const newCount = arguments.length - 2;
        if (newCount) this._sync([
            "_insertElements",
            start,
            newCount
        ]);
    }
    _onDataUnshift() {
        this._sync([
            "_insertElements",
            0,
            arguments.length
        ]);
    }
}
DatasetController.defaults = {};
DatasetController.prototype.datasetElementType = null;
DatasetController.prototype.dataElementType = null;
function getAllScaleValues(scale, type) {
    if (!scale._cache.$bar) {
        const visibleMetas = scale.getMatchingVisibleMetas(type);
        let values = [];
        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++)values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
        scale._cache.$bar = (0, _helpersSegmentMjs._)(values.sort((a, b)=>a - b));
    }
    return scale._cache.$bar;
}
function computeMinSampleSize(meta) {
    const scale = meta.iScale;
    const values = getAllScaleValues(scale, meta.type);
    let min = scale._length;
    let i, ilen, curr, prev;
    const updateMinAndPrev = ()=>{
        if (curr === 32767 || curr === -32768) return;
        if ((0, _helpersSegmentMjs.j)(prev)) min = Math.min(min, Math.abs(curr - prev) || min);
        prev = curr;
    };
    for(i = 0, ilen = values.length; i < ilen; ++i){
        curr = scale.getPixelForValue(values[i]);
        updateMinAndPrev();
    }
    prev = undefined;
    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){
        curr = scale.getPixelForTick(i);
        updateMinAndPrev();
    }
    return min;
}
function computeFitCategoryTraits(index, ruler, options, stackCount) {
    const thickness = options.barThickness;
    let size, ratio;
    if ((0, _helpersSegmentMjs.k)(thickness)) {
        size = ruler.min * options.categoryPercentage;
        ratio = options.barPercentage;
    } else {
        size = thickness * stackCount;
        ratio = 1;
    }
    return {
        chunk: size / stackCount,
        ratio,
        start: ruler.pixels[index] - size / 2
    };
}
function computeFlexCategoryTraits(index, ruler, options, stackCount) {
    const pixels = ruler.pixels;
    const curr = pixels[index];
    let prev = index > 0 ? pixels[index - 1] : null;
    let next = index < pixels.length - 1 ? pixels[index + 1] : null;
    const percent = options.categoryPercentage;
    if (prev === null) prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
    if (next === null) next = curr + curr - prev;
    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
    const size = Math.abs(next - prev) / 2 * percent;
    return {
        chunk: size / stackCount,
        ratio: options.barPercentage,
        start
    };
}
function parseFloatBar(entry, item, vScale, i) {
    const startValue = vScale.parse(entry[0], i);
    const endValue = vScale.parse(entry[1], i);
    const min = Math.min(startValue, endValue);
    const max = Math.max(startValue, endValue);
    let barStart = min;
    let barEnd = max;
    if (Math.abs(min) > Math.abs(max)) {
        barStart = max;
        barEnd = min;
    }
    item[vScale.axis] = barEnd;
    item._custom = {
        barStart,
        barEnd,
        start: startValue,
        end: endValue,
        min,
        max
    };
}
function parseValue(entry, item, vScale, i) {
    if ((0, _helpersSegmentMjs.b)(entry)) parseFloatBar(entry, item, vScale, i);
    else item[vScale.axis] = vScale.parse(entry, i);
    return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = [];
    let i, ilen, item, entry;
    for(i = start, ilen = start + count; i < ilen; ++i){
        entry = data[i];
        item = {};
        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
        parsed.push(parseValue(entry, item, vScale, i));
    }
    return parsed;
}
function isFloatBar(custom) {
    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
}
function barSign(size, vScale, actualBase) {
    if (size !== 0) return (0, _helpersSegmentMjs.s)(size);
    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
    let reverse, start, end, top, bottom;
    if (properties.horizontal) {
        reverse = properties.base > properties.x;
        start = "left";
        end = "right";
    } else {
        reverse = properties.base < properties.y;
        start = "bottom";
        end = "top";
    }
    if (reverse) {
        top = "end";
        bottom = "start";
    } else {
        top = "start";
        bottom = "end";
    }
    return {
        start,
        end,
        reverse,
        top,
        bottom
    };
}
function setBorderSkipped(properties, options, stack, index) {
    let edge = options.borderSkipped;
    const res = {};
    if (!edge) {
        properties.borderSkipped = res;
        return;
    }
    if (edge === true) {
        properties.borderSkipped = {
            top: true,
            right: true,
            bottom: true,
            left: true
        };
        return;
    }
    const { start, end, reverse, top, bottom } = borderProps(properties);
    if (edge === "middle" && stack) {
        properties.enableBorderRadius = true;
        if ((stack._top || 0) === index) edge = top;
        else if ((stack._bottom || 0) === index) edge = bottom;
        else {
            res[parseEdge(bottom, start, end, reverse)] = true;
            edge = top;
        }
    }
    res[parseEdge(edge, start, end, reverse)] = true;
    properties.borderSkipped = res;
}
function parseEdge(edge, a, b, reverse) {
    if (reverse) {
        edge = swap(edge, a, b);
        edge = startEnd(edge, b, a);
    } else edge = startEnd(edge, a, b);
    return edge;
}
function swap(orig, v1, v2) {
    return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v, start, end) {
    return v === "start" ? start : v === "end" ? end : v;
}
function setInflateAmount(properties, { inflateAmount }, ratio) {
    properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
class BarController extends DatasetController {
    parsePrimitiveData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
    }
    parseArrayData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
    }
    parseObjectData(meta, data, start, count) {
        const { iScale, vScale } = meta;
        const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
        const iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
        const vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
        const parsed = [];
        let i, ilen, item, obj;
        for(i = start, ilen = start + count; i < ilen; ++i){
            obj = data[i];
            item = {};
            item[iScale.axis] = iScale.parse((0, _helpersSegmentMjs.f)(obj, iAxisKey), i);
            parsed.push(parseValue((0, _helpersSegmentMjs.f)(obj, vAxisKey), item, vScale, i));
        }
        return parsed;
    }
    updateRangeFromParsed(range, scale, parsed, stack) {
        super.updateRangeFromParsed(range, scale, parsed, stack);
        const custom = parsed._custom;
        if (custom && scale === this._cachedMeta.vScale) {
            range.min = Math.min(range.min, custom.min);
            range.max = Math.max(range.max, custom.max);
        }
    }
    getMaxOverflow() {
        return 0;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const { iScale, vScale } = meta;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const value = isFloatBar(custom) ? "[" + custom.start + ", " + custom.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
        return {
            label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
            value
        };
    }
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
        const meta = this._cachedMeta;
        meta.stack = this.getDataset().stack;
    }
    update(mode) {
        const meta = this._cachedMeta;
        this.updateElements(meta.data, 0, meta.data.length, mode);
    }
    updateElements(bars, start, count, mode) {
        const reset = mode === "reset";
        const { index, _cachedMeta: { vScale } } = this;
        const base = vScale.getBasePixel();
        const horizontal = vScale.isHorizontal();
        const ruler = this._getRuler();
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        for(let i = start; i < start + count; i++){
            const parsed = this.getParsed(i);
            const vpixels = reset || (0, _helpersSegmentMjs.k)(parsed[vScale.axis]) ? {
                base,
                head: base
            } : this._calculateBarValuePixels(i);
            const ipixels = this._calculateBarIndexPixels(i, ruler);
            const stack = (parsed._stacks || {})[vScale.axis];
            const properties = {
                horizontal,
                base: vpixels.base,
                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,
                x: horizontal ? vpixels.head : ipixels.center,
                y: horizontal ? ipixels.center : vpixels.head,
                height: horizontal ? ipixels.size : Math.abs(vpixels.size),
                width: horizontal ? Math.abs(vpixels.size) : ipixels.size
            };
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? "active" : mode);
            const options = properties.options || bars[i].options;
            setBorderSkipped(properties, options, stack, index);
            setInflateAmount(properties, options, ruler.ratio);
            this.updateElement(bars[i], i, properties, mode);
        }
    }
    _getStacks(last, dataIndex) {
        const { iScale } = this._cachedMeta;
        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);
        const stacked = iScale.options.stacked;
        const stacks = [];
        const skipNull = (meta)=>{
            const parsed = meta.controller.getParsed(dataIndex);
            const val = parsed && parsed[meta.vScale.axis];
            if ((0, _helpersSegmentMjs.k)(val) || isNaN(val)) return true;
        };
        for (const meta of metasets){
            if (dataIndex !== undefined && skipNull(meta)) continue;
            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) stacks.push(meta.stack);
            if (meta.index === last) break;
        }
        if (!stacks.length) stacks.push(undefined);
        return stacks;
    }
    _getStackCount(index) {
        return this._getStacks(undefined, index).length;
    }
    _getStackIndex(datasetIndex, name, dataIndex) {
        const stacks = this._getStacks(datasetIndex, dataIndex);
        const index = name !== undefined ? stacks.indexOf(name) : -1;
        return index === -1 ? stacks.length - 1 : index;
    }
    _getRuler() {
        const opts = this.options;
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const pixels = [];
        let i, ilen;
        for(i = 0, ilen = meta.data.length; i < ilen; ++i)pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
        const barThickness = opts.barThickness;
        const min = barThickness || computeMinSampleSize(meta);
        return {
            min,
            pixels,
            start: iScale._startPixel,
            end: iScale._endPixel,
            stackCount: this._getStackCount(),
            scale: iScale,
            grouped: opts.grouped,
            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
        };
    }
    _calculateBarValuePixels(index) {
        const { _cachedMeta: { vScale, _stacked }, options: { base: baseValue, minBarLength } } = this;
        const actualBase = baseValue || 0;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const floating = isFloatBar(custom);
        let value = parsed[vScale.axis];
        let start = 0;
        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
        let head, size;
        if (length !== value) {
            start = length - value;
            length = value;
        }
        if (floating) {
            value = custom.barStart;
            length = custom.barEnd - custom.barStart;
            if (value !== 0 && (0, _helpersSegmentMjs.s)(value) !== (0, _helpersSegmentMjs.s)(custom.barEnd)) start = 0;
            start += value;
        }
        const startValue = !(0, _helpersSegmentMjs.k)(baseValue) && !floating ? baseValue : start;
        let base = vScale.getPixelForValue(startValue);
        if (this.chart.getDataVisibility(index)) head = vScale.getPixelForValue(start + length);
        else head = base;
        size = head - base;
        if (Math.abs(size) < minBarLength) {
            size = barSign(size, vScale, actualBase) * minBarLength;
            if (value === actualBase) base -= size / 2;
            const startPixel = vScale.getPixelForDecimal(0);
            const endPixel = vScale.getPixelForDecimal(1);
            const min = Math.min(startPixel, endPixel);
            const max = Math.max(startPixel, endPixel);
            base = Math.max(Math.min(base, max), min);
            head = base + size;
        }
        if (base === vScale.getPixelForValue(actualBase)) {
            const halfGrid = (0, _helpersSegmentMjs.s)(size) * vScale.getLineWidthForValue(actualBase) / 2;
            base += halfGrid;
            size -= halfGrid;
        }
        return {
            size,
            base,
            head,
            center: head + size / 2
        };
    }
    _calculateBarIndexPixels(index, ruler) {
        const scale = ruler.scale;
        const options = this.options;
        const skipNull = options.skipNull;
        const maxBarThickness = (0, _helpersSegmentMjs.v)(options.maxBarThickness, Infinity);
        let center, size;
        if (ruler.grouped) {
            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
            const range = options.barThickness === "flex" ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);
            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);
            center = range.start + range.chunk * stackIndex + range.chunk / 2;
            size = Math.min(maxBarThickness, range.chunk * range.ratio);
        } else {
            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);
            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
        }
        return {
            base: center - size / 2,
            head: center + size / 2,
            center,
            size
        };
    }
    draw() {
        const meta = this._cachedMeta;
        const vScale = meta.vScale;
        const rects = meta.data;
        const ilen = rects.length;
        let i = 0;
        for(; i < ilen; ++i)if (this.getParsed(i)[vScale.axis] !== null) rects[i].draw(this._ctx);
    }
}
BarController.id = "bar";
BarController.defaults = {
    datasetElementType: false,
    dataElementType: "bar",
    categoryPercentage: 0.8,
    barPercentage: 0.9,
    grouped: true,
    animations: {
        numbers: {
            type: "number",
            properties: [
                "x",
                "y",
                "base",
                "width",
                "height"
            ]
        }
    }
};
BarController.overrides = {
    scales: {
        _index_: {
            type: "category",
            offset: true,
            grid: {
                offset: true
            }
        },
        _value_: {
            type: "linear",
            beginAtZero: true
        }
    }
};
class BubbleController extends DatasetController {
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
    }
    parsePrimitiveData(meta, data, start, count) {
        const parsed = super.parsePrimitiveData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++)parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
        return parsed;
    }
    parseArrayData(meta, data, start, count) {
        const parsed = super.parseArrayData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = (0, _helpersSegmentMjs.v)(item[2], this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
    parseObjectData(meta, data, start, count) {
        const parsed = super.parseObjectData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = (0, _helpersSegmentMjs.v)(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
    getMaxOverflow() {
        const data = this._cachedMeta.data;
        let max = 0;
        for(let i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
        return max > 0 && max;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const { xScale, yScale } = meta;
        const parsed = this.getParsed(index);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        const r = parsed._custom;
        return {
            label: meta.label,
            value: "(" + x + ", " + y + (r ? ", " + r : "") + ")"
        };
    }
    update(mode) {
        const points = this._cachedMeta.data;
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === "reset";
        const { iScale, vScale } = this._cachedMeta;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const parsed = !reset && this.getParsed(i);
            const properties = {};
            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
            properties.skip = isNaN(iPixel) || isNaN(vPixel);
            if (includeOptions) {
                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
                if (reset) properties.options.radius = 0;
            }
            this.updateElement(point, i, properties, mode);
        }
    }
    resolveDataElementOptions(index, mode) {
        const parsed = this.getParsed(index);
        let values = super.resolveDataElementOptions(index, mode);
        if (values.$shared) values = Object.assign({}, values, {
            $shared: false
        });
        const radius = values.radius;
        if (mode !== "active") values.radius = 0;
        values.radius += (0, _helpersSegmentMjs.v)(parsed && parsed._custom, radius);
        return values;
    }
}
BubbleController.id = "bubble";
BubbleController.defaults = {
    datasetElementType: false,
    dataElementType: "point",
    animations: {
        numbers: {
            type: "number",
            properties: [
                "x",
                "y",
                "borderWidth",
                "radius"
            ]
        }
    }
};
BubbleController.overrides = {
    scales: {
        x: {
            type: "linear"
        },
        y: {
            type: "linear"
        }
    },
    plugins: {
        tooltip: {
            callbacks: {
                title () {
                    return "";
                }
            }
        }
    }
};
function getRatioAndOffset(rotation, circumference, cutout) {
    let ratioX = 1;
    let ratioY = 1;
    let offsetX = 0;
    let offsetY = 0;
    if (circumference < (0, _helpersSegmentMjs.T)) {
        const startAngle = rotation;
        const endAngle = startAngle + circumference;
        const startX = Math.cos(startAngle);
        const startY = Math.sin(startAngle);
        const endX = Math.cos(endAngle);
        const endY = Math.sin(endAngle);
        const calcMax = (angle, a, b)=>(0, _helpersSegmentMjs.p)(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
        const calcMin = (angle, a, b)=>(0, _helpersSegmentMjs.p)(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
        const maxX = calcMax(0, startX, endX);
        const maxY = calcMax((0, _helpersSegmentMjs.H), startY, endY);
        const minX = calcMin((0, _helpersSegmentMjs.P), startX, endX);
        const minY = calcMin((0, _helpersSegmentMjs.P) + (0, _helpersSegmentMjs.H), startY, endY);
        ratioX = (maxX - minX) / 2;
        ratioY = (maxY - minY) / 2;
        offsetX = -(maxX + minX) / 2;
        offsetY = -(maxY + minY) / 2;
    }
    return {
        ratioX,
        ratioY,
        offsetX,
        offsetY
    };
}
class DoughnutController extends DatasetController {
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.enableOptionSharing = true;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.offsetX = undefined;
        this.offsetY = undefined;
    }
    linkScales() {}
    parse(start, count) {
        const data = this.getDataset().data;
        const meta = this._cachedMeta;
        if (this._parsing === false) meta._parsed = data;
        else {
            let getter = (i)=>+data[i];
            if ((0, _helpersSegmentMjs.i)(data[start])) {
                const { key = "value" } = this._parsing;
                getter = (i)=>+(0, _helpersSegmentMjs.f)(data[i], key);
            }
            let i, ilen;
            for(i = start, ilen = start + count; i < ilen; ++i)meta._parsed[i] = getter(i);
        }
    }
    _getRotation() {
        return (0, _helpersSegmentMjs.t)(this.options.rotation - 90);
    }
    _getCircumference() {
        return (0, _helpersSegmentMjs.t)(this.options.circumference);
    }
    _getRotationExtents() {
        let min = (0, _helpersSegmentMjs.T);
        let max = -(0, _helpersSegmentMjs.T);
        for(let i = 0; i < this.chart.data.datasets.length; ++i)if (this.chart.isDatasetVisible(i)) {
            const controller = this.chart.getDatasetMeta(i).controller;
            const rotation = controller._getRotation();
            const circumference = controller._getCircumference();
            min = Math.min(min, rotation);
            max = Math.max(max, rotation + circumference);
        }
        return {
            rotation: min,
            circumference: max - min
        };
    }
    update(mode) {
        const chart = this.chart;
        const { chartArea } = chart;
        const meta = this._cachedMeta;
        const arcs = meta.data;
        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
        const cutout = Math.min((0, _helpersSegmentMjs.m)(this.options.cutout, maxSize), 1);
        const chartWeight = this._getRingWeight(this.index);
        const { circumference, rotation } = this._getRotationExtents();
        const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);
        const maxWidth = (chartArea.width - spacing) / ratioX;
        const maxHeight = (chartArea.height - spacing) / ratioY;
        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
        const outerRadius = (0, _helpersSegmentMjs.n)(this.options.radius, maxRadius);
        const innerRadius = Math.max(outerRadius * cutout, 0);
        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
        this.offsetX = offsetX * outerRadius;
        this.offsetY = offsetY * outerRadius;
        meta.total = this.calculateTotal();
        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
        this.updateElements(arcs, 0, arcs.length, mode);
    }
    _circumference(i, reset) {
        const opts = this.options;
        const meta = this._cachedMeta;
        const circumference = this._getCircumference();
        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) return 0;
        return this.calculateCircumference(meta._parsed[i] * circumference / (0, _helpersSegmentMjs.T));
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === "reset";
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const centerX = (chartArea.left + chartArea.right) / 2;
        const centerY = (chartArea.top + chartArea.bottom) / 2;
        const animateScale = reset && animationOpts.animateScale;
        const innerRadius = animateScale ? 0 : this.innerRadius;
        const outerRadius = animateScale ? 0 : this.outerRadius;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        let startAngle = this._getRotation();
        let i;
        for(i = 0; i < start; ++i)startAngle += this._circumference(i, reset);
        for(i = start; i < start + count; ++i){
            const circumference = this._circumference(i, reset);
            const arc = arcs[i];
            const properties = {
                x: centerX + this.offsetX,
                y: centerY + this.offsetY,
                startAngle,
                endAngle: startAngle + circumference,
                circumference,
                outerRadius,
                innerRadius
            };
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? "active" : mode);
            startAngle += circumference;
            this.updateElement(arc, i, properties, mode);
        }
    }
    calculateTotal() {
        const meta = this._cachedMeta;
        const metaData = meta.data;
        let total = 0;
        let i;
        for(i = 0; i < metaData.length; i++){
            const value = meta._parsed[i];
            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) total += Math.abs(value);
        }
        return total;
    }
    calculateCircumference(value) {
        const total = this._cachedMeta.total;
        if (total > 0 && !isNaN(value)) return (0, _helpersSegmentMjs.T) * (Math.abs(value) / total);
        return 0;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = (0, _helpersSegmentMjs.o)(meta._parsed[index], chart.options.locale);
        return {
            label: labels[index] || "",
            value
        };
    }
    getMaxBorderWidth(arcs) {
        let max = 0;
        const chart = this.chart;
        let i, ilen, meta, controller, options;
        if (!arcs) {
            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i)if (chart.isDatasetVisible(i)) {
                meta = chart.getDatasetMeta(i);
                arcs = meta.data;
                controller = meta.controller;
                break;
            }
        }
        if (!arcs) return 0;
        for(i = 0, ilen = arcs.length; i < ilen; ++i){
            options = controller.resolveDataElementOptions(i);
            if (options.borderAlign !== "inner") max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
        }
        return max;
    }
    getMaxOffset(arcs) {
        let max = 0;
        for(let i = 0, ilen = arcs.length; i < ilen; ++i){
            const options = this.resolveDataElementOptions(i);
            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
        }
        return max;
    }
    _getRingWeightOffset(datasetIndex) {
        let ringWeightOffset = 0;
        for(let i = 0; i < datasetIndex; ++i)if (this.chart.isDatasetVisible(i)) ringWeightOffset += this._getRingWeight(i);
        return ringWeightOffset;
    }
    _getRingWeight(datasetIndex) {
        return Math.max((0, _helpersSegmentMjs.v)(this.chart.data.datasets[datasetIndex].weight, 1), 0);
    }
    _getVisibleDatasetWeightTotal() {
        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
    }
}
DoughnutController.id = "doughnut";
DoughnutController.defaults = {
    datasetElementType: false,
    dataElementType: "arc",
    animation: {
        animateRotate: true,
        animateScale: false
    },
    animations: {
        numbers: {
            type: "number",
            properties: [
                "circumference",
                "endAngle",
                "innerRadius",
                "outerRadius",
                "startAngle",
                "x",
                "y",
                "offset",
                "borderWidth",
                "spacing"
            ]
        }
    },
    cutout: "50%",
    rotation: 0,
    circumference: 360,
    radius: "100%",
    spacing: 0,
    indexAxis: "r"
};
DoughnutController.descriptors = {
    _scriptable: (name)=>name !== "spacing",
    _indexable: (name)=>name !== "spacing"
};
DoughnutController.overrides = {
    aspectRatio: 1,
    plugins: {
        legend: {
            labels: {
                generateLabels (chart) {
                    const data = chart.data;
                    if (data.labels.length && data.datasets.length) {
                        const { labels: { pointStyle } } = chart.legend.options;
                        return data.labels.map((label, i)=>{
                            const meta = chart.getDatasetMeta(0);
                            const style = meta.controller.getStyle(i);
                            return {
                                text: label,
                                fillStyle: style.backgroundColor,
                                strokeStyle: style.borderColor,
                                lineWidth: style.borderWidth,
                                pointStyle: pointStyle,
                                hidden: !chart.getDataVisibility(i),
                                index: i
                            };
                        });
                    }
                    return [];
                }
            },
            onClick (e, legendItem, legend) {
                legend.chart.toggleDataVisibility(legendItem.index);
                legend.chart.update();
            }
        },
        tooltip: {
            callbacks: {
                title () {
                    return "";
                },
                label (tooltipItem) {
                    let dataLabel = tooltipItem.label;
                    const value = ": " + tooltipItem.formattedValue;
                    if ((0, _helpersSegmentMjs.b)(dataLabel)) {
                        dataLabel = dataLabel.slice();
                        dataLabel[0] += value;
                    } else dataLabel += value;
                    return dataLabel;
                }
            }
        }
    }
};
class LineController extends DatasetController {
    initialize() {
        this.enableOptionSharing = true;
        this.supportsDecimation = true;
        super.initialize();
    }
    update(mode) {
        const meta = this._cachedMeta;
        const { dataset: line, data: points = [], _dataset } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start, count } = (0, _helpersSegmentMjs.q)(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if ((0, _helpersSegmentMjs.w)(meta)) {
            start = 0;
            count = points.length;
        }
        line._chart = this.chart;
        line._datasetIndex = this.index;
        line._decimated = !!_dataset._decimated;
        line.points = points;
        const options = this.resolveDatasetElementOptions(mode);
        if (!this.options.showLine) options.borderWidth = 0;
        options.segment = this.options.segment;
        this.updateElement(line, undefined, {
            animated: !animationsDisabled,
            options
        }, mode);
        this.updateElements(points, start, count, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === "reset";
        const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps, segment } = this.options;
        const maxGapLength = (0, _helpersSegmentMjs.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for(let i = start; i < start + count; ++i){
            const point = points[i];
            const parsed = this.getParsed(i);
            const properties = directUpdate ? point : {};
            const nullData = (0, _helpersSegmentMjs.k)(parsed[vAxis]);
            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
            if (segment) {
                properties.parsed = parsed;
                properties.raw = _dataset.data[i];
            }
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
            if (!directUpdate) this.updateElement(point, i, properties, mode);
            prevParsed = parsed;
        }
    }
    getMaxOverflow() {
        const meta = this._cachedMeta;
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        const data = meta.data || [];
        if (!data.length) return border;
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
    }
    draw() {
        const meta = this._cachedMeta;
        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
        super.draw();
    }
}
LineController.id = "line";
LineController.defaults = {
    datasetElementType: "line",
    dataElementType: "point",
    showLine: true,
    spanGaps: false
};
LineController.overrides = {
    scales: {
        _index_: {
            type: "category"
        },
        _value_: {
            type: "linear"
        }
    }
};
class PolarAreaController extends DatasetController {
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.innerRadius = undefined;
        this.outerRadius = undefined;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = (0, _helpersSegmentMjs.o)(meta._parsed[index].r, chart.options.locale);
        return {
            label: labels[index] || "",
            value
        };
    }
    parseObjectData(meta, data, start, count) {
        return (0, _helpersSegmentMjs.y).bind(this)(meta, data, start, count);
    }
    update(mode) {
        const arcs = this._cachedMeta.data;
        this._updateRadius();
        this.updateElements(arcs, 0, arcs.length, mode);
    }
    getMinMax() {
        const meta = this._cachedMeta;
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        meta.data.forEach((element, index)=>{
            const parsed = this.getParsed(index).r;
            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {
                if (parsed < range.min) range.min = parsed;
                if (parsed > range.max) range.max = parsed;
            }
        });
        return range;
    }
    _updateRadius() {
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
        const outerRadius = Math.max(minSize / 2, 0);
        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
        this.outerRadius = outerRadius - radiusLength * this.index;
        this.innerRadius = this.outerRadius - radiusLength;
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === "reset";
        const chart = this.chart;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const scale = this._cachedMeta.rScale;
        const centerX = scale.xCenter;
        const centerY = scale.yCenter;
        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * (0, _helpersSegmentMjs.P);
        let angle = datasetStartAngle;
        let i;
        const defaultAngle = 360 / this.countVisibleElements();
        for(i = 0; i < start; ++i)angle += this._computeAngle(i, mode, defaultAngle);
        for(i = start; i < start + count; i++){
            const arc = arcs[i];
            let startAngle = angle;
            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);
            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;
            angle = endAngle;
            if (reset) {
                if (animationOpts.animateScale) outerRadius = 0;
                if (animationOpts.animateRotate) startAngle = endAngle = datasetStartAngle;
            }
            const properties = {
                x: centerX,
                y: centerY,
                innerRadius: 0,
                outerRadius,
                startAngle,
                endAngle,
                options: this.resolveDataElementOptions(i, arc.active ? "active" : mode)
            };
            this.updateElement(arc, i, properties, mode);
        }
    }
    countVisibleElements() {
        const meta = this._cachedMeta;
        let count = 0;
        meta.data.forEach((element, index)=>{
            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) count++;
        });
        return count;
    }
    _computeAngle(index, mode, defaultAngle) {
        return this.chart.getDataVisibility(index) ? (0, _helpersSegmentMjs.t)(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;
    }
}
PolarAreaController.id = "polarArea";
PolarAreaController.defaults = {
    dataElementType: "arc",
    animation: {
        animateRotate: true,
        animateScale: true
    },
    animations: {
        numbers: {
            type: "number",
            properties: [
                "x",
                "y",
                "startAngle",
                "endAngle",
                "innerRadius",
                "outerRadius"
            ]
        }
    },
    indexAxis: "r",
    startAngle: 0
};
PolarAreaController.overrides = {
    aspectRatio: 1,
    plugins: {
        legend: {
            labels: {
                generateLabels (chart) {
                    const data = chart.data;
                    if (data.labels.length && data.datasets.length) {
                        const { labels: { pointStyle } } = chart.legend.options;
                        return data.labels.map((label, i)=>{
                            const meta = chart.getDatasetMeta(0);
                            const style = meta.controller.getStyle(i);
                            return {
                                text: label,
                                fillStyle: style.backgroundColor,
                                strokeStyle: style.borderColor,
                                lineWidth: style.borderWidth,
                                pointStyle: pointStyle,
                                hidden: !chart.getDataVisibility(i),
                                index: i
                            };
                        });
                    }
                    return [];
                }
            },
            onClick (e, legendItem, legend) {
                legend.chart.toggleDataVisibility(legendItem.index);
                legend.chart.update();
            }
        },
        tooltip: {
            callbacks: {
                title () {
                    return "";
                },
                label (context) {
                    return context.chart.data.labels[context.dataIndex] + ": " + context.formattedValue;
                }
            }
        }
    },
    scales: {
        r: {
            type: "radialLinear",
            angleLines: {
                display: false
            },
            beginAtZero: true,
            grid: {
                circular: true
            },
            pointLabels: {
                display: false
            },
            startAngle: 0
        }
    }
};
class PieController extends DoughnutController {
}
PieController.id = "pie";
PieController.defaults = {
    cutout: 0,
    rotation: 0,
    circumference: 360,
    radius: "100%"
};
class RadarController extends DatasetController {
    getLabelAndValue(index) {
        const vScale = this._cachedMeta.vScale;
        const parsed = this.getParsed(index);
        return {
            label: vScale.getLabels()[index],
            value: "" + vScale.getLabelForValue(parsed[vScale.axis])
        };
    }
    parseObjectData(meta, data, start, count) {
        return (0, _helpersSegmentMjs.y).bind(this)(meta, data, start, count);
    }
    update(mode) {
        const meta = this._cachedMeta;
        const line = meta.dataset;
        const points = meta.data || [];
        const labels = meta.iScale.getLabels();
        line.points = points;
        if (mode !== "resize") {
            const options = this.resolveDatasetElementOptions(mode);
            if (!this.options.showLine) options.borderWidth = 0;
            const properties = {
                _loop: true,
                _fullLoop: labels.length === points.length,
                options
            };
            this.updateElement(line, undefined, properties, mode);
        }
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const scale = this._cachedMeta.rScale;
        const reset = mode === "reset";
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const options = this.resolveDataElementOptions(i, point.active ? "active" : mode);
            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);
            const x = reset ? scale.xCenter : pointPosition.x;
            const y = reset ? scale.yCenter : pointPosition.y;
            const properties = {
                x,
                y,
                angle: pointPosition.angle,
                skip: isNaN(x) || isNaN(y),
                options
            };
            this.updateElement(point, i, properties, mode);
        }
    }
}
RadarController.id = "radar";
RadarController.defaults = {
    datasetElementType: "line",
    dataElementType: "point",
    indexAxis: "r",
    showLine: true,
    elements: {
        line: {
            fill: "start"
        }
    }
};
RadarController.overrides = {
    aspectRatio: 1,
    scales: {
        r: {
            type: "radialLinear"
        }
    }
};
class Element {
    constructor(){
        this.x = undefined;
        this.y = undefined;
        this.active = false;
        this.options = undefined;
        this.$animations = undefined;
    }
    tooltipPosition(useFinalPosition) {
        const { x, y } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return {
            x,
            y
        };
    }
    hasValue() {
        return (0, _helpersSegmentMjs.x)(this.x) && (0, _helpersSegmentMjs.x)(this.y);
    }
    getProps(props, final) {
        const anims = this.$animations;
        if (!final || !anims) return this;
        const ret = {};
        props.forEach((prop)=>{
            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
        });
        return ret;
    }
}
Element.defaults = {};
Element.defaultRoutes = undefined;
const formatters = {
    values (value) {
        return (0, _helpersSegmentMjs.b)(value) ? value : "" + value;
    },
    numeric (tickValue, index, ticks) {
        if (tickValue === 0) return "0";
        const locale = this.chart.options.locale;
        let notation;
        let delta = tickValue;
        if (ticks.length > 1) {
            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
            if (maxTick < 1e-4 || maxTick > 1e+15) notation = "scientific";
            delta = calculateDelta(tickValue, ticks);
        }
        const logDelta = (0, _helpersSegmentMjs.z)(Math.abs(delta));
        const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
        const options = {
            notation,
            minimumFractionDigits: numDecimal,
            maximumFractionDigits: numDecimal
        };
        Object.assign(options, this.options.ticks.format);
        return (0, _helpersSegmentMjs.o)(tickValue, locale, options);
    },
    logarithmic (tickValue, index, ticks) {
        if (tickValue === 0) return "0";
        const remain = tickValue / Math.pow(10, Math.floor((0, _helpersSegmentMjs.z)(tickValue)));
        if (remain === 1 || remain === 2 || remain === 5) return formatters.numeric.call(this, tickValue, index, ticks);
        return "";
    }
};
function calculateDelta(tickValue, ticks) {
    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) delta = tickValue - Math.floor(tickValue);
    return delta;
}
var Ticks = {
    formatters
};
(0, _helpersSegmentMjs.d).set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    grace: 0,
    grid: {
        display: true,
        lineWidth: 1,
        drawBorder: true,
        drawOnChartArea: true,
        drawTicks: true,
        tickLength: 8,
        tickWidth: (_ctx, options)=>options.lineWidth,
        tickColor: (_ctx, options)=>options.color,
        offset: false,
        borderDash: [],
        borderDashOffset: 0.0,
        borderWidth: 1
    },
    title: {
        display: false,
        text: "",
        padding: {
            top: 4,
            bottom: 4
        }
    },
    ticks: {
        minRotation: 0,
        maxRotation: 50,
        mirror: false,
        textStrokeWidth: 0,
        textStrokeColor: "",
        padding: 3,
        display: true,
        autoSkip: true,
        autoSkipPadding: 3,
        labelOffset: 0,
        callback: Ticks.formatters.values,
        minor: {},
        major: {},
        align: "center",
        crossAlign: "near",
        showLabelBackdrop: false,
        backdropColor: "rgba(255, 255, 255, 0.75)",
        backdropPadding: 2
    }
});
(0, _helpersSegmentMjs.d).route("scale.ticks", "color", "", "color");
(0, _helpersSegmentMjs.d).route("scale.grid", "color", "", "borderColor");
(0, _helpersSegmentMjs.d).route("scale.grid", "borderColor", "", "borderColor");
(0, _helpersSegmentMjs.d).route("scale.title", "color", "", "color");
(0, _helpersSegmentMjs.d).describe("scale", {
    _fallback: false,
    _scriptable: (name)=>!name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser",
    _indexable: (name)=>name !== "borderDash" && name !== "tickBorderDash"
});
(0, _helpersSegmentMjs.d).describe("scales", {
    _fallback: "scale"
});
(0, _helpersSegmentMjs.d).describe("scale.ticks", {
    _scriptable: (name)=>name !== "backdropPadding" && name !== "callback",
    _indexable: (name)=>name !== "backdropPadding"
});
function autoSkip(scale, ticks) {
    const tickOpts = scale.options.ticks;
    const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);
    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
    const numMajorIndices = majorIndices.length;
    const first = majorIndices[0];
    const last = majorIndices[numMajorIndices - 1];
    const newTicks = [];
    if (numMajorIndices > ticksLimit) {
        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
        return newTicks;
    }
    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
    if (numMajorIndices > 0) {
        let i, ilen;
        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
        skip(ticks, newTicks, spacing, (0, _helpersSegmentMjs.k)(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++)skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
        skip(ticks, newTicks, spacing, last, (0, _helpersSegmentMjs.k)(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
        return newTicks;
    }
    skip(ticks, newTicks, spacing);
    return newTicks;
}
function determineMaxTicks(scale) {
    const offset = scale.options.offset;
    const tickLength = scale._tickSize();
    const maxScale = scale._length / tickLength + (offset ? 0 : 1);
    const maxChart = scale._maxLength / tickLength;
    return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
    const evenMajorSpacing = getEvenSpacing(majorIndices);
    const spacing = ticks.length / ticksLimit;
    if (!evenMajorSpacing) return Math.max(spacing, 1);
    const factors = (0, _helpersSegmentMjs.A)(evenMajorSpacing);
    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){
        const factor = factors[i];
        if (factor > spacing) return factor;
    }
    return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
    const result = [];
    let i, ilen;
    for(i = 0, ilen = ticks.length; i < ilen; i++)if (ticks[i].major) result.push(i);
    return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
    let count = 0;
    let next = majorIndices[0];
    let i;
    spacing = Math.ceil(spacing);
    for(i = 0; i < ticks.length; i++)if (i === next) {
        newTicks.push(ticks[i]);
        count++;
        next = majorIndices[count * spacing];
    }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
    const start = (0, _helpersSegmentMjs.v)(majorStart, 0);
    const end = Math.min((0, _helpersSegmentMjs.v)(majorEnd, ticks.length), ticks.length);
    let count = 0;
    let length, i, next;
    spacing = Math.ceil(spacing);
    if (majorEnd) {
        length = majorEnd - majorStart;
        spacing = length / Math.floor(length / spacing);
    }
    next = start;
    while(next < 0){
        count++;
        next = Math.round(start + count * spacing);
    }
    for(i = Math.max(start, 0); i < end; i++)if (i === next) {
        newTicks.push(ticks[i]);
        count++;
        next = Math.round(start + count * spacing);
    }
}
function getEvenSpacing(arr) {
    const len = arr.length;
    let i, diff;
    if (len < 2) return false;
    for(diff = arr[0], i = 1; i < len; ++i){
        if (arr[i] - arr[i - 1] !== diff) return false;
    }
    return diff;
}
const reverseAlign = (align)=>align === "left" ? "right" : align === "right" ? "left" : align;
const offsetFromEdge = (scale, edge, offset)=>edge === "top" || edge === "left" ? scale[edge] + offset : scale[edge] - offset;
function sample(arr, numItems) {
    const result = [];
    const increment = arr.length / numItems;
    const len = arr.length;
    let i = 0;
    for(; i < len; i += increment)result.push(arr[Math.floor(i)]);
    return result;
}
function getPixelForGridLine(scale, index, offsetGridLines) {
    const length = scale.ticks.length;
    const validIndex = Math.min(index, length - 1);
    const start = scale._startPixel;
    const end = scale._endPixel;
    const epsilon = 1e-6;
    let lineValue = scale.getPixelForTick(validIndex);
    let offset;
    if (offsetGridLines) {
        if (length === 1) offset = Math.max(lineValue - start, end - lineValue);
        else if (index === 0) offset = (scale.getPixelForTick(1) - lineValue) / 2;
        else offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
        lineValue += validIndex < index ? offset : -offset;
        if (lineValue < start - epsilon || lineValue > end + epsilon) return;
    }
    return lineValue;
}
function garbageCollect(caches, length) {
    (0, _helpersSegmentMjs.Q)(caches, (cache)=>{
        const gc = cache.gc;
        const gcLen = gc.length / 2;
        let i;
        if (gcLen > length) {
            for(i = 0; i < gcLen; ++i)delete cache.data[gc[i]];
            gc.splice(0, gcLen);
        }
    });
}
function getTickMarkLength(options) {
    return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
    if (!options.display) return 0;
    const font = (0, _helpersSegmentMjs.O)(options.font, fallback);
    const padding = (0, _helpersSegmentMjs.K)(options.padding);
    const lines = (0, _helpersSegmentMjs.b)(options.text) ? options.text.length : 1;
    return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale) {
    return (0, _helpersSegmentMjs.h)(parent, {
        scale,
        type: "scale"
    });
}
function createTickContext(parent, index, tick) {
    return (0, _helpersSegmentMjs.h)(parent, {
        tick,
        index,
        type: "tick"
    });
}
function titleAlign(align, position, reverse) {
    let ret = (0, _helpersSegmentMjs.R)(align);
    if (reverse && position !== "right" || !reverse && position === "right") ret = reverseAlign(ret);
    return ret;
}
function titleArgs(scale, offset, position, align) {
    const { top, left, bottom, right, chart } = scale;
    const { chartArea, scales } = chart;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    const height = bottom - top;
    const width = right - left;
    if (scale.isHorizontal()) {
        titleX = (0, _helpersSegmentMjs.S)(align, left, right);
        if ((0, _helpersSegmentMjs.i)(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
        } else if (position === "center") titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
        else titleY = offsetFromEdge(scale, position, offset);
        maxWidth = right - left;
    } else {
        if ((0, _helpersSegmentMjs.i)(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
        } else if (position === "center") titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
        else titleX = offsetFromEdge(scale, position, offset);
        titleY = (0, _helpersSegmentMjs.S)(align, bottom, top);
        rotation = position === "left" ? -(0, _helpersSegmentMjs.H) : (0, _helpersSegmentMjs.H);
    }
    return {
        titleX,
        titleY,
        maxWidth,
        rotation
    };
}
class Scale extends Element {
    constructor(cfg){
        super();
        this.id = cfg.id;
        this.type = cfg.type;
        this.options = undefined;
        this.ctx = cfg.ctx;
        this.chart = cfg.chart;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this._margins = {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        };
        this.maxWidth = undefined;
        this.maxHeight = undefined;
        this.paddingTop = undefined;
        this.paddingBottom = undefined;
        this.paddingLeft = undefined;
        this.paddingRight = undefined;
        this.axis = undefined;
        this.labelRotation = undefined;
        this.min = undefined;
        this.max = undefined;
        this._range = undefined;
        this.ticks = [];
        this._gridLineItems = null;
        this._labelItems = null;
        this._labelSizes = null;
        this._length = 0;
        this._maxLength = 0;
        this._longestTextCache = {};
        this._startPixel = undefined;
        this._endPixel = undefined;
        this._reversePixels = false;
        this._userMax = undefined;
        this._userMin = undefined;
        this._suggestedMax = undefined;
        this._suggestedMin = undefined;
        this._ticksLength = 0;
        this._borderValue = 0;
        this._cache = {};
        this._dataLimitsCached = false;
        this.$context = undefined;
    }
    init(options) {
        this.options = options.setContext(this.getContext());
        this.axis = options.axis;
        this._userMin = this.parse(options.min);
        this._userMax = this.parse(options.max);
        this._suggestedMin = this.parse(options.suggestedMin);
        this._suggestedMax = this.parse(options.suggestedMax);
    }
    parse(raw, index) {
        return raw;
    }
    getUserBounds() {
        let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
        _userMin = (0, _helpersSegmentMjs.B)(_userMin, Number.POSITIVE_INFINITY);
        _userMax = (0, _helpersSegmentMjs.B)(_userMax, Number.NEGATIVE_INFINITY);
        _suggestedMin = (0, _helpersSegmentMjs.B)(_suggestedMin, Number.POSITIVE_INFINITY);
        _suggestedMax = (0, _helpersSegmentMjs.B)(_suggestedMax, Number.NEGATIVE_INFINITY);
        return {
            min: (0, _helpersSegmentMjs.B)(_userMin, _suggestedMin),
            max: (0, _helpersSegmentMjs.B)(_userMax, _suggestedMax),
            minDefined: (0, _helpersSegmentMjs.g)(_userMin),
            maxDefined: (0, _helpersSegmentMjs.g)(_userMax)
        };
    }
    getMinMax(canStack) {
        let { min, max, minDefined, maxDefined } = this.getUserBounds();
        let range;
        if (minDefined && maxDefined) return {
            min,
            max
        };
        const metas = this.getMatchingVisibleMetas();
        for(let i = 0, ilen = metas.length; i < ilen; ++i){
            range = metas[i].controller.getMinMax(this, canStack);
            if (!minDefined) min = Math.min(min, range.min);
            if (!maxDefined) max = Math.max(max, range.max);
        }
        min = maxDefined && min > max ? max : min;
        max = minDefined && min > max ? min : max;
        return {
            min: (0, _helpersSegmentMjs.B)(min, (0, _helpersSegmentMjs.B)(max, min)),
            max: (0, _helpersSegmentMjs.B)(max, (0, _helpersSegmentMjs.B)(min, max))
        };
    }
    getPadding() {
        return {
            left: this.paddingLeft || 0,
            top: this.paddingTop || 0,
            right: this.paddingRight || 0,
            bottom: this.paddingBottom || 0
        };
    }
    getTicks() {
        return this.ticks;
    }
    getLabels() {
        const data = this.chart.data;
        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
    }
    beforeLayout() {
        this._cache = {};
        this._dataLimitsCached = false;
    }
    beforeUpdate() {
        (0, _helpersSegmentMjs.C)(this.options.beforeUpdate, [
            this
        ]);
    }
    update(maxWidth, maxHeight, margins) {
        const { beginAtZero, grace, ticks: tickOpts } = this.options;
        const sampleSize = tickOpts.sampleSize;
        this.beforeUpdate();
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins = Object.assign({
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        }, margins);
        this.ticks = null;
        this._labelSizes = null;
        this._gridLineItems = null;
        this._labelItems = null;
        this.beforeSetDimensions();
        this.setDimensions();
        this.afterSetDimensions();
        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
        if (!this._dataLimitsCached) {
            this.beforeDataLimits();
            this.determineDataLimits();
            this.afterDataLimits();
            this._range = (0, _helpersSegmentMjs.D)(this, grace, beginAtZero);
            this._dataLimitsCached = true;
        }
        this.beforeBuildTicks();
        this.ticks = this.buildTicks() || [];
        this.afterBuildTicks();
        const samplingEnabled = sampleSize < this.ticks.length;
        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
        this.configure();
        this.beforeCalculateLabelRotation();
        this.calculateLabelRotation();
        this.afterCalculateLabelRotation();
        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
            this.ticks = autoSkip(this, this.ticks);
            this._labelSizes = null;
            this.afterAutoSkip();
        }
        if (samplingEnabled) this._convertTicksToLabels(this.ticks);
        this.beforeFit();
        this.fit();
        this.afterFit();
        this.afterUpdate();
    }
    configure() {
        let reversePixels = this.options.reverse;
        let startPixel, endPixel;
        if (this.isHorizontal()) {
            startPixel = this.left;
            endPixel = this.right;
        } else {
            startPixel = this.top;
            endPixel = this.bottom;
            reversePixels = !reversePixels;
        }
        this._startPixel = startPixel;
        this._endPixel = endPixel;
        this._reversePixels = reversePixels;
        this._length = endPixel - startPixel;
        this._alignToPixels = this.options.alignToPixels;
    }
    afterUpdate() {
        (0, _helpersSegmentMjs.C)(this.options.afterUpdate, [
            this
        ]);
    }
    beforeSetDimensions() {
        (0, _helpersSegmentMjs.C)(this.options.beforeSetDimensions, [
            this
        ]);
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = 0;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = 0;
            this.bottom = this.height;
        }
        this.paddingLeft = 0;
        this.paddingTop = 0;
        this.paddingRight = 0;
        this.paddingBottom = 0;
    }
    afterSetDimensions() {
        (0, _helpersSegmentMjs.C)(this.options.afterSetDimensions, [
            this
        ]);
    }
    _callHooks(name) {
        this.chart.notifyPlugins(name, this.getContext());
        (0, _helpersSegmentMjs.C)(this.options[name], [
            this
        ]);
    }
    beforeDataLimits() {
        this._callHooks("beforeDataLimits");
    }
    determineDataLimits() {}
    afterDataLimits() {
        this._callHooks("afterDataLimits");
    }
    beforeBuildTicks() {
        this._callHooks("beforeBuildTicks");
    }
    buildTicks() {
        return [];
    }
    afterBuildTicks() {
        this._callHooks("afterBuildTicks");
    }
    beforeTickToLabelConversion() {
        (0, _helpersSegmentMjs.C)(this.options.beforeTickToLabelConversion, [
            this
        ]);
    }
    generateTickLabels(ticks) {
        const tickOpts = this.options.ticks;
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; i++){
            tick = ticks[i];
            tick.label = (0, _helpersSegmentMjs.C)(tickOpts.callback, [
                tick.value,
                i,
                ticks
            ], this);
        }
    }
    afterTickToLabelConversion() {
        (0, _helpersSegmentMjs.C)(this.options.afterTickToLabelConversion, [
            this
        ]);
    }
    beforeCalculateLabelRotation() {
        (0, _helpersSegmentMjs.C)(this.options.beforeCalculateLabelRotation, [
            this
        ]);
    }
    calculateLabelRotation() {
        const options = this.options;
        const tickOpts = options.ticks;
        const numTicks = this.ticks.length;
        const minRotation = tickOpts.minRotation || 0;
        const maxRotation = tickOpts.maxRotation;
        let labelRotation = minRotation;
        let tickWidth, maxHeight, maxLabelDiagonal;
        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
            this.labelRotation = minRotation;
            return;
        }
        const labelSizes = this._getLabelSizes();
        const maxLabelWidth = labelSizes.widest.width;
        const maxLabelHeight = labelSizes.highest.height;
        const maxWidth = (0, _helpersSegmentMjs.E)(this.chart.width - maxLabelWidth, 0, this.maxWidth);
        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
        if (maxLabelWidth + 6 > tickWidth) {
            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
            labelRotation = (0, _helpersSegmentMjs.F)(Math.min(Math.asin((0, _helpersSegmentMjs.E)((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin((0, _helpersSegmentMjs.E)(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin((0, _helpersSegmentMjs.E)(maxLabelHeight / maxLabelDiagonal, -1, 1))));
            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
        }
        this.labelRotation = labelRotation;
    }
    afterCalculateLabelRotation() {
        (0, _helpersSegmentMjs.C)(this.options.afterCalculateLabelRotation, [
            this
        ]);
    }
    afterAutoSkip() {}
    beforeFit() {
        (0, _helpersSegmentMjs.C)(this.options.beforeFit, [
            this
        ]);
    }
    fit() {
        const minSize = {
            width: 0,
            height: 0
        };
        const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
        const display = this._isVisible();
        const isHorizontal = this.isHorizontal();
        if (display) {
            const titleHeight = getTitleHeight(titleOpts, chart.options.font);
            if (isHorizontal) {
                minSize.width = this.maxWidth;
                minSize.height = getTickMarkLength(gridOpts) + titleHeight;
            } else {
                minSize.height = this.maxHeight;
                minSize.width = getTickMarkLength(gridOpts) + titleHeight;
            }
            if (tickOpts.display && this.ticks.length) {
                const { first, last, widest, highest } = this._getLabelSizes();
                const tickPadding = tickOpts.padding * 2;
                const angleRadians = (0, _helpersSegmentMjs.t)(this.labelRotation);
                const cos = Math.cos(angleRadians);
                const sin = Math.sin(angleRadians);
                if (isHorizontal) {
                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
                } else {
                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
                }
                this._calculatePadding(first, last, sin, cos);
            }
        }
        this._handleMargins();
        if (isHorizontal) {
            this.width = this._length = chart.width - this._margins.left - this._margins.right;
            this.height = minSize.height;
        } else {
            this.width = minSize.width;
            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
        }
    }
    _calculatePadding(first, last, sin, cos) {
        const { ticks: { align, padding }, position } = this.options;
        const isRotated = this.labelRotation !== 0;
        const labelsBelowTicks = position !== "top" && this.axis === "x";
        if (this.isHorizontal()) {
            const offsetLeft = this.getPixelForTick(0) - this.left;
            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
            let paddingLeft = 0;
            let paddingRight = 0;
            if (isRotated) {
                if (labelsBelowTicks) {
                    paddingLeft = cos * first.width;
                    paddingRight = sin * last.height;
                } else {
                    paddingLeft = sin * first.height;
                    paddingRight = cos * last.width;
                }
            } else if (align === "start") paddingRight = last.width;
            else if (align === "end") paddingLeft = first.width;
            else if (align !== "inner") {
                paddingLeft = first.width / 2;
                paddingRight = last.width / 2;
            }
            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
        } else {
            let paddingTop = last.height / 2;
            let paddingBottom = first.height / 2;
            if (align === "start") {
                paddingTop = 0;
                paddingBottom = first.height;
            } else if (align === "end") {
                paddingTop = last.height;
                paddingBottom = 0;
            }
            this.paddingTop = paddingTop + padding;
            this.paddingBottom = paddingBottom + padding;
        }
    }
    _handleMargins() {
        if (this._margins) {
            this._margins.left = Math.max(this.paddingLeft, this._margins.left);
            this._margins.top = Math.max(this.paddingTop, this._margins.top);
            this._margins.right = Math.max(this.paddingRight, this._margins.right);
            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
        }
    }
    afterFit() {
        (0, _helpersSegmentMjs.C)(this.options.afterFit, [
            this
        ]);
    }
    isHorizontal() {
        const { axis, position } = this.options;
        return position === "top" || position === "bottom" || axis === "x";
    }
    isFullSize() {
        return this.options.fullSize;
    }
    _convertTicksToLabels(ticks) {
        this.beforeTickToLabelConversion();
        this.generateTickLabels(ticks);
        let i, ilen;
        for(i = 0, ilen = ticks.length; i < ilen; i++)if ((0, _helpersSegmentMjs.k)(ticks[i].label)) {
            ticks.splice(i, 1);
            ilen--;
            i--;
        }
        this.afterTickToLabelConversion();
    }
    _getLabelSizes() {
        let labelSizes = this._labelSizes;
        if (!labelSizes) {
            const sampleSize = this.options.ticks.sampleSize;
            let ticks = this.ticks;
            if (sampleSize < ticks.length) ticks = sample(ticks, sampleSize);
            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);
        }
        return labelSizes;
    }
    _computeLabelSizes(ticks, length) {
        const { ctx, _longestTextCache: caches } = this;
        const widths = [];
        const heights = [];
        let widestLabelSize = 0;
        let highestLabelSize = 0;
        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
        for(i = 0; i < length; ++i){
            label = ticks[i].label;
            tickFont = this._resolveTickFontOptions(i);
            ctx.font = fontString = tickFont.string;
            cache = caches[fontString] = caches[fontString] || {
                data: {},
                gc: []
            };
            lineHeight = tickFont.lineHeight;
            width = height = 0;
            if (!(0, _helpersSegmentMjs.k)(label) && !(0, _helpersSegmentMjs.b)(label)) {
                width = (0, _helpersSegmentMjs.G)(ctx, cache.data, cache.gc, width, label);
                height = lineHeight;
            } else if ((0, _helpersSegmentMjs.b)(label)) for(j = 0, jlen = label.length; j < jlen; ++j){
                nestedLabel = label[j];
                if (!(0, _helpersSegmentMjs.k)(nestedLabel) && !(0, _helpersSegmentMjs.b)(nestedLabel)) {
                    width = (0, _helpersSegmentMjs.G)(ctx, cache.data, cache.gc, width, nestedLabel);
                    height += lineHeight;
                }
            }
            widths.push(width);
            heights.push(height);
            widestLabelSize = Math.max(width, widestLabelSize);
            highestLabelSize = Math.max(height, highestLabelSize);
        }
        garbageCollect(caches, length);
        const widest = widths.indexOf(widestLabelSize);
        const highest = heights.indexOf(highestLabelSize);
        const valueAt = (idx)=>({
                width: widths[idx] || 0,
                height: heights[idx] || 0
            });
        return {
            first: valueAt(0),
            last: valueAt(length - 1),
            widest: valueAt(widest),
            highest: valueAt(highest),
            widths,
            heights
        };
    }
    getLabelForValue(value) {
        return value;
    }
    getPixelForValue(value, index) {
        return NaN;
    }
    getValueForPixel(pixel) {}
    getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) return null;
        return this.getPixelForValue(ticks[index].value);
    }
    getPixelForDecimal(decimal) {
        if (this._reversePixels) decimal = 1 - decimal;
        const pixel = this._startPixel + decimal * this._length;
        return (0, _helpersSegmentMjs.I)(this._alignToPixels ? (0, _helpersSegmentMjs.J)(this.chart, pixel, 0) : pixel);
    }
    getDecimalForPixel(pixel) {
        const decimal = (pixel - this._startPixel) / this._length;
        return this._reversePixels ? 1 - decimal : decimal;
    }
    getBasePixel() {
        return this.getPixelForValue(this.getBaseValue());
    }
    getBaseValue() {
        const { min, max } = this;
        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
    }
    getContext(index) {
        const ticks = this.ticks || [];
        if (index >= 0 && index < ticks.length) {
            const tick = ticks[index];
            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));
        }
        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
    }
    _tickSize() {
        const optionTicks = this.options.ticks;
        const rot = (0, _helpersSegmentMjs.t)(this.labelRotation);
        const cos = Math.abs(Math.cos(rot));
        const sin = Math.abs(Math.sin(rot));
        const labelSizes = this._getLabelSizes();
        const padding = optionTicks.autoSkipPadding || 0;
        const w = labelSizes ? labelSizes.widest.width + padding : 0;
        const h = labelSizes ? labelSizes.highest.height + padding : 0;
        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
    }
    _isVisible() {
        const display = this.options.display;
        if (display !== "auto") return !!display;
        return this.getMatchingVisibleMetas().length > 0;
    }
    _computeGridLineItems(chartArea) {
        const axis = this.axis;
        const chart = this.chart;
        const options = this.options;
        const { grid, position } = options;
        const offset = grid.offset;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const ticksLength = ticks.length + (offset ? 1 : 0);
        const tl = getTickMarkLength(grid);
        const items = [];
        const borderOpts = grid.setContext(this.getContext());
        const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;
        const axisHalfWidth = axisWidth / 2;
        const alignBorderValue = function(pixel) {
            return (0, _helpersSegmentMjs.J)(chart, pixel, axisWidth);
        };
        let borderValue, i, lineValue, alignedLineValue;
        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
        if (position === "top") {
            borderValue = alignBorderValue(this.bottom);
            ty1 = this.bottom - tl;
            ty2 = borderValue - axisHalfWidth;
            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
            y2 = chartArea.bottom;
        } else if (position === "bottom") {
            borderValue = alignBorderValue(this.top);
            y1 = chartArea.top;
            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
            ty1 = borderValue + axisHalfWidth;
            ty2 = this.top + tl;
        } else if (position === "left") {
            borderValue = alignBorderValue(this.right);
            tx1 = this.right - tl;
            tx2 = borderValue - axisHalfWidth;
            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
            x2 = chartArea.right;
        } else if (position === "right") {
            borderValue = alignBorderValue(this.left);
            x1 = chartArea.left;
            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
            tx1 = borderValue + axisHalfWidth;
            tx2 = this.left + tl;
        } else if (axis === "x") {
            if (position === "center") borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
            else if ((0, _helpersSegmentMjs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            y1 = chartArea.top;
            y2 = chartArea.bottom;
            ty1 = borderValue + axisHalfWidth;
            ty2 = ty1 + tl;
        } else if (axis === "y") {
            if (position === "center") borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
            else if ((0, _helpersSegmentMjs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            tx1 = borderValue - axisHalfWidth;
            tx2 = tx1 - tl;
            x1 = chartArea.left;
            x2 = chartArea.right;
        }
        const limit = (0, _helpersSegmentMjs.v)(options.ticks.maxTicksLimit, ticksLength);
        const step = Math.max(1, Math.ceil(ticksLength / limit));
        for(i = 0; i < ticksLength; i += step){
            const optsAtIndex = grid.setContext(this.getContext(i));
            const lineWidth = optsAtIndex.lineWidth;
            const lineColor = optsAtIndex.color;
            const borderDash = optsAtIndex.borderDash || [];
            const borderDashOffset = optsAtIndex.borderDashOffset;
            const tickWidth = optsAtIndex.tickWidth;
            const tickColor = optsAtIndex.tickColor;
            const tickBorderDash = optsAtIndex.tickBorderDash || [];
            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
            lineValue = getPixelForGridLine(this, i, offset);
            if (lineValue === undefined) continue;
            alignedLineValue = (0, _helpersSegmentMjs.J)(chart, lineValue, lineWidth);
            if (isHorizontal) tx1 = tx2 = x1 = x2 = alignedLineValue;
            else ty1 = ty2 = y1 = y2 = alignedLineValue;
            items.push({
                tx1,
                ty1,
                tx2,
                ty2,
                x1,
                y1,
                x2,
                y2,
                width: lineWidth,
                color: lineColor,
                borderDash,
                borderDashOffset,
                tickWidth,
                tickColor,
                tickBorderDash,
                tickBorderDashOffset
            });
        }
        this._ticksLength = ticksLength;
        this._borderValue = borderValue;
        return items;
    }
    _computeLabelItems(chartArea) {
        const axis = this.axis;
        const options = this.options;
        const { position, ticks: optionTicks } = options;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const { align, crossAlign, padding, mirror } = optionTicks;
        const tl = getTickMarkLength(options.grid);
        const tickAndPadding = tl + padding;
        const hTickAndPadding = mirror ? -padding : tickAndPadding;
        const rotation = -(0, _helpersSegmentMjs.t)(this.labelRotation);
        const items = [];
        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
        let textBaseline = "middle";
        if (position === "top") {
            y = this.bottom - hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === "bottom") {
            y = this.top + hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === "left") {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (position === "right") {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (axis === "x") {
            if (position === "center") y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
            else if ((0, _helpersSegmentMjs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
            }
            textAlign = this._getXAxisLabelAlignment();
        } else if (axis === "y") {
            if (position === "center") x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
            else if ((0, _helpersSegmentMjs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                x = this.chart.scales[positionAxisID].getPixelForValue(value);
            }
            textAlign = this._getYAxisLabelAlignment(tl).textAlign;
        }
        if (axis === "y") {
            if (align === "start") textBaseline = "top";
            else if (align === "end") textBaseline = "bottom";
        }
        const labelSizes = this._getLabelSizes();
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            label = tick.label;
            const optsAtIndex = optionTicks.setContext(this.getContext(i));
            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
            font = this._resolveTickFontOptions(i);
            lineHeight = font.lineHeight;
            lineCount = (0, _helpersSegmentMjs.b)(label) ? label.length : 1;
            const halfCount = lineCount / 2;
            const color = optsAtIndex.color;
            const strokeColor = optsAtIndex.textStrokeColor;
            const strokeWidth = optsAtIndex.textStrokeWidth;
            let tickTextAlign = textAlign;
            if (isHorizontal) {
                x = pixel;
                if (textAlign === "inner") {
                    if (i === ilen - 1) tickTextAlign = !this.options.reverse ? "right" : "left";
                    else if (i === 0) tickTextAlign = !this.options.reverse ? "left" : "right";
                    else tickTextAlign = "center";
                }
                if (position === "top") {
                    if (crossAlign === "near" || rotation !== 0) textOffset = -lineCount * lineHeight + lineHeight / 2;
                    else if (crossAlign === "center") textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
                    else textOffset = -labelSizes.highest.height + lineHeight / 2;
                } else {
                    if (crossAlign === "near" || rotation !== 0) textOffset = lineHeight / 2;
                    else if (crossAlign === "center") textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
                    else textOffset = labelSizes.highest.height - lineCount * lineHeight;
                }
                if (mirror) textOffset *= -1;
            } else {
                y = pixel;
                textOffset = (1 - lineCount) * lineHeight / 2;
            }
            let backdrop;
            if (optsAtIndex.showLabelBackdrop) {
                const labelPadding = (0, _helpersSegmentMjs.K)(optsAtIndex.backdropPadding);
                const height = labelSizes.heights[i];
                const width = labelSizes.widths[i];
                let top = y + textOffset - labelPadding.top;
                let left = x - labelPadding.left;
                switch(textBaseline){
                    case "middle":
                        top -= height / 2;
                        break;
                    case "bottom":
                        top -= height;
                        break;
                }
                switch(textAlign){
                    case "center":
                        left -= width / 2;
                        break;
                    case "right":
                        left -= width;
                        break;
                }
                backdrop = {
                    left,
                    top,
                    width: width + labelPadding.width,
                    height: height + labelPadding.height,
                    color: optsAtIndex.backdropColor
                };
            }
            items.push({
                rotation,
                label,
                font,
                color,
                strokeColor,
                strokeWidth,
                textOffset,
                textAlign: tickTextAlign,
                textBaseline,
                translation: [
                    x,
                    y
                ],
                backdrop
            });
        }
        return items;
    }
    _getXAxisLabelAlignment() {
        const { position, ticks } = this.options;
        const rotation = -(0, _helpersSegmentMjs.t)(this.labelRotation);
        if (rotation) return position === "top" ? "left" : "right";
        let align = "center";
        if (ticks.align === "start") align = "left";
        else if (ticks.align === "end") align = "right";
        else if (ticks.align === "inner") align = "inner";
        return align;
    }
    _getYAxisLabelAlignment(tl) {
        const { position, ticks: { crossAlign, mirror, padding } } = this.options;
        const labelSizes = this._getLabelSizes();
        const tickAndPadding = tl + padding;
        const widest = labelSizes.widest.width;
        let textAlign;
        let x;
        if (position === "left") {
            if (mirror) {
                x = this.right + padding;
                if (crossAlign === "near") textAlign = "left";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x += widest / 2;
                } else {
                    textAlign = "right";
                    x += widest;
                }
            } else {
                x = this.right - tickAndPadding;
                if (crossAlign === "near") textAlign = "right";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x -= widest / 2;
                } else {
                    textAlign = "left";
                    x = this.left;
                }
            }
        } else if (position === "right") {
            if (mirror) {
                x = this.left + padding;
                if (crossAlign === "near") textAlign = "right";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x -= widest / 2;
                } else {
                    textAlign = "left";
                    x -= widest;
                }
            } else {
                x = this.left + tickAndPadding;
                if (crossAlign === "near") textAlign = "left";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x += widest / 2;
                } else {
                    textAlign = "right";
                    x = this.right;
                }
            }
        } else textAlign = "right";
        return {
            textAlign,
            x
        };
    }
    _computeLabelArea() {
        if (this.options.ticks.mirror) return;
        const chart = this.chart;
        const position = this.options.position;
        if (position === "left" || position === "right") return {
            top: 0,
            left: this.left,
            bottom: chart.height,
            right: this.right
        };
        if (position === "top" || position === "bottom") return {
            top: this.top,
            left: 0,
            bottom: this.bottom,
            right: chart.width
        };
    }
    drawBackground() {
        const { ctx, options: { backgroundColor }, left, top, width, height } = this;
        if (backgroundColor) {
            ctx.save();
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(left, top, width, height);
            ctx.restore();
        }
    }
    getLineWidthForValue(value) {
        const grid = this.options.grid;
        if (!this._isVisible() || !grid.display) return 0;
        const ticks = this.ticks;
        const index = ticks.findIndex((t)=>t.value === value);
        if (index >= 0) {
            const opts = grid.setContext(this.getContext(index));
            return opts.lineWidth;
        }
        return 0;
    }
    drawGrid(chartArea) {
        const grid = this.options.grid;
        const ctx = this.ctx;
        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
        let i, ilen;
        const drawLine = (p1, p2, style)=>{
            if (!style.width || !style.color) return;
            ctx.save();
            ctx.lineWidth = style.width;
            ctx.strokeStyle = style.color;
            ctx.setLineDash(style.borderDash || []);
            ctx.lineDashOffset = style.borderDashOffset;
            ctx.beginPath();
            ctx.moveTo(p1.x, p1.y);
            ctx.lineTo(p2.x, p2.y);
            ctx.stroke();
            ctx.restore();
        };
        if (grid.display) for(i = 0, ilen = items.length; i < ilen; ++i){
            const item = items[i];
            if (grid.drawOnChartArea) drawLine({
                x: item.x1,
                y: item.y1
            }, {
                x: item.x2,
                y: item.y2
            }, item);
            if (grid.drawTicks) drawLine({
                x: item.tx1,
                y: item.ty1
            }, {
                x: item.tx2,
                y: item.ty2
            }, {
                color: item.tickColor,
                width: item.tickWidth,
                borderDash: item.tickBorderDash,
                borderDashOffset: item.tickBorderDashOffset
            });
        }
    }
    drawBorder() {
        const { chart, ctx, options: { grid } } = this;
        const borderOpts = grid.setContext(this.getContext());
        const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;
        if (!axisWidth) return;
        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
        const borderValue = this._borderValue;
        let x1, x2, y1, y2;
        if (this.isHorizontal()) {
            x1 = (0, _helpersSegmentMjs.J)(chart, this.left, axisWidth) - axisWidth / 2;
            x2 = (0, _helpersSegmentMjs.J)(chart, this.right, lastLineWidth) + lastLineWidth / 2;
            y1 = y2 = borderValue;
        } else {
            y1 = (0, _helpersSegmentMjs.J)(chart, this.top, axisWidth) - axisWidth / 2;
            y2 = (0, _helpersSegmentMjs.J)(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
            x1 = x2 = borderValue;
        }
        ctx.save();
        ctx.lineWidth = borderOpts.borderWidth;
        ctx.strokeStyle = borderOpts.borderColor;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        ctx.restore();
    }
    drawLabels(chartArea) {
        const optionTicks = this.options.ticks;
        if (!optionTicks.display) return;
        const ctx = this.ctx;
        const area = this._computeLabelArea();
        if (area) (0, _helpersSegmentMjs.L)(ctx, area);
        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
        let i, ilen;
        for(i = 0, ilen = items.length; i < ilen; ++i){
            const item = items[i];
            const tickFont = item.font;
            const label = item.label;
            if (item.backdrop) {
                ctx.fillStyle = item.backdrop.color;
                ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);
            }
            let y = item.textOffset;
            (0, _helpersSegmentMjs.M)(ctx, label, 0, y, tickFont, item);
        }
        if (area) (0, _helpersSegmentMjs.N)(ctx);
    }
    drawTitle() {
        const { ctx, options: { position, title, reverse } } = this;
        if (!title.display) return;
        const font = (0, _helpersSegmentMjs.O)(title.font);
        const padding = (0, _helpersSegmentMjs.K)(title.padding);
        const align = title.align;
        let offset = font.lineHeight / 2;
        if (position === "bottom" || position === "center" || (0, _helpersSegmentMjs.i)(position)) {
            offset += padding.bottom;
            if ((0, _helpersSegmentMjs.b)(title.text)) offset += font.lineHeight * (title.text.length - 1);
        } else offset += padding.top;
        const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position, align);
        (0, _helpersSegmentMjs.M)(ctx, title.text, 0, 0, font, {
            color: title.color,
            maxWidth,
            rotation,
            textAlign: titleAlign(align, position, reverse),
            textBaseline: "middle",
            translation: [
                titleX,
                titleY
            ]
        });
    }
    draw(chartArea) {
        if (!this._isVisible()) return;
        this.drawBackground();
        this.drawGrid(chartArea);
        this.drawBorder();
        this.drawTitle();
        this.drawLabels(chartArea);
    }
    _layers() {
        const opts = this.options;
        const tz = opts.ticks && opts.ticks.z || 0;
        const gz = (0, _helpersSegmentMjs.v)(opts.grid && opts.grid.z, -1);
        if (!this._isVisible() || this.draw !== Scale.prototype.draw) return [
            {
                z: tz,
                draw: (chartArea)=>{
                    this.draw(chartArea);
                }
            }
        ];
        return [
            {
                z: gz,
                draw: (chartArea)=>{
                    this.drawBackground();
                    this.drawGrid(chartArea);
                    this.drawTitle();
                }
            },
            {
                z: gz + 1,
                draw: ()=>{
                    this.drawBorder();
                }
            },
            {
                z: tz,
                draw: (chartArea)=>{
                    this.drawLabels(chartArea);
                }
            }
        ];
    }
    getMatchingVisibleMetas(type) {
        const metas = this.chart.getSortedVisibleDatasetMetas();
        const axisID = this.axis + "AxisID";
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metas.length; i < ilen; ++i){
            const meta = metas[i];
            if (meta[axisID] === this.id && (!type || meta.type === type)) result.push(meta);
        }
        return result;
    }
    _resolveTickFontOptions(index) {
        const opts = this.options.ticks.setContext(this.getContext(index));
        return (0, _helpersSegmentMjs.O)(opts.font);
    }
    _maxDigits() {
        const fontSize = this._resolveTickFontOptions(0).lineHeight;
        return (this.isHorizontal() ? this.width : this.height) / fontSize;
    }
}
class TypedRegistry {
    constructor(type, scope, override){
        this.type = type;
        this.scope = scope;
        this.override = override;
        this.items = Object.create(null);
    }
    isForType(type) {
        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
    }
    register(item) {
        const proto = Object.getPrototypeOf(item);
        let parentScope;
        if (isIChartComponent(proto)) parentScope = this.register(proto);
        const items = this.items;
        const id = item.id;
        const scope = this.scope + "." + id;
        if (!id) throw new Error("class does not have id: " + item);
        if (id in items) return scope;
        items[id] = item;
        registerDefaults(item, scope, parentScope);
        if (this.override) (0, _helpersSegmentMjs.d).override(item.id, item.overrides);
        return scope;
    }
    get(id) {
        return this.items[id];
    }
    unregister(item) {
        const items = this.items;
        const id = item.id;
        const scope = this.scope;
        if (id in items) delete items[id];
        if (scope && id in (0, _helpersSegmentMjs.d)[scope]) {
            delete (0, _helpersSegmentMjs.d)[scope][id];
            if (this.override) delete (0, _helpersSegmentMjs.U)[id];
        }
    }
}
function registerDefaults(item, scope, parentScope) {
    const itemDefaults = (0, _helpersSegmentMjs.V)(Object.create(null), [
        parentScope ? (0, _helpersSegmentMjs.d).get(parentScope) : {},
        (0, _helpersSegmentMjs.d).get(scope),
        item.defaults
    ]);
    (0, _helpersSegmentMjs.d).set(scope, itemDefaults);
    if (item.defaultRoutes) routeDefaults(scope, item.defaultRoutes);
    if (item.descriptors) (0, _helpersSegmentMjs.d).describe(scope, item.descriptors);
}
function routeDefaults(scope, routes) {
    Object.keys(routes).forEach((property)=>{
        const propertyParts = property.split(".");
        const sourceName = propertyParts.pop();
        const sourceScope = [
            scope
        ].concat(propertyParts).join(".");
        const parts = routes[property].split(".");
        const targetName = parts.pop();
        const targetScope = parts.join(".");
        (0, _helpersSegmentMjs.d).route(sourceScope, sourceName, targetScope, targetName);
    });
}
function isIChartComponent(proto) {
    return "id" in proto && "defaults" in proto;
}
class Registry {
    constructor(){
        this.controllers = new TypedRegistry(DatasetController, "datasets", true);
        this.elements = new TypedRegistry(Element, "elements");
        this.plugins = new TypedRegistry(Object, "plugins");
        this.scales = new TypedRegistry(Scale, "scales");
        this._typedRegistries = [
            this.controllers,
            this.scales,
            this.elements
        ];
    }
    add(...args) {
        this._each("register", args);
    }
    remove(...args) {
        this._each("unregister", args);
    }
    addControllers(...args) {
        this._each("register", args, this.controllers);
    }
    addElements(...args) {
        this._each("register", args, this.elements);
    }
    addPlugins(...args) {
        this._each("register", args, this.plugins);
    }
    addScales(...args) {
        this._each("register", args, this.scales);
    }
    getController(id) {
        return this._get(id, this.controllers, "controller");
    }
    getElement(id) {
        return this._get(id, this.elements, "element");
    }
    getPlugin(id) {
        return this._get(id, this.plugins, "plugin");
    }
    getScale(id) {
        return this._get(id, this.scales, "scale");
    }
    removeControllers(...args) {
        this._each("unregister", args, this.controllers);
    }
    removeElements(...args) {
        this._each("unregister", args, this.elements);
    }
    removePlugins(...args) {
        this._each("unregister", args, this.plugins);
    }
    removeScales(...args) {
        this._each("unregister", args, this.scales);
    }
    _each(method, args, typedRegistry) {
        [
            ...args
        ].forEach((arg)=>{
            const reg = typedRegistry || this._getRegistryForType(arg);
            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) this._exec(method, reg, arg);
            else (0, _helpersSegmentMjs.Q)(arg, (item)=>{
                const itemReg = typedRegistry || this._getRegistryForType(item);
                this._exec(method, itemReg, item);
            });
        });
    }
    _exec(method, registry, component) {
        const camelMethod = (0, _helpersSegmentMjs.W)(method);
        (0, _helpersSegmentMjs.C)(component["before" + camelMethod], [], component);
        registry[method](component);
        (0, _helpersSegmentMjs.C)(component["after" + camelMethod], [], component);
    }
    _getRegistryForType(type) {
        for(let i = 0; i < this._typedRegistries.length; i++){
            const reg = this._typedRegistries[i];
            if (reg.isForType(type)) return reg;
        }
        return this.plugins;
    }
    _get(id, typedRegistry, type) {
        const item = typedRegistry.get(id);
        if (item === undefined) throw new Error('"' + id + '" is not a registered ' + type + ".");
        return item;
    }
}
var registry = new Registry();
class ScatterController extends DatasetController {
    update(mode) {
        const meta = this._cachedMeta;
        const { data: points = [] } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start, count } = (0, _helpersSegmentMjs.q)(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if ((0, _helpersSegmentMjs.w)(meta)) {
            start = 0;
            count = points.length;
        }
        if (this.options.showLine) {
            const { dataset: line, _dataset } = meta;
            line._chart = this.chart;
            line._datasetIndex = this.index;
            line._decimated = !!_dataset._decimated;
            line.points = points;
            const options = this.resolveDatasetElementOptions(mode);
            options.segment = this.options.segment;
            this.updateElement(line, undefined, {
                animated: !animationsDisabled,
                options
            }, mode);
        }
        this.updateElements(points, start, count, mode);
    }
    addElements() {
        const { showLine } = this.options;
        if (!this.datasetElementType && showLine) this.datasetElementType = registry.getElement("line");
        super.addElements();
    }
    updateElements(points, start, count, mode) {
        const reset = mode === "reset";
        const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps, segment } = this.options;
        const maxGapLength = (0, _helpersSegmentMjs.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for(let i = start; i < start + count; ++i){
            const point = points[i];
            const parsed = this.getParsed(i);
            const properties = directUpdate ? point : {};
            const nullData = (0, _helpersSegmentMjs.k)(parsed[vAxis]);
            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
            if (segment) {
                properties.parsed = parsed;
                properties.raw = _dataset.data[i];
            }
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
            if (!directUpdate) this.updateElement(point, i, properties, mode);
            prevParsed = parsed;
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
    }
    getMaxOverflow() {
        const meta = this._cachedMeta;
        const data = meta.data || [];
        if (!this.options.showLine) {
            let max = 0;
            for(let i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
            return max > 0 && max;
        }
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        if (!data.length) return border;
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
    }
}
ScatterController.id = "scatter";
ScatterController.defaults = {
    datasetElementType: false,
    dataElementType: "point",
    showLine: false,
    fill: false
};
ScatterController.overrides = {
    interaction: {
        mode: "point"
    },
    plugins: {
        tooltip: {
            callbacks: {
                title () {
                    return "";
                },
                label (item) {
                    return "(" + item.label + ", " + item.formattedValue + ")";
                }
            }
        }
    },
    scales: {
        x: {
            type: "linear"
        },
        y: {
            type: "linear"
        }
    }
};
var controllers = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    BarController: BarController,
    BubbleController: BubbleController,
    DoughnutController: DoughnutController,
    LineController: LineController,
    PolarAreaController: PolarAreaController,
    PieController: PieController,
    RadarController: RadarController,
    ScatterController: ScatterController
});
function abstract() {
    throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
class DateAdapter {
    constructor(options){
        this.options = options || {};
    }
    init(chartOptions) {}
    formats() {
        return abstract();
    }
    parse(value, format) {
        return abstract();
    }
    format(timestamp, format) {
        return abstract();
    }
    add(timestamp, amount, unit) {
        return abstract();
    }
    diff(a, b, unit) {
        return abstract();
    }
    startOf(timestamp, unit, weekday) {
        return abstract();
    }
    endOf(timestamp, unit) {
        return abstract();
    }
}
DateAdapter.override = function(members) {
    Object.assign(DateAdapter.prototype, members);
};
var adapters = {
    _date: DateAdapter
};
function binarySearch(metaset, axis, value, intersect) {
    const { controller, data, _sorted } = metaset;
    const iScale = controller._cachedMeta.iScale;
    if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
        const lookupMethod = iScale._reversePixels ? (0, _helpersSegmentMjs.Y) : (0, _helpersSegmentMjs.Z);
        if (!intersect) return lookupMethod(data, axis, value);
        else if (controller._sharedOptions) {
            const el = data[0];
            const range = typeof el.getRange === "function" && el.getRange(axis);
            if (range) {
                const start = lookupMethod(data, axis, value - range);
                const end = lookupMethod(data, axis, value + range);
                return {
                    lo: start.lo,
                    hi: end.hi
                };
            }
        }
    }
    return {
        lo: 0,
        hi: data.length - 1
    };
}
function evaluateInteractionItems(chart, axis, position, handler, intersect) {
    const metasets = chart.getSortedVisibleDatasetMetas();
    const value = position[axis];
    for(let i = 0, ilen = metasets.length; i < ilen; ++i){
        const { index, data } = metasets[i];
        const { lo, hi } = binarySearch(metasets[i], axis, value, intersect);
        for(let j = lo; j <= hi; ++j){
            const element = data[j];
            if (!element.skip) handler(element, index, j);
        }
    }
}
function getDistanceMetricForAxis(axis) {
    const useX = axis.indexOf("x") !== -1;
    const useY = axis.indexOf("y") !== -1;
    return function(pt1, pt2) {
        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    };
}
function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
    const items = [];
    if (!includeInvisible && !chart.isPointInArea(position)) return items;
    const evaluationFunc = function(element, datasetIndex, index) {
        if (!includeInvisible && !(0, _helpersSegmentMjs.$)(element, chart.chartArea, 0)) return;
        if (element.inRange(position.x, position.y, useFinalPosition)) items.push({
            element,
            datasetIndex,
            index
        });
    };
    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
    return items;
}
function getNearestRadialItems(chart, position, axis, useFinalPosition) {
    let items = [];
    function evaluationFunc(element, datasetIndex, index) {
        const { startAngle, endAngle } = element.getProps([
            "startAngle",
            "endAngle"
        ], useFinalPosition);
        const { angle } = (0, _helpersSegmentMjs.a0)(element, {
            x: position.x,
            y: position.y
        });
        if ((0, _helpersSegmentMjs.p)(angle, startAngle, endAngle)) items.push({
            element,
            datasetIndex,
            index
        });
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    let items = [];
    const distanceMetric = getDistanceMetricForAxis(axis);
    let minDistance = Number.POSITIVE_INFINITY;
    function evaluationFunc(element, datasetIndex, index) {
        const inRange = element.inRange(position.x, position.y, useFinalPosition);
        if (intersect && !inRange) return;
        const center = element.getCenterPoint(useFinalPosition);
        const pointInArea = !!includeInvisible || chart.isPointInArea(center);
        if (!pointInArea && !inRange) return;
        const distance = distanceMetric(position, center);
        if (distance < minDistance) {
            items = [
                {
                    element,
                    datasetIndex,
                    index
                }
            ];
            minDistance = distance;
        } else if (distance === minDistance) items.push({
            element,
            datasetIndex,
            index
        });
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    if (!includeInvisible && !chart.isPointInArea(position)) return [];
    return axis === "r" && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
    const items = [];
    const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
    let intersectsItem = false;
    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{
        if (element[rangeMethod](position[axis], useFinalPosition)) {
            items.push({
                element,
                datasetIndex,
                index
            });
            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
        }
    });
    if (intersect && !intersectsItem) return [];
    return items;
}
var Interaction = {
    evaluateInteractionItems,
    modes: {
        index (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentMjs.X)(e, chart);
            const axis = options.axis || "x";
            const includeInvisible = options.includeInvisible || false;
            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            const elements = [];
            if (!items.length) return [];
            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{
                const index = items[0].index;
                const element = meta.data[index];
                if (element && !element.skip) elements.push({
                    element,
                    datasetIndex: meta.index,
                    index
                });
            });
            return elements;
        },
        dataset (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentMjs.X)(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            if (items.length > 0) {
                const datasetIndex = items[0].datasetIndex;
                const data = chart.getDatasetMeta(datasetIndex).data;
                items = [];
                for(let i = 0; i < data.length; ++i)items.push({
                    element: data[i],
                    datasetIndex,
                    index: i
                });
            }
            return items;
        },
        point (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentMjs.X)(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
        },
        nearest (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentMjs.X)(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
        },
        x (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentMjs.X)(e, chart);
            return getAxisItems(chart, position, "x", options.intersect, useFinalPosition);
        },
        y (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentMjs.X)(e, chart);
            return getAxisItems(chart, position, "y", options.intersect, useFinalPosition);
        }
    }
};
const STATIC_POSITIONS = [
    "left",
    "top",
    "right",
    "bottom"
];
function filterByPosition(array, position) {
    return array.filter((v)=>v.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}
function sortByWeight(array, reverse) {
    return array.sort((a, b)=>{
        const v0 = reverse ? b : a;
        const v1 = reverse ? a : b;
        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
    });
}
function wrapBoxes(boxes) {
    const layoutBoxes = [];
    let i, ilen, box, pos, stack, stackWeight;
    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){
        box = boxes[i];
        ({ position: pos, options: { stack, stackWeight = 1 } } = box);
        layoutBoxes.push({
            index: i,
            box,
            pos,
            horizontal: box.isHorizontal(),
            weight: box.weight,
            stack: stack && pos + stack,
            stackWeight
        });
    }
    return layoutBoxes;
}
function buildStacks(layouts) {
    const stacks = {};
    for (const wrap of layouts){
        const { stack, pos, stackWeight } = wrap;
        if (!stack || !STATIC_POSITIONS.includes(pos)) continue;
        const _stack = stacks[stack] || (stacks[stack] = {
            count: 0,
            placed: 0,
            weight: 0,
            size: 0
        });
        _stack.count++;
        _stack.weight += stackWeight;
    }
    return stacks;
}
function setLayoutDims(layouts, params) {
    const stacks = buildStacks(layouts);
    const { vBoxMaxWidth, hBoxMaxHeight } = params;
    let i, ilen, layout;
    for(i = 0, ilen = layouts.length; i < ilen; ++i){
        layout = layouts[i];
        const { fullSize } = layout.box;
        const stack = stacks[layout.stack];
        const factor = stack && layout.stackWeight / stack.weight;
        if (layout.horizontal) {
            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
            layout.height = hBoxMaxHeight;
        } else {
            layout.width = vBoxMaxWidth;
            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
        }
    }
    return stacks;
}
function buildLayoutBoxes(boxes) {
    const layoutBoxes = wrapBoxes(boxes);
    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);
    const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
    const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
    const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
    const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
    return {
        fullSize,
        leftAndTop: left.concat(top),
        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
        chartArea: filterByPosition(layoutBoxes, "chartArea"),
        vertical: left.concat(right).concat(centerVertical),
        horizontal: top.concat(bottom).concat(centerHorizontal)
    };
}
function getCombinedMax(maxPadding, chartArea, a, b) {
    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}
function updateMaxPadding(maxPadding, boxPadding) {
    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
    const { pos, box } = layout;
    const maxPadding = chartArea.maxPadding;
    if (!(0, _helpersSegmentMjs.i)(pos)) {
        if (layout.size) chartArea[pos] -= layout.size;
        const stack = stacks[layout.stack] || {
            size: 0,
            count: 1
        };
        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
        layout.size = stack.size / stack.count;
        chartArea[pos] += layout.size;
    }
    if (box.getPadding) updateMaxPadding(maxPadding, box.getPadding());
    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
    const widthChanged = newWidth !== chartArea.w;
    const heightChanged = newHeight !== chartArea.h;
    chartArea.w = newWidth;
    chartArea.h = newHeight;
    return layout.horizontal ? {
        same: widthChanged,
        other: heightChanged
    } : {
        same: heightChanged,
        other: widthChanged
    };
}
function handleMaxPadding(chartArea) {
    const maxPadding = chartArea.maxPadding;
    function updatePos(pos) {
        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
        chartArea[pos] += change;
        return change;
    }
    chartArea.y += updatePos("top");
    chartArea.x += updatePos("left");
    updatePos("right");
    updatePos("bottom");
}
function getMargins(horizontal, chartArea) {
    const maxPadding = chartArea.maxPadding;
    function marginForPositions(positions) {
        const margin = {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
        };
        positions.forEach((pos)=>{
            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
        });
        return margin;
    }
    return horizontal ? marginForPositions([
        "left",
        "right"
    ]) : marginForPositions([
        "top",
        "bottom"
    ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
    const refitBoxes = [];
    let i, ilen, layout, box, refit, changed;
    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){
        layout = boxes[i];
        box = layout.box;
        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
        const { same, other } = updateDims(chartArea, params, layout, stacks);
        refit |= same && refitBoxes.length;
        changed = changed || other;
        if (!box.fullSize) refitBoxes.push(layout);
    }
    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
    box.top = top;
    box.left = left;
    box.right = left + width;
    box.bottom = top + height;
    box.width = width;
    box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
    const userPadding = params.padding;
    let { x, y } = chartArea;
    for (const layout of boxes){
        const box = layout.box;
        const stack = stacks[layout.stack] || {
            count: 1,
            placed: 0,
            weight: 1
        };
        const weight = layout.stackWeight / stack.weight || 1;
        if (layout.horizontal) {
            const width = chartArea.w * weight;
            const height = stack.size || box.height;
            if ((0, _helpersSegmentMjs.j)(stack.start)) y = stack.start;
            if (box.fullSize) setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
            else setBoxDims(box, chartArea.left + stack.placed, y, width, height);
            stack.start = y;
            stack.placed += width;
            y = box.bottom;
        } else {
            const height = chartArea.h * weight;
            const width = stack.size || box.width;
            if ((0, _helpersSegmentMjs.j)(stack.start)) x = stack.start;
            if (box.fullSize) setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
            else setBoxDims(box, x, chartArea.top + stack.placed, width, height);
            stack.start = x;
            stack.placed += height;
            x = box.right;
        }
    }
    chartArea.x = x;
    chartArea.y = y;
}
(0, _helpersSegmentMjs.d).set("layout", {
    autoPadding: true,
    padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    }
});
var layouts = {
    addBox (chart, item) {
        if (!chart.boxes) chart.boxes = [];
        item.fullSize = item.fullSize || false;
        item.position = item.position || "top";
        item.weight = item.weight || 0;
        item._layers = item._layers || function() {
            return [
                {
                    z: 0,
                    draw (chartArea) {
                        item.draw(chartArea);
                    }
                }
            ];
        };
        chart.boxes.push(item);
    },
    removeBox (chart, layoutItem) {
        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
        if (index !== -1) chart.boxes.splice(index, 1);
    },
    configure (chart, item, options) {
        item.fullSize = options.fullSize;
        item.position = options.position;
        item.weight = options.weight;
    },
    update (chart, width, height, minPadding) {
        if (!chart) return;
        const padding = (0, _helpersSegmentMjs.K)(chart.options.layout.padding);
        const availableWidth = Math.max(width - padding.width, 0);
        const availableHeight = Math.max(height - padding.height, 0);
        const boxes = buildLayoutBoxes(chart.boxes);
        const verticalBoxes = boxes.vertical;
        const horizontalBoxes = boxes.horizontal;
        (0, _helpersSegmentMjs.Q)(chart.boxes, (box)=>{
            if (typeof box.beforeLayout === "function") box.beforeLayout();
        });
        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
        const params = Object.freeze({
            outerWidth: width,
            outerHeight: height,
            padding,
            availableWidth,
            availableHeight,
            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
            hBoxMaxHeight: availableHeight / 2
        });
        const maxPadding = Object.assign({}, padding);
        updateMaxPadding(maxPadding, (0, _helpersSegmentMjs.K)(minPadding));
        const chartArea = Object.assign({
            maxPadding,
            w: availableWidth,
            h: availableHeight,
            x: padding.left,
            y: padding.top
        }, padding);
        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
        fitBoxes(boxes.fullSize, chartArea, params, stacks);
        fitBoxes(verticalBoxes, chartArea, params, stacks);
        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) fitBoxes(verticalBoxes, chartArea, params, stacks);
        handleMaxPadding(chartArea);
        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
        chartArea.x += chartArea.w;
        chartArea.y += chartArea.h;
        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
        chart.chartArea = {
            left: chartArea.left,
            top: chartArea.top,
            right: chartArea.left + chartArea.w,
            bottom: chartArea.top + chartArea.h,
            height: chartArea.h,
            width: chartArea.w
        };
        (0, _helpersSegmentMjs.Q)(boxes.chartArea, (layout)=>{
            const box = layout.box;
            Object.assign(box, chart.chartArea);
            box.update(chartArea.w, chartArea.h, {
                left: 0,
                top: 0,
                right: 0,
                bottom: 0
            });
        });
    }
};
class BasePlatform {
    acquireContext(canvas, aspectRatio) {}
    releaseContext(context) {
        return false;
    }
    addEventListener(chart, type, listener) {}
    removeEventListener(chart, type, listener) {}
    getDevicePixelRatio() {
        return 1;
    }
    getMaximumSize(element, width, height, aspectRatio) {
        width = Math.max(0, width || element.width);
        height = height || element.height;
        return {
            width,
            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
        };
    }
    isAttached(canvas) {
        return true;
    }
    updateConfig(config) {}
}
class BasicPlatform extends BasePlatform {
    acquireContext(item) {
        return item && item.getContext && item.getContext("2d") || null;
    }
    updateConfig(config) {
        config.options.animation = false;
    }
}
const EXPANDO_KEY = "$chartjs";
const EVENT_TYPES = {
    touchstart: "mousedown",
    touchmove: "mousemove",
    touchend: "mouseup",
    pointerenter: "mouseenter",
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointerleave: "mouseout",
    pointerout: "mouseout"
};
const isNullOrEmpty = (value)=>value === null || value === "";
function initCanvas(canvas, aspectRatio) {
    const style = canvas.style;
    const renderHeight = canvas.getAttribute("height");
    const renderWidth = canvas.getAttribute("width");
    canvas[EXPANDO_KEY] = {
        initial: {
            height: renderHeight,
            width: renderWidth,
            style: {
                display: style.display,
                height: style.height,
                width: style.width
            }
        }
    };
    style.display = style.display || "block";
    style.boxSizing = style.boxSizing || "border-box";
    if (isNullOrEmpty(renderWidth)) {
        const displayWidth = (0, _helpersSegmentMjs.a3)(canvas, "width");
        if (displayWidth !== undefined) canvas.width = displayWidth;
    }
    if (isNullOrEmpty(renderHeight)) {
        if (canvas.style.height === "") canvas.height = canvas.width / (aspectRatio || 2);
        else {
            const displayHeight = (0, _helpersSegmentMjs.a3)(canvas, "height");
            if (displayHeight !== undefined) canvas.height = displayHeight;
        }
    }
    return canvas;
}
const eventListenerOptions = (0, _helpersSegmentMjs.a5) ? {
    passive: true
} : false;
function addListener(node, type, listener) {
    node.addEventListener(type, listener, eventListenerOptions);
}
function removeListener(chart, type, listener) {
    chart.canvas.removeEventListener(type, listener, eventListenerOptions);
}
function fromNativeEvent(event, chart) {
    const type = EVENT_TYPES[event.type] || event.type;
    const { x, y } = (0, _helpersSegmentMjs.X)(event, chart);
    return {
        type,
        chart,
        native: event,
        x: x !== undefined ? x : null,
        y: y !== undefined ? y : null
    };
}
function nodeListContains(nodeList, canvas) {
    for (const node of nodeList){
        if (node === canvas || node.contains(canvas)) return true;
    }
}
function createAttachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || nodeListContains(entry.addedNodes, canvas);
            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
        }
        if (trigger) listener();
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
function createDetachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || nodeListContains(entry.removedNodes, canvas);
            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
        }
        if (trigger) listener();
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
const drpListeningCharts = new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
    const dpr = window.devicePixelRatio;
    if (dpr === oldDevicePixelRatio) return;
    oldDevicePixelRatio = dpr;
    drpListeningCharts.forEach((resize, chart)=>{
        if (chart.currentDevicePixelRatio !== dpr) resize();
    });
}
function listenDevicePixelRatioChanges(chart, resize) {
    if (!drpListeningCharts.size) window.addEventListener("resize", onWindowResize);
    drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
    drpListeningCharts.delete(chart);
    if (!drpListeningCharts.size) window.removeEventListener("resize", onWindowResize);
}
function createResizeObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const container = canvas && (0, _helpersSegmentMjs.a2)(canvas);
    if (!container) return;
    const resize = (0, _helpersSegmentMjs.a4)((width, height)=>{
        const w = container.clientWidth;
        listener(width, height);
        if (w < container.clientWidth) listener();
    }, window);
    const observer = new ResizeObserver((entries)=>{
        const entry = entries[0];
        const width = entry.contentRect.width;
        const height = entry.contentRect.height;
        if (width === 0 && height === 0) return;
        resize(width, height);
    });
    observer.observe(container);
    listenDevicePixelRatioChanges(chart, resize);
    return observer;
}
function releaseObserver(chart, type, observer) {
    if (observer) observer.disconnect();
    if (type === "resize") unlistenDevicePixelRatioChanges(chart);
}
function createProxyAndListen(chart, type, listener) {
    const canvas = chart.canvas;
    const proxy = (0, _helpersSegmentMjs.a4)((event)=>{
        if (chart.ctx !== null) listener(fromNativeEvent(event, chart));
    }, chart, (args)=>{
        const event = args[0];
        return [
            event,
            event.offsetX,
            event.offsetY
        ];
    });
    addListener(canvas, type, proxy);
    return proxy;
}
class DomPlatform extends BasePlatform {
    acquireContext(canvas, aspectRatio) {
        const context = canvas && canvas.getContext && canvas.getContext("2d");
        if (context && context.canvas === canvas) {
            initCanvas(canvas, aspectRatio);
            return context;
        }
        return null;
    }
    releaseContext(context) {
        const canvas = context.canvas;
        if (!canvas[EXPANDO_KEY]) return false;
        const initial = canvas[EXPANDO_KEY].initial;
        [
            "height",
            "width"
        ].forEach((prop)=>{
            const value = initial[prop];
            if ((0, _helpersSegmentMjs.k)(value)) canvas.removeAttribute(prop);
            else canvas.setAttribute(prop, value);
        });
        const style = initial.style || {};
        Object.keys(style).forEach((key)=>{
            canvas.style[key] = style[key];
        });
        canvas.width = canvas.width;
        delete canvas[EXPANDO_KEY];
        return true;
    }
    addEventListener(chart, type, listener) {
        this.removeEventListener(chart, type);
        const proxies = chart.$proxies || (chart.$proxies = {});
        const handlers = {
            attach: createAttachObserver,
            detach: createDetachObserver,
            resize: createResizeObserver
        };
        const handler = handlers[type] || createProxyAndListen;
        proxies[type] = handler(chart, type, listener);
    }
    removeEventListener(chart, type) {
        const proxies = chart.$proxies || (chart.$proxies = {});
        const proxy = proxies[type];
        if (!proxy) return;
        const handlers = {
            attach: releaseObserver,
            detach: releaseObserver,
            resize: releaseObserver
        };
        const handler = handlers[type] || removeListener;
        handler(chart, type, proxy);
        proxies[type] = undefined;
    }
    getDevicePixelRatio() {
        return window.devicePixelRatio;
    }
    getMaximumSize(canvas, width, height, aspectRatio) {
        return (0, _helpersSegmentMjs.a1)(canvas, width, height, aspectRatio);
    }
    isAttached(canvas) {
        const container = (0, _helpersSegmentMjs.a2)(canvas);
        return !!(container && container.isConnected);
    }
}
function _detectPlatform(canvas) {
    if (!(0, _helpersSegmentMjs.a6)() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) return BasicPlatform;
    return DomPlatform;
}
class PluginService {
    constructor(){
        this._init = [];
    }
    notify(chart, hook, args, filter) {
        if (hook === "beforeInit") {
            this._init = this._createDescriptors(chart, true);
            this._notify(this._init, chart, "install");
        }
        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
        const result = this._notify(descriptors, chart, hook, args);
        if (hook === "afterDestroy") {
            this._notify(descriptors, chart, "stop");
            this._notify(this._init, chart, "uninstall");
        }
        return result;
    }
    _notify(descriptors, chart, hook, args) {
        args = args || {};
        for (const descriptor of descriptors){
            const plugin = descriptor.plugin;
            const method = plugin[hook];
            const params = [
                chart,
                args,
                descriptor.options
            ];
            if ((0, _helpersSegmentMjs.C)(method, params, plugin) === false && args.cancelable) return false;
        }
        return true;
    }
    invalidate() {
        if (!(0, _helpersSegmentMjs.k)(this._cache)) {
            this._oldCache = this._cache;
            this._cache = undefined;
        }
    }
    _descriptors(chart) {
        if (this._cache) return this._cache;
        const descriptors = this._cache = this._createDescriptors(chart);
        this._notifyStateChanges(chart);
        return descriptors;
    }
    _createDescriptors(chart, all) {
        const config = chart && chart.config;
        const options = (0, _helpersSegmentMjs.v)(config.options && config.options.plugins, {});
        const plugins = allPlugins(config);
        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
    }
    _notifyStateChanges(chart) {
        const previousDescriptors = this._oldCache || [];
        const descriptors = this._cache;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));
        this._notify(diff(previousDescriptors, descriptors), chart, "stop");
        this._notify(diff(descriptors, previousDescriptors), chart, "start");
    }
}
function allPlugins(config) {
    const localIds = {};
    const plugins = [];
    const keys = Object.keys(registry.plugins.items);
    for(let i = 0; i < keys.length; i++)plugins.push(registry.getPlugin(keys[i]));
    const local = config.plugins || [];
    for(let i = 0; i < local.length; i++){
        const plugin = local[i];
        if (plugins.indexOf(plugin) === -1) {
            plugins.push(plugin);
            localIds[plugin.id] = true;
        }
    }
    return {
        plugins,
        localIds
    };
}
function getOpts(options, all) {
    if (!all && options === false) return null;
    if (options === true) return {};
    return options;
}
function createDescriptors(chart, { plugins, localIds }, options, all) {
    const result = [];
    const context = chart.getContext();
    for (const plugin of plugins){
        const id = plugin.id;
        const opts = getOpts(options[id], all);
        if (opts === null) continue;
        result.push({
            plugin,
            options: pluginOpts(chart.config, {
                plugin,
                local: localIds[id]
            }, opts, context)
        });
    }
    return result;
}
function pluginOpts(config, { plugin, local }, opts, context) {
    const keys = config.pluginScopeKeys(plugin);
    const scopes = config.getOptionScopes(opts, keys);
    if (local && plugin.defaults) scopes.push(plugin.defaults);
    return config.createResolver(scopes, context, [
        ""
    ], {
        scriptable: false,
        indexable: false,
        allKeys: true
    });
}
function getIndexAxis(type, options) {
    const datasetDefaults = (0, _helpersSegmentMjs.d).datasets[type] || {};
    const datasetOptions = (options.datasets || {})[type] || {};
    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
}
function getAxisFromDefaultScaleID(id, indexAxis) {
    let axis = id;
    if (id === "_index_") axis = indexAxis;
    else if (id === "_value_") axis = indexAxis === "x" ? "y" : "x";
    return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
    return axis === indexAxis ? "_index_" : "_value_";
}
function axisFromPosition(position) {
    if (position === "top" || position === "bottom") return "x";
    if (position === "left" || position === "right") return "y";
}
function determineAxis(id, scaleOptions) {
    if (id === "x" || id === "y") return id;
    return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();
}
function mergeScaleConfig(config, options) {
    const chartDefaults = (0, _helpersSegmentMjs.U)[config.type] || {
        scales: {}
    };
    const configScales = options.scales || {};
    const chartIndexAxis = getIndexAxis(config.type, options);
    const firstIDs = Object.create(null);
    const scales = Object.create(null);
    Object.keys(configScales).forEach((id)=>{
        const scaleConf = configScales[id];
        if (!(0, _helpersSegmentMjs.i)(scaleConf)) return console.error(`Invalid scale configuration for scale: ${id}`);
        if (scaleConf._proxy) return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
        const axis = determineAxis(id, scaleConf);
        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
        const defaultScaleOptions = chartDefaults.scales || {};
        firstIDs[axis] = firstIDs[axis] || id;
        scales[id] = (0, _helpersSegmentMjs.ac)(Object.create(null), [
            {
                axis
            },
            scaleConf,
            defaultScaleOptions[axis],
            defaultScaleOptions[defaultId]
        ]);
    });
    config.data.datasets.forEach((dataset)=>{
        const type = dataset.type || config.type;
        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
        const datasetDefaults = (0, _helpersSegmentMjs.U)[type] || {};
        const defaultScaleOptions = datasetDefaults.scales || {};
        Object.keys(defaultScaleOptions).forEach((defaultID)=>{
            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
            const id = dataset[axis + "AxisID"] || firstIDs[axis] || axis;
            scales[id] = scales[id] || Object.create(null);
            (0, _helpersSegmentMjs.ac)(scales[id], [
                {
                    axis
                },
                configScales[id],
                defaultScaleOptions[defaultID]
            ]);
        });
    });
    Object.keys(scales).forEach((key)=>{
        const scale = scales[key];
        (0, _helpersSegmentMjs.ac)(scale, [
            (0, _helpersSegmentMjs.d).scales[scale.type],
            (0, _helpersSegmentMjs.d).scale
        ]);
    });
    return scales;
}
function initOptions(config) {
    const options = config.options || (config.options = {});
    options.plugins = (0, _helpersSegmentMjs.v)(options.plugins, {});
    options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
    data = data || {};
    data.datasets = data.datasets || [];
    data.labels = data.labels || [];
    return data;
}
function initConfig(config) {
    config = config || {};
    config.data = initData(config.data);
    initOptions(config);
    return config;
}
const keyCache = new Map();
const keysCached = new Set();
function cachedKeys(cacheKey, generate) {
    let keys = keyCache.get(cacheKey);
    if (!keys) {
        keys = generate();
        keyCache.set(cacheKey, keys);
        keysCached.add(keys);
    }
    return keys;
}
const addIfFound = (set, obj, key)=>{
    const opts = (0, _helpersSegmentMjs.f)(obj, key);
    if (opts !== undefined) set.add(opts);
};
class Config {
    constructor(config){
        this._config = initConfig(config);
        this._scopeCache = new Map();
        this._resolverCache = new Map();
    }
    get platform() {
        return this._config.platform;
    }
    get type() {
        return this._config.type;
    }
    set type(type) {
        this._config.type = type;
    }
    get data() {
        return this._config.data;
    }
    set data(data) {
        this._config.data = initData(data);
    }
    get options() {
        return this._config.options;
    }
    set options(options) {
        this._config.options = options;
    }
    get plugins() {
        return this._config.plugins;
    }
    update() {
        const config = this._config;
        this.clearCache();
        initOptions(config);
    }
    clearCache() {
        this._scopeCache.clear();
        this._resolverCache.clear();
    }
    datasetScopeKeys(datasetType) {
        return cachedKeys(datasetType, ()=>[
                [
                    `datasets.${datasetType}`,
                    ""
                ]
            ]);
    }
    datasetAnimationScopeKeys(datasetType, transition) {
        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[
                [
                    `datasets.${datasetType}.transitions.${transition}`,
                    `transitions.${transition}`
                ],
                [
                    `datasets.${datasetType}`,
                    ""
                ]
            ]);
    }
    datasetElementScopeKeys(datasetType, elementType) {
        return cachedKeys(`${datasetType}-${elementType}`, ()=>[
                [
                    `datasets.${datasetType}.elements.${elementType}`,
                    `datasets.${datasetType}`,
                    `elements.${elementType}`,
                    ""
                ]
            ]);
    }
    pluginScopeKeys(plugin) {
        const id = plugin.id;
        const type = this.type;
        return cachedKeys(`${type}-plugin-${id}`, ()=>[
                [
                    `plugins.${id}`,
                    ...plugin.additionalOptionScopes || []
                ]
            ]);
    }
    _cachedScopes(mainScope, resetCache) {
        const _scopeCache = this._scopeCache;
        let cache = _scopeCache.get(mainScope);
        if (!cache || resetCache) {
            cache = new Map();
            _scopeCache.set(mainScope, cache);
        }
        return cache;
    }
    getOptionScopes(mainScope, keyLists, resetCache) {
        const { options, type } = this;
        const cache = this._cachedScopes(mainScope, resetCache);
        const cached = cache.get(keyLists);
        if (cached) return cached;
        const scopes = new Set();
        keyLists.forEach((keys)=>{
            if (mainScope) {
                scopes.add(mainScope);
                keys.forEach((key)=>addIfFound(scopes, mainScope, key));
            }
            keys.forEach((key)=>addIfFound(scopes, options, key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersSegmentMjs.U)[type] || {}, key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersSegmentMjs.d), key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersSegmentMjs.a7), key));
        });
        const array = Array.from(scopes);
        if (array.length === 0) array.push(Object.create(null));
        if (keysCached.has(keyLists)) cache.set(keyLists, array);
        return array;
    }
    chartOptionScopes() {
        const { options, type } = this;
        return [
            options,
            (0, _helpersSegmentMjs.U)[type] || {},
            (0, _helpersSegmentMjs.d).datasets[type] || {},
            {
                type
            },
            (0, _helpersSegmentMjs.d),
            (0, _helpersSegmentMjs.a7)
        ];
    }
    resolveNamedOptions(scopes, names, context, prefixes = [
        ""
    ]) {
        const result = {
            $shared: true
        };
        const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes, prefixes);
        let options = resolver;
        if (needContext(resolver, names)) {
            result.$shared = false;
            context = (0, _helpersSegmentMjs.a8)(context) ? context() : context;
            const subResolver = this.createResolver(scopes, context, subPrefixes);
            options = (0, _helpersSegmentMjs.a9)(resolver, context, subResolver);
        }
        for (const prop of names)result[prop] = options[prop];
        return result;
    }
    createResolver(scopes, context, prefixes = [
        ""
    ], descriptorDefaults) {
        const { resolver } = getResolver(this._resolverCache, scopes, prefixes);
        return (0, _helpersSegmentMjs.i)(context) ? (0, _helpersSegmentMjs.a9)(resolver, context, undefined, descriptorDefaults) : resolver;
    }
}
function getResolver(resolverCache, scopes, prefixes) {
    let cache = resolverCache.get(scopes);
    if (!cache) {
        cache = new Map();
        resolverCache.set(scopes, cache);
    }
    const cacheKey = prefixes.join();
    let cached = cache.get(cacheKey);
    if (!cached) {
        const resolver = (0, _helpersSegmentMjs.aa)(scopes, prefixes);
        cached = {
            resolver,
            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes("hover"))
        };
        cache.set(cacheKey, cached);
    }
    return cached;
}
const hasFunction = (value)=>(0, _helpersSegmentMjs.i)(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || (0, _helpersSegmentMjs.a8)(value[key]), false);
function needContext(proxy, names) {
    const { isScriptable, isIndexable } = (0, _helpersSegmentMjs.ab)(proxy);
    for (const prop of names){
        const scriptable = isScriptable(prop);
        const indexable = isIndexable(prop);
        const value = (indexable || scriptable) && proxy[prop];
        if (scriptable && ((0, _helpersSegmentMjs.a8)(value) || hasFunction(value)) || indexable && (0, _helpersSegmentMjs.b)(value)) return true;
    }
    return false;
}
var version = "3.9.1";
const KNOWN_POSITIONS = [
    "top",
    "bottom",
    "left",
    "right",
    "chartArea"
];
function positionIsHorizontal(position, axis) {
    return position === "top" || position === "bottom" || KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
}
function compare2Level(l1, l2) {
    return function(a, b) {
        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
    };
}
function onAnimationsComplete(context) {
    const chart = context.chart;
    const animationOptions = chart.options.animation;
    chart.notifyPlugins("afterRender");
    (0, _helpersSegmentMjs.C)(animationOptions && animationOptions.onComplete, [
        context
    ], chart);
}
function onAnimationProgress(context) {
    const chart = context.chart;
    const animationOptions = chart.options.animation;
    (0, _helpersSegmentMjs.C)(animationOptions && animationOptions.onProgress, [
        context
    ], chart);
}
function getCanvas(item) {
    if ((0, _helpersSegmentMjs.a6)() && typeof item === "string") item = document.getElementById(item);
    else if (item && item.length) item = item[0];
    if (item && item.canvas) item = item.canvas;
    return item;
}
const instances = {};
const getChart = (key)=>{
    const canvas = getCanvas(key);
    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
    const keys = Object.keys(obj);
    for (const key of keys){
        const intKey = +key;
        if (intKey >= start) {
            const value = obj[key];
            delete obj[key];
            if (move > 0 || intKey > start) obj[intKey + move] = value;
        }
    }
}
function determineLastEvent(e, lastEvent, inChartArea, isClick) {
    if (!inChartArea || e.type === "mouseout") return null;
    if (isClick) return lastEvent;
    return e;
}
class Chart {
    constructor(item, userConfig){
        const config = this.config = new Config(userConfig);
        const initialCanvas = getCanvas(item);
        const existingChart = getChart(initialCanvas);
        if (existingChart) throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "'" + " must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused.");
        const options = config.createResolver(config.chartOptionScopes(), this.getContext());
        this.platform = new (config.platform || _detectPlatform(initialCanvas))();
        this.platform.updateConfig(config);
        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
        const canvas = context && context.canvas;
        const height = canvas && canvas.height;
        const width = canvas && canvas.width;
        this.id = (0, _helpersSegmentMjs.ad)();
        this.ctx = context;
        this.canvas = canvas;
        this.width = width;
        this.height = height;
        this._options = options;
        this._aspectRatio = this.aspectRatio;
        this._layers = [];
        this._metasets = [];
        this._stacks = undefined;
        this.boxes = [];
        this.currentDevicePixelRatio = undefined;
        this.chartArea = undefined;
        this._active = [];
        this._lastEvent = undefined;
        this._listeners = {};
        this._responsiveListeners = undefined;
        this._sortedMetasets = [];
        this.scales = {};
        this._plugins = new PluginService();
        this.$proxies = {};
        this._hiddenIndices = {};
        this.attached = false;
        this._animationsDisabled = undefined;
        this.$context = undefined;
        this._doResize = (0, _helpersSegmentMjs.ae)((mode)=>this.update(mode), options.resizeDelay || 0);
        this._dataChanges = [];
        instances[this.id] = this;
        if (!context || !canvas) {
            console.error("Failed to create chart: can't acquire context from the given item");
            return;
        }
        animator.listen(this, "complete", onAnimationsComplete);
        animator.listen(this, "progress", onAnimationProgress);
        this._initialize();
        if (this.attached) this.update();
    }
    get aspectRatio() {
        const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;
        if (!(0, _helpersSegmentMjs.k)(aspectRatio)) return aspectRatio;
        if (maintainAspectRatio && _aspectRatio) return _aspectRatio;
        return height ? width / height : null;
    }
    get data() {
        return this.config.data;
    }
    set data(data) {
        this.config.data = data;
    }
    get options() {
        return this._options;
    }
    set options(options) {
        this.config.options = options;
    }
    _initialize() {
        this.notifyPlugins("beforeInit");
        if (this.options.responsive) this.resize();
        else (0, _helpersSegmentMjs.af)(this, this.options.devicePixelRatio);
        this.bindEvents();
        this.notifyPlugins("afterInit");
        return this;
    }
    clear() {
        (0, _helpersSegmentMjs.ag)(this.canvas, this.ctx);
        return this;
    }
    stop() {
        animator.stop(this);
        return this;
    }
    resize(width, height) {
        if (!animator.running(this)) this._resize(width, height);
        else this._resizeBeforeDraw = {
            width,
            height
        };
    }
    _resize(width, height) {
        const options = this.options;
        const canvas = this.canvas;
        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
        const mode = this.width ? "resize" : "attach";
        this.width = newSize.width;
        this.height = newSize.height;
        this._aspectRatio = this.aspectRatio;
        if (!(0, _helpersSegmentMjs.af)(this, newRatio, true)) return;
        this.notifyPlugins("resize", {
            size: newSize
        });
        (0, _helpersSegmentMjs.C)(options.onResize, [
            this,
            newSize
        ], this);
        if (this.attached) {
            if (this._doResize(mode)) this.render();
        }
    }
    ensureScalesHaveIDs() {
        const options = this.options;
        const scalesOptions = options.scales || {};
        (0, _helpersSegmentMjs.Q)(scalesOptions, (axisOptions, axisID)=>{
            axisOptions.id = axisID;
        });
    }
    buildOrUpdateScales() {
        const options = this.options;
        const scaleOpts = options.scales;
        const scales = this.scales;
        const updated = Object.keys(scales).reduce((obj, id)=>{
            obj[id] = false;
            return obj;
        }, {});
        let items = [];
        if (scaleOpts) items = items.concat(Object.keys(scaleOpts).map((id)=>{
            const scaleOptions = scaleOpts[id];
            const axis = determineAxis(id, scaleOptions);
            const isRadial = axis === "r";
            const isHorizontal = axis === "x";
            return {
                options: scaleOptions,
                dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
                dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
            };
        }));
        (0, _helpersSegmentMjs.Q)(items, (item)=>{
            const scaleOptions = item.options;
            const id = scaleOptions.id;
            const axis = determineAxis(id, scaleOptions);
            const scaleType = (0, _helpersSegmentMjs.v)(scaleOptions.type, item.dtype);
            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) scaleOptions.position = item.dposition;
            updated[id] = true;
            let scale = null;
            if (id in scales && scales[id].type === scaleType) scale = scales[id];
            else {
                const scaleClass = registry.getScale(scaleType);
                scale = new scaleClass({
                    id,
                    type: scaleType,
                    ctx: this.ctx,
                    chart: this
                });
                scales[scale.id] = scale;
            }
            scale.init(scaleOptions, options);
        });
        (0, _helpersSegmentMjs.Q)(updated, (hasUpdated, id)=>{
            if (!hasUpdated) delete scales[id];
        });
        (0, _helpersSegmentMjs.Q)(scales, (scale)=>{
            layouts.configure(this, scale, scale.options);
            layouts.addBox(this, scale);
        });
    }
    _updateMetasets() {
        const metasets = this._metasets;
        const numData = this.data.datasets.length;
        const numMeta = metasets.length;
        metasets.sort((a, b)=>a.index - b.index);
        if (numMeta > numData) {
            for(let i = numData; i < numMeta; ++i)this._destroyDatasetMeta(i);
            metasets.splice(numData, numMeta - numData);
        }
        this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
    }
    _removeUnreferencedMetasets() {
        const { _metasets: metasets, data: { datasets } } = this;
        if (metasets.length > datasets.length) delete this._stacks;
        metasets.forEach((meta, index)=>{
            if (datasets.filter((x)=>x === meta._dataset).length === 0) this._destroyDatasetMeta(index);
        });
    }
    buildOrUpdateControllers() {
        const newControllers = [];
        const datasets = this.data.datasets;
        let i, ilen;
        this._removeUnreferencedMetasets();
        for(i = 0, ilen = datasets.length; i < ilen; i++){
            const dataset = datasets[i];
            let meta = this.getDatasetMeta(i);
            const type = dataset.type || this.config.type;
            if (meta.type && meta.type !== type) {
                this._destroyDatasetMeta(i);
                meta = this.getDatasetMeta(i);
            }
            meta.type = type;
            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
            meta.order = dataset.order || 0;
            meta.index = i;
            meta.label = "" + dataset.label;
            meta.visible = this.isDatasetVisible(i);
            if (meta.controller) {
                meta.controller.updateIndex(i);
                meta.controller.linkScales();
            } else {
                const ControllerClass = registry.getController(type);
                const { datasetElementType, dataElementType } = (0, _helpersSegmentMjs.d).datasets[type];
                Object.assign(ControllerClass.prototype, {
                    dataElementType: registry.getElement(dataElementType),
                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)
                });
                meta.controller = new ControllerClass(this, i);
                newControllers.push(meta.controller);
            }
        }
        this._updateMetasets();
        return newControllers;
    }
    _resetElements() {
        (0, _helpersSegmentMjs.Q)(this.data.datasets, (dataset, datasetIndex)=>{
            this.getDatasetMeta(datasetIndex).controller.reset();
        }, this);
    }
    reset() {
        this._resetElements();
        this.notifyPlugins("reset");
    }
    update(mode) {
        const config = this.config;
        config.update();
        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
        const animsDisabled = this._animationsDisabled = !options.animation;
        this._updateScales();
        this._checkEventBindings();
        this._updateHiddenIndices();
        this._plugins.invalidate();
        if (this.notifyPlugins("beforeUpdate", {
            mode,
            cancelable: true
        }) === false) return;
        const newControllers = this.buildOrUpdateControllers();
        this.notifyPlugins("beforeElementsUpdate");
        let minPadding = 0;
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){
            const { controller } = this.getDatasetMeta(i);
            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
            controller.buildOrUpdateElements(reset);
            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
        }
        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
        this._updateLayout(minPadding);
        if (!animsDisabled) (0, _helpersSegmentMjs.Q)(newControllers, (controller)=>{
            controller.reset();
        });
        this._updateDatasets(mode);
        this.notifyPlugins("afterUpdate", {
            mode
        });
        this._layers.sort(compare2Level("z", "_idx"));
        const { _active, _lastEvent } = this;
        if (_lastEvent) this._eventHandler(_lastEvent, true);
        else if (_active.length) this._updateHoverStyles(_active, _active, true);
        this.render();
    }
    _updateScales() {
        (0, _helpersSegmentMjs.Q)(this.scales, (scale)=>{
            layouts.removeBox(this, scale);
        });
        this.ensureScalesHaveIDs();
        this.buildOrUpdateScales();
    }
    _checkEventBindings() {
        const options = this.options;
        const existingEvents = new Set(Object.keys(this._listeners));
        const newEvents = new Set(options.events);
        if (!(0, _helpersSegmentMjs.ah)(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
            this.unbindEvents();
            this.bindEvents();
        }
    }
    _updateHiddenIndices() {
        const { _hiddenIndices } = this;
        const changes = this._getUniformDataChanges() || [];
        for (const { method, start, count } of changes){
            const move = method === "_removeElements" ? -count : count;
            moveNumericKeys(_hiddenIndices, start, move);
        }
    }
    _getUniformDataChanges() {
        const _dataChanges = this._dataChanges;
        if (!_dataChanges || !_dataChanges.length) return;
        this._dataChanges = [];
        const datasetCount = this.data.datasets.length;
        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + "," + c.splice(1).join(",")));
        const changeSet = makeSet(0);
        for(let i = 1; i < datasetCount; i++){
            if (!(0, _helpersSegmentMjs.ah)(changeSet, makeSet(i))) return;
        }
        return Array.from(changeSet).map((c)=>c.split(",")).map((a)=>({
                method: a[1],
                start: +a[2],
                count: +a[3]
            }));
    }
    _updateLayout(minPadding) {
        if (this.notifyPlugins("beforeLayout", {
            cancelable: true
        }) === false) return;
        layouts.update(this, this.width, this.height, minPadding);
        const area = this.chartArea;
        const noArea = area.width <= 0 || area.height <= 0;
        this._layers = [];
        (0, _helpersSegmentMjs.Q)(this.boxes, (box)=>{
            if (noArea && box.position === "chartArea") return;
            if (box.configure) box.configure();
            this._layers.push(...box._layers());
        }, this);
        this._layers.forEach((item, index)=>{
            item._idx = index;
        });
        this.notifyPlugins("afterLayout");
    }
    _updateDatasets(mode) {
        if (this.notifyPlugins("beforeDatasetsUpdate", {
            mode,
            cancelable: true
        }) === false) return;
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this.getDatasetMeta(i).controller.configure();
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._updateDataset(i, (0, _helpersSegmentMjs.a8)(mode) ? mode({
            datasetIndex: i
        }) : mode);
        this.notifyPlugins("afterDatasetsUpdate", {
            mode
        });
    }
    _updateDataset(index, mode) {
        const meta = this.getDatasetMeta(index);
        const args = {
            meta,
            index,
            mode,
            cancelable: true
        };
        if (this.notifyPlugins("beforeDatasetUpdate", args) === false) return;
        meta.controller._update(mode);
        args.cancelable = false;
        this.notifyPlugins("afterDatasetUpdate", args);
    }
    render() {
        if (this.notifyPlugins("beforeRender", {
            cancelable: true
        }) === false) return;
        if (animator.has(this)) {
            if (this.attached && !animator.running(this)) animator.start(this);
        } else {
            this.draw();
            onAnimationsComplete({
                chart: this
            });
        }
    }
    draw() {
        let i;
        if (this._resizeBeforeDraw) {
            const { width, height } = this._resizeBeforeDraw;
            this._resize(width, height);
            this._resizeBeforeDraw = null;
        }
        this.clear();
        if (this.width <= 0 || this.height <= 0) return;
        if (this.notifyPlugins("beforeDraw", {
            cancelable: true
        }) === false) return;
        const layers = this._layers;
        for(i = 0; i < layers.length && layers[i].z <= 0; ++i)layers[i].draw(this.chartArea);
        this._drawDatasets();
        for(; i < layers.length; ++i)layers[i].draw(this.chartArea);
        this.notifyPlugins("afterDraw");
    }
    _getSortedDatasetMetas(filterVisible) {
        const metasets = this._sortedMetasets;
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metasets.length; i < ilen; ++i){
            const meta = metasets[i];
            if (!filterVisible || meta.visible) result.push(meta);
        }
        return result;
    }
    getSortedVisibleDatasetMetas() {
        return this._getSortedDatasetMetas(true);
    }
    _drawDatasets() {
        if (this.notifyPlugins("beforeDatasetsDraw", {
            cancelable: true
        }) === false) return;
        const metasets = this.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i)this._drawDataset(metasets[i]);
        this.notifyPlugins("afterDatasetsDraw");
    }
    _drawDataset(meta) {
        const ctx = this.ctx;
        const clip = meta._clip;
        const useClip = !clip.disabled;
        const area = this.chartArea;
        const args = {
            meta,
            index: meta.index,
            cancelable: true
        };
        if (this.notifyPlugins("beforeDatasetDraw", args) === false) return;
        if (useClip) (0, _helpersSegmentMjs.L)(ctx, {
            left: clip.left === false ? 0 : area.left - clip.left,
            right: clip.right === false ? this.width : area.right + clip.right,
            top: clip.top === false ? 0 : area.top - clip.top,
            bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
        });
        meta.controller.draw();
        if (useClip) (0, _helpersSegmentMjs.N)(ctx);
        args.cancelable = false;
        this.notifyPlugins("afterDatasetDraw", args);
    }
    isPointInArea(point) {
        return (0, _helpersSegmentMjs.$)(point, this.chartArea, this._minPadding);
    }
    getElementsAtEventForMode(e, mode, options, useFinalPosition) {
        const method = Interaction.modes[mode];
        if (typeof method === "function") return method(this, e, options, useFinalPosition);
        return [];
    }
    getDatasetMeta(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        const metasets = this._metasets;
        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();
        if (!meta) {
            meta = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                xAxisID: null,
                yAxisID: null,
                order: dataset && dataset.order || 0,
                index: datasetIndex,
                _dataset: dataset,
                _parsed: [],
                _sorted: false
            };
            metasets.push(meta);
        }
        return meta;
    }
    getContext() {
        return this.$context || (this.$context = (0, _helpersSegmentMjs.h)(null, {
            chart: this,
            type: "chart"
        }));
    }
    getVisibleDatasetCount() {
        return this.getSortedVisibleDatasetMetas().length;
    }
    isDatasetVisible(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        if (!dataset) return false;
        const meta = this.getDatasetMeta(datasetIndex);
        return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
    }
    setDatasetVisibility(datasetIndex, visible) {
        const meta = this.getDatasetMeta(datasetIndex);
        meta.hidden = !visible;
    }
    toggleDataVisibility(index) {
        this._hiddenIndices[index] = !this._hiddenIndices[index];
    }
    getDataVisibility(index) {
        return !this._hiddenIndices[index];
    }
    _updateVisibility(datasetIndex, dataIndex, visible) {
        const mode = visible ? "show" : "hide";
        const meta = this.getDatasetMeta(datasetIndex);
        const anims = meta.controller._resolveAnimations(undefined, mode);
        if ((0, _helpersSegmentMjs.j)(dataIndex)) {
            meta.data[dataIndex].hidden = !visible;
            this.update();
        } else {
            this.setDatasetVisibility(datasetIndex, visible);
            anims.update(meta, {
                visible
            });
            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);
        }
    }
    hide(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, false);
    }
    show(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, true);
    }
    _destroyDatasetMeta(datasetIndex) {
        const meta = this._metasets[datasetIndex];
        if (meta && meta.controller) meta.controller._destroy();
        delete this._metasets[datasetIndex];
    }
    _stop() {
        let i, ilen;
        this.stop();
        animator.remove(this);
        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._destroyDatasetMeta(i);
    }
    destroy() {
        this.notifyPlugins("beforeDestroy");
        const { canvas, ctx } = this;
        this._stop();
        this.config.clearCache();
        if (canvas) {
            this.unbindEvents();
            (0, _helpersSegmentMjs.ag)(canvas, ctx);
            this.platform.releaseContext(ctx);
            this.canvas = null;
            this.ctx = null;
        }
        this.notifyPlugins("destroy");
        delete instances[this.id];
        this.notifyPlugins("afterDestroy");
    }
    toBase64Image(...args) {
        return this.canvas.toDataURL(...args);
    }
    bindEvents() {
        this.bindUserEvents();
        if (this.options.responsive) this.bindResponsiveEvents();
        else this.attached = true;
    }
    bindUserEvents() {
        const listeners = this._listeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const listener = (e, x, y)=>{
            e.offsetX = x;
            e.offsetY = y;
            this._eventHandler(e);
        };
        (0, _helpersSegmentMjs.Q)(this.options.events, (type)=>_add(type, listener));
    }
    bindResponsiveEvents() {
        if (!this._responsiveListeners) this._responsiveListeners = {};
        const listeners = this._responsiveListeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const _remove = (type, listener)=>{
            if (listeners[type]) {
                platform.removeEventListener(this, type, listener);
                delete listeners[type];
            }
        };
        const listener = (width, height)=>{
            if (this.canvas) this.resize(width, height);
        };
        let detached;
        const attached = ()=>{
            _remove("attach", attached);
            this.attached = true;
            this.resize();
            _add("resize", listener);
            _add("detach", detached);
        };
        detached = ()=>{
            this.attached = false;
            _remove("resize", listener);
            this._stop();
            this._resize(0, 0);
            _add("attach", attached);
        };
        if (platform.isAttached(this.canvas)) attached();
        else detached();
    }
    unbindEvents() {
        (0, _helpersSegmentMjs.Q)(this._listeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._listeners = {};
        (0, _helpersSegmentMjs.Q)(this._responsiveListeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._responsiveListeners = undefined;
    }
    updateHoverStyle(items, mode, enabled) {
        const prefix = enabled ? "set" : "remove";
        let meta, item, i, ilen;
        if (mode === "dataset") {
            meta = this.getDatasetMeta(items[0].datasetIndex);
            meta.controller["_" + prefix + "DatasetHoverStyle"]();
        }
        for(i = 0, ilen = items.length; i < ilen; ++i){
            item = items[i];
            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
            if (controller) controller[prefix + "HoverStyle"](item.element, item.datasetIndex, item.index);
        }
    }
    getActiveElements() {
        return this._active || [];
    }
    setActiveElements(activeElements) {
        const lastActive = this._active || [];
        const active = activeElements.map(({ datasetIndex, index })=>{
            const meta = this.getDatasetMeta(datasetIndex);
            if (!meta) throw new Error("No dataset found at index " + datasetIndex);
            return {
                datasetIndex,
                element: meta.data[index],
                index
            };
        });
        const changed = !(0, _helpersSegmentMjs.ai)(active, lastActive);
        if (changed) {
            this._active = active;
            this._lastEvent = null;
            this._updateHoverStyles(active, lastActive);
        }
    }
    notifyPlugins(hook, args, filter) {
        return this._plugins.notify(this, hook, args, filter);
    }
    _updateHoverStyles(active, lastActive, replay) {
        const hoverOptions = this.options.hover;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));
        const deactivated = diff(lastActive, active);
        const activated = replay ? active : diff(active, lastActive);
        if (deactivated.length) this.updateHoverStyle(deactivated, hoverOptions.mode, false);
        if (activated.length && hoverOptions.mode) this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
    _eventHandler(e, replay) {
        const args = {
            event: e,
            replay,
            cancelable: true,
            inChartArea: this.isPointInArea(e)
        };
        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);
        if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) return;
        const changed = this._handleEvent(e, replay, args.inChartArea);
        args.cancelable = false;
        this.notifyPlugins("afterEvent", args, eventFilter);
        if (changed || args.changed) this.render();
        return this;
    }
    _handleEvent(e, replay, inChartArea) {
        const { _active: lastActive = [], options } = this;
        const useFinalPosition = replay;
        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
        const isClick = (0, _helpersSegmentMjs.aj)(e);
        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
        if (inChartArea) {
            this._lastEvent = null;
            (0, _helpersSegmentMjs.C)(options.onHover, [
                e,
                active,
                this
            ], this);
            if (isClick) (0, _helpersSegmentMjs.C)(options.onClick, [
                e,
                active,
                this
            ], this);
        }
        const changed = !(0, _helpersSegmentMjs.ai)(active, lastActive);
        if (changed || replay) {
            this._active = active;
            this._updateHoverStyles(active, lastActive, replay);
        }
        this._lastEvent = lastEvent;
        return changed;
    }
    _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
        if (e.type === "mouseout") return [];
        if (!inChartArea) return lastActive;
        const hoverOptions = this.options.hover;
        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
    }
}
const invalidatePlugins = ()=>(0, _helpersSegmentMjs.Q)(Chart.instances, (chart)=>chart._plugins.invalidate());
const enumerable = true;
Object.defineProperties(Chart, {
    defaults: {
        enumerable,
        value: (0, _helpersSegmentMjs.d)
    },
    instances: {
        enumerable,
        value: instances
    },
    overrides: {
        enumerable,
        value: (0, _helpersSegmentMjs.U)
    },
    registry: {
        enumerable,
        value: registry
    },
    version: {
        enumerable,
        value: version
    },
    getChart: {
        enumerable,
        value: getChart
    },
    register: {
        enumerable,
        value: (...items)=>{
            registry.add(...items);
            invalidatePlugins();
        }
    },
    unregister: {
        enumerable,
        value: (...items)=>{
            registry.remove(...items);
            invalidatePlugins();
        }
    }
});
function clipArc(ctx, element, endAngle) {
    const { startAngle, pixelMargin, x, y, outerRadius, innerRadius } = element;
    let angleMargin = pixelMargin / outerRadius;
    ctx.beginPath();
    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
    if (innerRadius > pixelMargin) {
        angleMargin = pixelMargin / innerRadius;
        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
    } else ctx.arc(x, y, pixelMargin, endAngle + (0, _helpersSegmentMjs.H), startAngle - (0, _helpersSegmentMjs.H));
    ctx.closePath();
    ctx.clip();
}
function toRadiusCorners(value) {
    return (0, _helpersSegmentMjs.al)(value, [
        "outerStart",
        "outerEnd",
        "innerStart",
        "innerEnd"
    ]);
}
function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
    const o = toRadiusCorners(arc.options.borderRadius);
    const halfThickness = (outerRadius - innerRadius) / 2;
    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
    const computeOuterLimit = (val)=>{
        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
        return (0, _helpersSegmentMjs.E)(val, 0, Math.min(halfThickness, outerArcLimit));
    };
    return {
        outerStart: computeOuterLimit(o.outerStart),
        outerEnd: computeOuterLimit(o.outerEnd),
        innerStart: (0, _helpersSegmentMjs.E)(o.innerStart, 0, innerLimit),
        innerEnd: (0, _helpersSegmentMjs.E)(o.innerEnd, 0, innerLimit)
    };
}
function rThetaToXY(r, theta, x, y) {
    return {
        x: x + r * Math.cos(theta),
        y: y + r * Math.sin(theta)
    };
}
function pathArc(ctx, element, offset, spacing, end, circular) {
    const { x, y, startAngle: start, pixelMargin, innerRadius: innerR } = element;
    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
    let spacingOffset = 0;
    const alpha = end - start;
    if (spacing) {
        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
        spacingOffset = (alpha - adjustedAngle) / 2;
    }
    const beta = Math.max(0.001, alpha * outerRadius - offset / (0, _helpersSegmentMjs.P)) / outerRadius;
    const angleOffset = (alpha - beta) / 2;
    const startAngle = start + angleOffset + spacingOffset;
    const endAngle = end - angleOffset - spacingOffset;
    const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
    const outerStartAdjustedRadius = outerRadius - outerStart;
    const outerEndAdjustedRadius = outerRadius - outerEnd;
    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
    const innerStartAdjustedRadius = innerRadius + innerStart;
    const innerEndAdjustedRadius = innerRadius + innerEnd;
    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
    ctx.beginPath();
    if (circular) {
        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);
        if (outerEnd > 0) {
            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + (0, _helpersSegmentMjs.H));
        }
        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
        ctx.lineTo(p4.x, p4.y);
        if (innerEnd > 0) {
            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + (0, _helpersSegmentMjs.H), innerEndAdjustedAngle + Math.PI);
        }
        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, startAngle + innerStart / innerRadius, true);
        if (innerStart > 0) {
            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - (0, _helpersSegmentMjs.H));
        }
        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
        ctx.lineTo(p8.x, p8.y);
        if (outerStart > 0) {
            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - (0, _helpersSegmentMjs.H), outerStartAdjustedAngle);
        }
    } else {
        ctx.moveTo(x, y);
        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;
        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;
        ctx.lineTo(outerStartX, outerStartY);
        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;
        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;
        ctx.lineTo(outerEndX, outerEndY);
    }
    ctx.closePath();
}
function drawArc(ctx, element, offset, spacing, circular) {
    const { fullCircles, startAngle, circumference } = element;
    let endAngle = element.endAngle;
    if (fullCircles) {
        pathArc(ctx, element, offset, spacing, startAngle + (0, _helpersSegmentMjs.T), circular);
        for(let i = 0; i < fullCircles; ++i)ctx.fill();
        if (!isNaN(circumference)) {
            endAngle = startAngle + circumference % (0, _helpersSegmentMjs.T);
            if (circumference % (0, _helpersSegmentMjs.T) === 0) endAngle += (0, _helpersSegmentMjs.T);
        }
    }
    pathArc(ctx, element, offset, spacing, endAngle, circular);
    ctx.fill();
    return endAngle;
}
function drawFullCircleBorders(ctx, element, inner) {
    const { x, y, startAngle, pixelMargin, fullCircles } = element;
    const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);
    const innerRadius = element.innerRadius + pixelMargin;
    let i;
    if (inner) clipArc(ctx, element, startAngle + (0, _helpersSegmentMjs.T));
    ctx.beginPath();
    ctx.arc(x, y, innerRadius, startAngle + (0, _helpersSegmentMjs.T), startAngle, true);
    for(i = 0; i < fullCircles; ++i)ctx.stroke();
    ctx.beginPath();
    ctx.arc(x, y, outerRadius, startAngle, startAngle + (0, _helpersSegmentMjs.T));
    for(i = 0; i < fullCircles; ++i)ctx.stroke();
}
function drawBorder(ctx, element, offset, spacing, endAngle, circular) {
    const { options } = element;
    const { borderWidth, borderJoinStyle } = options;
    const inner = options.borderAlign === "inner";
    if (!borderWidth) return;
    if (inner) {
        ctx.lineWidth = borderWidth * 2;
        ctx.lineJoin = borderJoinStyle || "round";
    } else {
        ctx.lineWidth = borderWidth;
        ctx.lineJoin = borderJoinStyle || "bevel";
    }
    if (element.fullCircles) drawFullCircleBorders(ctx, element, inner);
    if (inner) clipArc(ctx, element, endAngle);
    pathArc(ctx, element, offset, spacing, endAngle, circular);
    ctx.stroke();
}
class ArcElement extends Element {
    constructor(cfg){
        super();
        this.options = undefined;
        this.circumference = undefined;
        this.startAngle = undefined;
        this.endAngle = undefined;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.pixelMargin = 0;
        this.fullCircles = 0;
        if (cfg) Object.assign(this, cfg);
    }
    inRange(chartX, chartY, useFinalPosition) {
        const point = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        const { angle, distance } = (0, _helpersSegmentMjs.a0)(point, {
            x: chartX,
            y: chartY
        });
        const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([
            "startAngle",
            "endAngle",
            "innerRadius",
            "outerRadius",
            "circumference"
        ], useFinalPosition);
        const rAdjust = this.options.spacing / 2;
        const _circumference = (0, _helpersSegmentMjs.v)(circumference, endAngle - startAngle);
        const betweenAngles = _circumference >= (0, _helpersSegmentMjs.T) || (0, _helpersSegmentMjs.p)(angle, startAngle, endAngle);
        const withinRadius = (0, _helpersSegmentMjs.ak)(distance, innerRadius + rAdjust, outerRadius + rAdjust);
        return betweenAngles && withinRadius;
    }
    getCenterPoint(useFinalPosition) {
        const { x, y, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([
            "x",
            "y",
            "startAngle",
            "endAngle",
            "innerRadius",
            "outerRadius",
            "circumference"
        ], useFinalPosition);
        const { offset, spacing } = this.options;
        const halfAngle = (startAngle + endAngle) / 2;
        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
        return {
            x: x + Math.cos(halfAngle) * halfRadius,
            y: y + Math.sin(halfAngle) * halfRadius
        };
    }
    tooltipPosition(useFinalPosition) {
        return this.getCenterPoint(useFinalPosition);
    }
    draw(ctx) {
        const { options, circumference } = this;
        const offset = (options.offset || 0) / 2;
        const spacing = (options.spacing || 0) / 2;
        const circular = options.circular;
        this.pixelMargin = options.borderAlign === "inner" ? 0.33 : 0;
        this.fullCircles = circumference > (0, _helpersSegmentMjs.T) ? Math.floor(circumference / (0, _helpersSegmentMjs.T)) : 0;
        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) return;
        ctx.save();
        let radiusOffset = 0;
        if (offset) {
            radiusOffset = offset / 2;
            const halfAngle = (this.startAngle + this.endAngle) / 2;
            ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);
            if (this.circumference >= (0, _helpersSegmentMjs.P)) radiusOffset = offset;
        }
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        const endAngle = drawArc(ctx, this, radiusOffset, spacing, circular);
        drawBorder(ctx, this, radiusOffset, spacing, endAngle, circular);
        ctx.restore();
    }
}
ArcElement.id = "arc";
ArcElement.defaults = {
    borderAlign: "center",
    borderColor: "#fff",
    borderJoinStyle: undefined,
    borderRadius: 0,
    borderWidth: 2,
    offset: 0,
    spacing: 0,
    angle: undefined,
    circular: true
};
ArcElement.defaultRoutes = {
    backgroundColor: "backgroundColor"
};
function setStyle(ctx, options, style = options) {
    ctx.lineCap = (0, _helpersSegmentMjs.v)(style.borderCapStyle, options.borderCapStyle);
    ctx.setLineDash((0, _helpersSegmentMjs.v)(style.borderDash, options.borderDash));
    ctx.lineDashOffset = (0, _helpersSegmentMjs.v)(style.borderDashOffset, options.borderDashOffset);
    ctx.lineJoin = (0, _helpersSegmentMjs.v)(style.borderJoinStyle, options.borderJoinStyle);
    ctx.lineWidth = (0, _helpersSegmentMjs.v)(style.borderWidth, options.borderWidth);
    ctx.strokeStyle = (0, _helpersSegmentMjs.v)(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
    ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
    if (options.stepped) return 0, _helpersSegmentMjs.as;
    if (options.tension || options.cubicInterpolationMode === "monotone") return 0, _helpersSegmentMjs.at;
    return lineTo;
}
function pathVars(points, segment, params = {}) {
    const count = points.length;
    const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;
    const { start: segmentStart, end: segmentEnd } = segment;
    const start = Math.max(paramsStart, segmentStart);
    const end = Math.min(paramsEnd, segmentEnd);
    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
    return {
        count,
        start,
        loop: segment.loop,
        ilen: end < start && !outside ? count + end - start : end - start
    };
}
function pathSegment(ctx, line, segment, params) {
    const { points, options } = line;
    const { count, start, loop, ilen } = pathVars(points, segment, params);
    const lineMethod = getLineMethod(options);
    let { move = true, reverse } = params || {};
    let i, point, prev;
    for(i = 0; i <= ilen; ++i){
        point = points[(start + (reverse ? ilen - i : i)) % count];
        if (point.skip) continue;
        else if (move) {
            ctx.moveTo(point.x, point.y);
            move = false;
        } else lineMethod(ctx, prev, point, reverse, options.stepped);
        prev = point;
    }
    if (loop) {
        point = points[(start + (reverse ? ilen : 0)) % count];
        lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    return !!loop;
}
function fastPathSegment(ctx, line, segment, params) {
    const points = line.points;
    const { count, start, ilen } = pathVars(points, segment, params);
    const { move = true, reverse } = params || {};
    let avgX = 0;
    let countX = 0;
    let i, point, prevX, minY, maxY, lastY;
    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;
    const drawX = ()=>{
        if (minY !== maxY) {
            ctx.lineTo(avgX, maxY);
            ctx.lineTo(avgX, minY);
            ctx.lineTo(avgX, lastY);
        }
    };
    if (move) {
        point = points[pointIndex(0)];
        ctx.moveTo(point.x, point.y);
    }
    for(i = 0; i <= ilen; ++i){
        point = points[pointIndex(i)];
        if (point.skip) continue;
        const x = point.x;
        const y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) minY = y;
            else if (y > maxY) maxY = y;
            avgX = (countX * avgX + x) / ++countX;
        } else {
            drawX();
            ctx.lineTo(x, y);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
        }
        lastY = y;
    }
    drawX();
}
function _getSegmentMethod(line) {
    const opts = line.options;
    const borderDash = opts.borderDash && opts.borderDash.length;
    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
    return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
    if (options.stepped) return 0, _helpersSegmentMjs.ap;
    if (options.tension || options.cubicInterpolationMode === "monotone") return 0, _helpersSegmentMjs.aq;
    return 0, _helpersSegmentMjs.ar;
}
function strokePathWithCache(ctx, line, start, count) {
    let path = line._path;
    if (!path) {
        path = line._path = new Path2D();
        if (line.path(path, start, count)) path.closePath();
    }
    setStyle(ctx, line.options);
    ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
    const { segments, options } = line;
    const segmentMethod = _getSegmentMethod(line);
    for (const segment of segments){
        setStyle(ctx, options, segment.style);
        ctx.beginPath();
        if (segmentMethod(ctx, line, segment, {
            start,
            end: start + count - 1
        })) ctx.closePath();
        ctx.stroke();
    }
}
const usePath2D = typeof Path2D === "function";
function draw(ctx, line, start, count) {
    if (usePath2D && !line.options.segment) strokePathWithCache(ctx, line, start, count);
    else strokePathDirect(ctx, line, start, count);
}
class LineElement extends Element {
    constructor(cfg){
        super();
        this.animated = true;
        this.options = undefined;
        this._chart = undefined;
        this._loop = undefined;
        this._fullLoop = undefined;
        this._path = undefined;
        this._points = undefined;
        this._segments = undefined;
        this._decimated = false;
        this._pointsUpdated = false;
        this._datasetIndex = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    updateControlPoints(chartArea, indexAxis) {
        const options = this.options;
        if ((options.tension || options.cubicInterpolationMode === "monotone") && !options.stepped && !this._pointsUpdated) {
            const loop = options.spanGaps ? this._loop : this._fullLoop;
            (0, _helpersSegmentMjs.am)(this._points, options, chartArea, loop, indexAxis);
            this._pointsUpdated = true;
        }
    }
    set points(points) {
        this._points = points;
        delete this._segments;
        delete this._path;
        this._pointsUpdated = false;
    }
    get points() {
        return this._points;
    }
    get segments() {
        return this._segments || (this._segments = (0, _helpersSegmentMjs.an)(this, this.options.segment));
    }
    first() {
        const segments = this.segments;
        const points = this.points;
        return segments.length && points[segments[0].start];
    }
    last() {
        const segments = this.segments;
        const points = this.points;
        const count = segments.length;
        return count && points[segments[count - 1].end];
    }
    interpolate(point, property) {
        const options = this.options;
        const value = point[property];
        const points = this.points;
        const segments = (0, _helpersSegmentMjs.ao)(this, {
            property,
            start: value,
            end: value
        });
        if (!segments.length) return;
        const result = [];
        const _interpolate = _getInterpolationMethod(options);
        let i, ilen;
        for(i = 0, ilen = segments.length; i < ilen; ++i){
            const { start, end } = segments[i];
            const p1 = points[start];
            const p2 = points[end];
            if (p1 === p2) {
                result.push(p1);
                continue;
            }
            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
            const interpolated = _interpolate(p1, p2, t, options.stepped);
            interpolated[property] = point[property];
            result.push(interpolated);
        }
        return result.length === 1 ? result[0] : result;
    }
    pathSegment(ctx, segment, params) {
        const segmentMethod = _getSegmentMethod(this);
        return segmentMethod(ctx, this, segment, params);
    }
    path(ctx, start, count) {
        const segments = this.segments;
        const segmentMethod = _getSegmentMethod(this);
        let loop = this._loop;
        start = start || 0;
        count = count || this.points.length - start;
        for (const segment of segments)loop &= segmentMethod(ctx, this, segment, {
            start,
            end: start + count - 1
        });
        return !!loop;
    }
    draw(ctx, chartArea, start, count) {
        const options = this.options || {};
        const points = this.points || [];
        if (points.length && options.borderWidth) {
            ctx.save();
            draw(ctx, this, start, count);
            ctx.restore();
        }
        if (this.animated) {
            this._pointsUpdated = false;
            this._path = undefined;
        }
    }
}
LineElement.id = "line";
LineElement.defaults = {
    borderCapStyle: "butt",
    borderDash: [],
    borderDashOffset: 0,
    borderJoinStyle: "miter",
    borderWidth: 3,
    capBezierPoints: true,
    cubicInterpolationMode: "default",
    fill: false,
    spanGaps: false,
    stepped: false,
    tension: 0
};
LineElement.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
};
LineElement.descriptors = {
    _scriptable: true,
    _indexable: (name)=>name !== "borderDash" && name !== "fill"
};
function inRange$1(el, pos, axis, useFinalPosition) {
    const options = el.options;
    const { [axis]: value } = el.getProps([
        axis
    ], useFinalPosition);
    return Math.abs(pos - value) < options.radius + options.hitRadius;
}
class PointElement extends Element {
    constructor(cfg){
        super();
        this.options = undefined;
        this.parsed = undefined;
        this.skip = undefined;
        this.stop = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    inRange(mouseX, mouseY, useFinalPosition) {
        const options = this.options;
        const { x, y } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
    }
    inXRange(mouseX, useFinalPosition) {
        return inRange$1(this, mouseX, "x", useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return inRange$1(this, mouseY, "y", useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x, y } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return {
            x,
            y
        };
    }
    size(options) {
        options = options || this.options || {};
        let radius = options.radius || 0;
        radius = Math.max(radius, radius && options.hoverRadius || 0);
        const borderWidth = radius && options.borderWidth || 0;
        return (radius + borderWidth) * 2;
    }
    draw(ctx, area) {
        const options = this.options;
        if (this.skip || options.radius < 0.1 || !(0, _helpersSegmentMjs.$)(this, area, this.size(options) / 2)) return;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.fillStyle = options.backgroundColor;
        (0, _helpersSegmentMjs.au)(ctx, options, this.x, this.y);
    }
    getRange() {
        const options = this.options || {};
        return options.radius + options.hitRadius;
    }
}
PointElement.id = "point";
PointElement.defaults = {
    borderWidth: 1,
    hitRadius: 1,
    hoverBorderWidth: 1,
    hoverRadius: 4,
    pointStyle: "circle",
    radius: 3,
    rotation: 0
};
PointElement.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
};
function getBarBounds(bar, useFinalPosition) {
    const { x, y, base, width, height } = bar.getProps([
        "x",
        "y",
        "base",
        "width",
        "height"
    ], useFinalPosition);
    let left, right, top, bottom, half;
    if (bar.horizontal) {
        half = height / 2;
        left = Math.min(x, base);
        right = Math.max(x, base);
        top = y - half;
        bottom = y + half;
    } else {
        half = width / 2;
        left = x - half;
        right = x + half;
        top = Math.min(y, base);
        bottom = Math.max(y, base);
    }
    return {
        left,
        top,
        right,
        bottom
    };
}
function skipOrLimit(skip, value, min, max) {
    return skip ? 0 : (0, _helpersSegmentMjs.E)(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
    const value = bar.options.borderWidth;
    const skip = bar.borderSkipped;
    const o = (0, _helpersSegmentMjs.aw)(value);
    return {
        t: skipOrLimit(skip.top, o.top, 0, maxH),
        r: skipOrLimit(skip.right, o.right, 0, maxW),
        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
        l: skipOrLimit(skip.left, o.left, 0, maxW)
    };
}
function parseBorderRadius(bar, maxW, maxH) {
    const { enableBorderRadius } = bar.getProps([
        "enableBorderRadius"
    ]);
    const value = bar.options.borderRadius;
    const o = (0, _helpersSegmentMjs.ax)(value);
    const maxR = Math.min(maxW, maxH);
    const skip = bar.borderSkipped;
    const enableBorder = enableBorderRadius || (0, _helpersSegmentMjs.i)(value);
    return {
        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
    };
}
function boundingRects(bar) {
    const bounds = getBarBounds(bar);
    const width = bounds.right - bounds.left;
    const height = bounds.bottom - bounds.top;
    const border = parseBorderWidth(bar, width / 2, height / 2);
    const radius = parseBorderRadius(bar, width / 2, height / 2);
    return {
        outer: {
            x: bounds.left,
            y: bounds.top,
            w: width,
            h: height,
            radius
        },
        inner: {
            x: bounds.left + border.l,
            y: bounds.top + border.t,
            w: width - border.l - border.r,
            h: height - border.t - border.b,
            radius: {
                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
            }
        }
    };
}
function inRange(bar, x, y, useFinalPosition) {
    const skipX = x === null;
    const skipY = y === null;
    const skipBoth = skipX && skipY;
    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
    return bounds && (skipX || (0, _helpersSegmentMjs.ak)(x, bounds.left, bounds.right)) && (skipY || (0, _helpersSegmentMjs.ak)(y, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
    ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
    const x = rect.x !== refRect.x ? -amount : 0;
    const y = rect.y !== refRect.y ? -amount : 0;
    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
    return {
        x: rect.x + x,
        y: rect.y + y,
        w: rect.w + w,
        h: rect.h + h,
        radius: rect.radius
    };
}
class BarElement extends Element {
    constructor(cfg){
        super();
        this.options = undefined;
        this.horizontal = undefined;
        this.base = undefined;
        this.width = undefined;
        this.height = undefined;
        this.inflateAmount = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    draw(ctx) {
        const { inflateAmount, options: { borderColor, backgroundColor } } = this;
        const { inner, outer } = boundingRects(this);
        const addRectPath = hasRadius(outer.radius) ? (0, _helpersSegmentMjs.av) : addNormalRectPath;
        ctx.save();
        if (outer.w !== inner.w || outer.h !== inner.h) {
            ctx.beginPath();
            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
            ctx.clip();
            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
            ctx.fillStyle = borderColor;
            ctx.fill("evenodd");
        }
        ctx.beginPath();
        addRectPath(ctx, inflateRect(inner, inflateAmount));
        ctx.fillStyle = backgroundColor;
        ctx.fill();
        ctx.restore();
    }
    inRange(mouseX, mouseY, useFinalPosition) {
        return inRange(this, mouseX, mouseY, useFinalPosition);
    }
    inXRange(mouseX, useFinalPosition) {
        return inRange(this, mouseX, null, useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return inRange(this, null, mouseY, useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x, y, base, horizontal } = this.getProps([
            "x",
            "y",
            "base",
            "horizontal"
        ], useFinalPosition);
        return {
            x: horizontal ? (x + base) / 2 : x,
            y: horizontal ? y : (y + base) / 2
        };
    }
    getRange(axis) {
        return axis === "x" ? this.width / 2 : this.height / 2;
    }
}
BarElement.id = "bar";
BarElement.defaults = {
    borderSkipped: "start",
    borderWidth: 0,
    borderRadius: 0,
    inflateAmount: "auto",
    pointStyle: undefined
};
BarElement.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
};
var elements = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ArcElement: ArcElement,
    LineElement: LineElement,
    PointElement: PointElement,
    BarElement: BarElement
});
function lttbDecimation(data, start, count, availableWidth, options) {
    const samples = options.samples || availableWidth;
    if (samples >= count) return data.slice(start, start + count);
    const decimated = [];
    const bucketWidth = (count - 2) / (samples - 2);
    let sampledIndex = 0;
    const endIndex = start + count - 1;
    let a = start;
    let i, maxAreaPoint, maxArea, area, nextA;
    decimated[sampledIndex++] = data[a];
    for(i = 0; i < samples - 2; i++){
        let avgX = 0;
        let avgY = 0;
        let j;
        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
        const avgRangeLength = avgRangeEnd - avgRangeStart;
        for(j = avgRangeStart; j < avgRangeEnd; j++){
            avgX += data[j].x;
            avgY += data[j].y;
        }
        avgX /= avgRangeLength;
        avgY /= avgRangeLength;
        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
        const { x: pointAx, y: pointAy } = data[a];
        maxArea = area = -1;
        for(j = rangeOffs; j < rangeTo; j++){
            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
            if (area > maxArea) {
                maxArea = area;
                maxAreaPoint = data[j];
                nextA = j;
            }
        }
        decimated[sampledIndex++] = maxAreaPoint;
        a = nextA;
    }
    decimated[sampledIndex++] = data[endIndex];
    return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
    let avgX = 0;
    let countX = 0;
    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
    const decimated = [];
    const endIndex = start + count - 1;
    const xMin = data[start].x;
    const xMax = data[endIndex].x;
    const dx = xMax - xMin;
    for(i = start; i < start + count; ++i){
        point = data[i];
        x = (point.x - xMin) / dx * availableWidth;
        y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) {
                minY = y;
                minIndex = i;
            } else if (y > maxY) {
                maxY = y;
                maxIndex = i;
            }
            avgX = (countX * avgX + point.x) / ++countX;
        } else {
            const lastIndex = i - 1;
            if (!(0, _helpersSegmentMjs.k)(minIndex) && !(0, _helpersSegmentMjs.k)(maxIndex)) {
                const intermediateIndex1 = Math.min(minIndex, maxIndex);
                const intermediateIndex2 = Math.max(minIndex, maxIndex);
                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) decimated.push({
                    ...data[intermediateIndex1],
                    x: avgX
                });
                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) decimated.push({
                    ...data[intermediateIndex2],
                    x: avgX
                });
            }
            if (i > 0 && lastIndex !== startIndex) decimated.push(data[lastIndex]);
            decimated.push(point);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
            minIndex = maxIndex = startIndex = i;
        }
    }
    return decimated;
}
function cleanDecimatedDataset(dataset) {
    if (dataset._decimated) {
        const data = dataset._data;
        delete dataset._decimated;
        delete dataset._data;
        Object.defineProperty(dataset, "data", {
            value: data
        });
    }
}
function cleanDecimatedData(chart) {
    chart.data.datasets.forEach((dataset)=>{
        cleanDecimatedDataset(dataset);
    });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
    const pointCount = points.length;
    let start = 0;
    let count;
    const { iScale } = meta;
    const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
    if (minDefined) start = (0, _helpersSegmentMjs.E)((0, _helpersSegmentMjs.Z)(points, iScale.axis, min).lo, 0, pointCount - 1);
    if (maxDefined) count = (0, _helpersSegmentMjs.E)((0, _helpersSegmentMjs.Z)(points, iScale.axis, max).hi + 1, start, pointCount) - start;
    else count = pointCount - start;
    return {
        start,
        count
    };
}
var plugin_decimation = {
    id: "decimation",
    defaults: {
        algorithm: "min-max",
        enabled: false
    },
    beforeElementsUpdate: (chart, args, options)=>{
        if (!options.enabled) {
            cleanDecimatedData(chart);
            return;
        }
        const availableWidth = chart.width;
        chart.data.datasets.forEach((dataset, datasetIndex)=>{
            const { _data, indexAxis } = dataset;
            const meta = chart.getDatasetMeta(datasetIndex);
            const data = _data || dataset.data;
            if ((0, _helpersSegmentMjs.a)([
                indexAxis,
                chart.options.indexAxis
            ]) === "y") return;
            if (!meta.controller.supportsDecimation) return;
            const xAxis = chart.scales[meta.xAxisID];
            if (xAxis.type !== "linear" && xAxis.type !== "time") return;
            if (chart.options.parsing) return;
            let { start, count } = getStartAndCountOfVisiblePointsSimplified(meta, data);
            const threshold = options.threshold || 4 * availableWidth;
            if (count <= threshold) {
                cleanDecimatedDataset(dataset);
                return;
            }
            if ((0, _helpersSegmentMjs.k)(_data)) {
                dataset._data = data;
                delete dataset.data;
                Object.defineProperty(dataset, "data", {
                    configurable: true,
                    enumerable: true,
                    get: function() {
                        return this._decimated;
                    },
                    set: function(d) {
                        this._data = d;
                    }
                });
            }
            let decimated;
            switch(options.algorithm){
                case "lttb":
                    decimated = lttbDecimation(data, start, count, availableWidth, options);
                    break;
                case "min-max":
                    decimated = minMaxDecimation(data, start, count, availableWidth);
                    break;
                default:
                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
            }
            dataset._decimated = decimated;
        });
    },
    destroy (chart) {
        cleanDecimatedData(chart);
    }
};
function _segments(line, target, property) {
    const segments = line.segments;
    const points = line.points;
    const tpoints = target.points;
    const parts = [];
    for (const segment of segments){
        let { start, end } = segment;
        end = _findSegmentEnd(start, end, points);
        const bounds = _getBounds(property, points[start], points[end], segment.loop);
        if (!target.segments) {
            parts.push({
                source: segment,
                target: bounds,
                start: points[start],
                end: points[end]
            });
            continue;
        }
        const targetSegments = (0, _helpersSegmentMjs.ao)(target, bounds);
        for (const tgt of targetSegments){
            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
            const fillSources = (0, _helpersSegmentMjs.ay)(segment, points, subBounds);
            for (const fillSource of fillSources)parts.push({
                source: fillSource,
                target: tgt,
                start: {
                    [property]: _getEdge(bounds, subBounds, "start", Math.max)
                },
                end: {
                    [property]: _getEdge(bounds, subBounds, "end", Math.min)
                }
            });
        }
    }
    return parts;
}
function _getBounds(property, first, last, loop) {
    if (loop) return;
    let start = first[property];
    let end = last[property];
    if (property === "angle") {
        start = (0, _helpersSegmentMjs.az)(start);
        end = (0, _helpersSegmentMjs.az)(end);
    }
    return {
        property,
        start,
        end
    };
}
function _pointsFromSegments(boundary, line) {
    const { x = null, y = null } = boundary || {};
    const linePoints = line.points;
    const points = [];
    line.segments.forEach(({ start, end })=>{
        end = _findSegmentEnd(start, end, linePoints);
        const first = linePoints[start];
        const last = linePoints[end];
        if (y !== null) {
            points.push({
                x: first.x,
                y
            });
            points.push({
                x: last.x,
                y
            });
        } else if (x !== null) {
            points.push({
                x,
                y: first.y
            });
            points.push({
                x,
                y: last.y
            });
        }
    });
    return points;
}
function _findSegmentEnd(start, end, points) {
    for(; end > start; end--){
        const point = points[end];
        if (!isNaN(point.x) && !isNaN(point.y)) break;
    }
    return end;
}
function _getEdge(a, b, prop, fn) {
    if (a && b) return fn(a[prop], b[prop]);
    return a ? a[prop] : b ? b[prop] : 0;
}
function _createBoundaryLine(boundary, line) {
    let points = [];
    let _loop = false;
    if ((0, _helpersSegmentMjs.b)(boundary)) {
        _loop = true;
        points = boundary;
    } else points = _pointsFromSegments(boundary, line);
    return points.length ? new LineElement({
        points,
        options: {
            tension: 0
        },
        _loop,
        _fullLoop: _loop
    }) : null;
}
function _shouldApplyFill(source) {
    return source && source.fill !== false;
}
function _resolveTarget(sources, index, propagate) {
    const source = sources[index];
    let fill = source.fill;
    const visited = [
        index
    ];
    let target;
    if (!propagate) return fill;
    while(fill !== false && visited.indexOf(fill) === -1){
        if (!(0, _helpersSegmentMjs.g)(fill)) return fill;
        target = sources[fill];
        if (!target) return false;
        if (target.visible) return fill;
        visited.push(fill);
        fill = target.fill;
    }
    return false;
}
function _decodeFill(line, index, count) {
    const fill = parseFillOption(line);
    if ((0, _helpersSegmentMjs.i)(fill)) return isNaN(fill.value) ? false : fill;
    let target = parseFloat(fill);
    if ((0, _helpersSegmentMjs.g)(target) && Math.floor(target) === target) return decodeTargetIndex(fill[0], index, target, count);
    return [
        "origin",
        "start",
        "end",
        "stack",
        "shape"
    ].indexOf(fill) >= 0 && fill;
}
function decodeTargetIndex(firstCh, index, target, count) {
    if (firstCh === "-" || firstCh === "+") target = index + target;
    if (target === index || target < 0 || target >= count) return false;
    return target;
}
function _getTargetPixel(fill, scale) {
    let pixel = null;
    if (fill === "start") pixel = scale.bottom;
    else if (fill === "end") pixel = scale.top;
    else if ((0, _helpersSegmentMjs.i)(fill)) pixel = scale.getPixelForValue(fill.value);
    else if (scale.getBasePixel) pixel = scale.getBasePixel();
    return pixel;
}
function _getTargetValue(fill, scale, startValue) {
    let value;
    if (fill === "start") value = startValue;
    else if (fill === "end") value = scale.options.reverse ? scale.min : scale.max;
    else if ((0, _helpersSegmentMjs.i)(fill)) value = fill.value;
    else value = scale.getBaseValue();
    return value;
}
function parseFillOption(line) {
    const options = line.options;
    const fillOption = options.fill;
    let fill = (0, _helpersSegmentMjs.v)(fillOption && fillOption.target, fillOption);
    if (fill === undefined) fill = !!options.backgroundColor;
    if (fill === false || fill === null) return false;
    if (fill === true) return "origin";
    return fill;
}
function _buildStackLine(source) {
    const { scale, index, line } = source;
    const points = [];
    const segments = line.segments;
    const sourcePoints = line.points;
    const linesBelow = getLinesBelow(scale, index);
    linesBelow.push(_createBoundaryLine({
        x: null,
        y: scale.bottom
    }, line));
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        for(let j = segment.start; j <= segment.end; j++)addPointsBelow(points, sourcePoints[j], linesBelow);
    }
    return new LineElement({
        points,
        options: {}
    });
}
function getLinesBelow(scale, index) {
    const below = [];
    const metas = scale.getMatchingVisibleMetas("line");
    for(let i = 0; i < metas.length; i++){
        const meta = metas[i];
        if (meta.index === index) break;
        if (!meta.hidden) below.unshift(meta.dataset);
    }
    return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
    const postponed = [];
    for(let j = 0; j < linesBelow.length; j++){
        const line = linesBelow[j];
        const { first, last, point } = findPoint(line, sourcePoint, "x");
        if (!point || first && last) continue;
        if (first) postponed.unshift(point);
        else {
            points.push(point);
            if (!last) break;
        }
    }
    points.push(...postponed);
}
function findPoint(line, sourcePoint, property) {
    const point = line.interpolate(sourcePoint, property);
    if (!point) return {};
    const pointValue = point[property];
    const segments = line.segments;
    const linePoints = line.points;
    let first = false;
    let last = false;
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        const firstValue = linePoints[segment.start][property];
        const lastValue = linePoints[segment.end][property];
        if ((0, _helpersSegmentMjs.ak)(pointValue, firstValue, lastValue)) {
            first = pointValue === firstValue;
            last = pointValue === lastValue;
            break;
        }
    }
    return {
        first,
        last,
        point
    };
}
class simpleArc {
    constructor(opts){
        this.x = opts.x;
        this.y = opts.y;
        this.radius = opts.radius;
    }
    pathSegment(ctx, bounds, opts) {
        const { x, y, radius } = this;
        bounds = bounds || {
            start: 0,
            end: (0, _helpersSegmentMjs.T)
        };
        ctx.arc(x, y, radius, bounds.end, bounds.start, true);
        return !opts.bounds;
    }
    interpolate(point) {
        const { x, y, radius } = this;
        const angle = point.angle;
        return {
            x: x + Math.cos(angle) * radius,
            y: y + Math.sin(angle) * radius,
            angle
        };
    }
}
function _getTarget(source) {
    const { chart, fill, line } = source;
    if ((0, _helpersSegmentMjs.g)(fill)) return getLineByIndex(chart, fill);
    if (fill === "stack") return _buildStackLine(source);
    if (fill === "shape") return true;
    const boundary = computeBoundary(source);
    if (boundary instanceof simpleArc) return boundary;
    return _createBoundaryLine(boundary, line);
}
function getLineByIndex(chart, index) {
    const meta = chart.getDatasetMeta(index);
    const visible = meta && chart.isDatasetVisible(index);
    return visible ? meta.dataset : null;
}
function computeBoundary(source) {
    const scale = source.scale || {};
    if (scale.getPointPositionForValue) return computeCircularBoundary(source);
    return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
    const { scale = {}, fill } = source;
    const pixel = _getTargetPixel(fill, scale);
    if ((0, _helpersSegmentMjs.g)(pixel)) {
        const horizontal = scale.isHorizontal();
        return {
            x: horizontal ? pixel : null,
            y: horizontal ? null : pixel
        };
    }
    return null;
}
function computeCircularBoundary(source) {
    const { scale, fill } = source;
    const options = scale.options;
    const length = scale.getLabels().length;
    const start = options.reverse ? scale.max : scale.min;
    const value = _getTargetValue(fill, scale, start);
    const target = [];
    if (options.grid.circular) {
        const center = scale.getPointPositionForValue(0, start);
        return new simpleArc({
            x: center.x,
            y: center.y,
            radius: scale.getDistanceFromCenterForValue(value)
        });
    }
    for(let i = 0; i < length; ++i)target.push(scale.getPointPositionForValue(i, value));
    return target;
}
function _drawfill(ctx, source, area) {
    const target = _getTarget(source);
    const { line, scale, axis } = source;
    const lineOpts = line.options;
    const fillOption = lineOpts.fill;
    const color = lineOpts.backgroundColor;
    const { above = color, below = color } = fillOption || {};
    if (target && line.points.length) {
        (0, _helpersSegmentMjs.L)(ctx, area);
        doFill(ctx, {
            line,
            target,
            above,
            below,
            area,
            scale,
            axis
        });
        (0, _helpersSegmentMjs.N)(ctx);
    }
}
function doFill(ctx, cfg) {
    const { line, target, above, below, area, scale } = cfg;
    const property = line._loop ? "angle" : cfg.axis;
    ctx.save();
    if (property === "x" && below !== above) {
        clipVertical(ctx, target, area.top);
        fill(ctx, {
            line,
            target,
            color: above,
            scale,
            property
        });
        ctx.restore();
        ctx.save();
        clipVertical(ctx, target, area.bottom);
    }
    fill(ctx, {
        line,
        target,
        color: below,
        scale,
        property
    });
    ctx.restore();
}
function clipVertical(ctx, target, clipY) {
    const { segments, points } = target;
    let first = true;
    let lineLoop = false;
    ctx.beginPath();
    for (const segment of segments){
        const { start, end } = segment;
        const firstPoint = points[start];
        const lastPoint = points[_findSegmentEnd(start, end, points)];
        if (first) {
            ctx.moveTo(firstPoint.x, firstPoint.y);
            first = false;
        } else {
            ctx.lineTo(firstPoint.x, clipY);
            ctx.lineTo(firstPoint.x, firstPoint.y);
        }
        lineLoop = !!target.pathSegment(ctx, segment, {
            move: lineLoop
        });
        if (lineLoop) ctx.closePath();
        else ctx.lineTo(lastPoint.x, clipY);
    }
    ctx.lineTo(target.first().x, clipY);
    ctx.closePath();
    ctx.clip();
}
function fill(ctx, cfg) {
    const { line, target, property, color, scale } = cfg;
    const segments = _segments(line, target, property);
    for (const { source: src, target: tgt, start, end } of segments){
        const { style: { backgroundColor = color } = {} } = src;
        const notShape = target !== true;
        ctx.save();
        ctx.fillStyle = backgroundColor;
        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));
        ctx.beginPath();
        const lineLoop = !!line.pathSegment(ctx, src);
        let loop;
        if (notShape) {
            if (lineLoop) ctx.closePath();
            else interpolatedLineTo(ctx, target, end, property);
            const targetLoop = !!target.pathSegment(ctx, tgt, {
                move: lineLoop,
                reverse: true
            });
            loop = lineLoop && targetLoop;
            if (!loop) interpolatedLineTo(ctx, target, start, property);
        }
        ctx.closePath();
        ctx.fill(loop ? "evenodd" : "nonzero");
        ctx.restore();
    }
}
function clipBounds(ctx, scale, bounds) {
    const { top, bottom } = scale.chart.chartArea;
    const { property, start, end } = bounds || {};
    if (property === "x") {
        ctx.beginPath();
        ctx.rect(start, top, end - start, bottom - top);
        ctx.clip();
    }
}
function interpolatedLineTo(ctx, target, point, property) {
    const interpolatedPoint = target.interpolate(point, property);
    if (interpolatedPoint) ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
}
var index = {
    id: "filler",
    afterDatasetsUpdate (chart, _args, options) {
        const count = (chart.data.datasets || []).length;
        const sources = [];
        let meta, i, line, source;
        for(i = 0; i < count; ++i){
            meta = chart.getDatasetMeta(i);
            line = meta.dataset;
            source = null;
            if (line && line.options && line instanceof LineElement) source = {
                visible: chart.isDatasetVisible(i),
                index: i,
                fill: _decodeFill(line, i, count),
                chart,
                axis: meta.controller.options.indexAxis,
                scale: meta.vScale,
                line
            };
            meta.$filler = source;
            sources.push(source);
        }
        for(i = 0; i < count; ++i){
            source = sources[i];
            if (!source || source.fill === false) continue;
            source.fill = _resolveTarget(sources, i, options.propagate);
        }
    },
    beforeDraw (chart, _args, options) {
        const draw = options.drawTime === "beforeDraw";
        const metasets = chart.getSortedVisibleDatasetMetas();
        const area = chart.chartArea;
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (!source) continue;
            source.line.updateControlPoints(area, source.axis);
            if (draw && source.fill) _drawfill(chart.ctx, source, area);
        }
    },
    beforeDatasetsDraw (chart, _args, options) {
        if (options.drawTime !== "beforeDatasetsDraw") return;
        const metasets = chart.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (_shouldApplyFill(source)) _drawfill(chart.ctx, source, chart.chartArea);
        }
    },
    beforeDatasetDraw (chart, args, options) {
        const source = args.meta.$filler;
        if (!_shouldApplyFill(source) || options.drawTime !== "beforeDatasetDraw") return;
        _drawfill(chart.ctx, source, chart.chartArea);
    },
    defaults: {
        propagate: true,
        drawTime: "beforeDatasetDraw"
    }
};
const getBoxSize = (labelOpts, fontSize)=>{
    let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
    if (labelOpts.usePointStyle) {
        boxHeight = Math.min(boxHeight, fontSize);
        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
    }
    return {
        boxWidth,
        boxHeight,
        itemHeight: Math.max(fontSize, boxHeight)
    };
};
const itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
class Legend extends Element {
    constructor(config){
        super();
        this._added = false;
        this.legendHitBoxes = [];
        this._hoveredItem = null;
        this.doughnutMode = false;
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this.legendItems = undefined;
        this.columnSizes = undefined;
        this.lineWidths = undefined;
        this.maxHeight = undefined;
        this.maxWidth = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.height = undefined;
        this.width = undefined;
        this._margins = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
    update(maxWidth, maxHeight, margins) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins;
        this.setDimensions();
        this.buildLabels();
        this.fit();
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = this._margins.left;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = this._margins.top;
            this.bottom = this.height;
        }
    }
    buildLabels() {
        const labelOpts = this.options.labels || {};
        let legendItems = (0, _helpersSegmentMjs.C)(labelOpts.generateLabels, [
            this.chart
        ], this) || [];
        if (labelOpts.filter) legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));
        if (labelOpts.sort) legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));
        if (this.options.reverse) legendItems.reverse();
        this.legendItems = legendItems;
    }
    fit() {
        const { options, ctx } = this;
        if (!options.display) {
            this.width = this.height = 0;
            return;
        }
        const labelOpts = options.labels;
        const labelFont = (0, _helpersSegmentMjs.O)(labelOpts.font);
        const fontSize = labelFont.size;
        const titleHeight = this._computeTitleHeight();
        const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
        let width, height;
        ctx.font = labelFont.string;
        if (this.isHorizontal()) {
            width = this.maxWidth;
            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        } else {
            height = this.maxHeight;
            width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        }
        this.width = Math.min(width, options.maxWidth || this.maxWidth);
        this.height = Math.min(height, options.maxHeight || this.maxHeight);
    }
    _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
        const { ctx, maxWidth, options: { labels: { padding } } } = this;
        const hitboxes = this.legendHitBoxes = [];
        const lineWidths = this.lineWidths = [
            0
        ];
        const lineHeight = itemHeight + padding;
        let totalHeight = titleHeight;
        ctx.textAlign = "left";
        ctx.textBaseline = "middle";
        let row = -1;
        let top = -lineHeight;
        this.legendItems.forEach((legendItem, i)=>{
            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
                totalHeight += lineHeight;
                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
                top += lineHeight;
                row++;
            }
            hitboxes[i] = {
                left: 0,
                top,
                row,
                width: itemWidth,
                height: itemHeight
            };
            lineWidths[lineWidths.length - 1] += itemWidth + padding;
        });
        return totalHeight;
    }
    _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {
        const { ctx, maxHeight, options: { labels: { padding } } } = this;
        const hitboxes = this.legendHitBoxes = [];
        const columnSizes = this.columnSizes = [];
        const heightLimit = maxHeight - titleHeight;
        let totalWidth = padding;
        let currentColWidth = 0;
        let currentColHeight = 0;
        let left = 0;
        let col = 0;
        this.legendItems.forEach((legendItem, i)=>{
            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
                totalWidth += currentColWidth + padding;
                columnSizes.push({
                    width: currentColWidth,
                    height: currentColHeight
                });
                left += currentColWidth + padding;
                col++;
                currentColWidth = currentColHeight = 0;
            }
            hitboxes[i] = {
                left,
                top: currentColHeight,
                col,
                width: itemWidth,
                height: itemHeight
            };
            currentColWidth = Math.max(currentColWidth, itemWidth);
            currentColHeight += itemHeight + padding;
        });
        totalWidth += currentColWidth;
        columnSizes.push({
            width: currentColWidth,
            height: currentColHeight
        });
        return totalWidth;
    }
    adjustHitBoxes() {
        if (!this.options.display) return;
        const titleHeight = this._computeTitleHeight();
        const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
        const rtlHelper = (0, _helpersSegmentMjs.aA)(rtl, this.left, this.width);
        if (this.isHorizontal()) {
            let row = 0;
            let left = (0, _helpersSegmentMjs.S)(align, this.left + padding, this.right - this.lineWidths[row]);
            for (const hitbox of hitboxes){
                if (row !== hitbox.row) {
                    row = hitbox.row;
                    left = (0, _helpersSegmentMjs.S)(align, this.left + padding, this.right - this.lineWidths[row]);
                }
                hitbox.top += this.top + titleHeight + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
                left += hitbox.width + padding;
            }
        } else {
            let col = 0;
            let top = (0, _helpersSegmentMjs.S)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
            for (const hitbox of hitboxes){
                if (hitbox.col !== col) {
                    col = hitbox.col;
                    top = (0, _helpersSegmentMjs.S)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
                }
                hitbox.top = top;
                hitbox.left += this.left + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
                top += hitbox.height + padding;
            }
        }
    }
    isHorizontal() {
        return this.options.position === "top" || this.options.position === "bottom";
    }
    draw() {
        if (this.options.display) {
            const ctx = this.ctx;
            (0, _helpersSegmentMjs.L)(ctx, this);
            this._draw();
            (0, _helpersSegmentMjs.N)(ctx);
        }
    }
    _draw() {
        const { options: opts, columnSizes, lineWidths, ctx } = this;
        const { align, labels: labelOpts } = opts;
        const defaultColor = (0, _helpersSegmentMjs.d).color;
        const rtlHelper = (0, _helpersSegmentMjs.aA)(opts.rtl, this.left, this.width);
        const labelFont = (0, _helpersSegmentMjs.O)(labelOpts.font);
        const { color: fontColor, padding } = labelOpts;
        const fontSize = labelFont.size;
        const halfFontSize = fontSize / 2;
        let cursor;
        this.drawTitle();
        ctx.textAlign = rtlHelper.textAlign("left");
        ctx.textBaseline = "middle";
        ctx.lineWidth = 0.5;
        ctx.font = labelFont.string;
        const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
        const drawLegendBox = function(x, y, legendItem) {
            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) return;
            ctx.save();
            const lineWidth = (0, _helpersSegmentMjs.v)(legendItem.lineWidth, 1);
            ctx.fillStyle = (0, _helpersSegmentMjs.v)(legendItem.fillStyle, defaultColor);
            ctx.lineCap = (0, _helpersSegmentMjs.v)(legendItem.lineCap, "butt");
            ctx.lineDashOffset = (0, _helpersSegmentMjs.v)(legendItem.lineDashOffset, 0);
            ctx.lineJoin = (0, _helpersSegmentMjs.v)(legendItem.lineJoin, "miter");
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = (0, _helpersSegmentMjs.v)(legendItem.strokeStyle, defaultColor);
            ctx.setLineDash((0, _helpersSegmentMjs.v)(legendItem.lineDash, []));
            if (labelOpts.usePointStyle) {
                const drawOptions = {
                    radius: boxHeight * Math.SQRT2 / 2,
                    pointStyle: legendItem.pointStyle,
                    rotation: legendItem.rotation,
                    borderWidth: lineWidth
                };
                const centerX = rtlHelper.xPlus(x, boxWidth / 2);
                const centerY = y + halfFontSize;
                (0, _helpersSegmentMjs.aE)(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
            } else {
                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
                const borderRadius = (0, _helpersSegmentMjs.ax)(legendItem.borderRadius);
                ctx.beginPath();
                if (Object.values(borderRadius).some((v)=>v !== 0)) (0, _helpersSegmentMjs.av)(ctx, {
                    x: xBoxLeft,
                    y: yBoxTop,
                    w: boxWidth,
                    h: boxHeight,
                    radius: borderRadius
                });
                else ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
                ctx.fill();
                if (lineWidth !== 0) ctx.stroke();
            }
            ctx.restore();
        };
        const fillText = function(x, y, legendItem) {
            (0, _helpersSegmentMjs.M)(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
                strikethrough: legendItem.hidden,
                textAlign: rtlHelper.textAlign(legendItem.textAlign)
            });
        };
        const isHorizontal = this.isHorizontal();
        const titleHeight = this._computeTitleHeight();
        if (isHorizontal) cursor = {
            x: (0, _helpersSegmentMjs.S)(align, this.left + padding, this.right - lineWidths[0]),
            y: this.top + padding + titleHeight,
            line: 0
        };
        else cursor = {
            x: this.left + padding,
            y: (0, _helpersSegmentMjs.S)(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
            line: 0
        };
        (0, _helpersSegmentMjs.aB)(this.ctx, opts.textDirection);
        const lineHeight = itemHeight + padding;
        this.legendItems.forEach((legendItem, i)=>{
            ctx.strokeStyle = legendItem.fontColor || fontColor;
            ctx.fillStyle = legendItem.fontColor || fontColor;
            const textWidth = ctx.measureText(legendItem.text).width;
            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
            const width = boxWidth + halfFontSize + textWidth;
            let x = cursor.x;
            let y = cursor.y;
            rtlHelper.setWidth(this.width);
            if (isHorizontal) {
                if (i > 0 && x + width + padding > this.right) {
                    y = cursor.y += lineHeight;
                    cursor.line++;
                    x = cursor.x = (0, _helpersSegmentMjs.S)(align, this.left + padding, this.right - lineWidths[cursor.line]);
                }
            } else if (i > 0 && y + lineHeight > this.bottom) {
                x = cursor.x = x + columnSizes[cursor.line].width + padding;
                cursor.line++;
                y = cursor.y = (0, _helpersSegmentMjs.S)(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
            }
            const realX = rtlHelper.x(x);
            drawLegendBox(realX, y, legendItem);
            x = (0, _helpersSegmentMjs.aC)(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
            fillText(rtlHelper.x(x), y, legendItem);
            if (isHorizontal) cursor.x += width + padding;
            else cursor.y += lineHeight;
        });
        (0, _helpersSegmentMjs.aD)(this.ctx, opts.textDirection);
    }
    drawTitle() {
        const opts = this.options;
        const titleOpts = opts.title;
        const titleFont = (0, _helpersSegmentMjs.O)(titleOpts.font);
        const titlePadding = (0, _helpersSegmentMjs.K)(titleOpts.padding);
        if (!titleOpts.display) return;
        const rtlHelper = (0, _helpersSegmentMjs.aA)(opts.rtl, this.left, this.width);
        const ctx = this.ctx;
        const position = titleOpts.position;
        const halfFontSize = titleFont.size / 2;
        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
        let y;
        let left = this.left;
        let maxWidth = this.width;
        if (this.isHorizontal()) {
            maxWidth = Math.max(...this.lineWidths);
            y = this.top + topPaddingPlusHalfFontSize;
            left = (0, _helpersSegmentMjs.S)(opts.align, left, this.right - maxWidth);
        } else {
            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);
            y = topPaddingPlusHalfFontSize + (0, _helpersSegmentMjs.S)(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
        }
        const x = (0, _helpersSegmentMjs.S)(position, left, left + maxWidth);
        ctx.textAlign = rtlHelper.textAlign((0, _helpersSegmentMjs.R)(position));
        ctx.textBaseline = "middle";
        ctx.strokeStyle = titleOpts.color;
        ctx.fillStyle = titleOpts.color;
        ctx.font = titleFont.string;
        (0, _helpersSegmentMjs.M)(ctx, titleOpts.text, x, y, titleFont);
    }
    _computeTitleHeight() {
        const titleOpts = this.options.title;
        const titleFont = (0, _helpersSegmentMjs.O)(titleOpts.font);
        const titlePadding = (0, _helpersSegmentMjs.K)(titleOpts.padding);
        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
    }
    _getLegendItemAt(x, y) {
        let i, hitBox, lh;
        if ((0, _helpersSegmentMjs.ak)(x, this.left, this.right) && (0, _helpersSegmentMjs.ak)(y, this.top, this.bottom)) {
            lh = this.legendHitBoxes;
            for(i = 0; i < lh.length; ++i){
                hitBox = lh[i];
                if ((0, _helpersSegmentMjs.ak)(x, hitBox.left, hitBox.left + hitBox.width) && (0, _helpersSegmentMjs.ak)(y, hitBox.top, hitBox.top + hitBox.height)) return this.legendItems[i];
            }
        }
        return null;
    }
    handleEvent(e) {
        const opts = this.options;
        if (!isListened(e.type, opts)) return;
        const hoveredItem = this._getLegendItemAt(e.x, e.y);
        if (e.type === "mousemove" || e.type === "mouseout") {
            const previous = this._hoveredItem;
            const sameItem = itemsEqual(previous, hoveredItem);
            if (previous && !sameItem) (0, _helpersSegmentMjs.C)(opts.onLeave, [
                e,
                previous,
                this
            ], this);
            this._hoveredItem = hoveredItem;
            if (hoveredItem && !sameItem) (0, _helpersSegmentMjs.C)(opts.onHover, [
                e,
                hoveredItem,
                this
            ], this);
        } else if (hoveredItem) (0, _helpersSegmentMjs.C)(opts.onClick, [
            e,
            hoveredItem,
            this
        ], this);
    }
}
function isListened(type, opts) {
    if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) return true;
    if (opts.onClick && (type === "click" || type === "mouseup")) return true;
    return false;
}
var plugin_legend = {
    id: "legend",
    _element: Legend,
    start (chart, _args, options) {
        const legend = chart.legend = new Legend({
            ctx: chart.ctx,
            options,
            chart
        });
        layouts.configure(chart, legend, options);
        layouts.addBox(chart, legend);
    },
    stop (chart) {
        layouts.removeBox(chart, chart.legend);
        delete chart.legend;
    },
    beforeUpdate (chart, _args, options) {
        const legend = chart.legend;
        layouts.configure(chart, legend, options);
        legend.options = options;
    },
    afterUpdate (chart) {
        const legend = chart.legend;
        legend.buildLabels();
        legend.adjustHitBoxes();
    },
    afterEvent (chart, args) {
        if (!args.replay) chart.legend.handleEvent(args.event);
    },
    defaults: {
        display: true,
        position: "top",
        align: "center",
        fullSize: true,
        reverse: false,
        weight: 1000,
        onClick (e, legendItem, legend) {
            const index = legendItem.datasetIndex;
            const ci = legend.chart;
            if (ci.isDatasetVisible(index)) {
                ci.hide(index);
                legendItem.hidden = true;
            } else {
                ci.show(index);
                legendItem.hidden = false;
            }
        },
        onHover: null,
        onLeave: null,
        labels: {
            color: (ctx)=>ctx.chart.options.color,
            boxWidth: 40,
            padding: 10,
            generateLabels (chart) {
                const datasets = chart.data.datasets;
                const { labels: { usePointStyle, pointStyle, textAlign, color } } = chart.legend.options;
                return chart._getSortedDatasetMetas().map((meta)=>{
                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
                    const borderWidth = (0, _helpersSegmentMjs.K)(style.borderWidth);
                    return {
                        text: datasets[meta.index].label,
                        fillStyle: style.backgroundColor,
                        fontColor: color,
                        hidden: !meta.visible,
                        lineCap: style.borderCapStyle,
                        lineDash: style.borderDash,
                        lineDashOffset: style.borderDashOffset,
                        lineJoin: style.borderJoinStyle,
                        lineWidth: (borderWidth.width + borderWidth.height) / 4,
                        strokeStyle: style.borderColor,
                        pointStyle: pointStyle || style.pointStyle,
                        rotation: style.rotation,
                        textAlign: textAlign || style.textAlign,
                        borderRadius: 0,
                        datasetIndex: meta.index
                    };
                }, this);
            }
        },
        title: {
            color: (ctx)=>ctx.chart.options.color,
            display: false,
            position: "center",
            text: ""
        }
    },
    descriptors: {
        _scriptable: (name)=>!name.startsWith("on"),
        labels: {
            _scriptable: (name)=>![
                    "generateLabels",
                    "filter",
                    "sort"
                ].includes(name)
        }
    }
};
class Title extends Element {
    constructor(config){
        super();
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this._padding = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
    update(maxWidth, maxHeight) {
        const opts = this.options;
        this.left = 0;
        this.top = 0;
        if (!opts.display) {
            this.width = this.height = this.right = this.bottom = 0;
            return;
        }
        this.width = this.right = maxWidth;
        this.height = this.bottom = maxHeight;
        const lineCount = (0, _helpersSegmentMjs.b)(opts.text) ? opts.text.length : 1;
        this._padding = (0, _helpersSegmentMjs.K)(opts.padding);
        const textSize = lineCount * (0, _helpersSegmentMjs.O)(opts.font).lineHeight + this._padding.height;
        if (this.isHorizontal()) this.height = textSize;
        else this.width = textSize;
    }
    isHorizontal() {
        const pos = this.options.position;
        return pos === "top" || pos === "bottom";
    }
    _drawArgs(offset) {
        const { top, left, bottom, right, options } = this;
        const align = options.align;
        let rotation = 0;
        let maxWidth, titleX, titleY;
        if (this.isHorizontal()) {
            titleX = (0, _helpersSegmentMjs.S)(align, left, right);
            titleY = top + offset;
            maxWidth = right - left;
        } else {
            if (options.position === "left") {
                titleX = left + offset;
                titleY = (0, _helpersSegmentMjs.S)(align, bottom, top);
                rotation = (0, _helpersSegmentMjs.P) * -0.5;
            } else {
                titleX = right - offset;
                titleY = (0, _helpersSegmentMjs.S)(align, top, bottom);
                rotation = (0, _helpersSegmentMjs.P) * 0.5;
            }
            maxWidth = bottom - top;
        }
        return {
            titleX,
            titleY,
            maxWidth,
            rotation
        };
    }
    draw() {
        const ctx = this.ctx;
        const opts = this.options;
        if (!opts.display) return;
        const fontOpts = (0, _helpersSegmentMjs.O)(opts.font);
        const lineHeight = fontOpts.lineHeight;
        const offset = lineHeight / 2 + this._padding.top;
        const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
        (0, _helpersSegmentMjs.M)(ctx, opts.text, 0, 0, fontOpts, {
            color: opts.color,
            maxWidth,
            rotation,
            textAlign: (0, _helpersSegmentMjs.R)(opts.align),
            textBaseline: "middle",
            translation: [
                titleX,
                titleY
            ]
        });
    }
}
function createTitle(chart, titleOpts) {
    const title = new Title({
        ctx: chart.ctx,
        options: titleOpts,
        chart
    });
    layouts.configure(chart, title, titleOpts);
    layouts.addBox(chart, title);
    chart.titleBlock = title;
}
var plugin_title = {
    id: "title",
    _element: Title,
    start (chart, _args, options) {
        createTitle(chart, options);
    },
    stop (chart) {
        const titleBlock = chart.titleBlock;
        layouts.removeBox(chart, titleBlock);
        delete chart.titleBlock;
    },
    beforeUpdate (chart, _args, options) {
        const title = chart.titleBlock;
        layouts.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: "center",
        display: false,
        font: {
            weight: "bold"
        },
        fullSize: true,
        padding: 10,
        position: "top",
        text: "",
        weight: 2000
    },
    defaultRoutes: {
        color: "color"
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};
const map = new WeakMap();
var plugin_subtitle = {
    id: "subtitle",
    start (chart, _args, options) {
        const title = new Title({
            ctx: chart.ctx,
            options,
            chart
        });
        layouts.configure(chart, title, options);
        layouts.addBox(chart, title);
        map.set(chart, title);
    },
    stop (chart) {
        layouts.removeBox(chart, map.get(chart));
        map.delete(chart);
    },
    beforeUpdate (chart, _args, options) {
        const title = map.get(chart);
        layouts.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: "center",
        display: false,
        font: {
            weight: "normal"
        },
        fullSize: true,
        padding: 0,
        position: "top",
        text: "",
        weight: 1500
    },
    defaultRoutes: {
        color: "color"
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};
const positioners = {
    average (items) {
        if (!items.length) return false;
        let i, len;
        let x = 0;
        let y = 0;
        let count = 0;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const pos = el.tooltipPosition();
                x += pos.x;
                y += pos.y;
                ++count;
            }
        }
        return {
            x: x / count,
            y: y / count
        };
    },
    nearest (items, eventPosition) {
        if (!items.length) return false;
        let x = eventPosition.x;
        let y = eventPosition.y;
        let minDistance = Number.POSITIVE_INFINITY;
        let i, len, nearestElement;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const center = el.getCenterPoint();
                const d = (0, _helpersSegmentMjs.aG)(eventPosition, center);
                if (d < minDistance) {
                    minDistance = d;
                    nearestElement = el;
                }
            }
        }
        if (nearestElement) {
            const tp = nearestElement.tooltipPosition();
            x = tp.x;
            y = tp.y;
        }
        return {
            x,
            y
        };
    }
};
function pushOrConcat(base, toPush) {
    if (toPush) {
        if ((0, _helpersSegmentMjs.b)(toPush)) Array.prototype.push.apply(base, toPush);
        else base.push(toPush);
    }
    return base;
}
function splitNewlines(str) {
    if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) return str.split("\n");
    return str;
}
function createTooltipItem(chart, item) {
    const { element, datasetIndex, index } = item;
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    const { label, value } = controller.getLabelAndValue(index);
    return {
        chart,
        label,
        parsed: controller.getParsed(index),
        raw: chart.data.datasets[datasetIndex].data[index],
        formattedValue: value,
        dataset: controller.getDataset(),
        dataIndex: index,
        datasetIndex,
        element
    };
}
function getTooltipSize(tooltip, options) {
    const ctx = tooltip.chart.ctx;
    const { body, footer, title } = tooltip;
    const { boxWidth, boxHeight } = options;
    const bodyFont = (0, _helpersSegmentMjs.O)(options.bodyFont);
    const titleFont = (0, _helpersSegmentMjs.O)(options.titleFont);
    const footerFont = (0, _helpersSegmentMjs.O)(options.footerFont);
    const titleLineCount = title.length;
    const footerLineCount = footer.length;
    const bodyLineItemCount = body.length;
    const padding = (0, _helpersSegmentMjs.K)(options.padding);
    let height = padding.height;
    let width = 0;
    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
    if (titleLineCount) height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
    if (combinedBodyLength) {
        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
    }
    if (footerLineCount) height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
    let widthPadding = 0;
    const maxLineWidth = function(line) {
        width = Math.max(width, ctx.measureText(line).width + widthPadding);
    };
    ctx.save();
    ctx.font = titleFont.string;
    (0, _helpersSegmentMjs.Q)(tooltip.title, maxLineWidth);
    ctx.font = bodyFont.string;
    (0, _helpersSegmentMjs.Q)(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
    (0, _helpersSegmentMjs.Q)(body, (bodyItem)=>{
        (0, _helpersSegmentMjs.Q)(bodyItem.before, maxLineWidth);
        (0, _helpersSegmentMjs.Q)(bodyItem.lines, maxLineWidth);
        (0, _helpersSegmentMjs.Q)(bodyItem.after, maxLineWidth);
    });
    widthPadding = 0;
    ctx.font = footerFont.string;
    (0, _helpersSegmentMjs.Q)(tooltip.footer, maxLineWidth);
    ctx.restore();
    width += padding.width;
    return {
        width,
        height
    };
}
function determineYAlign(chart, size) {
    const { y, height } = size;
    if (y < height / 2) return "top";
    else if (y > chart.height - height / 2) return "bottom";
    return "center";
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
    const { x, width } = size;
    const caret = options.caretSize + options.caretPadding;
    if (xAlign === "left" && x + width + caret > chart.width) return true;
    if (xAlign === "right" && x - width - caret < 0) return true;
}
function determineXAlign(chart, options, size, yAlign) {
    const { x, width } = size;
    const { width: chartWidth, chartArea: { left, right } } = chart;
    let xAlign = "center";
    if (yAlign === "center") xAlign = x <= (left + right) / 2 ? "left" : "right";
    else if (x <= width / 2) xAlign = "left";
    else if (x >= chartWidth - width / 2) xAlign = "right";
    if (doesNotFitWithAlign(xAlign, chart, options, size)) xAlign = "center";
    return xAlign;
}
function determineAlignment(chart, options, size) {
    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
    return {
        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
        yAlign
    };
}
function alignX(size, xAlign) {
    let { x, width } = size;
    if (xAlign === "right") x -= width;
    else if (xAlign === "center") x -= width / 2;
    return x;
}
function alignY(size, yAlign, paddingAndSize) {
    let { y, height } = size;
    if (yAlign === "top") y += paddingAndSize;
    else if (yAlign === "bottom") y -= height + paddingAndSize;
    else y -= height / 2;
    return y;
}
function getBackgroundPoint(options, size, alignment, chart) {
    const { caretSize, caretPadding, cornerRadius } = options;
    const { xAlign, yAlign } = alignment;
    const paddingAndSize = caretSize + caretPadding;
    const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersSegmentMjs.ax)(cornerRadius);
    let x = alignX(size, xAlign);
    const y = alignY(size, yAlign, paddingAndSize);
    if (yAlign === "center") {
        if (xAlign === "left") x += paddingAndSize;
        else if (xAlign === "right") x -= paddingAndSize;
    } else if (xAlign === "left") x -= Math.max(topLeft, bottomLeft) + caretSize;
    else if (xAlign === "right") x += Math.max(topRight, bottomRight) + caretSize;
    return {
        x: (0, _helpersSegmentMjs.E)(x, 0, chart.width - size.width),
        y: (0, _helpersSegmentMjs.E)(y, 0, chart.height - size.height)
    };
}
function getAlignedX(tooltip, align, options) {
    const padding = (0, _helpersSegmentMjs.K)(options.padding);
    return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback) {
    return pushOrConcat([], splitNewlines(callback));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
    return (0, _helpersSegmentMjs.h)(parent, {
        tooltip,
        tooltipItems,
        type: "tooltip"
    });
}
function overrideCallbacks(callbacks, context) {
    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
    return override ? callbacks.override(override) : callbacks;
}
class Tooltip extends Element {
    constructor(config){
        super();
        this.opacity = 0;
        this._active = [];
        this._eventPosition = undefined;
        this._size = undefined;
        this._cachedAnimations = undefined;
        this._tooltipItems = [];
        this.$animations = undefined;
        this.$context = undefined;
        this.chart = config.chart || config._chart;
        this._chart = this.chart;
        this.options = config.options;
        this.dataPoints = undefined;
        this.title = undefined;
        this.beforeBody = undefined;
        this.body = undefined;
        this.afterBody = undefined;
        this.footer = undefined;
        this.xAlign = undefined;
        this.yAlign = undefined;
        this.x = undefined;
        this.y = undefined;
        this.height = undefined;
        this.width = undefined;
        this.caretX = undefined;
        this.caretY = undefined;
        this.labelColors = undefined;
        this.labelPointStyles = undefined;
        this.labelTextColors = undefined;
    }
    initialize(options) {
        this.options = options;
        this._cachedAnimations = undefined;
        this.$context = undefined;
    }
    _resolveAnimations() {
        const cached = this._cachedAnimations;
        if (cached) return cached;
        const chart = this.chart;
        const options = this.options.setContext(this.getContext());
        const opts = options.enabled && chart.options.animation && options.animations;
        const animations = new Animations(this.chart, opts);
        if (opts._cacheable) this._cachedAnimations = Object.freeze(animations);
        return animations;
    }
    getContext() {
        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
    }
    getTitle(context, options) {
        const { callbacks } = options;
        const beforeTitle = callbacks.beforeTitle.apply(this, [
            context
        ]);
        const title = callbacks.title.apply(this, [
            context
        ]);
        const afterTitle = callbacks.afterTitle.apply(this, [
            context
        ]);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
        lines = pushOrConcat(lines, splitNewlines(title));
        lines = pushOrConcat(lines, splitNewlines(afterTitle));
        return lines;
    }
    getBeforeBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [
            tooltipItems
        ]));
    }
    getBody(tooltipItems, options) {
        const { callbacks } = options;
        const bodyItems = [];
        (0, _helpersSegmentMjs.Q)(tooltipItems, (context)=>{
            const bodyItem = {
                before: [],
                lines: [],
                after: []
            };
            const scoped = overrideCallbacks(callbacks, context);
            pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(this, context)));
            pushOrConcat(bodyItem.lines, scoped.label.call(this, context));
            pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(this, context)));
            bodyItems.push(bodyItem);
        });
        return bodyItems;
    }
    getAfterBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [
            tooltipItems
        ]));
    }
    getFooter(tooltipItems, options) {
        const { callbacks } = options;
        const beforeFooter = callbacks.beforeFooter.apply(this, [
            tooltipItems
        ]);
        const footer = callbacks.footer.apply(this, [
            tooltipItems
        ]);
        const afterFooter = callbacks.afterFooter.apply(this, [
            tooltipItems
        ]);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
        lines = pushOrConcat(lines, splitNewlines(footer));
        lines = pushOrConcat(lines, splitNewlines(afterFooter));
        return lines;
    }
    _createItems(options) {
        const active = this._active;
        const data = this.chart.data;
        const labelColors = [];
        const labelPointStyles = [];
        const labelTextColors = [];
        let tooltipItems = [];
        let i, len;
        for(i = 0, len = active.length; i < len; ++i)tooltipItems.push(createTooltipItem(this.chart, active[i]));
        if (options.filter) tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));
        if (options.itemSort) tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));
        (0, _helpersSegmentMjs.Q)(tooltipItems, (context)=>{
            const scoped = overrideCallbacks(options.callbacks, context);
            labelColors.push(scoped.labelColor.call(this, context));
            labelPointStyles.push(scoped.labelPointStyle.call(this, context));
            labelTextColors.push(scoped.labelTextColor.call(this, context));
        });
        this.labelColors = labelColors;
        this.labelPointStyles = labelPointStyles;
        this.labelTextColors = labelTextColors;
        this.dataPoints = tooltipItems;
        return tooltipItems;
    }
    update(changed, replay) {
        const options = this.options.setContext(this.getContext());
        const active = this._active;
        let properties;
        let tooltipItems = [];
        if (!active.length) {
            if (this.opacity !== 0) properties = {
                opacity: 0
            };
        } else {
            const position = positioners[options.position].call(this, active, this._eventPosition);
            tooltipItems = this._createItems(options);
            this.title = this.getTitle(tooltipItems, options);
            this.beforeBody = this.getBeforeBody(tooltipItems, options);
            this.body = this.getBody(tooltipItems, options);
            this.afterBody = this.getAfterBody(tooltipItems, options);
            this.footer = this.getFooter(tooltipItems, options);
            const size = this._size = getTooltipSize(this, options);
            const positionAndSize = Object.assign({}, position, size);
            const alignment = determineAlignment(this.chart, options, positionAndSize);
            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
            this.xAlign = alignment.xAlign;
            this.yAlign = alignment.yAlign;
            properties = {
                opacity: 1,
                x: backgroundPoint.x,
                y: backgroundPoint.y,
                width: size.width,
                height: size.height,
                caretX: position.x,
                caretY: position.y
            };
        }
        this._tooltipItems = tooltipItems;
        this.$context = undefined;
        if (properties) this._resolveAnimations().update(this, properties);
        if (changed && options.external) options.external.call(this, {
            chart: this.chart,
            tooltip: this,
            replay
        });
    }
    drawCaret(tooltipPoint, ctx, size, options) {
        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
        ctx.lineTo(caretPosition.x1, caretPosition.y1);
        ctx.lineTo(caretPosition.x2, caretPosition.y2);
        ctx.lineTo(caretPosition.x3, caretPosition.y3);
    }
    getCaretPosition(tooltipPoint, size, options) {
        const { xAlign, yAlign } = this;
        const { caretSize, cornerRadius } = options;
        const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersSegmentMjs.ax)(cornerRadius);
        const { x: ptX, y: ptY } = tooltipPoint;
        const { width, height } = size;
        let x1, x2, x3, y1, y2, y3;
        if (yAlign === "center") {
            y2 = ptY + height / 2;
            if (xAlign === "left") {
                x1 = ptX;
                x2 = x1 - caretSize;
                y1 = y2 + caretSize;
                y3 = y2 - caretSize;
            } else {
                x1 = ptX + width;
                x2 = x1 + caretSize;
                y1 = y2 - caretSize;
                y3 = y2 + caretSize;
            }
            x3 = x1;
        } else {
            if (xAlign === "left") x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
            else if (xAlign === "right") x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
            else x2 = this.caretX;
            if (yAlign === "top") {
                y1 = ptY;
                y2 = y1 - caretSize;
                x1 = x2 - caretSize;
                x3 = x2 + caretSize;
            } else {
                y1 = ptY + height;
                y2 = y1 + caretSize;
                x1 = x2 + caretSize;
                x3 = x2 - caretSize;
            }
            y3 = y1;
        }
        return {
            x1,
            x2,
            x3,
            y1,
            y2,
            y3
        };
    }
    drawTitle(pt, ctx, options) {
        const title = this.title;
        const length = title.length;
        let titleFont, titleSpacing, i;
        if (length) {
            const rtlHelper = (0, _helpersSegmentMjs.aA)(options.rtl, this.x, this.width);
            pt.x = getAlignedX(this, options.titleAlign, options);
            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
            ctx.textBaseline = "middle";
            titleFont = (0, _helpersSegmentMjs.O)(options.titleFont);
            titleSpacing = options.titleSpacing;
            ctx.fillStyle = options.titleColor;
            ctx.font = titleFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
                pt.y += titleFont.lineHeight + titleSpacing;
                if (i + 1 === length) pt.y += options.titleMarginBottom - titleSpacing;
            }
        }
    }
    _drawColorBox(ctx, pt, i, rtlHelper, options) {
        const labelColors = this.labelColors[i];
        const labelPointStyle = this.labelPointStyles[i];
        const { boxHeight, boxWidth, boxPadding } = options;
        const bodyFont = (0, _helpersSegmentMjs.O)(options.bodyFont);
        const colorX = getAlignedX(this, "left", options);
        const rtlColorX = rtlHelper.x(colorX);
        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
        const colorY = pt.y + yOffSet;
        if (options.usePointStyle) {
            const drawOptions = {
                radius: Math.min(boxWidth, boxHeight) / 2,
                pointStyle: labelPointStyle.pointStyle,
                rotation: labelPointStyle.rotation,
                borderWidth: 1
            };
            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
            const centerY = colorY + boxHeight / 2;
            ctx.strokeStyle = options.multiKeyBackground;
            ctx.fillStyle = options.multiKeyBackground;
            (0, _helpersSegmentMjs.au)(ctx, drawOptions, centerX, centerY);
            ctx.strokeStyle = labelColors.borderColor;
            ctx.fillStyle = labelColors.backgroundColor;
            (0, _helpersSegmentMjs.au)(ctx, drawOptions, centerX, centerY);
        } else {
            ctx.lineWidth = (0, _helpersSegmentMjs.i)(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;
            ctx.strokeStyle = labelColors.borderColor;
            ctx.setLineDash(labelColors.borderDash || []);
            ctx.lineDashOffset = labelColors.borderDashOffset || 0;
            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);
            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);
            const borderRadius = (0, _helpersSegmentMjs.ax)(labelColors.borderRadius);
            if (Object.values(borderRadius).some((v)=>v !== 0)) {
                ctx.beginPath();
                ctx.fillStyle = options.multiKeyBackground;
                (0, _helpersSegmentMjs.av)(ctx, {
                    x: outerX,
                    y: colorY,
                    w: boxWidth,
                    h: boxHeight,
                    radius: borderRadius
                });
                ctx.fill();
                ctx.stroke();
                ctx.fillStyle = labelColors.backgroundColor;
                ctx.beginPath();
                (0, _helpersSegmentMjs.av)(ctx, {
                    x: innerX,
                    y: colorY + 1,
                    w: boxWidth - 2,
                    h: boxHeight - 2,
                    radius: borderRadius
                });
                ctx.fill();
            } else {
                ctx.fillStyle = options.multiKeyBackground;
                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
                ctx.fillStyle = labelColors.backgroundColor;
                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
            }
        }
        ctx.fillStyle = this.labelTextColors[i];
    }
    drawBody(pt, ctx, options) {
        const { body } = this;
        const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options;
        const bodyFont = (0, _helpersSegmentMjs.O)(options.bodyFont);
        let bodyLineHeight = bodyFont.lineHeight;
        let xLinePadding = 0;
        const rtlHelper = (0, _helpersSegmentMjs.aA)(options.rtl, this.x, this.width);
        const fillLineOfText = function(line) {
            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
            pt.y += bodyLineHeight + bodySpacing;
        };
        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
        let bodyItem, textColor, lines, i, j, ilen, jlen;
        ctx.textAlign = bodyAlign;
        ctx.textBaseline = "middle";
        ctx.font = bodyFont.string;
        pt.x = getAlignedX(this, bodyAlignForCalculation, options);
        ctx.fillStyle = options.bodyColor;
        (0, _helpersSegmentMjs.Q)(this.beforeBody, fillLineOfText);
        xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
        for(i = 0, ilen = body.length; i < ilen; ++i){
            bodyItem = body[i];
            textColor = this.labelTextColors[i];
            ctx.fillStyle = textColor;
            (0, _helpersSegmentMjs.Q)(bodyItem.before, fillLineOfText);
            lines = bodyItem.lines;
            if (displayColors && lines.length) {
                this._drawColorBox(ctx, pt, i, rtlHelper, options);
                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
            }
            for(j = 0, jlen = lines.length; j < jlen; ++j){
                fillLineOfText(lines[j]);
                bodyLineHeight = bodyFont.lineHeight;
            }
            (0, _helpersSegmentMjs.Q)(bodyItem.after, fillLineOfText);
        }
        xLinePadding = 0;
        bodyLineHeight = bodyFont.lineHeight;
        (0, _helpersSegmentMjs.Q)(this.afterBody, fillLineOfText);
        pt.y -= bodySpacing;
    }
    drawFooter(pt, ctx, options) {
        const footer = this.footer;
        const length = footer.length;
        let footerFont, i;
        if (length) {
            const rtlHelper = (0, _helpersSegmentMjs.aA)(options.rtl, this.x, this.width);
            pt.x = getAlignedX(this, options.footerAlign, options);
            pt.y += options.footerMarginTop;
            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
            ctx.textBaseline = "middle";
            footerFont = (0, _helpersSegmentMjs.O)(options.footerFont);
            ctx.fillStyle = options.footerColor;
            ctx.font = footerFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
                pt.y += footerFont.lineHeight + options.footerSpacing;
            }
        }
    }
    drawBackground(pt, ctx, tooltipSize, options) {
        const { xAlign, yAlign } = this;
        const { x, y } = pt;
        const { width, height } = tooltipSize;
        const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersSegmentMjs.ax)(options.cornerRadius);
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.beginPath();
        ctx.moveTo(x + topLeft, y);
        if (yAlign === "top") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + width - topRight, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
        if (yAlign === "center" && xAlign === "right") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + width, y + height - bottomRight);
        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
        if (yAlign === "bottom") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + bottomLeft, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
        if (yAlign === "center" && xAlign === "left") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x, y + topLeft);
        ctx.quadraticCurveTo(x, y, x + topLeft, y);
        ctx.closePath();
        ctx.fill();
        if (options.borderWidth > 0) ctx.stroke();
    }
    _updateAnimationTarget(options) {
        const chart = this.chart;
        const anims = this.$animations;
        const animX = anims && anims.x;
        const animY = anims && anims.y;
        if (animX || animY) {
            const position = positioners[options.position].call(this, this._active, this._eventPosition);
            if (!position) return;
            const size = this._size = getTooltipSize(this, options);
            const positionAndSize = Object.assign({}, position, this._size);
            const alignment = determineAlignment(chart, options, positionAndSize);
            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
            if (animX._to !== point.x || animY._to !== point.y) {
                this.xAlign = alignment.xAlign;
                this.yAlign = alignment.yAlign;
                this.width = size.width;
                this.height = size.height;
                this.caretX = position.x;
                this.caretY = position.y;
                this._resolveAnimations().update(this, point);
            }
        }
    }
    _willRender() {
        return !!this.opacity;
    }
    draw(ctx) {
        const options = this.options.setContext(this.getContext());
        let opacity = this.opacity;
        if (!opacity) return;
        this._updateAnimationTarget(options);
        const tooltipSize = {
            width: this.width,
            height: this.height
        };
        const pt = {
            x: this.x,
            y: this.y
        };
        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
        const padding = (0, _helpersSegmentMjs.K)(options.padding);
        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
        if (options.enabled && hasTooltipContent) {
            ctx.save();
            ctx.globalAlpha = opacity;
            this.drawBackground(pt, ctx, tooltipSize, options);
            (0, _helpersSegmentMjs.aB)(ctx, options.textDirection);
            pt.y += padding.top;
            this.drawTitle(pt, ctx, options);
            this.drawBody(pt, ctx, options);
            this.drawFooter(pt, ctx, options);
            (0, _helpersSegmentMjs.aD)(ctx, options.textDirection);
            ctx.restore();
        }
    }
    getActiveElements() {
        return this._active || [];
    }
    setActiveElements(activeElements, eventPosition) {
        const lastActive = this._active;
        const active = activeElements.map(({ datasetIndex, index })=>{
            const meta = this.chart.getDatasetMeta(datasetIndex);
            if (!meta) throw new Error("Cannot find a dataset at index " + datasetIndex);
            return {
                datasetIndex,
                element: meta.data[index],
                index
            };
        });
        const changed = !(0, _helpersSegmentMjs.ai)(lastActive, active);
        const positionChanged = this._positionChanged(active, eventPosition);
        if (changed || positionChanged) {
            this._active = active;
            this._eventPosition = eventPosition;
            this._ignoreReplayEvents = true;
            this.update(true);
        }
    }
    handleEvent(e, replay, inChartArea = true) {
        if (replay && this._ignoreReplayEvents) return false;
        this._ignoreReplayEvents = false;
        const options = this.options;
        const lastActive = this._active || [];
        const active = this._getActiveElements(e, lastActive, replay, inChartArea);
        const positionChanged = this._positionChanged(active, e);
        const changed = replay || !(0, _helpersSegmentMjs.ai)(active, lastActive) || positionChanged;
        if (changed) {
            this._active = active;
            if (options.enabled || options.external) {
                this._eventPosition = {
                    x: e.x,
                    y: e.y
                };
                this.update(true, replay);
            }
        }
        return changed;
    }
    _getActiveElements(e, lastActive, replay, inChartArea) {
        const options = this.options;
        if (e.type === "mouseout") return [];
        if (!inChartArea) return lastActive;
        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
        if (options.reverse) active.reverse();
        return active;
    }
    _positionChanged(active, e) {
        const { caretX, caretY, options } = this;
        const position = positioners[options.position].call(this, active, e);
        return position !== false && (caretX !== position.x || caretY !== position.y);
    }
}
Tooltip.positioners = positioners;
var plugin_tooltip = {
    id: "tooltip",
    _element: Tooltip,
    positioners,
    afterInit (chart, _args, options) {
        if (options) chart.tooltip = new Tooltip({
            chart,
            options
        });
    },
    beforeUpdate (chart, _args, options) {
        if (chart.tooltip) chart.tooltip.initialize(options);
    },
    reset (chart, _args, options) {
        if (chart.tooltip) chart.tooltip.initialize(options);
    },
    afterDraw (chart) {
        const tooltip = chart.tooltip;
        if (tooltip && tooltip._willRender()) {
            const args = {
                tooltip
            };
            if (chart.notifyPlugins("beforeTooltipDraw", args) === false) return;
            tooltip.draw(chart.ctx);
            chart.notifyPlugins("afterTooltipDraw", args);
        }
    },
    afterEvent (chart, args) {
        if (chart.tooltip) {
            const useFinalPosition = args.replay;
            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) args.changed = true;
        }
    },
    defaults: {
        enabled: true,
        external: null,
        position: "average",
        backgroundColor: "rgba(0,0,0,0.8)",
        titleColor: "#fff",
        titleFont: {
            weight: "bold"
        },
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleAlign: "left",
        bodyColor: "#fff",
        bodySpacing: 2,
        bodyFont: {},
        bodyAlign: "left",
        footerColor: "#fff",
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFont: {
            weight: "bold"
        },
        footerAlign: "left",
        padding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        boxHeight: (ctx, opts)=>opts.bodyFont.size,
        boxWidth: (ctx, opts)=>opts.bodyFont.size,
        multiKeyBackground: "#fff",
        displayColors: true,
        boxPadding: 0,
        borderColor: "rgba(0,0,0,0)",
        borderWidth: 0,
        animation: {
            duration: 400,
            easing: "easeOutQuart"
        },
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "width",
                    "height",
                    "caretX",
                    "caretY"
                ]
            },
            opacity: {
                easing: "linear",
                duration: 200
            }
        },
        callbacks: {
            beforeTitle: (0, _helpersSegmentMjs.aF),
            title (tooltipItems) {
                if (tooltipItems.length > 0) {
                    const item = tooltipItems[0];
                    const labels = item.chart.data.labels;
                    const labelCount = labels ? labels.length : 0;
                    if (this && this.options && this.options.mode === "dataset") return item.dataset.label || "";
                    else if (item.label) return item.label;
                    else if (labelCount > 0 && item.dataIndex < labelCount) return labels[item.dataIndex];
                }
                return "";
            },
            afterTitle: (0, _helpersSegmentMjs.aF),
            beforeBody: (0, _helpersSegmentMjs.aF),
            beforeLabel: (0, _helpersSegmentMjs.aF),
            label (tooltipItem) {
                if (this && this.options && this.options.mode === "dataset") return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
                let label = tooltipItem.dataset.label || "";
                if (label) label += ": ";
                const value = tooltipItem.formattedValue;
                if (!(0, _helpersSegmentMjs.k)(value)) label += value;
                return label;
            },
            labelColor (tooltipItem) {
                const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
                const options = meta.controller.getStyle(tooltipItem.dataIndex);
                return {
                    borderColor: options.borderColor,
                    backgroundColor: options.backgroundColor,
                    borderWidth: options.borderWidth,
                    borderDash: options.borderDash,
                    borderDashOffset: options.borderDashOffset,
                    borderRadius: 0
                };
            },
            labelTextColor () {
                return this.options.bodyColor;
            },
            labelPointStyle (tooltipItem) {
                const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
                const options = meta.controller.getStyle(tooltipItem.dataIndex);
                return {
                    pointStyle: options.pointStyle,
                    rotation: options.rotation
                };
            },
            afterLabel: (0, _helpersSegmentMjs.aF),
            afterBody: (0, _helpersSegmentMjs.aF),
            beforeFooter: (0, _helpersSegmentMjs.aF),
            footer: (0, _helpersSegmentMjs.aF),
            afterFooter: (0, _helpersSegmentMjs.aF)
        }
    },
    defaultRoutes: {
        bodyFont: "font",
        footerFont: "font",
        titleFont: "font"
    },
    descriptors: {
        _scriptable: (name)=>name !== "filter" && name !== "itemSort" && name !== "external",
        _indexable: false,
        callbacks: {
            _scriptable: false,
            _indexable: false
        },
        animation: {
            _fallback: false
        },
        animations: {
            _fallback: "animation"
        }
    },
    additionalOptionScopes: [
        "interaction"
    ]
};
var plugins = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    Decimation: plugin_decimation,
    Filler: index,
    Legend: plugin_legend,
    SubTitle: plugin_subtitle,
    Title: plugin_title,
    Tooltip: plugin_tooltip
});
const addIfString = (labels, raw, index, addedLabels)=>{
    if (typeof raw === "string") {
        index = labels.push(raw) - 1;
        addedLabels.unshift({
            index,
            label: raw
        });
    } else if (isNaN(raw)) index = null;
    return index;
};
function findOrAddLabel(labels, raw, index, addedLabels) {
    const first = labels.indexOf(raw);
    if (first === -1) return addIfString(labels, raw, index, addedLabels);
    const last = labels.lastIndexOf(raw);
    return first !== last ? index : first;
}
const validIndex = (index, max)=>index === null ? null : (0, _helpersSegmentMjs.E)(Math.round(index), 0, max);
class CategoryScale extends Scale {
    constructor(cfg){
        super(cfg);
        this._startValue = undefined;
        this._valueRange = 0;
        this._addedLabels = [];
    }
    init(scaleOptions) {
        const added = this._addedLabels;
        if (added.length) {
            const labels = this.getLabels();
            for (const { index, label } of added)if (labels[index] === label) labels.splice(index, 1);
            this._addedLabels = [];
        }
        super.init(scaleOptions);
    }
    parse(raw, index) {
        if ((0, _helpersSegmentMjs.k)(raw)) return null;
        const labels = this.getLabels();
        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, (0, _helpersSegmentMjs.v)(index, raw), this._addedLabels);
        return validIndex(index, labels.length - 1);
    }
    determineDataLimits() {
        const { minDefined, maxDefined } = this.getUserBounds();
        let { min, max } = this.getMinMax(true);
        if (this.options.bounds === "ticks") {
            if (!minDefined) min = 0;
            if (!maxDefined) max = this.getLabels().length - 1;
        }
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const min = this.min;
        const max = this.max;
        const offset = this.options.offset;
        const ticks = [];
        let labels = this.getLabels();
        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
        this._startValue = this.min - (offset ? 0.5 : 0);
        for(let value = min; value <= max; value++)ticks.push({
            value
        });
        return ticks;
    }
    getLabelForValue(value) {
        const labels = this.getLabels();
        if (value >= 0 && value < labels.length) return labels[value];
        return value;
    }
    configure() {
        super.configure();
        if (!this.isHorizontal()) this._reversePixels = !this._reversePixels;
    }
    getPixelForValue(value) {
        if (typeof value !== "number") value = this.parse(value);
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) return null;
        return this.getPixelForValue(ticks[index].value);
    }
    getValueForPixel(pixel) {
        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
    }
    getBasePixel() {
        return this.bottom;
    }
}
CategoryScale.id = "category";
CategoryScale.defaults = {
    ticks: {
        callback: CategoryScale.prototype.getLabelForValue
    }
};
function generateTicks$1(generationOptions, dataRange) {
    const ticks = [];
    const MIN_SPACING = 1e-14;
    const { bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
    const unit = step || 1;
    const maxSpaces = maxTicks - 1;
    const { min: rmin, max: rmax } = dataRange;
    const minDefined = !(0, _helpersSegmentMjs.k)(min);
    const maxDefined = !(0, _helpersSegmentMjs.k)(max);
    const countDefined = !(0, _helpersSegmentMjs.k)(count);
    const minSpacing = (rmax - rmin) / (maxDigits + 1);
    let spacing = (0, _helpersSegmentMjs.aI)((rmax - rmin) / maxSpaces / unit) * unit;
    let factor, niceMin, niceMax, numSpaces;
    if (spacing < MIN_SPACING && !minDefined && !maxDefined) return [
        {
            value: rmin
        },
        {
            value: rmax
        }
    ];
    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
    if (numSpaces > maxSpaces) spacing = (0, _helpersSegmentMjs.aI)(numSpaces * spacing / maxSpaces / unit) * unit;
    if (!(0, _helpersSegmentMjs.k)(precision)) {
        factor = Math.pow(10, precision);
        spacing = Math.ceil(spacing * factor) / factor;
    }
    if (bounds === "ticks") {
        niceMin = Math.floor(rmin / spacing) * spacing;
        niceMax = Math.ceil(rmax / spacing) * spacing;
    } else {
        niceMin = rmin;
        niceMax = rmax;
    }
    if (minDefined && maxDefined && step && (0, _helpersSegmentMjs.aJ)((max - min) / step, spacing / 1000)) {
        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
        spacing = (max - min) / numSpaces;
        niceMin = min;
        niceMax = max;
    } else if (countDefined) {
        niceMin = minDefined ? min : niceMin;
        niceMax = maxDefined ? max : niceMax;
        numSpaces = count - 1;
        spacing = (niceMax - niceMin) / numSpaces;
    } else {
        numSpaces = (niceMax - niceMin) / spacing;
        if ((0, _helpersSegmentMjs.aK)(numSpaces, Math.round(numSpaces), spacing / 1000)) numSpaces = Math.round(numSpaces);
        else numSpaces = Math.ceil(numSpaces);
    }
    const decimalPlaces = Math.max((0, _helpersSegmentMjs.aL)(spacing), (0, _helpersSegmentMjs.aL)(niceMin));
    factor = Math.pow(10, (0, _helpersSegmentMjs.k)(precision) ? decimalPlaces : precision);
    niceMin = Math.round(niceMin * factor) / factor;
    niceMax = Math.round(niceMax * factor) / factor;
    let j = 0;
    if (minDefined) {
        if (includeBounds && niceMin !== min) {
            ticks.push({
                value: min
            });
            if (niceMin < min) j++;
            if ((0, _helpersSegmentMjs.aK)(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) j++;
        } else if (niceMin < min) j++;
    }
    for(; j < numSpaces; ++j)ticks.push({
        value: Math.round((niceMin + j * spacing) * factor) / factor
    });
    if (maxDefined && includeBounds && niceMax !== max) {
        if (ticks.length && (0, _helpersSegmentMjs.aK)(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) ticks[ticks.length - 1].value = max;
        else ticks.push({
            value: max
        });
    } else if (!maxDefined || niceMax === max) ticks.push({
        value: niceMax
    });
    return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
    const rad = (0, _helpersSegmentMjs.t)(minRotation);
    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
    const length = 0.75 * minSpacing * ("" + value).length;
    return Math.min(minSpacing / ratio, length);
}
class LinearScaleBase extends Scale {
    constructor(cfg){
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._endValue = undefined;
        this._valueRange = 0;
    }
    parse(raw, index) {
        if ((0, _helpersSegmentMjs.k)(raw)) return null;
        if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) return null;
        return +raw;
    }
    handleTickRangeOptions() {
        const { beginAtZero } = this.options;
        const { minDefined, maxDefined } = this.getUserBounds();
        let { min, max } = this;
        const setMin = (v)=>min = minDefined ? min : v;
        const setMax = (v)=>max = maxDefined ? max : v;
        if (beginAtZero) {
            const minSign = (0, _helpersSegmentMjs.s)(min);
            const maxSign = (0, _helpersSegmentMjs.s)(max);
            if (minSign < 0 && maxSign < 0) setMax(0);
            else if (minSign > 0 && maxSign > 0) setMin(0);
        }
        if (min === max) {
            let offset = 1;
            if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) offset = Math.abs(max * 0.05);
            setMax(max + offset);
            if (!beginAtZero) setMin(min - offset);
        }
        this.min = min;
        this.max = max;
    }
    getTickLimit() {
        const tickOpts = this.options.ticks;
        let { maxTicksLimit, stepSize } = tickOpts;
        let maxTicks;
        if (stepSize) {
            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
            if (maxTicks > 1000) {
                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
                maxTicks = 1000;
            }
        } else {
            maxTicks = this.computeTickLimit();
            maxTicksLimit = maxTicksLimit || 11;
        }
        if (maxTicksLimit) maxTicks = Math.min(maxTicksLimit, maxTicks);
        return maxTicks;
    }
    computeTickLimit() {
        return Number.POSITIVE_INFINITY;
    }
    buildTicks() {
        const opts = this.options;
        const tickOpts = opts.ticks;
        let maxTicks = this.getTickLimit();
        maxTicks = Math.max(2, maxTicks);
        const numericGeneratorOptions = {
            maxTicks,
            bounds: opts.bounds,
            min: opts.min,
            max: opts.max,
            precision: tickOpts.precision,
            step: tickOpts.stepSize,
            count: tickOpts.count,
            maxDigits: this._maxDigits(),
            horizontal: this.isHorizontal(),
            minRotation: tickOpts.minRotation || 0,
            includeBounds: tickOpts.includeBounds !== false
        };
        const dataRange = this._range || this;
        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
        if (opts.bounds === "ticks") (0, _helpersSegmentMjs.aH)(ticks, this, "value");
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
    configure() {
        const ticks = this.ticks;
        let start = this.min;
        let end = this.max;
        super.configure();
        if (this.options.offset && ticks.length) {
            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
            start -= offset;
            end += offset;
        }
        this._startValue = start;
        this._endValue = end;
        this._valueRange = end - start;
    }
    getLabelForValue(value) {
        return (0, _helpersSegmentMjs.o)(value, this.chart.options.locale, this.options.ticks.format);
    }
}
class LinearScale extends LinearScaleBase {
    determineDataLimits() {
        const { min, max } = this.getMinMax(true);
        this.min = (0, _helpersSegmentMjs.g)(min) ? min : 0;
        this.max = (0, _helpersSegmentMjs.g)(max) ? max : 1;
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
        const horizontal = this.isHorizontal();
        const length = horizontal ? this.width : this.height;
        const minRotation = (0, _helpersSegmentMjs.t)(this.options.ticks.minRotation);
        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
        const tickFont = this._resolveTickFontOptions(0);
        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
    }
    getPixelForValue(value) {
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
    }
}
LinearScale.id = "linear";
LinearScale.defaults = {
    ticks: {
        callback: Ticks.formatters.numeric
    }
};
function isMajor(tickVal) {
    const remain = tickVal / Math.pow(10, Math.floor((0, _helpersSegmentMjs.z)(tickVal)));
    return remain === 1;
}
function generateTicks(generationOptions, dataRange) {
    const endExp = Math.floor((0, _helpersSegmentMjs.z)(dataRange.max));
    const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
    const ticks = [];
    let tickVal = (0, _helpersSegmentMjs.B)(generationOptions.min, Math.pow(10, Math.floor((0, _helpersSegmentMjs.z)(dataRange.min))));
    let exp = Math.floor((0, _helpersSegmentMjs.z)(tickVal));
    let significand = Math.floor(tickVal / Math.pow(10, exp));
    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
    do {
        ticks.push({
            value: tickVal,
            major: isMajor(tickVal)
        });
        ++significand;
        if (significand === 10) {
            significand = 1;
            ++exp;
            precision = exp >= 0 ? 1 : precision;
        }
        tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
    }while (exp < endExp || exp === endExp && significand < endSignificand);
    const lastTick = (0, _helpersSegmentMjs.B)(generationOptions.max, tickVal);
    ticks.push({
        value: lastTick,
        major: isMajor(tickVal)
    });
    return ticks;
}
class LogarithmicScale extends Scale {
    constructor(cfg){
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._valueRange = 0;
    }
    parse(raw, index) {
        const value = LinearScaleBase.prototype.parse.apply(this, [
            raw,
            index
        ]);
        if (value === 0) {
            this._zero = true;
            return undefined;
        }
        return (0, _helpersSegmentMjs.g)(value) && value > 0 ? value : null;
    }
    determineDataLimits() {
        const { min, max } = this.getMinMax(true);
        this.min = (0, _helpersSegmentMjs.g)(min) ? Math.max(0, min) : null;
        this.max = (0, _helpersSegmentMjs.g)(max) ? Math.max(0, max) : null;
        if (this.options.beginAtZero) this._zero = true;
        this.handleTickRangeOptions();
    }
    handleTickRangeOptions() {
        const { minDefined, maxDefined } = this.getUserBounds();
        let min = this.min;
        let max = this.max;
        const setMin = (v)=>min = minDefined ? min : v;
        const setMax = (v)=>max = maxDefined ? max : v;
        const exp = (v, m)=>Math.pow(10, Math.floor((0, _helpersSegmentMjs.z)(v)) + m);
        if (min === max) {
            if (min <= 0) {
                setMin(1);
                setMax(10);
            } else {
                setMin(exp(min, -1));
                setMax(exp(max, 1));
            }
        }
        if (min <= 0) setMin(exp(max, -1));
        if (max <= 0) setMax(exp(min, 1));
        if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) setMin(exp(min, -1));
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const opts = this.options;
        const generationOptions = {
            min: this._userMin,
            max: this._userMax
        };
        const ticks = generateTicks(generationOptions, this);
        if (opts.bounds === "ticks") (0, _helpersSegmentMjs.aH)(ticks, this, "value");
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
    getLabelForValue(value) {
        return value === undefined ? "0" : (0, _helpersSegmentMjs.o)(value, this.chart.options.locale, this.options.ticks.format);
    }
    configure() {
        const start = this.min;
        super.configure();
        this._startValue = (0, _helpersSegmentMjs.z)(start);
        this._valueRange = (0, _helpersSegmentMjs.z)(this.max) - (0, _helpersSegmentMjs.z)(start);
    }
    getPixelForValue(value) {
        if (value === undefined || value === 0) value = this.min;
        if (value === null || isNaN(value)) return NaN;
        return this.getPixelForDecimal(value === this.min ? 0 : ((0, _helpersSegmentMjs.z)(value) - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        const decimal = this.getDecimalForPixel(pixel);
        return Math.pow(10, this._startValue + decimal * this._valueRange);
    }
}
LogarithmicScale.id = "logarithmic";
LogarithmicScale.defaults = {
    ticks: {
        callback: Ticks.formatters.logarithmic,
        major: {
            enabled: true
        }
    }
};
function getTickBackdropHeight(opts) {
    const tickOpts = opts.ticks;
    if (tickOpts.display && opts.display) {
        const padding = (0, _helpersSegmentMjs.K)(tickOpts.backdropPadding);
        return (0, _helpersSegmentMjs.v)(tickOpts.font && tickOpts.font.size, (0, _helpersSegmentMjs.d).font.size) + padding.height;
    }
    return 0;
}
function measureLabelSize(ctx, font, label) {
    label = (0, _helpersSegmentMjs.b)(label) ? label : [
        label
    ];
    return {
        w: (0, _helpersSegmentMjs.aM)(ctx, font.string, label),
        h: label.length * font.lineHeight
    };
}
function determineLimits(angle, pos, size, min, max) {
    if (angle === min || angle === max) return {
        start: pos - size / 2,
        end: pos + size / 2
    };
    else if (angle < min || angle > max) return {
        start: pos - size,
        end: pos
    };
    return {
        start: pos,
        end: pos + size
    };
}
function fitWithPointLabels(scale) {
    const orig = {
        l: scale.left + scale._padding.left,
        r: scale.right - scale._padding.right,
        t: scale.top + scale._padding.top,
        b: scale.bottom - scale._padding.bottom
    };
    const limits = Object.assign({}, orig);
    const labelSizes = [];
    const padding = [];
    const valueCount = scale._pointLabels.length;
    const pointLabelOpts = scale.options.pointLabels;
    const additionalAngle = pointLabelOpts.centerPointLabels ? (0, _helpersSegmentMjs.P) / valueCount : 0;
    for(let i = 0; i < valueCount; i++){
        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
        padding[i] = opts.padding;
        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
        const plFont = (0, _helpersSegmentMjs.O)(opts.font);
        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
        labelSizes[i] = textSize;
        const angleRadians = (0, _helpersSegmentMjs.az)(scale.getIndexAngle(i) + additionalAngle);
        const angle = Math.round((0, _helpersSegmentMjs.F)(angleRadians));
        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
        updateLimits(limits, orig, angleRadians, hLimits, vLimits);
    }
    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
    const sin = Math.abs(Math.sin(angle));
    const cos = Math.abs(Math.cos(angle));
    let x = 0;
    let y = 0;
    if (hLimits.start < orig.l) {
        x = (orig.l - hLimits.start) / sin;
        limits.l = Math.min(limits.l, orig.l - x);
    } else if (hLimits.end > orig.r) {
        x = (hLimits.end - orig.r) / sin;
        limits.r = Math.max(limits.r, orig.r + x);
    }
    if (vLimits.start < orig.t) {
        y = (orig.t - vLimits.start) / cos;
        limits.t = Math.min(limits.t, orig.t - y);
    } else if (vLimits.end > orig.b) {
        y = (vLimits.end - orig.b) / cos;
        limits.b = Math.max(limits.b, orig.b + y);
    }
}
function buildPointLabelItems(scale, labelSizes, padding) {
    const items = [];
    const valueCount = scale._pointLabels.length;
    const opts = scale.options;
    const extra = getTickBackdropHeight(opts) / 2;
    const outerDistance = scale.drawingArea;
    const additionalAngle = opts.pointLabels.centerPointLabels ? (0, _helpersSegmentMjs.P) / valueCount : 0;
    for(let i = 0; i < valueCount; i++){
        const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);
        const angle = Math.round((0, _helpersSegmentMjs.F)((0, _helpersSegmentMjs.az)(pointLabelPosition.angle + (0, _helpersSegmentMjs.H))));
        const size = labelSizes[i];
        const y = yForAngle(pointLabelPosition.y, size.h, angle);
        const textAlign = getTextAlignForAngle(angle);
        const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
        items.push({
            x: pointLabelPosition.x,
            y,
            textAlign,
            left,
            top: y,
            right: left + size.w,
            bottom: y + size.h
        });
    }
    return items;
}
function getTextAlignForAngle(angle) {
    if (angle === 0 || angle === 180) return "center";
    else if (angle < 180) return "left";
    return "right";
}
function leftForTextAlign(x, w, align) {
    if (align === "right") x -= w;
    else if (align === "center") x -= w / 2;
    return x;
}
function yForAngle(y, h, angle) {
    if (angle === 90 || angle === 270) y -= h / 2;
    else if (angle > 270 || angle < 90) y -= h;
    return y;
}
function drawPointLabels(scale, labelCount) {
    const { ctx, options: { pointLabels } } = scale;
    for(let i = labelCount - 1; i >= 0; i--){
        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
        const plFont = (0, _helpersSegmentMjs.O)(optsAtIndex.font);
        const { x, y, textAlign, left, top, right, bottom } = scale._pointLabelItems[i];
        const { backdropColor } = optsAtIndex;
        if (!(0, _helpersSegmentMjs.k)(backdropColor)) {
            const borderRadius = (0, _helpersSegmentMjs.ax)(optsAtIndex.borderRadius);
            const padding = (0, _helpersSegmentMjs.K)(optsAtIndex.backdropPadding);
            ctx.fillStyle = backdropColor;
            const backdropLeft = left - padding.left;
            const backdropTop = top - padding.top;
            const backdropWidth = right - left + padding.width;
            const backdropHeight = bottom - top + padding.height;
            if (Object.values(borderRadius).some((v)=>v !== 0)) {
                ctx.beginPath();
                (0, _helpersSegmentMjs.av)(ctx, {
                    x: backdropLeft,
                    y: backdropTop,
                    w: backdropWidth,
                    h: backdropHeight,
                    radius: borderRadius
                });
                ctx.fill();
            } else ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
        }
        (0, _helpersSegmentMjs.M)(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
            color: optsAtIndex.color,
            textAlign: textAlign,
            textBaseline: "middle"
        });
    }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
    const { ctx } = scale;
    if (circular) ctx.arc(scale.xCenter, scale.yCenter, radius, 0, (0, _helpersSegmentMjs.T));
    else {
        let pointPosition = scale.getPointPosition(0, radius);
        ctx.moveTo(pointPosition.x, pointPosition.y);
        for(let i = 1; i < labelCount; i++){
            pointPosition = scale.getPointPosition(i, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
        }
    }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount) {
    const ctx = scale.ctx;
    const circular = gridLineOpts.circular;
    const { color, lineWidth } = gridLineOpts;
    if (!circular && !labelCount || !color || !lineWidth || radius < 0) return;
    ctx.save();
    ctx.strokeStyle = color;
    ctx.lineWidth = lineWidth;
    ctx.setLineDash(gridLineOpts.borderDash);
    ctx.lineDashOffset = gridLineOpts.borderDashOffset;
    ctx.beginPath();
    pathRadiusLine(scale, radius, circular, labelCount);
    ctx.closePath();
    ctx.stroke();
    ctx.restore();
}
function createPointLabelContext(parent, index, label) {
    return (0, _helpersSegmentMjs.h)(parent, {
        label,
        index,
        type: "pointLabel"
    });
}
class RadialLinearScale extends LinearScaleBase {
    constructor(cfg){
        super(cfg);
        this.xCenter = undefined;
        this.yCenter = undefined;
        this.drawingArea = undefined;
        this._pointLabels = [];
        this._pointLabelItems = [];
    }
    setDimensions() {
        const padding = this._padding = (0, _helpersSegmentMjs.K)(getTickBackdropHeight(this.options) / 2);
        const w = this.width = this.maxWidth - padding.width;
        const h = this.height = this.maxHeight - padding.height;
        this.xCenter = Math.floor(this.left + w / 2 + padding.left);
        this.yCenter = Math.floor(this.top + h / 2 + padding.top);
        this.drawingArea = Math.floor(Math.min(w, h) / 2);
    }
    determineDataLimits() {
        const { min, max } = this.getMinMax(false);
        this.min = (0, _helpersSegmentMjs.g)(min) && !isNaN(min) ? min : 0;
        this.max = (0, _helpersSegmentMjs.g)(max) && !isNaN(max) ? max : 0;
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    }
    generateTickLabels(ticks) {
        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
        this._pointLabels = this.getLabels().map((value, index)=>{
            const label = (0, _helpersSegmentMjs.C)(this.options.pointLabels.callback, [
                value,
                index
            ], this);
            return label || label === 0 ? label : "";
        }).filter((v, i)=>this.chart.getDataVisibility(i));
    }
    fit() {
        const opts = this.options;
        if (opts.display && opts.pointLabels.display) fitWithPointLabels(this);
        else this.setCenterPoint(0, 0, 0, 0);
    }
    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
    }
    getIndexAngle(index) {
        const angleMultiplier = (0, _helpersSegmentMjs.T) / (this._pointLabels.length || 1);
        const startAngle = this.options.startAngle || 0;
        return (0, _helpersSegmentMjs.az)(index * angleMultiplier + (0, _helpersSegmentMjs.t)(startAngle));
    }
    getDistanceFromCenterForValue(value) {
        if ((0, _helpersSegmentMjs.k)(value)) return NaN;
        const scalingFactor = this.drawingArea / (this.max - this.min);
        if (this.options.reverse) return (this.max - value) * scalingFactor;
        return (value - this.min) * scalingFactor;
    }
    getValueForDistanceFromCenter(distance) {
        if ((0, _helpersSegmentMjs.k)(distance)) return NaN;
        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
    }
    getPointLabelContext(index) {
        const pointLabels = this._pointLabels || [];
        if (index >= 0 && index < pointLabels.length) {
            const pointLabel = pointLabels[index];
            return createPointLabelContext(this.getContext(), index, pointLabel);
        }
    }
    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {
        const angle = this.getIndexAngle(index) - (0, _helpersSegmentMjs.H) + additionalAngle;
        return {
            x: Math.cos(angle) * distanceFromCenter + this.xCenter,
            y: Math.sin(angle) * distanceFromCenter + this.yCenter,
            angle
        };
    }
    getPointPositionForValue(index, value) {
        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    }
    getBasePosition(index) {
        return this.getPointPositionForValue(index || 0, this.getBaseValue());
    }
    getPointLabelPosition(index) {
        const { left, top, right, bottom } = this._pointLabelItems[index];
        return {
            left,
            top,
            right,
            bottom
        };
    }
    drawBackground() {
        const { backgroundColor, grid: { circular } } = this.options;
        if (backgroundColor) {
            const ctx = this.ctx;
            ctx.save();
            ctx.beginPath();
            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
            ctx.closePath();
            ctx.fillStyle = backgroundColor;
            ctx.fill();
            ctx.restore();
        }
    }
    drawGrid() {
        const ctx = this.ctx;
        const opts = this.options;
        const { angleLines, grid } = opts;
        const labelCount = this._pointLabels.length;
        let i, offset, position;
        if (opts.pointLabels.display) drawPointLabels(this, labelCount);
        if (grid.display) this.ticks.forEach((tick, index)=>{
            if (index !== 0) {
                offset = this.getDistanceFromCenterForValue(tick.value);
                const optsAtIndex = grid.setContext(this.getContext(index - 1));
                drawRadiusLine(this, optsAtIndex, offset, labelCount);
            }
        });
        if (angleLines.display) {
            ctx.save();
            for(i = labelCount - 1; i >= 0; i--){
                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
                const { color, lineWidth } = optsAtIndex;
                if (!lineWidth || !color) continue;
                ctx.lineWidth = lineWidth;
                ctx.strokeStyle = color;
                ctx.setLineDash(optsAtIndex.borderDash);
                ctx.lineDashOffset = optsAtIndex.borderDashOffset;
                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
                position = this.getPointPosition(i, offset);
                ctx.beginPath();
                ctx.moveTo(this.xCenter, this.yCenter);
                ctx.lineTo(position.x, position.y);
                ctx.stroke();
            }
            ctx.restore();
        }
    }
    drawBorder() {}
    drawLabels() {
        const ctx = this.ctx;
        const opts = this.options;
        const tickOpts = opts.ticks;
        if (!tickOpts.display) return;
        const startAngle = this.getIndexAngle(0);
        let offset, width;
        ctx.save();
        ctx.translate(this.xCenter, this.yCenter);
        ctx.rotate(startAngle);
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        this.ticks.forEach((tick, index)=>{
            if (index === 0 && !opts.reverse) return;
            const optsAtIndex = tickOpts.setContext(this.getContext(index));
            const tickFont = (0, _helpersSegmentMjs.O)(optsAtIndex.font);
            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);
            if (optsAtIndex.showLabelBackdrop) {
                ctx.font = tickFont.string;
                width = ctx.measureText(tick.label).width;
                ctx.fillStyle = optsAtIndex.backdropColor;
                const padding = (0, _helpersSegmentMjs.K)(optsAtIndex.backdropPadding);
                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
            }
            (0, _helpersSegmentMjs.M)(ctx, tick.label, 0, -offset, tickFont, {
                color: optsAtIndex.color
            });
        });
        ctx.restore();
    }
    drawTitle() {}
}
RadialLinearScale.id = "radialLinear";
RadialLinearScale.defaults = {
    display: true,
    animate: true,
    position: "chartArea",
    angleLines: {
        display: true,
        lineWidth: 1,
        borderDash: [],
        borderDashOffset: 0.0
    },
    grid: {
        circular: false
    },
    startAngle: 0,
    ticks: {
        showLabelBackdrop: true,
        callback: Ticks.formatters.numeric
    },
    pointLabels: {
        backdropColor: undefined,
        backdropPadding: 2,
        display: true,
        font: {
            size: 10
        },
        callback (label) {
            return label;
        },
        padding: 5,
        centerPointLabels: false
    }
};
RadialLinearScale.defaultRoutes = {
    "angleLines.color": "borderColor",
    "pointLabels.color": "color",
    "ticks.color": "color"
};
RadialLinearScale.descriptors = {
    angleLines: {
        _fallback: "grid"
    }
};
const INTERVALS = {
    millisecond: {
        common: true,
        size: 1,
        steps: 1000
    },
    second: {
        common: true,
        size: 1000,
        steps: 60
    },
    minute: {
        common: true,
        size: 60000,
        steps: 60
    },
    hour: {
        common: true,
        size: 3600000,
        steps: 24
    },
    day: {
        common: true,
        size: 86400000,
        steps: 30
    },
    week: {
        common: false,
        size: 604800000,
        steps: 4
    },
    month: {
        common: true,
        size: 2.628e9,
        steps: 12
    },
    quarter: {
        common: false,
        size: 7.884e9,
        steps: 4
    },
    year: {
        common: true,
        size: 3.154e10
    }
};
const UNITS = Object.keys(INTERVALS);
function sorter(a, b) {
    return a - b;
}
function parse(scale, input) {
    if ((0, _helpersSegmentMjs.k)(input)) return null;
    const adapter = scale._adapter;
    const { parser, round, isoWeekday } = scale._parseOpts;
    let value = input;
    if (typeof parser === "function") value = parser(value);
    if (!(0, _helpersSegmentMjs.g)(value)) value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
    if (value === null) return null;
    if (round) value = round === "week" && ((0, _helpersSegmentMjs.x)(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round);
    return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
    const ilen = UNITS.length;
    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){
        const interval = INTERVALS[UNITS[i]];
        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) return UNITS[i];
    }
    return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){
        const unit = UNITS[i];
        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) return unit;
    }
    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){
        if (INTERVALS[UNITS[i]].common) return UNITS[i];
    }
}
function addTick(ticks, time, timestamps) {
    if (!timestamps) ticks[time] = true;
    else if (timestamps.length) {
        const { lo, hi } = (0, _helpersSegmentMjs.aO)(timestamps, time);
        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
        ticks[timestamp] = true;
    }
}
function setMajorTicks(scale, ticks, map, majorUnit) {
    const adapter = scale._adapter;
    const first = +adapter.startOf(ticks[0].value, majorUnit);
    const last = ticks[ticks.length - 1].value;
    let major, index;
    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){
        index = map[major];
        if (index >= 0) ticks[index].major = true;
    }
    return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
    const ticks = [];
    const map = {};
    const ilen = values.length;
    let i, value;
    for(i = 0; i < ilen; ++i){
        value = values[i];
        map[value] = i;
        ticks.push({
            value,
            major: false
        });
    }
    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}
class TimeScale extends Scale {
    constructor(props){
        super(props);
        this._cache = {
            data: [],
            labels: [],
            all: []
        };
        this._unit = "day";
        this._majorUnit = undefined;
        this._offsets = {};
        this._normalized = false;
        this._parseOpts = undefined;
    }
    init(scaleOpts, opts) {
        const time = scaleOpts.time || (scaleOpts.time = {});
        const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
        adapter.init(opts);
        (0, _helpersSegmentMjs.ac)(time.displayFormats, adapter.formats());
        this._parseOpts = {
            parser: time.parser,
            round: time.round,
            isoWeekday: time.isoWeekday
        };
        super.init(scaleOpts);
        this._normalized = opts.normalized;
    }
    parse(raw, index) {
        if (raw === undefined) return null;
        return parse(this, raw);
    }
    beforeLayout() {
        super.beforeLayout();
        this._cache = {
            data: [],
            labels: [],
            all: []
        };
    }
    determineDataLimits() {
        const options = this.options;
        const adapter = this._adapter;
        const unit = options.time.unit || "day";
        let { min, max, minDefined, maxDefined } = this.getUserBounds();
        function _applyBounds(bounds) {
            if (!minDefined && !isNaN(bounds.min)) min = Math.min(min, bounds.min);
            if (!maxDefined && !isNaN(bounds.max)) max = Math.max(max, bounds.max);
        }
        if (!minDefined || !maxDefined) {
            _applyBounds(this._getLabelBounds());
            if (options.bounds !== "ticks" || options.ticks.source !== "labels") _applyBounds(this.getMinMax(false));
        }
        min = (0, _helpersSegmentMjs.g)(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
        max = (0, _helpersSegmentMjs.g)(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
        this.min = Math.min(min, max - 1);
        this.max = Math.max(min + 1, max);
    }
    _getLabelBounds() {
        const arr = this.getLabelTimestamps();
        let min = Number.POSITIVE_INFINITY;
        let max = Number.NEGATIVE_INFINITY;
        if (arr.length) {
            min = arr[0];
            max = arr[arr.length - 1];
        }
        return {
            min,
            max
        };
    }
    buildTicks() {
        const options = this.options;
        const timeOpts = options.time;
        const tickOpts = options.ticks;
        const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
        if (options.bounds === "ticks" && timestamps.length) {
            this.min = this._userMin || timestamps[0];
            this.max = this._userMax || timestamps[timestamps.length - 1];
        }
        const min = this.min;
        const max = this.max;
        const ticks = (0, _helpersSegmentMjs.aN)(timestamps, min, max);
        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
        this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? undefined : determineMajorUnit(this._unit);
        this.initOffsets(timestamps);
        if (options.reverse) ticks.reverse();
        return ticksFromTimestamps(this, ticks, this._majorUnit);
    }
    afterAutoSkip() {
        if (this.options.offsetAfterAutoskip) this.initOffsets(this.ticks.map((tick)=>+tick.value));
    }
    initOffsets(timestamps) {
        let start = 0;
        let end = 0;
        let first, last;
        if (this.options.offset && timestamps.length) {
            first = this.getDecimalForValue(timestamps[0]);
            if (timestamps.length === 1) start = 1 - first;
            else start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
            if (timestamps.length === 1) end = last;
            else end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
        }
        const limit = timestamps.length < 3 ? 0.5 : 0.25;
        start = (0, _helpersSegmentMjs.E)(start, 0, limit);
        end = (0, _helpersSegmentMjs.E)(end, 0, limit);
        this._offsets = {
            start,
            end,
            factor: 1 / (start + 1 + end)
        };
    }
    _generate() {
        const adapter = this._adapter;
        const min = this.min;
        const max = this.max;
        const options = this.options;
        const timeOpts = options.time;
        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
        const stepSize = (0, _helpersSegmentMjs.v)(timeOpts.stepSize, 1);
        const weekday = minor === "week" ? timeOpts.isoWeekday : false;
        const hasWeekday = (0, _helpersSegmentMjs.x)(weekday) || weekday === true;
        const ticks = {};
        let first = min;
        let time, count;
        if (hasWeekday) first = +adapter.startOf(first, "isoWeek", weekday);
        first = +adapter.startOf(first, hasWeekday ? "day" : minor);
        if (adapter.diff(max, min, minor) > 100000 * stepSize) throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
        const timestamps = options.ticks.source === "data" && this.getDataTimestamps();
        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++)addTick(ticks, time, timestamps);
        if (time === max || options.bounds === "ticks" || count === 1) addTick(ticks, time, timestamps);
        return Object.keys(ticks).sort((a, b)=>a - b).map((x)=>+x);
    }
    getLabelForValue(value) {
        const adapter = this._adapter;
        const timeOpts = this.options.time;
        if (timeOpts.tooltipFormat) return adapter.format(value, timeOpts.tooltipFormat);
        return adapter.format(value, timeOpts.displayFormats.datetime);
    }
    _tickFormatFunction(time, index, ticks, format) {
        const options = this.options;
        const formats = options.time.displayFormats;
        const unit = this._unit;
        const majorUnit = this._majorUnit;
        const minorFormat = unit && formats[unit];
        const majorFormat = majorUnit && formats[majorUnit];
        const tick = ticks[index];
        const major = majorUnit && majorFormat && tick && tick.major;
        const label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));
        const formatter = options.ticks.callback;
        return formatter ? (0, _helpersSegmentMjs.C)(formatter, [
            label,
            index,
            ticks
        ], this) : label;
    }
    generateTickLabels(ticks) {
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            tick.label = this._tickFormatFunction(tick.value, i, ticks);
        }
    }
    getDecimalForValue(value) {
        return value === null ? NaN : (value - this.min) / (this.max - this.min);
    }
    getPixelForValue(value) {
        const offsets = this._offsets;
        const pos = this.getDecimalForValue(value);
        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
    }
    getValueForPixel(pixel) {
        const offsets = this._offsets;
        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return this.min + pos * (this.max - this.min);
    }
    _getLabelSize(label) {
        const ticksOpts = this.options.ticks;
        const tickLabelWidth = this.ctx.measureText(label).width;
        const angle = (0, _helpersSegmentMjs.t)(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
        const cosRotation = Math.cos(angle);
        const sinRotation = Math.sin(angle);
        const tickFontSize = this._resolveTickFontOptions(0).size;
        return {
            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
        };
    }
    _getLabelCapacity(exampleTime) {
        const timeOpts = this.options.time;
        const displayFormats = timeOpts.displayFormats;
        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
            exampleTime
        ], this._majorUnit), format);
        const size = this._getLabelSize(exampleLabel);
        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
        return capacity > 0 ? capacity : 1;
    }
    getDataTimestamps() {
        let timestamps = this._cache.data || [];
        let i, ilen;
        if (timestamps.length) return timestamps;
        const metas = this.getMatchingVisibleMetas();
        if (this._normalized && metas.length) return this._cache.data = metas[0].controller.getAllParsedValues(this);
        for(i = 0, ilen = metas.length; i < ilen; ++i)timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
        return this._cache.data = this.normalize(timestamps);
    }
    getLabelTimestamps() {
        const timestamps = this._cache.labels || [];
        let i, ilen;
        if (timestamps.length) return timestamps;
        const labels = this.getLabels();
        for(i = 0, ilen = labels.length; i < ilen; ++i)timestamps.push(parse(this, labels[i]));
        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
    }
    normalize(values) {
        return (0, _helpersSegmentMjs._)(values.sort(sorter));
    }
}
TimeScale.id = "time";
TimeScale.defaults = {
    bounds: "data",
    adapters: {},
    time: {
        parser: false,
        unit: false,
        round: false,
        isoWeekday: false,
        minUnit: "millisecond",
        displayFormats: {}
    },
    ticks: {
        source: "auto",
        major: {
            enabled: false
        }
    }
};
function interpolate(table, val, reverse) {
    let lo = 0;
    let hi = table.length - 1;
    let prevSource, nextSource, prevTarget, nextTarget;
    if (reverse) {
        if (val >= table[lo].pos && val <= table[hi].pos) ({ lo, hi } = (0, _helpersSegmentMjs.Z)(table, "pos", val));
        ({ pos: prevSource, time: prevTarget } = table[lo]);
        ({ pos: nextSource, time: nextTarget } = table[hi]);
    } else {
        if (val >= table[lo].time && val <= table[hi].time) ({ lo, hi } = (0, _helpersSegmentMjs.Z)(table, "time", val));
        ({ time: prevSource, pos: prevTarget } = table[lo]);
        ({ time: nextSource, pos: nextTarget } = table[hi]);
    }
    const span = nextSource - prevSource;
    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
    constructor(props){
        super(props);
        this._table = [];
        this._minPos = undefined;
        this._tableRange = undefined;
    }
    initOffsets() {
        const timestamps = this._getTimestampsForTable();
        const table = this._table = this.buildLookupTable(timestamps);
        this._minPos = interpolate(table, this.min);
        this._tableRange = interpolate(table, this.max) - this._minPos;
        super.initOffsets(timestamps);
    }
    buildLookupTable(timestamps) {
        const { min, max } = this;
        const items = [];
        const table = [];
        let i, ilen, prev, curr, next;
        for(i = 0, ilen = timestamps.length; i < ilen; ++i){
            curr = timestamps[i];
            if (curr >= min && curr <= max) items.push(curr);
        }
        if (items.length < 2) return [
            {
                time: min,
                pos: 0
            },
            {
                time: max,
                pos: 1
            }
        ];
        for(i = 0, ilen = items.length; i < ilen; ++i){
            next = items[i + 1];
            prev = items[i - 1];
            curr = items[i];
            if (Math.round((next + prev) / 2) !== curr) table.push({
                time: curr,
                pos: i / (ilen - 1)
            });
        }
        return table;
    }
    _getTimestampsForTable() {
        let timestamps = this._cache.all || [];
        if (timestamps.length) return timestamps;
        const data = this.getDataTimestamps();
        const label = this.getLabelTimestamps();
        if (data.length && label.length) timestamps = this.normalize(data.concat(label));
        else timestamps = data.length ? data : label;
        timestamps = this._cache.all = timestamps;
        return timestamps;
    }
    getDecimalForValue(value) {
        return (interpolate(this._table, value) - this._minPos) / this._tableRange;
    }
    getValueForPixel(pixel) {
        const offsets = this._offsets;
        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
    }
}
TimeSeriesScale.id = "timeseries";
TimeSeriesScale.defaults = TimeScale.defaults;
var scales = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    CategoryScale: CategoryScale,
    LinearScale: LinearScale,
    LogarithmicScale: LogarithmicScale,
    RadialLinearScale: RadialLinearScale,
    TimeScale: TimeScale,
    TimeSeriesScale: TimeSeriesScale
});
const registerables = [
    controllers,
    elements,
    plugins,
    scales
];

},{"./chunks/helpers.segment.mjs":"SiqvY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"SiqvY":[function(require,module,exports) {
/*!
 * Chart.js v3.9.1
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$", ()=>_isPointInArea);
parcelHelpers.export(exports, "A", ()=>_factorize);
parcelHelpers.export(exports, "B", ()=>finiteOrDefault);
parcelHelpers.export(exports, "C", ()=>callback);
parcelHelpers.export(exports, "D", ()=>_addGrace);
parcelHelpers.export(exports, "E", ()=>_limitValue);
parcelHelpers.export(exports, "F", ()=>toDegrees);
parcelHelpers.export(exports, "G", ()=>_measureText);
parcelHelpers.export(exports, "H", ()=>HALF_PI);
parcelHelpers.export(exports, "I", ()=>_int16Range);
parcelHelpers.export(exports, "J", ()=>_alignPixel);
parcelHelpers.export(exports, "K", ()=>toPadding);
parcelHelpers.export(exports, "L", ()=>clipArea);
parcelHelpers.export(exports, "M", ()=>renderText);
parcelHelpers.export(exports, "N", ()=>unclipArea);
parcelHelpers.export(exports, "O", ()=>toFont);
parcelHelpers.export(exports, "P", ()=>PI);
parcelHelpers.export(exports, "Q", ()=>each);
parcelHelpers.export(exports, "R", ()=>_toLeftRightCenter);
parcelHelpers.export(exports, "S", ()=>_alignStartEnd);
parcelHelpers.export(exports, "T", ()=>TAU);
parcelHelpers.export(exports, "U", ()=>overrides);
parcelHelpers.export(exports, "V", ()=>merge);
parcelHelpers.export(exports, "W", ()=>_capitalize);
parcelHelpers.export(exports, "X", ()=>getRelativePosition);
parcelHelpers.export(exports, "Y", ()=>_rlookupByKey);
parcelHelpers.export(exports, "Z", ()=>_lookupByKey);
parcelHelpers.export(exports, "_", ()=>_arrayUnique);
parcelHelpers.export(exports, "a", ()=>resolve);
parcelHelpers.export(exports, "a$", ()=>toLineHeight);
parcelHelpers.export(exports, "a0", ()=>getAngleFromPoint);
parcelHelpers.export(exports, "a1", ()=>getMaximumSize);
parcelHelpers.export(exports, "a2", ()=>_getParentNode);
parcelHelpers.export(exports, "a3", ()=>readUsedSize);
parcelHelpers.export(exports, "a4", ()=>throttled);
parcelHelpers.export(exports, "a5", ()=>supportsEventListenerOptions);
parcelHelpers.export(exports, "a6", ()=>_isDomSupported);
parcelHelpers.export(exports, "a7", ()=>descriptors);
parcelHelpers.export(exports, "a8", ()=>isFunction);
parcelHelpers.export(exports, "a9", ()=>_attachContext);
parcelHelpers.export(exports, "aA", ()=>getRtlAdapter);
parcelHelpers.export(exports, "aB", ()=>overrideTextDirection);
parcelHelpers.export(exports, "aC", ()=>_textX);
parcelHelpers.export(exports, "aD", ()=>restoreTextDirection);
parcelHelpers.export(exports, "aE", ()=>drawPointLegend);
parcelHelpers.export(exports, "aF", ()=>noop);
parcelHelpers.export(exports, "aG", ()=>distanceBetweenPoints);
parcelHelpers.export(exports, "aH", ()=>_setMinAndMaxByKey);
parcelHelpers.export(exports, "aI", ()=>niceNum);
parcelHelpers.export(exports, "aJ", ()=>almostWhole);
parcelHelpers.export(exports, "aK", ()=>almostEquals);
parcelHelpers.export(exports, "aL", ()=>_decimalPlaces);
parcelHelpers.export(exports, "aM", ()=>_longestText);
parcelHelpers.export(exports, "aN", ()=>_filterBetween);
parcelHelpers.export(exports, "aO", ()=>_lookup);
parcelHelpers.export(exports, "aP", ()=>isPatternOrGradient);
parcelHelpers.export(exports, "aQ", ()=>getHoverColor);
parcelHelpers.export(exports, "aR", ()=>clone$1);
parcelHelpers.export(exports, "aS", ()=>_merger);
parcelHelpers.export(exports, "aT", ()=>_mergerIf);
parcelHelpers.export(exports, "aU", ()=>_deprecated);
parcelHelpers.export(exports, "aV", ()=>_splitKey);
parcelHelpers.export(exports, "aW", ()=>toFontString);
parcelHelpers.export(exports, "aX", ()=>splineCurve);
parcelHelpers.export(exports, "aY", ()=>splineCurveMonotone);
parcelHelpers.export(exports, "aZ", ()=>getStyle);
parcelHelpers.export(exports, "a_", ()=>fontString);
parcelHelpers.export(exports, "aa", ()=>_createResolver);
parcelHelpers.export(exports, "ab", ()=>_descriptors);
parcelHelpers.export(exports, "ac", ()=>mergeIf);
parcelHelpers.export(exports, "ad", ()=>uid);
parcelHelpers.export(exports, "ae", ()=>debounce);
parcelHelpers.export(exports, "af", ()=>retinaScale);
parcelHelpers.export(exports, "ag", ()=>clearCanvas);
parcelHelpers.export(exports, "ah", ()=>setsEqual);
parcelHelpers.export(exports, "ai", ()=>_elementsEqual);
parcelHelpers.export(exports, "aj", ()=>_isClickEvent);
parcelHelpers.export(exports, "ak", ()=>_isBetween);
parcelHelpers.export(exports, "al", ()=>_readValueToProps);
parcelHelpers.export(exports, "am", ()=>_updateBezierControlPoints);
parcelHelpers.export(exports, "an", ()=>_computeSegments);
parcelHelpers.export(exports, "ao", ()=>_boundSegments);
parcelHelpers.export(exports, "ap", ()=>_steppedInterpolation);
parcelHelpers.export(exports, "aq", ()=>_bezierInterpolation);
parcelHelpers.export(exports, "ar", ()=>_pointInLine);
parcelHelpers.export(exports, "as", ()=>_steppedLineTo);
parcelHelpers.export(exports, "at", ()=>_bezierCurveTo);
parcelHelpers.export(exports, "au", ()=>drawPoint);
parcelHelpers.export(exports, "av", ()=>addRoundedRectPath);
parcelHelpers.export(exports, "aw", ()=>toTRBL);
parcelHelpers.export(exports, "ax", ()=>toTRBLCorners);
parcelHelpers.export(exports, "ay", ()=>_boundSegment);
parcelHelpers.export(exports, "az", ()=>_normalizeAngle);
parcelHelpers.export(exports, "b", ()=>isArray);
parcelHelpers.export(exports, "b0", ()=>PITAU);
parcelHelpers.export(exports, "b1", ()=>INFINITY);
parcelHelpers.export(exports, "b2", ()=>RAD_PER_DEG);
parcelHelpers.export(exports, "b3", ()=>QUARTER_PI);
parcelHelpers.export(exports, "b4", ()=>TWO_THIRDS_PI);
parcelHelpers.export(exports, "b5", ()=>_angleDiff);
parcelHelpers.export(exports, "c", ()=>color);
parcelHelpers.export(exports, "d", ()=>defaults);
parcelHelpers.export(exports, "e", ()=>effects);
parcelHelpers.export(exports, "f", ()=>resolveObjectKey);
parcelHelpers.export(exports, "g", ()=>isNumberFinite);
parcelHelpers.export(exports, "h", ()=>createContext);
parcelHelpers.export(exports, "i", ()=>isObject);
parcelHelpers.export(exports, "j", ()=>defined);
parcelHelpers.export(exports, "k", ()=>isNullOrUndef);
parcelHelpers.export(exports, "l", ()=>listenArrayEvents);
parcelHelpers.export(exports, "m", ()=>toPercentage);
parcelHelpers.export(exports, "n", ()=>toDimension);
parcelHelpers.export(exports, "o", ()=>formatNumber);
parcelHelpers.export(exports, "p", ()=>_angleBetween);
parcelHelpers.export(exports, "q", ()=>_getStartAndCountOfVisiblePoints);
parcelHelpers.export(exports, "r", ()=>requestAnimFrame);
parcelHelpers.export(exports, "s", ()=>sign);
parcelHelpers.export(exports, "t", ()=>toRadians);
parcelHelpers.export(exports, "u", ()=>unlistenArrayEvents);
parcelHelpers.export(exports, "v", ()=>valueOrDefault);
parcelHelpers.export(exports, "w", ()=>_scaleRangesChanged);
parcelHelpers.export(exports, "x", ()=>isNumber);
parcelHelpers.export(exports, "y", ()=>_parseObjectDataRadialScale);
parcelHelpers.export(exports, "z", ()=>log10);
function noop() {}
const uid = function() {
    let id = 0;
    return function() {
        return id++;
    };
}();
function isNullOrUndef(value) {
    return value === null || typeof value === "undefined";
}
function isArray(value) {
    if (Array.isArray && Array.isArray(value)) return true;
    const type = Object.prototype.toString.call(value);
    if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") return true;
    return false;
}
function isObject(value) {
    return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
const isNumberFinite = (value)=>(typeof value === "number" || value instanceof Number) && isFinite(+value);
function finiteOrDefault(value, defaultValue) {
    return isNumberFinite(value) ? value : defaultValue;
}
function valueOrDefault(value, defaultValue) {
    return typeof value === "undefined" ? defaultValue : value;
}
const toPercentage = (value, dimension)=>typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : value / dimension;
const toDimension = (value, dimension)=>typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
function callback(fn, args, thisArg) {
    if (fn && typeof fn.call === "function") return fn.apply(thisArg, args);
}
function each(loopable, fn, thisArg, reverse) {
    let i, len, keys;
    if (isArray(loopable)) {
        len = loopable.length;
        if (reverse) for(i = len - 1; i >= 0; i--)fn.call(thisArg, loopable[i], i);
        else for(i = 0; i < len; i++)fn.call(thisArg, loopable[i], i);
    } else if (isObject(loopable)) {
        keys = Object.keys(loopable);
        len = keys.length;
        for(i = 0; i < len; i++)fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
}
function _elementsEqual(a0, a1) {
    let i, ilen, v0, v1;
    if (!a0 || !a1 || a0.length !== a1.length) return false;
    for(i = 0, ilen = a0.length; i < ilen; ++i){
        v0 = a0[i];
        v1 = a1[i];
        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) return false;
    }
    return true;
}
function clone$1(source) {
    if (isArray(source)) return source.map(clone$1);
    if (isObject(source)) {
        const target = Object.create(null);
        const keys = Object.keys(source);
        const klen = keys.length;
        let k = 0;
        for(; k < klen; ++k)target[keys[k]] = clone$1(source[keys[k]]);
        return target;
    }
    return source;
}
function isValidKey(key) {
    return [
        "__proto__",
        "prototype",
        "constructor"
    ].indexOf(key) === -1;
}
function _merger(key, target, source, options) {
    if (!isValidKey(key)) return;
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) merge(tval, sval, options);
    else target[key] = clone$1(sval);
}
function merge(target, source, options) {
    const sources = isArray(source) ? source : [
        source
    ];
    const ilen = sources.length;
    if (!isObject(target)) return target;
    options = options || {};
    const merger = options.merger || _merger;
    for(let i = 0; i < ilen; ++i){
        source = sources[i];
        if (!isObject(source)) continue;
        const keys = Object.keys(source);
        for(let k = 0, klen = keys.length; k < klen; ++k)merger(keys[k], target, source, options);
    }
    return target;
}
function mergeIf(target, source) {
    return merge(target, source, {
        merger: _mergerIf
    });
}
function _mergerIf(key, target, source) {
    if (!isValidKey(key)) return;
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) mergeIf(tval, sval);
    else if (!Object.prototype.hasOwnProperty.call(target, key)) target[key] = clone$1(sval);
}
function _deprecated(scope, value, previous, current) {
    if (value !== undefined) console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
}
const keyResolvers = {
    "": (v)=>v,
    x: (o)=>o.x,
    y: (o)=>o.y
};
function resolveObjectKey(obj, key) {
    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
    return resolver(obj);
}
function _getKeyResolver(key) {
    const keys = _splitKey(key);
    return (obj)=>{
        for (const k of keys){
            if (k === "") break;
            obj = obj && obj[k];
        }
        return obj;
    };
}
function _splitKey(key) {
    const parts = key.split(".");
    const keys = [];
    let tmp = "";
    for (const part of parts){
        tmp += part;
        if (tmp.endsWith("\\")) tmp = tmp.slice(0, -1) + ".";
        else {
            keys.push(tmp);
            tmp = "";
        }
    }
    return keys;
}
function _capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value)=>typeof value !== "undefined";
const isFunction = (value)=>typeof value === "function";
const setsEqual = (a, b)=>{
    if (a.size !== b.size) return false;
    for (const item of a){
        if (!b.has(item)) return false;
    }
    return true;
};
function _isClickEvent(e) {
    return e.type === "mouseup" || e.type === "click" || e.type === "contextmenu";
}
const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function niceNum(range) {
    const roundedRange = Math.round(range);
    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
    const niceRange = Math.pow(10, Math.floor(log10(range)));
    const fraction = range / niceRange;
    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
    return niceFraction * niceRange;
}
function _factorize(value) {
    const result = [];
    const sqrt = Math.sqrt(value);
    let i;
    for(i = 1; i < sqrt; i++)if (value % i === 0) {
        result.push(i);
        result.push(value / i);
    }
    if (sqrt === (sqrt | 0)) result.push(sqrt);
    result.sort((a, b)=>a - b).pop();
    return result;
}
function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}
function almostEquals(x, y, epsilon) {
    return Math.abs(x - y) < epsilon;
}
function almostWhole(x, epsilon) {
    const rounded = Math.round(x);
    return rounded - epsilon <= x && rounded + epsilon >= x;
}
function _setMinAndMaxByKey(array, target, property) {
    let i, ilen, value;
    for(i = 0, ilen = array.length; i < ilen; i++){
        value = array[i][property];
        if (!isNaN(value)) {
            target.min = Math.min(target.min, value);
            target.max = Math.max(target.max, value);
        }
    }
}
function toRadians(degrees) {
    return degrees * (PI / 180);
}
function toDegrees(radians) {
    return radians * (180 / PI);
}
function _decimalPlaces(x) {
    if (!isNumberFinite(x)) return;
    let e = 1;
    let p = 0;
    while(Math.round(x * e) / e !== x){
        e *= 10;
        p++;
    }
    return p;
}
function getAngleFromPoint(centrePoint, anglePoint) {
    const distanceFromXCenter = anglePoint.x - centrePoint.x;
    const distanceFromYCenter = anglePoint.y - centrePoint.y;
    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
    if (angle < -0.5 * PI) angle += TAU;
    return {
        angle,
        distance: radialDistanceFromCenter
    };
}
function distanceBetweenPoints(pt1, pt2) {
    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _angleDiff(a, b) {
    return (a - b + PITAU) % TAU - PI;
}
function _normalizeAngle(a) {
    return (a % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
    const a = _normalizeAngle(angle);
    const s = _normalizeAngle(start);
    const e = _normalizeAngle(end);
    const angleToStart = _normalizeAngle(s - a);
    const angleToEnd = _normalizeAngle(e - a);
    const startToAngle = _normalizeAngle(a - s);
    const endToAngle = _normalizeAngle(a - e);
    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
}
function _limitValue(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
function _int16Range(value) {
    return _limitValue(value, -32768, 32767);
}
function _isBetween(value, start, end, epsilon = 1e-6) {
    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table, value, cmp) {
    cmp = cmp || ((index)=>table[index] < value);
    let hi = table.length - 1;
    let lo = 0;
    let mid;
    while(hi - lo > 1){
        mid = lo + hi >> 1;
        if (cmp(mid)) lo = mid;
        else hi = mid;
    }
    return {
        lo,
        hi
    };
}
const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>table[index][key] <= value : (index)=>table[index][key] < value);
const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);
function _filterBetween(values, min, max) {
    let start = 0;
    let end = values.length;
    while(start < end && values[start] < min)start++;
    while(end > start && values[end - 1] > max)end--;
    return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const arrayEvents = [
    "push",
    "pop",
    "shift",
    "splice",
    "unshift"
];
function listenArrayEvents(array, listener) {
    if (array._chartjs) {
        array._chartjs.listeners.push(listener);
        return;
    }
    Object.defineProperty(array, "_chartjs", {
        configurable: true,
        enumerable: false,
        value: {
            listeners: [
                listener
            ]
        }
    });
    arrayEvents.forEach((key)=>{
        const method = "_onData" + _capitalize(key);
        const base = array[key];
        Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value (...args) {
                const res = base.apply(this, args);
                array._chartjs.listeners.forEach((object)=>{
                    if (typeof object[method] === "function") object[method](...args);
                });
                return res;
            }
        });
    });
}
function unlistenArrayEvents(array, listener) {
    const stub = array._chartjs;
    if (!stub) return;
    const listeners = stub.listeners;
    const index = listeners.indexOf(listener);
    if (index !== -1) listeners.splice(index, 1);
    if (listeners.length > 0) return;
    arrayEvents.forEach((key)=>{
        delete array[key];
    });
    delete array._chartjs;
}
function _arrayUnique(items) {
    const set = new Set();
    let i, ilen;
    for(i = 0, ilen = items.length; i < ilen; ++i)set.add(items[i]);
    if (set.size === ilen) return items;
    return Array.from(set);
}
function fontString(pixelSize, fontStyle, fontFamily) {
    return fontStyle + " " + pixelSize + "px " + fontFamily;
}
const requestAnimFrame = function() {
    if (typeof window === "undefined") return function(callback) {
        return callback();
    };
    return window.requestAnimationFrame;
}();
function throttled(fn, thisArg, updateFn) {
    const updateArgs = updateFn || ((args)=>Array.prototype.slice.call(args));
    let ticking = false;
    let args = [];
    return function(...rest) {
        args = updateArgs(rest);
        if (!ticking) {
            ticking = true;
            requestAnimFrame.call(window, ()=>{
                ticking = false;
                fn.apply(thisArg, args);
            });
        }
    };
}
function debounce(fn, delay) {
    let timeout;
    return function(...args) {
        if (delay) {
            clearTimeout(timeout);
            timeout = setTimeout(fn, delay, args);
        } else fn.apply(this, args);
        return delay;
    };
}
const _toLeftRightCenter = (align)=>align === "start" ? "left" : align === "end" ? "right" : "center";
const _alignStartEnd = (align, start, end)=>align === "start" ? start : align === "end" ? end : (start + end) / 2;
const _textX = (align, left, right, rtl)=>{
    const check = rtl ? "left" : "right";
    return align === check ? right : align === "center" ? (left + right) / 2 : left;
};
function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
    const pointCount = points.length;
    let start = 0;
    let count = pointCount;
    if (meta._sorted) {
        const { iScale, _parsed } = meta;
        const axis = iScale.axis;
        const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
        if (minDefined) start = _limitValue(Math.min(_lookupByKey(_parsed, iScale.axis, min).lo, animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);
        if (maxDefined) count = _limitValue(Math.max(_lookupByKey(_parsed, iScale.axis, max, true).hi + 1, animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;
        else count = pointCount - start;
    }
    return {
        start,
        count
    };
}
function _scaleRangesChanged(meta) {
    const { xScale, yScale, _scaleRanges } = meta;
    const newRanges = {
        xmin: xScale.min,
        xmax: xScale.max,
        ymin: yScale.min,
        ymax: yScale.max
    };
    if (!_scaleRanges) {
        meta._scaleRanges = newRanges;
        return true;
    }
    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
    Object.assign(_scaleRanges, newRanges);
    return changed;
}
const atEdge = (t)=>t === 0 || t === 1;
const elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
const elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
const effects = {
    linear: (t)=>t,
    easeInQuad: (t)=>t * t,
    easeOutQuad: (t)=>-t * (t - 2),
    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),
    easeInCubic: (t)=>t * t * t,
    easeOutCubic: (t)=>(t -= 1) * t * t + 1,
    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),
    easeInQuart: (t)=>t * t * t * t,
    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),
    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),
    easeInQuint: (t)=>t * t * t * t * t,
    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,
    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),
    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,
    easeOutSine: (t)=>Math.sin(t * HALF_PI),
    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),
    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),
    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,
    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),
    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),
    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
    easeInOutElastic (t) {
        const s = 0.1125;
        const p = 0.45;
        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
    },
    easeInBack (t) {
        const s = 1.70158;
        return t * t * ((s + 1) * t - s);
    },
    easeOutBack (t) {
        const s = 1.70158;
        return (t -= 1) * t * ((s + 1) * t + s) + 1;
    },
    easeInOutBack (t) {
        let s = 1.70158;
        if ((t /= 0.5) < 1) return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
    },
    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),
    easeOutBounce (t) {
        const m = 7.5625;
        const d = 2.75;
        if (t < 1 / d) return m * t * t;
        if (t < 2 / d) return m * (t -= 1.5 / d) * t + 0.75;
        if (t < 2.5 / d) return m * (t -= 2.25 / d) * t + 0.9375;
        return m * (t -= 2.625 / d) * t + 0.984375;
    },
    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5
};
/*!
 * @kurkle/color v0.2.1
 * https://github.com/kurkle/color#readme
 * (c) 2022 Jukka Kurkela
 * Released under the MIT License
 */ function round(v) {
    return v + 0.5 | 0;
}
const lim = (v, l, h)=>Math.max(Math.min(v, h), l);
function p2b(v) {
    return lim(round(v * 2.55), 0, 255);
}
function n2b(v) {
    return lim(round(v * 255), 0, 255);
}
function b2n(v) {
    return lim(round(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
    return lim(round(v * 100), 0, 100);
}
const map$1 = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    a: 10,
    b: 11,
    c: 12,
    d: 13,
    e: 14,
    f: 15
};
const hex = [
    ..."0123456789ABCDEF"
];
const h1 = (b)=>hex[b & 0xF];
const h2 = (b)=>hex[(b & 0xF0) >> 4] + hex[b & 0xF];
const eq = (b)=>(b & 0xF0) >> 4 === (b & 0xF);
const isShort = (v)=>eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
function hexParse(str) {
    var len = str.length;
    var ret;
    if (str[0] === "#") {
        if (len === 4 || len === 5) ret = {
            r: 255 & map$1[str[1]] * 17,
            g: 255 & map$1[str[2]] * 17,
            b: 255 & map$1[str[3]] * 17,
            a: len === 5 ? map$1[str[4]] * 17 : 255
        };
        else if (len === 7 || len === 9) ret = {
            r: map$1[str[1]] << 4 | map$1[str[2]],
            g: map$1[str[3]] << 4 | map$1[str[4]],
            b: map$1[str[5]] << 4 | map$1[str[6]],
            a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
        };
    }
    return ret;
}
const alpha = (a, f)=>a < 255 ? f(a) : "";
function hexString(v) {
    var f = isShort(v) ? h1 : h2;
    return v ? "#" + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : undefined;
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h, s, l) {
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12)=>l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return [
        f(0),
        f(8),
        f(4)
    ];
}
function hsv2rgbn(h, s, v) {
    const f = (n, k = (n + h / 60) % 6)=>v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
    return [
        f(5),
        f(3),
        f(1)
    ];
}
function hwb2rgbn(h, w, b) {
    const rgb = hsl2rgbn(h, 1, 0.5);
    let i;
    if (w + b > 1) {
        i = 1 / (w + b);
        w *= i;
        b *= i;
    }
    for(i = 0; i < 3; i++){
        rgb[i] *= 1 - w - b;
        rgb[i] += w;
    }
    return rgb;
}
function hueValue(r, g, b, d, max) {
    if (r === max) return (g - b) / d + (g < b ? 6 : 0);
    if (g === max) return (b - r) / d + 2;
    return (r - g) / d + 4;
}
function rgb2hsl(v) {
    const range = 255;
    const r = v.r / range;
    const g = v.g / range;
    const b = v.b / range;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    const l = (max + min) / 2;
    let h, s, d;
    if (max !== min) {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = hueValue(r, g, b, d, max);
        h = h * 60 + 0.5;
    }
    return [
        h | 0,
        s || 0,
        l
    ];
}
function calln(f, a, b, c) {
    return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);
}
function hsl2rgb(h, s, l) {
    return calln(hsl2rgbn, h, s, l);
}
function hwb2rgb(h, w, b) {
    return calln(hwb2rgbn, h, w, b);
}
function hsv2rgb(h, s, v) {
    return calln(hsv2rgbn, h, s, v);
}
function hue(h) {
    return (h % 360 + 360) % 360;
}
function hueParse(str) {
    const m = HUE_RE.exec(str);
    let a = 255;
    let v;
    if (!m) return;
    if (m[5] !== v) a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
    const h = hue(+m[2]);
    const p1 = +m[3] / 100;
    const p2 = +m[4] / 100;
    if (m[1] === "hwb") v = hwb2rgb(h, p1, p2);
    else if (m[1] === "hsv") v = hsv2rgb(h, p1, p2);
    else v = hsl2rgb(h, p1, p2);
    return {
        r: v[0],
        g: v[1],
        b: v[2],
        a: a
    };
}
function rotate(v, deg) {
    var h = rgb2hsl(v);
    h[0] = hue(h[0] + deg);
    h = hsl2rgb(h);
    v.r = h[0];
    v.g = h[1];
    v.b = h[2];
}
function hslString(v) {
    if (!v) return;
    const a = rgb2hsl(v);
    const h = a[0];
    const s = n2p(a[1]);
    const l = n2p(a[2]);
    return v.a < 255 ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})` : `hsl(${h}, ${s}%, ${l}%)`;
}
const map = {
    x: "dark",
    Z: "light",
    Y: "re",
    X: "blu",
    W: "gr",
    V: "medium",
    U: "slate",
    A: "ee",
    T: "ol",
    S: "or",
    B: "ra",
    C: "lateg",
    D: "ights",
    R: "in",
    Q: "turquois",
    E: "hi",
    P: "ro",
    O: "al",
    N: "le",
    M: "de",
    L: "yello",
    F: "en",
    K: "ch",
    G: "arks",
    H: "ea",
    I: "ightg",
    J: "wh"
};
const names$1 = {
    OiceXe: "f0f8ff",
    antiquewEte: "faebd7",
    aqua: "ffff",
    aquamarRe: "7fffd4",
    azuY: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "0",
    blanKedOmond: "ffebcd",
    Xe: "ff",
    XeviTet: "8a2be2",
    bPwn: "a52a2a",
    burlywood: "deb887",
    caMtXe: "5f9ea0",
    KartYuse: "7fff00",
    KocTate: "d2691e",
    cSO: "ff7f50",
    cSnflowerXe: "6495ed",
    cSnsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "ffff",
    xXe: "8b",
    xcyan: "8b8b",
    xgTMnPd: "b8860b",
    xWay: "a9a9a9",
    xgYF: "6400",
    xgYy: "a9a9a9",
    xkhaki: "bdb76b",
    xmagFta: "8b008b",
    xTivegYF: "556b2f",
    xSange: "ff8c00",
    xScEd: "9932cc",
    xYd: "8b0000",
    xsOmon: "e9967a",
    xsHgYF: "8fbc8f",
    xUXe: "483d8b",
    xUWay: "2f4f4f",
    xUgYy: "2f4f4f",
    xQe: "ced1",
    xviTet: "9400d3",
    dAppRk: "ff1493",
    dApskyXe: "bfff",
    dimWay: "696969",
    dimgYy: "696969",
    dodgerXe: "1e90ff",
    fiYbrick: "b22222",
    flSOwEte: "fffaf0",
    foYstWAn: "228b22",
    fuKsia: "ff00ff",
    gaRsbSo: "dcdcdc",
    ghostwEte: "f8f8ff",
    gTd: "ffd700",
    gTMnPd: "daa520",
    Way: "808080",
    gYF: "8000",
    gYFLw: "adff2f",
    gYy: "808080",
    honeyMw: "f0fff0",
    hotpRk: "ff69b4",
    RdianYd: "cd5c5c",
    Rdigo: "4b0082",
    ivSy: "fffff0",
    khaki: "f0e68c",
    lavFMr: "e6e6fa",
    lavFMrXsh: "fff0f5",
    lawngYF: "7cfc00",
    NmoncEffon: "fffacd",
    ZXe: "add8e6",
    ZcSO: "f08080",
    Zcyan: "e0ffff",
    ZgTMnPdLw: "fafad2",
    ZWay: "d3d3d3",
    ZgYF: "90ee90",
    ZgYy: "d3d3d3",
    ZpRk: "ffb6c1",
    ZsOmon: "ffa07a",
    ZsHgYF: "20b2aa",
    ZskyXe: "87cefa",
    ZUWay: "778899",
    ZUgYy: "778899",
    ZstAlXe: "b0c4de",
    ZLw: "ffffe0",
    lime: "ff00",
    limegYF: "32cd32",
    lRF: "faf0e6",
    magFta: "ff00ff",
    maPon: "800000",
    VaquamarRe: "66cdaa",
    VXe: "cd",
    VScEd: "ba55d3",
    VpurpN: "9370db",
    VsHgYF: "3cb371",
    VUXe: "7b68ee",
    VsprRggYF: "fa9a",
    VQe: "48d1cc",
    VviTetYd: "c71585",
    midnightXe: "191970",
    mRtcYam: "f5fffa",
    mistyPse: "ffe4e1",
    moccasR: "ffe4b5",
    navajowEte: "ffdead",
    navy: "80",
    Tdlace: "fdf5e6",
    Tive: "808000",
    TivedBb: "6b8e23",
    Sange: "ffa500",
    SangeYd: "ff4500",
    ScEd: "da70d6",
    pOegTMnPd: "eee8aa",
    pOegYF: "98fb98",
    pOeQe: "afeeee",
    pOeviTetYd: "db7093",
    papayawEp: "ffefd5",
    pHKpuff: "ffdab9",
    peru: "cd853f",
    pRk: "ffc0cb",
    plum: "dda0dd",
    powMrXe: "b0e0e6",
    purpN: "800080",
    YbeccapurpN: "663399",
    Yd: "ff0000",
    Psybrown: "bc8f8f",
    PyOXe: "4169e1",
    saddNbPwn: "8b4513",
    sOmon: "fa8072",
    sandybPwn: "f4a460",
    sHgYF: "2e8b57",
    sHshell: "fff5ee",
    siFna: "a0522d",
    silver: "c0c0c0",
    skyXe: "87ceeb",
    UXe: "6a5acd",
    UWay: "708090",
    UgYy: "708090",
    snow: "fffafa",
    sprRggYF: "ff7f",
    stAlXe: "4682b4",
    tan: "d2b48c",
    teO: "8080",
    tEstN: "d8bfd8",
    tomato: "ff6347",
    Qe: "40e0d0",
    viTet: "ee82ee",
    JHt: "f5deb3",
    wEte: "ffffff",
    wEtesmoke: "f5f5f5",
    Lw: "ffff00",
    LwgYF: "9acd32"
};
function unpack() {
    const unpacked = {};
    const keys = Object.keys(names$1);
    const tkeys = Object.keys(map);
    let i, j, k, ok, nk;
    for(i = 0; i < keys.length; i++){
        ok = nk = keys[i];
        for(j = 0; j < tkeys.length; j++){
            k = tkeys[j];
            nk = nk.replace(k, map[k]);
        }
        k = parseInt(names$1[ok], 16);
        unpacked[nk] = [
            k >> 16 & 0xFF,
            k >> 8 & 0xFF,
            k & 0xFF
        ];
    }
    return unpacked;
}
let names;
function nameParse(str) {
    if (!names) {
        names = unpack();
        names.transparent = [
            0,
            0,
            0,
            0
        ];
    }
    const a = names[str.toLowerCase()];
    return a && {
        r: a[0],
        g: a[1],
        b: a[2],
        a: a.length === 4 ? a[3] : 255
    };
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
    const m = RGB_RE.exec(str);
    let a = 255;
    let r, g, b;
    if (!m) return;
    if (m[7] !== r) {
        const v = +m[7];
        a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
    }
    r = +m[1];
    g = +m[3];
    b = +m[5];
    r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
    g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
    b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
    return {
        r: r,
        g: g,
        b: b,
        a: a
    };
}
function rgbString(v) {
    return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);
}
const to = (v)=>v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;
const from = (v)=>v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
function interpolate(rgb1, rgb2, t) {
    const r = from(b2n(rgb1.r));
    const g = from(b2n(rgb1.g));
    const b = from(b2n(rgb1.b));
    return {
        r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),
        g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),
        b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),
        a: rgb1.a + t * (rgb2.a - rgb1.a)
    };
}
function modHSL(v, i, ratio) {
    if (v) {
        let tmp = rgb2hsl(v);
        tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
        tmp = hsl2rgb(tmp);
        v.r = tmp[0];
        v.g = tmp[1];
        v.b = tmp[2];
    }
}
function clone(v, proto) {
    return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
    var v = {
        r: 0,
        g: 0,
        b: 0,
        a: 255
    };
    if (Array.isArray(input)) {
        if (input.length >= 3) {
            v = {
                r: input[0],
                g: input[1],
                b: input[2],
                a: 255
            };
            if (input.length > 3) v.a = n2b(input[3]);
        }
    } else {
        v = clone(input, {
            r: 0,
            g: 0,
            b: 0,
            a: 1
        });
        v.a = n2b(v.a);
    }
    return v;
}
function functionParse(str) {
    if (str.charAt(0) === "r") return rgbParse(str);
    return hueParse(str);
}
class Color {
    constructor(input){
        if (input instanceof Color) return input;
        const type = typeof input;
        let v;
        if (type === "object") v = fromObject(input);
        else if (type === "string") v = hexParse(input) || nameParse(input) || functionParse(input);
        this._rgb = v;
        this._valid = !!v;
    }
    get valid() {
        return this._valid;
    }
    get rgb() {
        var v = clone(this._rgb);
        if (v) v.a = b2n(v.a);
        return v;
    }
    set rgb(obj) {
        this._rgb = fromObject(obj);
    }
    rgbString() {
        return this._valid ? rgbString(this._rgb) : undefined;
    }
    hexString() {
        return this._valid ? hexString(this._rgb) : undefined;
    }
    hslString() {
        return this._valid ? hslString(this._rgb) : undefined;
    }
    mix(color, weight) {
        if (color) {
            const c1 = this.rgb;
            const c2 = color.rgb;
            let w2;
            const p = weight === w2 ? 0.5 : weight;
            const w = 2 * p - 1;
            const a = c1.a - c2.a;
            const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
            w2 = 1 - w1;
            c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
            c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
            c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
            c1.a = p * c1.a + (1 - p) * c2.a;
            this.rgb = c1;
        }
        return this;
    }
    interpolate(color, t) {
        if (color) this._rgb = interpolate(this._rgb, color._rgb, t);
        return this;
    }
    clone() {
        return new Color(this.rgb);
    }
    alpha(a) {
        this._rgb.a = n2b(a);
        return this;
    }
    clearer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 - ratio;
        return this;
    }
    greyscale() {
        const rgb = this._rgb;
        const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
        rgb.r = rgb.g = rgb.b = val;
        return this;
    }
    opaquer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 + ratio;
        return this;
    }
    negate() {
        const v = this._rgb;
        v.r = 255 - v.r;
        v.g = 255 - v.g;
        v.b = 255 - v.b;
        return this;
    }
    lighten(ratio) {
        modHSL(this._rgb, 2, ratio);
        return this;
    }
    darken(ratio) {
        modHSL(this._rgb, 2, -ratio);
        return this;
    }
    saturate(ratio) {
        modHSL(this._rgb, 1, ratio);
        return this;
    }
    desaturate(ratio) {
        modHSL(this._rgb, 1, -ratio);
        return this;
    }
    rotate(deg) {
        rotate(this._rgb, deg);
        return this;
    }
}
function index_esm(input) {
    return new Color(input);
}
function isPatternOrGradient(value) {
    if (value && typeof value === "object") {
        const type = value.toString();
        return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
    }
    return false;
}
function color(value) {
    return isPatternOrGradient(value) ? value : index_esm(value);
}
function getHoverColor(value) {
    return isPatternOrGradient(value) ? value : index_esm(value).saturate(0.5).darken(0.1).hexString();
}
const overrides = Object.create(null);
const descriptors = Object.create(null);
function getScope$1(node, key) {
    if (!key) return node;
    const keys = key.split(".");
    for(let i = 0, n = keys.length; i < n; ++i){
        const k = keys[i];
        node = node[k] || (node[k] = Object.create(null));
    }
    return node;
}
function set(root, scope, values) {
    if (typeof scope === "string") return merge(getScope$1(root, scope), values);
    return merge(getScope$1(root, ""), scope);
}
class Defaults {
    constructor(_descriptors){
        this.animation = undefined;
        this.backgroundColor = "rgba(0,0,0,0.1)";
        this.borderColor = "rgba(0,0,0,0.1)";
        this.color = "#666";
        this.datasets = {};
        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();
        this.elements = {};
        this.events = [
            "mousemove",
            "mouseout",
            "click",
            "touchstart",
            "touchmove"
        ];
        this.font = {
            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
            size: 12,
            style: "normal",
            lineHeight: 1.2,
            weight: null
        };
        this.hover = {};
        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);
        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);
        this.hoverColor = (ctx, options)=>getHoverColor(options.color);
        this.indexAxis = "x";
        this.interaction = {
            mode: "nearest",
            intersect: true,
            includeInvisible: false
        };
        this.maintainAspectRatio = true;
        this.onHover = null;
        this.onClick = null;
        this.parsing = true;
        this.plugins = {};
        this.responsive = true;
        this.scale = undefined;
        this.scales = {};
        this.showLine = true;
        this.drawActiveElementsOnTop = true;
        this.describe(_descriptors);
    }
    set(scope, values) {
        return set(this, scope, values);
    }
    get(scope) {
        return getScope$1(this, scope);
    }
    describe(scope, values) {
        return set(descriptors, scope, values);
    }
    override(scope, values) {
        return set(overrides, scope, values);
    }
    route(scope, name, targetScope, targetName) {
        const scopeObject = getScope$1(this, scope);
        const targetScopeObject = getScope$1(this, targetScope);
        const privateName = "_" + name;
        Object.defineProperties(scopeObject, {
            [privateName]: {
                value: scopeObject[name],
                writable: true
            },
            [name]: {
                enumerable: true,
                get () {
                    const local = this[privateName];
                    const target = targetScopeObject[targetName];
                    if (isObject(local)) return Object.assign({}, target, local);
                    return valueOrDefault(local, target);
                },
                set (value) {
                    this[privateName] = value;
                }
            }
        });
    }
}
var defaults = new Defaults({
    _scriptable: (name)=>!name.startsWith("on"),
    _indexable: (name)=>name !== "events",
    hover: {
        _fallback: "interaction"
    },
    interaction: {
        _scriptable: false,
        _indexable: false
    }
});
function toFontString(font) {
    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) return null;
    return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
function _measureText(ctx, data, gc, longest, string) {
    let textWidth = data[string];
    if (!textWidth) {
        textWidth = data[string] = ctx.measureText(string).width;
        gc.push(string);
    }
    if (textWidth > longest) longest = textWidth;
    return longest;
}
function _longestText(ctx, font, arrayOfThings, cache) {
    cache = cache || {};
    let data = cache.data = cache.data || {};
    let gc = cache.garbageCollect = cache.garbageCollect || [];
    if (cache.font !== font) {
        data = cache.data = {};
        gc = cache.garbageCollect = [];
        cache.font = font;
    }
    ctx.save();
    ctx.font = font;
    let longest = 0;
    const ilen = arrayOfThings.length;
    let i, j, jlen, thing, nestedThing;
    for(i = 0; i < ilen; i++){
        thing = arrayOfThings[i];
        if (thing !== undefined && thing !== null && isArray(thing) !== true) longest = _measureText(ctx, data, gc, longest, thing);
        else if (isArray(thing)) for(j = 0, jlen = thing.length; j < jlen; j++){
            nestedThing = thing[j];
            if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
    }
    ctx.restore();
    const gcLen = gc.length / 2;
    if (gcLen > arrayOfThings.length) {
        for(i = 0; i < gcLen; i++)delete data[gc[i]];
        gc.splice(0, gcLen);
    }
    return longest;
}
function _alignPixel(chart, pixel, width) {
    const devicePixelRatio = chart.currentDevicePixelRatio;
    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clearCanvas(canvas, ctx) {
    ctx = ctx || canvas.getContext("2d");
    ctx.save();
    ctx.resetTransform();
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
}
function drawPoint(ctx, options, x, y) {
    drawPointLegend(ctx, options, x, y, null);
}
function drawPointLegend(ctx, options, x, y, w) {
    let type, xOffset, yOffset, size, cornerRadius, width;
    const style = options.pointStyle;
    const rotation = options.rotation;
    const radius = options.radius;
    let rad = (rotation || 0) * RAD_PER_DEG;
    if (style && typeof style === "object") {
        type = style.toString();
        if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
            ctx.save();
            ctx.translate(x, y);
            ctx.rotate(rad);
            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
            ctx.restore();
            return;
        }
    }
    if (isNaN(radius) || radius <= 0) return;
    ctx.beginPath();
    switch(style){
        default:
            if (w) ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
            else ctx.arc(x, y, radius, 0, TAU);
            ctx.closePath();
            break;
        case "triangle":
            ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
            rad += TWO_THIRDS_PI;
            ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
            rad += TWO_THIRDS_PI;
            ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
            ctx.closePath();
            break;
        case "rectRounded":
            cornerRadius = radius * 0.516;
            size = radius - cornerRadius;
            xOffset = Math.cos(rad + QUARTER_PI) * size;
            yOffset = Math.sin(rad + QUARTER_PI) * size;
            ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
            ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
            ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
            ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
            ctx.closePath();
            break;
        case "rect":
            if (!rotation) {
                size = Math.SQRT1_2 * radius;
                width = w ? w / 2 : size;
                ctx.rect(x - width, y - size, 2 * width, 2 * size);
                break;
            }
            rad += QUARTER_PI;
        case "rectRot":
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + yOffset, y - xOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.lineTo(x - yOffset, y + xOffset);
            ctx.closePath();
            break;
        case "crossRot":
            rad += QUARTER_PI;
        case "cross":
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.moveTo(x + yOffset, y - xOffset);
            ctx.lineTo(x - yOffset, y + xOffset);
            break;
        case "star":
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.moveTo(x + yOffset, y - xOffset);
            ctx.lineTo(x - yOffset, y + xOffset);
            rad += QUARTER_PI;
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.moveTo(x + yOffset, y - xOffset);
            ctx.lineTo(x - yOffset, y + xOffset);
            break;
        case "line":
            xOffset = w ? w / 2 : Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            break;
        case "dash":
            ctx.moveTo(x, y);
            ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
            break;
    }
    ctx.fill();
    if (options.borderWidth > 0) ctx.stroke();
}
function _isPointInArea(point, area, margin) {
    margin = margin || 0.5;
    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
    ctx.save();
    ctx.beginPath();
    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
    ctx.clip();
}
function unclipArea(ctx) {
    ctx.restore();
}
function _steppedLineTo(ctx, previous, target, flip, mode) {
    if (!previous) return ctx.lineTo(target.x, target.y);
    if (mode === "middle") {
        const midpoint = (previous.x + target.x) / 2.0;
        ctx.lineTo(midpoint, previous.y);
        ctx.lineTo(midpoint, target.y);
    } else if (mode === "after" !== !!flip) ctx.lineTo(previous.x, target.y);
    else ctx.lineTo(target.x, previous.y);
    ctx.lineTo(target.x, target.y);
}
function _bezierCurveTo(ctx, previous, target, flip) {
    if (!previous) return ctx.lineTo(target.x, target.y);
    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function renderText(ctx, text, x, y, font, opts = {}) {
    const lines = isArray(text) ? text : [
        text
    ];
    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
    let i, line;
    ctx.save();
    ctx.font = font.string;
    setRenderOpts(ctx, opts);
    for(i = 0; i < lines.length; ++i){
        line = lines[i];
        if (stroke) {
            if (opts.strokeColor) ctx.strokeStyle = opts.strokeColor;
            if (!isNullOrUndef(opts.strokeWidth)) ctx.lineWidth = opts.strokeWidth;
            ctx.strokeText(line, x, y, opts.maxWidth);
        }
        ctx.fillText(line, x, y, opts.maxWidth);
        decorateText(ctx, x, y, line, opts);
        y += font.lineHeight;
    }
    ctx.restore();
}
function setRenderOpts(ctx, opts) {
    if (opts.translation) ctx.translate(opts.translation[0], opts.translation[1]);
    if (!isNullOrUndef(opts.rotation)) ctx.rotate(opts.rotation);
    if (opts.color) ctx.fillStyle = opts.color;
    if (opts.textAlign) ctx.textAlign = opts.textAlign;
    if (opts.textBaseline) ctx.textBaseline = opts.textBaseline;
}
function decorateText(ctx, x, y, line, opts) {
    if (opts.strikethrough || opts.underline) {
        const metrics = ctx.measureText(line);
        const left = x - metrics.actualBoundingBoxLeft;
        const right = x + metrics.actualBoundingBoxRight;
        const top = y - metrics.actualBoundingBoxAscent;
        const bottom = y + metrics.actualBoundingBoxDescent;
        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
        ctx.strokeStyle = ctx.fillStyle;
        ctx.beginPath();
        ctx.lineWidth = opts.decorationWidth || 2;
        ctx.moveTo(left, yDecoration);
        ctx.lineTo(right, yDecoration);
        ctx.stroke();
    }
}
function addRoundedRectPath(ctx, rect) {
    const { x, y, w, h, radius } = rect;
    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);
    ctx.lineTo(x, y + h - radius.bottomLeft);
    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
    ctx.lineTo(x + w - radius.bottomRight, y + h);
    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
    ctx.lineTo(x + w, y + radius.topRight);
    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
    ctx.lineTo(x + radius.topLeft, y);
}
const LINE_HEIGHT = new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
const FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);
function toLineHeight(value, size) {
    const matches = ("" + value).match(LINE_HEIGHT);
    if (!matches || matches[1] === "normal") return size * 1.2;
    value = +matches[2];
    switch(matches[3]){
        case "px":
            return value;
        case "%":
            value /= 100;
            break;
    }
    return size * value;
}
const numberOrZero = (v)=>+v || 0;
function _readValueToProps(value, props) {
    const ret = {};
    const objProps = isObject(props);
    const keys = objProps ? Object.keys(props) : props;
    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;
    for (const prop of keys)ret[prop] = numberOrZero(read(prop));
    return ret;
}
function toTRBL(value) {
    return _readValueToProps(value, {
        top: "y",
        right: "x",
        bottom: "y",
        left: "x"
    });
}
function toTRBLCorners(value) {
    return _readValueToProps(value, [
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight"
    ]);
}
function toPadding(value) {
    const obj = toTRBL(value);
    obj.width = obj.left + obj.right;
    obj.height = obj.top + obj.bottom;
    return obj;
}
function toFont(options, fallback) {
    options = options || {};
    fallback = fallback || defaults.font;
    let size = valueOrDefault(options.size, fallback.size);
    if (typeof size === "string") size = parseInt(size, 10);
    let style = valueOrDefault(options.style, fallback.style);
    if (style && !("" + style).match(FONT_STYLE)) {
        console.warn('Invalid font style specified: "' + style + '"');
        style = "";
    }
    const font = {
        family: valueOrDefault(options.family, fallback.family),
        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
        size,
        style,
        weight: valueOrDefault(options.weight, fallback.weight),
        string: ""
    };
    font.string = toFontString(font);
    return font;
}
function resolve(inputs, context, index, info) {
    let cacheable = true;
    let i, ilen, value;
    for(i = 0, ilen = inputs.length; i < ilen; ++i){
        value = inputs[i];
        if (value === undefined) continue;
        if (context !== undefined && typeof value === "function") {
            value = value(context);
            cacheable = false;
        }
        if (index !== undefined && isArray(value)) {
            value = value[index % value.length];
            cacheable = false;
        }
        if (value !== undefined) {
            if (info && !cacheable) info.cacheable = false;
            return value;
        }
    }
}
function _addGrace(minmax, grace, beginAtZero) {
    const { min, max } = minmax;
    const change = toDimension(grace, (max - min) / 2);
    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;
    return {
        min: keepZero(min, -Math.abs(change)),
        max: keepZero(max, change)
    };
}
function createContext(parentContext, context) {
    return Object.assign(Object.create(parentContext), context);
}
function _createResolver(scopes, prefixes = [
    ""
], rootScopes = scopes, fallback, getTarget = ()=>scopes[0]) {
    if (!defined(fallback)) fallback = _resolve("_fallback", scopes);
    const cache = {
        [Symbol.toStringTag]: "Object",
        _cacheable: true,
        _scopes: scopes,
        _rootScopes: rootScopes,
        _fallback: fallback,
        _getTarget: getTarget,
        override: (scope)=>_createResolver([
                scope,
                ...scopes
            ], prefixes, rootScopes, fallback)
    };
    return new Proxy(cache, {
        deleteProperty (target, prop) {
            delete target[prop];
            delete target._keys;
            delete scopes[0][prop];
            return true;
        },
        get (target, prop) {
            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));
        },
        getOwnPropertyDescriptor (target, prop) {
            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
        },
        getPrototypeOf () {
            return Reflect.getPrototypeOf(scopes[0]);
        },
        has (target, prop) {
            return getKeysFromAllScopes(target).includes(prop);
        },
        ownKeys (target) {
            return getKeysFromAllScopes(target);
        },
        set (target, prop, value) {
            const storage = target._storage || (target._storage = getTarget());
            target[prop] = storage[prop] = value;
            delete target._keys;
            return true;
        }
    });
}
function _attachContext(proxy, context, subProxy, descriptorDefaults) {
    const cache = {
        _cacheable: false,
        _proxy: proxy,
        _context: context,
        _subProxy: subProxy,
        _stack: new Set(),
        _descriptors: _descriptors(proxy, descriptorDefaults),
        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),
        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
    };
    return new Proxy(cache, {
        deleteProperty (target, prop) {
            delete target[prop];
            delete proxy[prop];
            return true;
        },
        get (target, prop, receiver) {
            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));
        },
        getOwnPropertyDescriptor (target, prop) {
            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
                enumerable: true,
                configurable: true
            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
        },
        getPrototypeOf () {
            return Reflect.getPrototypeOf(proxy);
        },
        has (target, prop) {
            return Reflect.has(proxy, prop);
        },
        ownKeys () {
            return Reflect.ownKeys(proxy);
        },
        set (target, prop, value) {
            proxy[prop] = value;
            delete target[prop];
            return true;
        }
    });
}
function _descriptors(proxy, defaults = {
    scriptable: true,
    indexable: true
}) {
    const { _scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys } = proxy;
    return {
        allKeys: _allKeys,
        scriptable: _scriptable,
        indexable: _indexable,
        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,
        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable
    };
}
const readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;
const needsSubResolver = (prop, value)=>isObject(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve) {
    if (Object.prototype.hasOwnProperty.call(target, prop)) return target[prop];
    const value = resolve();
    target[prop] = value;
    return value;
}
function _resolveWithContext(target, prop, receiver) {
    const { _proxy, _context, _subProxy, _descriptors: descriptors } = target;
    let value = _proxy[prop];
    if (isFunction(value) && descriptors.isScriptable(prop)) value = _resolveScriptable(prop, value, target, receiver);
    if (isArray(value) && value.length) value = _resolveArray(prop, value, target, descriptors.isIndexable);
    if (needsSubResolver(prop, value)) value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
    return value;
}
function _resolveScriptable(prop, value, target, receiver) {
    const { _proxy, _context, _subProxy, _stack } = target;
    if (_stack.has(prop)) throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
    _stack.add(prop);
    value = value(_context, _subProxy || receiver);
    _stack.delete(prop);
    if (needsSubResolver(prop, value)) value = createSubResolver(_proxy._scopes, _proxy, prop, value);
    return value;
}
function _resolveArray(prop, value, target, isIndexable) {
    const { _proxy, _context, _subProxy, _descriptors: descriptors } = target;
    if (defined(_context.index) && isIndexable(prop)) value = value[_context.index % value.length];
    else if (isObject(value[0])) {
        const arr = value;
        const scopes = _proxy._scopes.filter((s)=>s !== arr);
        value = [];
        for (const item of arr){
            const resolver = createSubResolver(scopes, _proxy, prop, item);
            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
        }
    }
    return value;
}
function resolveFallback(fallback, prop, value) {
    return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent)=>key === true ? parent : typeof key === "string" ? resolveObjectKey(parent, key) : undefined;
function addScopes(set, parentScopes, key, parentFallback, value) {
    for (const parent of parentScopes){
        const scope = getScope(key, parent);
        if (scope) {
            set.add(scope);
            const fallback = resolveFallback(scope._fallback, key, value);
            if (defined(fallback) && fallback !== key && fallback !== parentFallback) return fallback;
        } else if (scope === false && defined(parentFallback) && key !== parentFallback) return null;
    }
    return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
    const rootScopes = resolver._rootScopes;
    const fallback = resolveFallback(resolver._fallback, prop, value);
    const allScopes = [
        ...parentScopes,
        ...rootScopes
    ];
    const set = new Set();
    set.add(value);
    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);
    if (key === null) return false;
    if (defined(fallback) && fallback !== prop) {
        key = addScopesFromKey(set, allScopes, fallback, key, value);
        if (key === null) return false;
    }
    return _createResolver(Array.from(set), [
        ""
    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set, allScopes, key, fallback, item) {
    while(key)key = addScopes(set, allScopes, key, fallback, item);
    return key;
}
function subGetTarget(resolver, prop, value) {
    const parent = resolver._getTarget();
    if (!(prop in parent)) parent[prop] = {};
    const target = parent[prop];
    if (isArray(target) && isObject(value)) return value;
    return target;
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
    let value;
    for (const prefix of prefixes){
        value = _resolve(readKey(prefix, prop), scopes);
        if (defined(value)) return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
    }
}
function _resolve(key, scopes) {
    for (const scope of scopes){
        if (!scope) continue;
        const value = scope[key];
        if (defined(value)) return value;
    }
}
function getKeysFromAllScopes(target) {
    let keys = target._keys;
    if (!keys) keys = target._keys = resolveKeysFromAllScopes(target._scopes);
    return keys;
}
function resolveKeysFromAllScopes(scopes) {
    const set = new Set();
    for (const scope of scopes)for (const key of Object.keys(scope).filter((k)=>!k.startsWith("_")))set.add(key);
    return Array.from(set);
}
function _parseObjectDataRadialScale(meta, data, start, count) {
    const { iScale } = meta;
    const { key = "r" } = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for(i = 0, ilen = count; i < ilen; ++i){
        index = i + start;
        item = data[index];
        parsed[i] = {
            r: iScale.parse(resolveObjectKey(item, key), index)
        };
    }
    return parsed;
}
const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];
const getValueAxis = (indexAxis)=>indexAxis === "x" ? "y" : "x";
function splineCurve(firstPoint, middlePoint, afterPoint, t) {
    const previous = firstPoint.skip ? middlePoint : firstPoint;
    const current = middlePoint;
    const next = afterPoint.skip ? middlePoint : afterPoint;
    const d01 = distanceBetweenPoints(current, previous);
    const d12 = distanceBetweenPoints(next, current);
    let s01 = d01 / (d01 + d12);
    let s12 = d12 / (d01 + d12);
    s01 = isNaN(s01) ? 0 : s01;
    s12 = isNaN(s12) ? 0 : s12;
    const fa = t * s01;
    const fb = t * s12;
    return {
        previous: {
            x: current.x - fa * (next.x - previous.x),
            y: current.y - fa * (next.y - previous.y)
        },
        next: {
            x: current.x + fb * (next.x - previous.x),
            y: current.y + fb * (next.y - previous.y)
        }
    };
}
function monotoneAdjust(points, deltaK, mK) {
    const pointsLen = points.length;
    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(let i = 0; i < pointsLen - 1; ++i){
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent || !pointAfter) continue;
        if (almostEquals(deltaK[i], 0, EPSILON)) {
            mK[i] = mK[i + 1] = 0;
            continue;
        }
        alphaK = mK[i] / deltaK[i];
        betaK = mK[i + 1] / deltaK[i];
        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
        if (squaredMagnitude <= 9) continue;
        tauK = 3 / Math.sqrt(squaredMagnitude);
        mK[i] = alphaK * tauK * deltaK[i];
        mK[i + 1] = betaK * tauK * deltaK[i];
    }
}
function monotoneCompute(points, mK, indexAxis = "x") {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    let delta, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(let i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) continue;
        const iPixel = pointCurrent[indexAxis];
        const vPixel = pointCurrent[valueAxis];
        if (pointBefore) {
            delta = (iPixel - pointBefore[indexAxis]) / 3;
            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
        }
        if (pointAfter) {
            delta = (pointAfter[indexAxis] - iPixel) / 3;
            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
        }
    }
}
function splineCurveMonotone(points, indexAxis = "x") {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    const deltaK = Array(pointsLen).fill(0);
    const mK = Array(pointsLen);
    let i, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) continue;
        if (pointAfter) {
            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
        }
        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
    }
    monotoneAdjust(points, deltaK, mK);
    monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
    return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
    let i, ilen, point, inArea, inAreaPrev;
    let inAreaNext = _isPointInArea(points[0], area);
    for(i = 0, ilen = points.length; i < ilen; ++i){
        inAreaPrev = inArea;
        inArea = inAreaNext;
        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
        if (!inArea) continue;
        point = points[i];
        if (inAreaPrev) {
            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
        }
        if (inAreaNext) {
            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
        }
    }
}
function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
    let i, ilen, point, controlPoints;
    if (options.spanGaps) points = points.filter((pt)=>!pt.skip);
    if (options.cubicInterpolationMode === "monotone") splineCurveMonotone(points, indexAxis);
    else {
        let prev = loop ? points[points.length - 1] : points[0];
        for(i = 0, ilen = points.length; i < ilen; ++i){
            point = points[i];
            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
            point.cp1x = controlPoints.previous.x;
            point.cp1y = controlPoints.previous.y;
            point.cp2x = controlPoints.next.x;
            point.cp2y = controlPoints.next.y;
            prev = point;
        }
    }
    if (options.capBezierPoints) capBezierPoints(points, area);
}
function _isDomSupported() {
    return typeof window !== "undefined" && typeof document !== "undefined";
}
function _getParentNode(domNode) {
    let parent = domNode.parentNode;
    if (parent && parent.toString() === "[object ShadowRoot]") parent = parent.host;
    return parent;
}
function parseMaxStyle(styleValue, node, parentProperty) {
    let valueInPixels;
    if (typeof styleValue === "string") {
        valueInPixels = parseInt(styleValue, 10);
        if (styleValue.indexOf("%") !== -1) valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    } else valueInPixels = styleValue;
    return valueInPixels;
}
const getComputedStyle = (element)=>window.getComputedStyle(element, null);
function getStyle(el, property) {
    return getComputedStyle(el).getPropertyValue(property);
}
const positions = [
    "top",
    "right",
    "bottom",
    "left"
];
function getPositionedStyle(styles, style, suffix) {
    const result = {};
    suffix = suffix ? "-" + suffix : "";
    for(let i = 0; i < 4; i++){
        const pos = positions[i];
        result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
    }
    result.width = result.left + result.right;
    result.height = result.top + result.bottom;
    return result;
}
const useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);
function getCanvasPosition(e, canvas) {
    const touches = e.touches;
    const source = touches && touches.length ? touches[0] : e;
    const { offsetX, offsetY } = source;
    let box = false;
    let x, y;
    if (useOffsetPos(offsetX, offsetY, e.target)) {
        x = offsetX;
        y = offsetY;
    } else {
        const rect = canvas.getBoundingClientRect();
        x = source.clientX - rect.left;
        y = source.clientY - rect.top;
        box = true;
    }
    return {
        x,
        y,
        box
    };
}
function getRelativePosition(evt, chart) {
    if ("native" in evt) return evt;
    const { canvas, currentDevicePixelRatio } = chart;
    const style = getComputedStyle(canvas);
    const borderBox = style.boxSizing === "border-box";
    const paddings = getPositionedStyle(style, "padding");
    const borders = getPositionedStyle(style, "border", "width");
    const { x, y, box } = getCanvasPosition(evt, canvas);
    const xOffset = paddings.left + (box && borders.left);
    const yOffset = paddings.top + (box && borders.top);
    let { width, height } = chart;
    if (borderBox) {
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    return {
        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
    };
}
function getContainerSize(canvas, width, height) {
    let maxWidth, maxHeight;
    if (width === undefined || height === undefined) {
        const container = _getParentNode(canvas);
        if (!container) {
            width = canvas.clientWidth;
            height = canvas.clientHeight;
        } else {
            const rect = container.getBoundingClientRect();
            const containerStyle = getComputedStyle(container);
            const containerBorder = getPositionedStyle(containerStyle, "border", "width");
            const containerPadding = getPositionedStyle(containerStyle, "padding");
            width = rect.width - containerPadding.width - containerBorder.width;
            height = rect.height - containerPadding.height - containerBorder.height;
            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
        }
    }
    return {
        width,
        height,
        maxWidth: maxWidth || INFINITY,
        maxHeight: maxHeight || INFINITY
    };
}
const round1 = (v)=>Math.round(v * 10) / 10;
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
    const style = getComputedStyle(canvas);
    const margins = getPositionedStyle(style, "margin");
    const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
    const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
    let { width, height } = containerSize;
    if (style.boxSizing === "content-box") {
        const borders = getPositionedStyle(style, "border", "width");
        const paddings = getPositionedStyle(style, "padding");
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    width = Math.max(0, width - margins.width);
    height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);
    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
    if (width && !height) height = round1(width / 2);
    return {
        width,
        height
    };
}
function retinaScale(chart, forceRatio, forceStyle) {
    const pixelRatio = forceRatio || 1;
    const deviceHeight = Math.floor(chart.height * pixelRatio);
    const deviceWidth = Math.floor(chart.width * pixelRatio);
    chart.height = deviceHeight / pixelRatio;
    chart.width = deviceWidth / pixelRatio;
    const canvas = chart.canvas;
    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
        canvas.style.height = `${chart.height}px`;
        canvas.style.width = `${chart.width}px`;
    }
    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
        chart.currentDevicePixelRatio = pixelRatio;
        canvas.height = deviceHeight;
        canvas.width = deviceWidth;
        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
        return true;
    }
    return false;
}
const supportsEventListenerOptions = function() {
    let passiveSupported = false;
    try {
        const options = {
            get passive () {
                passiveSupported = true;
                return false;
            }
        };
        window.addEventListener("test", null, options);
        window.removeEventListener("test", null, options);
    } catch (e) {}
    return passiveSupported;
}();
function readUsedSize(element, property) {
    const value = getStyle(element, property);
    const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
    return matches ? +matches[1] : undefined;
}
function _pointInLine(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: p1.y + t * (p2.y - p1.y)
    };
}
function _steppedInterpolation(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: mode === "middle" ? t < 0.5 ? p1.y : p2.y : mode === "after" ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
    };
}
function _bezierInterpolation(p1, p2, t, mode) {
    const cp1 = {
        x: p1.cp2x,
        y: p1.cp2y
    };
    const cp2 = {
        x: p2.cp1x,
        y: p2.cp1y
    };
    const a = _pointInLine(p1, cp1, t);
    const b = _pointInLine(cp1, cp2, t);
    const c = _pointInLine(cp2, p2, t);
    const d = _pointInLine(a, b, t);
    const e = _pointInLine(b, c, t);
    return _pointInLine(d, e, t);
}
const intlCache = new Map();
function getNumberFormat(locale, options) {
    options = options || {};
    const cacheKey = locale + JSON.stringify(options);
    let formatter = intlCache.get(cacheKey);
    if (!formatter) {
        formatter = new Intl.NumberFormat(locale, options);
        intlCache.set(cacheKey, formatter);
    }
    return formatter;
}
function formatNumber(num, locale, options) {
    return getNumberFormat(locale, options).format(num);
}
const getRightToLeftAdapter = function(rectX, width) {
    return {
        x (x) {
            return rectX + rectX + width - x;
        },
        setWidth (w) {
            width = w;
        },
        textAlign (align) {
            if (align === "center") return align;
            return align === "right" ? "left" : "right";
        },
        xPlus (x, value) {
            return x - value;
        },
        leftForLtr (x, itemWidth) {
            return x - itemWidth;
        }
    };
};
const getLeftToRightAdapter = function() {
    return {
        x (x) {
            return x;
        },
        setWidth (w) {},
        textAlign (align) {
            return align;
        },
        xPlus (x, value) {
            return x + value;
        },
        leftForLtr (x, _itemWidth) {
            return x;
        }
    };
};
function getRtlAdapter(rtl, rectX, width) {
    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
    let style, original;
    if (direction === "ltr" || direction === "rtl") {
        style = ctx.canvas.style;
        original = [
            style.getPropertyValue("direction"),
            style.getPropertyPriority("direction")
        ];
        style.setProperty("direction", direction, "important");
        ctx.prevTextDirection = original;
    }
}
function restoreTextDirection(ctx, original) {
    if (original !== undefined) {
        delete ctx.prevTextDirection;
        ctx.canvas.style.setProperty("direction", original[0], original[1]);
    }
}
function propertyFn(property) {
    if (property === "angle") return {
        between: _angleBetween,
        compare: _angleDiff,
        normalize: _normalizeAngle
    };
    return {
        between: _isBetween,
        compare: (a, b)=>a - b,
        normalize: (x)=>x
    };
}
function normalizeSegment({ start, end, count, loop, style }) {
    return {
        start: start % count,
        end: end % count,
        loop: loop && (end - start + 1) % count === 0,
        style
    };
}
function getSegment(segment, points, bounds) {
    const { property, start: startBound, end: endBound } = bounds;
    const { between, normalize } = propertyFn(property);
    const count = points.length;
    let { start, end, loop } = segment;
    let i, ilen;
    if (loop) {
        start += count;
        end += count;
        for(i = 0, ilen = count; i < ilen; ++i){
            if (!between(normalize(points[start % count][property]), startBound, endBound)) break;
            start--;
            end--;
        }
        start %= count;
        end %= count;
    }
    if (end < start) end += count;
    return {
        start,
        end,
        loop,
        style: segment.style
    };
}
function _boundSegment(segment, points, bounds) {
    if (!bounds) return [
        segment
    ];
    const { property, start: startBound, end: endBound } = bounds;
    const count = points.length;
    const { compare, between, normalize } = propertyFn(property);
    const { start, end, loop, style } = getSegment(segment, points, bounds);
    const result = [];
    let inside = false;
    let subStart = null;
    let value, point, prevValue;
    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);
    const shouldStart = ()=>inside || startIsBefore();
    const shouldStop = ()=>!inside || endIsBefore();
    for(let i = start, prev = start; i <= end; ++i){
        point = points[i % count];
        if (point.skip) continue;
        value = normalize(point[property]);
        if (value === prevValue) continue;
        inside = between(value, startBound, endBound);
        if (subStart === null && shouldStart()) subStart = compare(value, startBound) === 0 ? i : prev;
        if (subStart !== null && shouldStop()) {
            result.push(normalizeSegment({
                start: subStart,
                end: i,
                loop,
                count,
                style
            }));
            subStart = null;
        }
        prev = i;
        prevValue = value;
    }
    if (subStart !== null) result.push(normalizeSegment({
        start: subStart,
        end,
        loop,
        count,
        style
    }));
    return result;
}
function _boundSegments(line, bounds) {
    const result = [];
    const segments = line.segments;
    for(let i = 0; i < segments.length; i++){
        const sub = _boundSegment(segments[i], line.points, bounds);
        if (sub.length) result.push(...sub);
    }
    return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
    let start = 0;
    let end = count - 1;
    if (loop && !spanGaps) while(start < count && !points[start].skip)start++;
    while(start < count && points[start].skip)start++;
    start %= count;
    if (loop) end += start;
    while(end > start && points[end % count].skip)end--;
    end %= count;
    return {
        start,
        end
    };
}
function solidSegments(points, start, max, loop) {
    const count = points.length;
    const result = [];
    let last = start;
    let prev = points[start];
    let end;
    for(end = start + 1; end <= max; ++end){
        const cur = points[end % count];
        if (cur.skip || cur.stop) {
            if (!prev.skip) {
                loop = false;
                result.push({
                    start: start % count,
                    end: (end - 1) % count,
                    loop
                });
                start = last = cur.stop ? end : null;
            }
        } else {
            last = end;
            if (prev.skip) start = end;
        }
        prev = cur;
    }
    if (last !== null) result.push({
        start: start % count,
        end: last % count,
        loop
    });
    return result;
}
function _computeSegments(line, segmentOptions) {
    const points = line.points;
    const spanGaps = line.options.spanGaps;
    const count = points.length;
    if (!count) return [];
    const loop = !!line._loop;
    const { start, end } = findStartAndEnd(points, count, loop, spanGaps);
    if (spanGaps === true) return splitByStyles(line, [
        {
            start,
            end,
            loop
        }
    ], points, segmentOptions);
    const max = end < start ? end + count : end;
    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function splitByStyles(line, segments, points, segmentOptions) {
    if (!segmentOptions || !segmentOptions.setContext || !points) return segments;
    return doSplitByStyles(line, segments, points, segmentOptions);
}
function doSplitByStyles(line, segments, points, segmentOptions) {
    const chartContext = line._chart.getContext();
    const baseStyle = readStyle(line.options);
    const { _datasetIndex: datasetIndex, options: { spanGaps } } = line;
    const count = points.length;
    const result = [];
    let prevStyle = baseStyle;
    let start = segments[0].start;
    let i = start;
    function addStyle(s, e, l, st) {
        const dir = spanGaps ? -1 : 1;
        if (s === e) return;
        s += count;
        while(points[s % count].skip)s -= dir;
        while(points[e % count].skip)e += dir;
        if (s % count !== e % count) {
            result.push({
                start: s % count,
                end: e % count,
                loop: l,
                style: st
            });
            prevStyle = st;
            start = e % count;
        }
    }
    for (const segment of segments){
        start = spanGaps ? start : segment.start;
        let prev = points[start % count];
        let style;
        for(i = start + 1; i <= segment.end; i++){
            const pt = points[i % count];
            style = readStyle(segmentOptions.setContext(createContext(chartContext, {
                type: "segment",
                p0: prev,
                p1: pt,
                p0DataIndex: (i - 1) % count,
                p1DataIndex: i % count,
                datasetIndex
            })));
            if (styleChanged(style, prevStyle)) addStyle(start, i - 1, segment.loop, prevStyle);
            prev = pt;
            prevStyle = style;
        }
        if (start < i - 1) addStyle(start, i - 1, segment.loop, prevStyle);
    }
    return result;
}
function readStyle(options) {
    return {
        backgroundColor: options.backgroundColor,
        borderCapStyle: options.borderCapStyle,
        borderDash: options.borderDash,
        borderDashOffset: options.borderDashOffset,
        borderJoinStyle: options.borderJoinStyle,
        borderWidth: options.borderWidth,
        borderColor: options.borderColor
    };
}
function styleChanged(style, prevStyle) {
    return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8lBBf":[function(require,module,exports) {
!function(e, t) {
    module.exports = t();
}(self, ()=>(()=>{
        "use strict";
        var e = {
            d: (t, o)=>{
                for(var n in o)e.o(o, n) && !e.o(t, n) && Object.defineProperty(t, n, {
                    enumerable: !0,
                    get: o[n]
                });
            },
            o: (e, t)=>Object.prototype.hasOwnProperty.call(e, t),
            r: (e)=>{
                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module"
                }), Object.defineProperty(e, "__esModule", {
                    value: !0
                });
            }
        }, t = {};
        e.r(t), e.d(t, {
            default: ()=>g
        });
        var o = 0, n = 0, i = 16, s = {
            wheel: function(e) {},
            touchend: function(e) {},
            touchstart: function(e) {},
            click: function(e) {}
        }, l = function(e, t, o, n) {
            var i = o - t + 1;
            return e ? (o -= i, (t -= i) < 0 && (t = 0, o = i - 1)) : (t += i, (o += i) >= n - 1 && (t = n - i, o = n - 1)), {
                min: t,
                max: o
            };
        }, c = function(e, t) {
            e.beginPath(), e.fillStyle = "#ededed", e.fillRect(t.containerX, t.containerY, t.containerWidth, t.containerHeight), e.closePath(), e.beginPath(), e.fillStyle = "#cccccc", e.fillRect(t.scrollX, t.scrollY, t.scrollWidth, t.scrollHeight), e.closePath();
        }, a = function(e, t, o, n) {
            e.beginPath(), e.lineWidth = 1, e.strokeStyle = "#E8E8E8", e.strokeRect(t.x, t.y, t.width, t.height), e.fill(), e.closePath(), e.beginPath(), e.lineWidth = 1, e.strokeStyle = "#666666", "Horizontal" === n && (e.moveTo(o.x + o.offsetX, o.y - o.offsetY), e.lineTo(o.x - o.offsetX, o.y), e.lineTo(o.x + o.offsetX, o.y + o.offsetY)), "Vertical" === n && (e.moveTo(o.x - o.offsetX, o.y - o.offsetY), e.lineTo(o.x, o.y + o.offsetY), e.lineTo(o.x + o.offsetX, o.y - o.offsetY)), e.stroke(), e.closePath();
        }, r = function(e, t) {
            var o = l(e, +t.options.scales.x.min, +t.options.scales.x.max, t.data.labels.length), n = o.min, i = o.max;
            t.options.scales.x.min = n, t.options.scales.x.max = i, t.update();
        }, f = function(e, t) {
            var o = l(e, +t.options.scales.y.min, +t.options.scales.y.max, t.data.labels.length), n = o.min, i = o.max;
            t.options.scales.y.min = n, t.options.scales.y.max = i, t.update();
        }, h = function(e, t) {
            "x" !== t.options.indexAxis || isNaN(+t.options.scales.x.min) || (e.preventDefault(), e.stopPropagation(), r(0 !== e.deltaX ? e.deltaX < 0 : e.deltaY < 0, t)), "y" !== t.options.indexAxis || isNaN(+t.options.scales.y.min) || (e.preventDefault(), e.stopPropagation(), f(e.deltaY < 0, t));
        }, d = function(e, t) {
            e.preventDefault(), e.stopPropagation(), o = e.changedTouches[0].clientX, n = e.changedTouches[0].clientY;
        }, u = function(e, t) {
            var i = e.changedTouches[0].clientX, s = e.changedTouches[0].clientY;
            e.preventDefault(), e.stopPropagation(), "x" !== t.options.indexAxis || i === o || isNaN(+t.options.scales.x.min) || r(i - o > 0, t), "y" !== t.options.indexAxis || s === n || isNaN(+t.options.scales.y.min) || f(s - n > 0, t);
        }, p = function(e, t) {
            var o = t.canvas.getBoundingClientRect(), n = !1, s = !1;
            "x" !== t.options.indexAxis || isNaN(+t.options.scales.x.min) || (n = e.offsetX >= 0 && e.offsetX <= i && e.offsetY >= o.height - i - .5 && e.offsetY <= o.height - .5, s = e.offsetX >= 21 && e.offsetX <= 37 && e.offsetY >= o.height - i - .5 && e.offsetY <= o.height - .5, (n || s) && r(n, t)), "y" !== t.options.indexAxis || isNaN(+t.options.scales.y.min) || (n = e.offsetX >= 0 && e.offsetX <= i && e.offsetY >= o.height - 32 - 1 && e.offsetY <= o.height - i - 1, s = e.offsetX >= 0 && e.offsetX <= i && e.offsetY >= o.height - i - 1 && e.offsetY <= o.height - 1, (n || s) && f(n, t));
        };
        const g = {
            id: "scrollBar",
            beforeInit: function(e, t, o) {
                s = {
                    wheel: function(t) {
                        return h(t, e);
                    },
                    touchstart: function(e) {
                        return d(e);
                    },
                    touchend: function(t) {
                        return u(t, e);
                    },
                    click: function(t) {
                        return p(t, e);
                    }
                }, e.canvas.addEventListener("wheel", s.wheel, {
                    passive: !1
                }), e.canvas.addEventListener("touchstart", s.touchstart, {
                    passive: !0
                }), e.canvas.addEventListener("touchend", s.touchend, {
                    passive: !0
                }), e.canvas.addEventListener("click", s.click, {
                    passive: !0
                });
            },
            afterDraw: function(e, t, o) {
                if (o.enable && null != e.data.labels && null != o.scrollType) {
                    var n = e.ctx, s = (e.chartArea.top, e.canvas.getBoundingClientRect()), l = e.data.labels.length, r = ("Vertical" === o.scrollType ? (s.height - 45) / l : (s.width - 45) / l) * o.scrollSize, f = (s.height - 45) / l * +e.options.scales.y.min + 1, h = 45 + (s.width - 45) / l * +e.options.scales.x.min;
                    o.scrollSize < l && ("Vertical" === o.scrollType ? (c(n, {
                        containerX: 0,
                        containerY: 1,
                        containerWidth: 8,
                        containerHeight: s.height - 45,
                        scrollX: 0,
                        scrollY: f,
                        scrollWidth: 8,
                        scrollHeight: r
                    }), a(n, {
                        x: 0,
                        y: s.height - i - 1,
                        width: i,
                        height: i
                    }, {
                        x: 8,
                        y: s.height - 8 - 1,
                        offsetX: 4.5,
                        offsetY: 2.5
                    }, o.scrollType), a(n, {
                        x: 0,
                        y: s.height - 32 - 6,
                        width: i,
                        height: i
                    }, {
                        x: 8,
                        y: s.height - 24 - 6,
                        offsetX: -4.5,
                        offsetY: -2.5
                    }, o.scrollType)) : "Horizontal" === o.scrollType && (c(n, {
                        containerX: 45,
                        containerY: s.height - 8 - 1,
                        containerWidth: s.width - 45,
                        containerHeight: 8,
                        scrollX: h,
                        scrollY: s.height - 8 - 1,
                        scrollWidth: r,
                        scrollHeight: 8
                    }), a(n, {
                        x: 0,
                        y: s.height - i - 1,
                        width: i,
                        height: i
                    }, {
                        x: 8,
                        y: s.height - 8.5,
                        offsetX: 2.5,
                        offsetY: 4.5
                    }, o.scrollType), a(n, {
                        x: 21,
                        y: s.height - i - 1,
                        width: i,
                        height: i
                    }, {
                        x: 29,
                        y: s.height - 8.5,
                        offsetX: -2.5,
                        offsetY: 4.5
                    }, o.scrollType)));
                }
            },
            beforeUpdate: function(e, t, o) {
                s = {
                    wheel: function(t) {
                        return h(t, e);
                    },
                    touchstart: function(e) {
                        return d(e);
                    },
                    touchend: function(t) {
                        return u(t, e);
                    },
                    click: function(t) {
                        return p(t, e);
                    }
                };
            }
        };
        return t;
    })());

},{}],"cwHk7":[function(require,module,exports) {
/**
   * npm package:  chartjs-plugin-doughnutlabel-v3 v1.2.0
   * 
   * Chart.js (Version 3) Doughnut Chart plugin to display
   * custom lines of text in the center of the circle.
   * 
   * author: Jeff Brower <jeff@pointhere.net>
   * 
   * supplies:  chartjs-plugin-doughnutlabel.js v1.2.0
   * Released under the MIT license.
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "coreFunctions", ()=>coreFunctions);
parcelHelpers.export(exports, "default", ()=>DoughnutLabel);
var _chartJs = require("chart.js");
var _helpers = require("chart.js/helpers");
const parseText = (text, chart)=>typeof text === "function" ? text(chart) : text;
const parseFont = (value)=>{
    const defaults = (0, _chartJs.Chart).defaults;
    const size = (0, _helpers.valueOrDefault)(value.size, defaults.font.size);
    const font = {
        family: (0, _helpers.valueOrDefault)(value.family, defaults.font.family),
        // FontSpec types this as a number|string and the toLineHeight function
        // returns a number. The first argument 'value.lineHeight' can be a
        // number|string and 'size' is a number.
        lineHeight: (0, _helpers.toLineHeight)(value.lineHeight, size),
        size: size,
        style: (0, _helpers.valueOrDefault)(value.style, defaults.font.style),
        weight: (0, _helpers.valueOrDefault)(value.weight, null),
        string: ""
    };
    // Add a 'string' property to our font object.
    font.string = utils.toFontString(font);
    return font;
};
const toFontString = (font)=>{
    if (!font || (0, _helpers.isNullOrUndef)(font.size) || (0, _helpers.isNullOrUndef)(font.family)) return "";
    return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
};
const textSize = (chart, labels)=>{
    const { ctx } = chart;
    const prev = ctx.font;
    let width = 0;
    let height = 0;
    labels.forEach((label)=>{
        // We allow 'text' to be a string or the return value of a function as a string.
        const text = typeof label.text === "function" ? label.text(chart) : label.text;
        ctx.font = label.font ? label.font.string : "";
        width = Math.max(ctx.measureText(text).width, width);
        height += label.font.lineHeight;
    });
    ctx.font = prev;
    const result = {
        height: height,
        width: width
    };
    return result;
};
const utils = {
    parseText,
    parseFont,
    toFontString,
    textSize
};
const drawDoughnutLabel = (chart, options)=>{
    if (chart.chartArea && options) {
        const { labels } = options;
        if (!labels?.length) return;
        const { ctx, chartArea: { top, right, bottom, left } } = chart;
        const innerLabels = [];
        labels.forEach((label)=>{
            const text = utils.parseText(label.text, chart);
            const font = utils.parseFont((0, _helpers.resolve)([
                label.font,
                options.font,
                (0, _chartJs.Chart).defaults.font
            ], ctx, 0) || (0, _chartJs.Chart).defaults.font);
            const color = (0, _helpers.resolve)([
                label.color,
                options.color,
                (0, _chartJs.Chart).defaults.color
            ], ctx, 0);
            const innerLabel = {
                text,
                font,
                color: color ?? "#000"
            };
            innerLabels.push(innerLabel);
        });
        let textAreaSize = utils.textSize(chart, innerLabels);
        // Calculate the adjustment ratio to fit the text area into the doughnut
        // inner circle
        const hypotenuse = Math.sqrt(Math.pow(textAreaSize.width, 2) + Math.pow(textAreaSize.height, 2));
        const innerDiameter = (0, _chartJs.DoughnutController).prototype.innerRadius * 2;
        const fitRatio = innerDiameter / hypotenuse;
        // Adjust the font if necessary and recalculate the text area after
        // applying the fit ratio
        if (fitRatio < 1) {
            innerLabels.forEach((innerLabel)=>{
                innerLabel.font.size = Math.floor(innerLabel.font.size * fitRatio);
                innerLabel.font.lineHeight = 1.2; // was undefined
                innerLabel.font = utils.parseFont((0, _helpers.resolve)([
                    innerLabel.font,
                    null
                ], ctx, 0) || (0, _chartJs.Chart).defaults.font);
            });
            textAreaSize = utils.textSize(chart, innerLabels);
        }
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        // The center of the inner circle
        const centerX = (left + right) / 2;
        const centerY = (top + bottom) / 2;
        // The top Y coordinate of the text area
        const topY = centerY - textAreaSize.height / 2;
        let i;
        const ilen = innerLabels.length;
        let currentHeight = 0;
        for(i = 0; i < ilen; ++i){
            ctx.fillStyle = innerLabels[i].color;
            ctx.font = innerLabels[i].font.string;
            // The Y center of each line
            const lineCenterY = topY + innerLabels[i].font.lineHeight / 2 + currentHeight;
            currentHeight += innerLabels[i].font.lineHeight;
            // We allow 'text' to be a string or the return value of a function as
            // a string.
            // const text = typeof innerLabels[i].text === 'function' ? innerLabels[i].text(chart) : innerLabels[i].text;
            const text = utils.parseText(innerLabels[i].text, chart);
            // Draw each line of text
            ctx.fillText(text, centerX, lineCenterY);
        }
    }
};
const coreFunctions = {
    drawDoughnutLabel
};
var DoughnutLabel = {
    id: "doughnutLabel",
    defaults: {
        font: {
            family: "sans-serif",
            size: 16,
            style: "normal",
            weight: "normal",
            lineHeight: 1.2,
            string: "16px sans-serif"
        }
    },
    beforeDraw: (chart, args, options)=>drawDoughnutLabel(chart, options)
};

},{"chart.js":"d3eK4","chart.js/helpers":"7ZUAe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ZUAe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpersMjs = require("../dist/helpers.mjs");
parcelHelpers.exportAll(_helpersMjs, exports);

},{"../dist/helpers.mjs":"7gYQu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7gYQu":[function(require,module,exports) {
/*!
 * Chart.js v3.9.1
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HALF_PI", ()=>(0, _helpersSegmentMjs.H));
parcelHelpers.export(exports, "INFINITY", ()=>(0, _helpersSegmentMjs.b1));
parcelHelpers.export(exports, "PI", ()=>(0, _helpersSegmentMjs.P));
parcelHelpers.export(exports, "PITAU", ()=>(0, _helpersSegmentMjs.b0));
parcelHelpers.export(exports, "QUARTER_PI", ()=>(0, _helpersSegmentMjs.b3));
parcelHelpers.export(exports, "RAD_PER_DEG", ()=>(0, _helpersSegmentMjs.b2));
parcelHelpers.export(exports, "TAU", ()=>(0, _helpersSegmentMjs.T));
parcelHelpers.export(exports, "TWO_THIRDS_PI", ()=>(0, _helpersSegmentMjs.b4));
parcelHelpers.export(exports, "_addGrace", ()=>(0, _helpersSegmentMjs.D));
parcelHelpers.export(exports, "_alignPixel", ()=>(0, _helpersSegmentMjs.J));
parcelHelpers.export(exports, "_alignStartEnd", ()=>(0, _helpersSegmentMjs.S));
parcelHelpers.export(exports, "_angleBetween", ()=>(0, _helpersSegmentMjs.p));
parcelHelpers.export(exports, "_angleDiff", ()=>(0, _helpersSegmentMjs.b5));
parcelHelpers.export(exports, "_arrayUnique", ()=>(0, _helpersSegmentMjs._));
parcelHelpers.export(exports, "_attachContext", ()=>(0, _helpersSegmentMjs.a9));
parcelHelpers.export(exports, "_bezierCurveTo", ()=>(0, _helpersSegmentMjs.at));
parcelHelpers.export(exports, "_bezierInterpolation", ()=>(0, _helpersSegmentMjs.aq));
parcelHelpers.export(exports, "_boundSegment", ()=>(0, _helpersSegmentMjs.ay));
parcelHelpers.export(exports, "_boundSegments", ()=>(0, _helpersSegmentMjs.ao));
parcelHelpers.export(exports, "_capitalize", ()=>(0, _helpersSegmentMjs.W));
parcelHelpers.export(exports, "_computeSegments", ()=>(0, _helpersSegmentMjs.an));
parcelHelpers.export(exports, "_createResolver", ()=>(0, _helpersSegmentMjs.aa));
parcelHelpers.export(exports, "_decimalPlaces", ()=>(0, _helpersSegmentMjs.aL));
parcelHelpers.export(exports, "_deprecated", ()=>(0, _helpersSegmentMjs.aU));
parcelHelpers.export(exports, "_descriptors", ()=>(0, _helpersSegmentMjs.ab));
parcelHelpers.export(exports, "_elementsEqual", ()=>(0, _helpersSegmentMjs.ai));
parcelHelpers.export(exports, "_factorize", ()=>(0, _helpersSegmentMjs.A));
parcelHelpers.export(exports, "_filterBetween", ()=>(0, _helpersSegmentMjs.aN));
parcelHelpers.export(exports, "_getParentNode", ()=>(0, _helpersSegmentMjs.a2));
parcelHelpers.export(exports, "_getStartAndCountOfVisiblePoints", ()=>(0, _helpersSegmentMjs.q));
parcelHelpers.export(exports, "_int16Range", ()=>(0, _helpersSegmentMjs.I));
parcelHelpers.export(exports, "_isBetween", ()=>(0, _helpersSegmentMjs.ak));
parcelHelpers.export(exports, "_isClickEvent", ()=>(0, _helpersSegmentMjs.aj));
parcelHelpers.export(exports, "_isDomSupported", ()=>(0, _helpersSegmentMjs.a6));
parcelHelpers.export(exports, "_isPointInArea", ()=>(0, _helpersSegmentMjs.$));
parcelHelpers.export(exports, "_limitValue", ()=>(0, _helpersSegmentMjs.E));
parcelHelpers.export(exports, "_longestText", ()=>(0, _helpersSegmentMjs.aM));
parcelHelpers.export(exports, "_lookup", ()=>(0, _helpersSegmentMjs.aO));
parcelHelpers.export(exports, "_lookupByKey", ()=>(0, _helpersSegmentMjs.Z));
parcelHelpers.export(exports, "_measureText", ()=>(0, _helpersSegmentMjs.G));
parcelHelpers.export(exports, "_merger", ()=>(0, _helpersSegmentMjs.aS));
parcelHelpers.export(exports, "_mergerIf", ()=>(0, _helpersSegmentMjs.aT));
parcelHelpers.export(exports, "_normalizeAngle", ()=>(0, _helpersSegmentMjs.az));
parcelHelpers.export(exports, "_parseObjectDataRadialScale", ()=>(0, _helpersSegmentMjs.y));
parcelHelpers.export(exports, "_pointInLine", ()=>(0, _helpersSegmentMjs.ar));
parcelHelpers.export(exports, "_readValueToProps", ()=>(0, _helpersSegmentMjs.al));
parcelHelpers.export(exports, "_rlookupByKey", ()=>(0, _helpersSegmentMjs.Y));
parcelHelpers.export(exports, "_scaleRangesChanged", ()=>(0, _helpersSegmentMjs.w));
parcelHelpers.export(exports, "_setMinAndMaxByKey", ()=>(0, _helpersSegmentMjs.aH));
parcelHelpers.export(exports, "_splitKey", ()=>(0, _helpersSegmentMjs.aV));
parcelHelpers.export(exports, "_steppedInterpolation", ()=>(0, _helpersSegmentMjs.ap));
parcelHelpers.export(exports, "_steppedLineTo", ()=>(0, _helpersSegmentMjs.as));
parcelHelpers.export(exports, "_textX", ()=>(0, _helpersSegmentMjs.aC));
parcelHelpers.export(exports, "_toLeftRightCenter", ()=>(0, _helpersSegmentMjs.R));
parcelHelpers.export(exports, "_updateBezierControlPoints", ()=>(0, _helpersSegmentMjs.am));
parcelHelpers.export(exports, "addRoundedRectPath", ()=>(0, _helpersSegmentMjs.av));
parcelHelpers.export(exports, "almostEquals", ()=>(0, _helpersSegmentMjs.aK));
parcelHelpers.export(exports, "almostWhole", ()=>(0, _helpersSegmentMjs.aJ));
parcelHelpers.export(exports, "callback", ()=>(0, _helpersSegmentMjs.C));
parcelHelpers.export(exports, "clearCanvas", ()=>(0, _helpersSegmentMjs.ag));
parcelHelpers.export(exports, "clipArea", ()=>(0, _helpersSegmentMjs.L));
parcelHelpers.export(exports, "clone", ()=>(0, _helpersSegmentMjs.aR));
parcelHelpers.export(exports, "color", ()=>(0, _helpersSegmentMjs.c));
parcelHelpers.export(exports, "createContext", ()=>(0, _helpersSegmentMjs.h));
parcelHelpers.export(exports, "debounce", ()=>(0, _helpersSegmentMjs.ae));
parcelHelpers.export(exports, "defined", ()=>(0, _helpersSegmentMjs.j));
parcelHelpers.export(exports, "distanceBetweenPoints", ()=>(0, _helpersSegmentMjs.aG));
parcelHelpers.export(exports, "drawPoint", ()=>(0, _helpersSegmentMjs.au));
parcelHelpers.export(exports, "drawPointLegend", ()=>(0, _helpersSegmentMjs.aE));
parcelHelpers.export(exports, "each", ()=>(0, _helpersSegmentMjs.Q));
parcelHelpers.export(exports, "easingEffects", ()=>(0, _helpersSegmentMjs.e));
parcelHelpers.export(exports, "finiteOrDefault", ()=>(0, _helpersSegmentMjs.B));
parcelHelpers.export(exports, "fontString", ()=>(0, _helpersSegmentMjs.a_));
parcelHelpers.export(exports, "formatNumber", ()=>(0, _helpersSegmentMjs.o));
parcelHelpers.export(exports, "getAngleFromPoint", ()=>(0, _helpersSegmentMjs.a0));
parcelHelpers.export(exports, "getHoverColor", ()=>(0, _helpersSegmentMjs.aQ));
parcelHelpers.export(exports, "getMaximumSize", ()=>(0, _helpersSegmentMjs.a1));
parcelHelpers.export(exports, "getRelativePosition", ()=>(0, _helpersSegmentMjs.X));
parcelHelpers.export(exports, "getRtlAdapter", ()=>(0, _helpersSegmentMjs.aA));
parcelHelpers.export(exports, "getStyle", ()=>(0, _helpersSegmentMjs.aZ));
parcelHelpers.export(exports, "isArray", ()=>(0, _helpersSegmentMjs.b));
parcelHelpers.export(exports, "isFinite", ()=>(0, _helpersSegmentMjs.g));
parcelHelpers.export(exports, "isFunction", ()=>(0, _helpersSegmentMjs.a8));
parcelHelpers.export(exports, "isNullOrUndef", ()=>(0, _helpersSegmentMjs.k));
parcelHelpers.export(exports, "isNumber", ()=>(0, _helpersSegmentMjs.x));
parcelHelpers.export(exports, "isObject", ()=>(0, _helpersSegmentMjs.i));
parcelHelpers.export(exports, "isPatternOrGradient", ()=>(0, _helpersSegmentMjs.aP));
parcelHelpers.export(exports, "listenArrayEvents", ()=>(0, _helpersSegmentMjs.l));
parcelHelpers.export(exports, "log10", ()=>(0, _helpersSegmentMjs.z));
parcelHelpers.export(exports, "merge", ()=>(0, _helpersSegmentMjs.V));
parcelHelpers.export(exports, "mergeIf", ()=>(0, _helpersSegmentMjs.ac));
parcelHelpers.export(exports, "niceNum", ()=>(0, _helpersSegmentMjs.aI));
parcelHelpers.export(exports, "noop", ()=>(0, _helpersSegmentMjs.aF));
parcelHelpers.export(exports, "overrideTextDirection", ()=>(0, _helpersSegmentMjs.aB));
parcelHelpers.export(exports, "readUsedSize", ()=>(0, _helpersSegmentMjs.a3));
parcelHelpers.export(exports, "renderText", ()=>(0, _helpersSegmentMjs.M));
parcelHelpers.export(exports, "requestAnimFrame", ()=>(0, _helpersSegmentMjs.r));
parcelHelpers.export(exports, "resolve", ()=>(0, _helpersSegmentMjs.a));
parcelHelpers.export(exports, "resolveObjectKey", ()=>(0, _helpersSegmentMjs.f));
parcelHelpers.export(exports, "restoreTextDirection", ()=>(0, _helpersSegmentMjs.aD));
parcelHelpers.export(exports, "retinaScale", ()=>(0, _helpersSegmentMjs.af));
parcelHelpers.export(exports, "setsEqual", ()=>(0, _helpersSegmentMjs.ah));
parcelHelpers.export(exports, "sign", ()=>(0, _helpersSegmentMjs.s));
parcelHelpers.export(exports, "splineCurve", ()=>(0, _helpersSegmentMjs.aX));
parcelHelpers.export(exports, "splineCurveMonotone", ()=>(0, _helpersSegmentMjs.aY));
parcelHelpers.export(exports, "supportsEventListenerOptions", ()=>(0, _helpersSegmentMjs.a5));
parcelHelpers.export(exports, "throttled", ()=>(0, _helpersSegmentMjs.a4));
parcelHelpers.export(exports, "toDegrees", ()=>(0, _helpersSegmentMjs.F));
parcelHelpers.export(exports, "toDimension", ()=>(0, _helpersSegmentMjs.n));
parcelHelpers.export(exports, "toFont", ()=>(0, _helpersSegmentMjs.O));
parcelHelpers.export(exports, "toFontString", ()=>(0, _helpersSegmentMjs.aW));
parcelHelpers.export(exports, "toLineHeight", ()=>(0, _helpersSegmentMjs.a$));
parcelHelpers.export(exports, "toPadding", ()=>(0, _helpersSegmentMjs.K));
parcelHelpers.export(exports, "toPercentage", ()=>(0, _helpersSegmentMjs.m));
parcelHelpers.export(exports, "toRadians", ()=>(0, _helpersSegmentMjs.t));
parcelHelpers.export(exports, "toTRBL", ()=>(0, _helpersSegmentMjs.aw));
parcelHelpers.export(exports, "toTRBLCorners", ()=>(0, _helpersSegmentMjs.ax));
parcelHelpers.export(exports, "uid", ()=>(0, _helpersSegmentMjs.ad));
parcelHelpers.export(exports, "unclipArea", ()=>(0, _helpersSegmentMjs.N));
parcelHelpers.export(exports, "unlistenArrayEvents", ()=>(0, _helpersSegmentMjs.u));
parcelHelpers.export(exports, "valueOrDefault", ()=>(0, _helpersSegmentMjs.v));
var _helpersSegmentMjs = require("./chunks/helpers.segment.mjs");

},{"./chunks/helpers.segment.mjs":"SiqvY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["9mA4B","gBTwT"], "gBTwT", "parcelRequire5a44")

//# sourceMappingURL=assetShowController.js.map
